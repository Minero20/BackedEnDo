/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/bin/www.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/app.js":
/*!********************!*\
  !*** ./app/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(__dirname) {var createError = __webpack_require__(/*! http-errors */ \"http-errors\");\r\nvar express = __webpack_require__(/*! express */ \"express\");\r\nvar path = __webpack_require__(/*! path */ \"path\");\r\nvar cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\r\nconst cors = __webpack_require__(/*! cors */ \"cors\");\r\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\r\nvar morgan = __webpack_require__(/*! morgan */ \"morgan\");\r\nvar fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst rfs = __webpack_require__(/*! rotating-file-stream */ \"rotating-file-stream\");\r\nconst basicAuth = __webpack_require__(/*! express-basic-auth */ \"express-basic-auth\");\r\n\r\nvar indexRouter = __webpack_require__(/*! ./routes/index */ \"./app/routes/index.js\");\r\nvar authRouter = __webpack_require__(/*! ./routes/auth */ \"./app/routes/auth.js\");\r\nvar usersRouter = __webpack_require__(/*! ./routes/users */ \"./app/routes/users.js\");\r\nvar uploadRouter = __webpack_require__(/*! ./routes/upload */ \"./app/routes/upload.js\");\r\nvar dataDetailRouter = __webpack_require__(/*! ./routes/data */ \"./app/routes/data.js\");\r\nvar companyRouter = __webpack_require__(/*! ./routes/company */ \"./app/routes/company.js\");\r\nvar productRouter = __webpack_require__(/*! ./routes/product */ \"./app/routes/product.js\");\r\nvar materialRouter = __webpack_require__(/*! ./routes/material */ \"./app/routes/material.js\");\r\nvar productPlaningRouter = __webpack_require__(/*! ./routes/productPlaning */ \"./app/routes/productPlaning.js\");\r\nvar materialPlaningRouter = __webpack_require__(/*! ./routes/materialPlaning */ \"./app/routes/materialPlaning.js\");\r\nvar logAccessRouter = __webpack_require__(/*! ./routes/readLogAccess */ \"./app/routes/readLogAccess.js\");\r\nvar supplierRouter = __webpack_require__(/*! ./routes/supplier */ \"./app/routes/supplier.js\");\r\nvar projectRouter = __webpack_require__(/*! ./routes/project */ \"./app/routes/project.js\");\r\nvar productionLineRouter = __webpack_require__(/*! ./routes/productionLine */ \"./app/routes/productionLine.js\");\r\nvar trackingTagRouter = __webpack_require__(/*! ./routes/trackingTag */ \"./app/routes/trackingTag.js\");\r\nvar historyRouter = __webpack_require__(/*! ./routes/history */ \"./app/routes/history.js\");\r\nvar orderSummaryRouter = __webpack_require__(/*! ./routes/orderSummary */ \"./app/routes/orderSummary.js\");\r\nvar permissionRouter = __webpack_require__(/*! ./routes/permission */ \"./app/routes/permission.js\");\r\nvar factoryParameterRouter = __webpack_require__(/*! ./routes/factoryParameter */ \"./app/routes/factoryParameter.js\");\r\nvar factoryWorkHoursRouter = __webpack_require__(/*! ./routes/factoryWorkHours */ \"./app/routes/factoryWorkHours.js\");\r\nvar end_userRouter = __webpack_require__(/*! ./routes/end_user */ \"./app/routes/end_user.js\");\r\nvar logisticRouter = __webpack_require__(/*! ./routes/logistic */ \"./app/routes/logistic.js\");\r\nvar customerRouter = __webpack_require__(/*! ./routes/customer */ \"./app/routes/customer.js\");\r\nvar loopRouter = __webpack_require__(/*! ./routes/loop */ \"./app/routes/loop.js\");\r\nvar warehouse_typeRouter = __webpack_require__(/*! ./routes/warehouse_type */ \"./app/routes/warehouse_type.js\");\r\nvar load_statusRouter = __webpack_require__(/*! ./routes/load_Status */ \"./app/routes/load_Status.js\");\r\nvar sparePartRouter = __webpack_require__(/*! ./routes/sparePart */ \"./app/routes/sparePart.js\");\r\nvar warehouseRouter = __webpack_require__(/*! ./routes/warehouse */ \"./app/routes/warehouse.js\");\r\nvar dashboardRouter = __webpack_require__(/*! ./routes/dashboard */ \"./app/routes/dashboard.js\");\r\nvar academyRouter = __webpack_require__(/*! ./routes/academy */ \"./app/routes/academy.js\");\r\nvar handheldRouter = __webpack_require__(/*! ./routes/handheld */ \"./app/routes/handheld.js\");\r\nvar promotionRouter = __webpack_require__(/*! ./routes/promotion */ \"./app/routes/promotion.js\");\r\nvar billRouter = __webpack_require__(/*! ./routes/bill */ \"./app/routes/bill.js\");\r\nvar materialStcRouter = __webpack_require__(/*! ./routes/materialSTC */ \"./app/routes/materialSTC.js\");\r\nvar expressRouter = __webpack_require__(/*! ./routes/express */ \"./app/routes/express.js\");\r\nvar driverRouter = __webpack_require__(/*! ./routes/driver */ \"./app/routes/driver.js\");\r\nvar externalDataRouter = __webpack_require__(/*! ./routes/externalData */ \"./app/routes/externalData.js\");\r\nvar report_pdfRouter = __webpack_require__(/*! ./routes/report_pdf */ \"./app/routes/report_pdf.js\");\r\nvar delivery_time_recordRouter = __webpack_require__(/*! ./routes/delivery_time_record */ \"./app/routes/delivery_time_record.js\");\r\nvar fuelConsumtionRouter = __webpack_require__(/*! ./routes/fuelConsumtion */ \"./app/routes/fuelConsumtion.js\");\r\nvar MatSTP_InOutRouter = __webpack_require__(/*! ./routes/MatInOutSTP */ \"./app/routes/MatInOutSTP.js\");\r\nvar DefluxWipInOutRouter = __webpack_require__(/*! ./routes/DefluxWipInOut */ \"./app/routes/DefluxWipInOut.js\");\r\nvar FG_STP_InOutRouter = __webpack_require__(/*! ./routes/FG_STP_InOut */ \"./app/routes/FG_STP_InOut.js\");\r\nvar wire_Ready_toUseRouter = __webpack_require__(/*! ./routes/wire_Ready_toUse.js */ \"./app/routes/wire_Ready_toUse.js\");\r\n\r\nvar externalDataCTSRouter = __webpack_require__(/*! ./routes/externalDataCTS.js */ \"./app/routes/externalDataCTS.js\");\r\nvar matInOutCTSRouter = __webpack_require__(/*! ./routes/matInOutCTS */ \"./app/routes/matInOutCTS.js\");\r\nvar reportRouter = __webpack_require__(/*! ./routes/report */ \"./app/routes/report.js\");\r\nvar snManagementRouter = __webpack_require__(/*! ./routes/snManagement */ \"./app/routes/snManagement.js\");\r\n\r\nvar warehouseCTSRouter = __webpack_require__(/*! ./routes/warehouseCTS */ \"./app/routes/warehouseCTS.js\");\r\n\r\nvar productionOrderCtsRouter = __webpack_require__(/*! ./routes/production_order_cts */ \"./app/routes/production_order_cts.js\");\r\n\r\nvar planningCTSRouter = __webpack_require__(/*! ./routes/planningCTS */ \"./app/routes/planningCTS.js\");\r\nvar factoryChoupRouter = __webpack_require__(/*! ./routes/factoryChoup */ \"./app/routes/factoryChoup.js\");\r\nvar WipProdInOutCTSRouter = __webpack_require__(/*! ./routes/wipProdInOutCTS */ \"./app/routes/wipProdInOutCTS.js\");\r\nvar wipshupOutInCTSRouter = __webpack_require__(/*! ./routes/wipshupOutInCTS */ \"./app/routes/wipshupOutInCTS.js\");\r\nvar handheldCTSRouter = __webpack_require__(/*! ./routes/handheldCTS */ \"./app/routes/handheldCTS.js\");\r\nvar packInOutCTSRouter = __webpack_require__(/*! ./routes/packInOutCTS */ \"./app/routes/packInOutCTS.js\");\r\nvar FGInOutCTS = __webpack_require__(/*! ./routes/FGInOutCTS */ \"./app/routes/FGInOutCTS.js\");\r\nvar materailConCTSRouter = __webpack_require__(/*! ./routes/materailConCts */ \"./app/routes/materailConCts.js\");\r\nvar winSpeedRouter = __webpack_require__(/*! ./routes/winSpeed */ \"./app/routes/winSpeed.js\");\r\n\r\nvar toolingRouter = __webpack_require__(/*! ./routes/toolingRouter */ \"./app/routes/toolingRouter.js\");\r\n\r\nconst _config = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\n\r\nvar app = express();\r\nconst swaggerUi = __webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\");\r\nconst swaggerDocument = __webpack_require__(/*! ./swagger.json */ \"./app/swagger.json\");\r\nswaggerDocument.host = _config.host + \":\" + _config.port;\r\napp.use(\r\n  \"/api-docs\",\r\n  basicAuth({\r\n    users: { TTT: _config.passwordSwagger },\r\n    challenge: true,\r\n  }),\r\n  swaggerUi.serve,\r\n  swaggerUi.setup(swaggerDocument)\r\n);\r\n\r\n// enable files upload\r\nvar fileUpload = __webpack_require__(/*! express-fileupload */ \"express-fileupload\");\r\napp.use(\r\n  fileUpload({\r\n    createParentPath: true,\r\n  })\r\n);\r\n\r\n//setup log file\r\nconst pad = (num) => (num > 9 ? \"\" : \"0\") + num;\r\nconst formatDate = (time) => {\r\n  var year = time.getFullYear();\r\n  var month = pad(time.getMonth() + 1);\r\n  var day = pad(time.getDate());\r\n  var hour = pad(time.getHours());\r\n  var minute = pad(time.getMinutes());\r\n\r\n  return [year, month, day].join(\"-\");\r\n};\r\n\r\nfunction log_file_name(time, index) {\r\n  if (!time) return \"access.log\";\r\n\r\n  return [formatDate(time), index, \"access.log\"].join(\"-\");\r\n}\r\nif (app.get(\"env\") == \"production\") {\r\n  let accessLogStream = rfs.createStream(log_file_name, {\r\n    size: \"2M\",\r\n    interval: \"1d\",\r\n    path: _config.logAccessPath,\r\n  });\r\n  app.use(morgan({ stream: accessLogStream }));\r\n} else {\r\n  app.use(morgan(\"dev\")); //log to console on development\r\n}\r\n\r\n// view engine setup\r\napp.set(\"views\", path.join(__dirname, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n// app.use(express.limit('20M'));\r\n// app.use(logger('dev'));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\napp.use(express.static(path.join(__dirname, \"public\")));\r\napp.use(cors());\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\n\r\n// app.use(express.static('/uploads'));\r\napp.use(\"/\", indexRouter);\r\napp.use(\"/auth\", authRouter.router);\r\napp.use(\"/users\", usersRouter);\r\napp.use(\"/upload\", uploadRouter);\r\napp.use(\"/data\", dataDetailRouter);\r\napp.use(\"/company\", companyRouter);\r\napp.use(\"/product\", productRouter);\r\napp.use(\"/material\", materialRouter);\r\napp.use(\"/productPlaning\", productPlaningRouter);\r\napp.use(\"/materialPlaning\", materialPlaningRouter);\r\napp.use(\"/supplier\", supplierRouter);\r\napp.use(\"/project\", projectRouter);\r\napp.use(\"/productionLine\", productionLineRouter);\r\napp.use(\"/trackingTag\", trackingTagRouter);\r\napp.use(\"/history\", historyRouter);\r\napp.use(\"/orderSummary\", orderSummaryRouter);\r\napp.use(\"/permission\", permissionRouter);\r\napp.use(\"/factoryParameter\", factoryParameterRouter);\r\napp.use(\"/factoryWorkHours\", factoryWorkHoursRouter);\r\napp.use(\"/end_user\", end_userRouter);\r\napp.use(\"/logistic\", logisticRouter);\r\napp.use(\"/customer\", customerRouter);\r\napp.use(\"/loop\", loopRouter);\r\napp.use(\"/warehouse_type\", warehouse_typeRouter);\r\napp.use(\"/load_status\", load_statusRouter);\r\napp.use(\"/sparePart\", sparePartRouter);\r\napp.use(\"/warehouse\", warehouseRouter);\r\napp.use(\"/dashboard\", dashboardRouter);\r\napp.use(\"/handheld\", handheldRouter);\r\napp.use(\"/promotion\", promotionRouter);\r\napp.use(\"/bill\", billRouter);\r\napp.use(\"/materialSTC\", materialStcRouter);\r\napp.use(\"/express\", expressRouter);\r\napp.use(\"/externalData\", externalDataRouter);\r\napp.use(\"/driver\", driverRouter);\r\napp.use(\"/report_pdf\", report_pdfRouter);\r\napp.use(\"/delivery_time_record\", delivery_time_recordRouter);\r\napp.use(\"/fuelConsumtion\", fuelConsumtionRouter);\r\n\r\napp.use(\"/tooling\", toolingRouter);\r\n\r\napp.use(\"/MatSTP_InOut\", MatSTP_InOutRouter);\r\napp.use(\"/DefluxWipInOut\", DefluxWipInOutRouter);\r\napp.use(\"/FG_STP_InOut\", FG_STP_InOutRouter);\r\n\r\napp.use(\"/wire_Ready_toUse\", wire_Ready_toUseRouter);\r\n\r\napp.use(\"/api/externalData\", externalDataCTSRouter);\r\napp.use(\"/api/rawMatInOut\", matInOutCTSRouter);\r\napp.use(\"/api/report\", reportRouter);\r\napp.use(\"/api/snManagement\", snManagementRouter);\r\napp.use(\"/api/warehouseCTS\", warehouseCTSRouter);\r\napp.use(\"/api/productionOrderCTS\", productionOrderCtsRouter);\r\napp.use(\"/api/planning\", planningCTSRouter);\r\napp.use(\"/api/factory_choup\", factoryChoupRouter);\r\napp.use(\"/api/wipProdInOut\", WipProdInOutCTSRouter);\r\napp.use(\"/api/wipshupOutInCTS\", wipshupOutInCTSRouter);\r\napp.use(\"/api/handheldCTS\", handheldCTSRouter);\r\napp.use(\"/api/packInOutCTS\", packInOutCTSRouter);\r\napp.use(\"/api/FGInOutCTS\", FGInOutCTS);\r\napp.use(\"/api/materailConCTSRouter\", materailConCTSRouter);\r\napp.use(\"/api/winSpeed\", winSpeedRouter);\r\napp.use(\r\n  \"/academy\",\r\n  basicAuth({\r\n    users: { \"TTT-Academy\": _config.passwordAcademy },\r\n    challenge: true,\r\n  }),\r\n  academyRouter\r\n);\r\n\r\napp.use(\r\n  \"/logAccess\",\r\n  basicAuth({\r\n    users: { TTT: _config.passwordSwagger },\r\n    challenge: true,\r\n  }),\r\n  logAccessRouter\r\n);\r\n// app.use('/static',  express.static('uploads'))\r\n// catch 404 and forward to error handler\r\napp.use(function (req, res, next) {\r\n  next(createError(404));\r\n});\r\n\r\n// error handler\r\napp.use(function (err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render(\"error\");\r\n});\r\n\r\napp.disable(\"x-powered-by\");\r\n\r\nmodule.exports = app;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, \"app\"))\n\n//# sourceURL=webpack:///./app/app.js?");

/***/ }),

/***/ "./app/appSetting.js":
/*!***************************!*\
  !*** ./app/appSetting.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const config = __webpack_require__(/*! ./appSettingSite.js */ \"./app/appSettingSite.js\");\r\nvar _config ={\r\n    development:{\r\n    \r\n    \"dbConnect\":{\r\n        \"user\":config.DB_USERNAME_DEV,\r\n        \"host\": config.DB_SERVER_DEV,\r\n        \"database\": config.DB_NAME_DEV,\r\n        \"password\": config.DB_PASSWORD_DEV,\r\n        \"port\":config.DB_PORT_DEV,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 50000,\r\n    },\r\n    \"dbLogConnect\":{\r\n        \"user\":config.LOG_DB_USERNAME_DEV,\r\n        \"host\": config.LOG_DB_SERVER_DEV,\r\n        \"database\": config.LOG_DB_NAME_DEV,\r\n        \"password\": config.LOG_DB_PASSWORD_DEV,\r\n        \"port\":config.LOG_DB_PORT_DEV,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 50000\r\n    }\r\n} ,\r\nproduction:{\r\n    \r\n    \"dbConnect\":{\r\n        \"user\":config.DB_USERNAME_PROD,\r\n        \"host\": config.DB_SERVER_PROD,\r\n        \"database\": config.DB_NAME_PROD,\r\n        \"password\": config.DB_PASSWORD_PROD,\r\n        \"port\":config.DB_PORT_PROD,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000,\r\n    },\r\n    \"dbLogConnect\":{\r\n        \"user\":config.LOG_DB_USERNAME_PROD,\r\n        \"host\": config.LOG_DB_SERVER_PROD,\r\n        \"database\": config.LOG_DB_NAME_PROD,\r\n        \"password\": config.LOG_DB_PASSWORD_PROD,\r\n        \"port\":config.LOG_DB_PORT_PROD,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 50000\r\n    }\r\n} ,\r\n\r\ntest:{\r\n    \r\n    \"dbConnect\":{\r\n        \"user\":config.DB_USERNAME_TEST,\r\n        \"host\": config.DB_SERVER_TEST,\r\n        \"database\": config.DB_NAME_TEST,\r\n        \"password\": config.DB_PASSWORD_TEST,\r\n        \"port\":config.DB_PORT_TEST,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000,\r\n    },\r\n    \"dbLogConnect\":{\r\n        \"user\":config.LOG_DB_USERNAME_TEST,\r\n        \"host\": config.LOG_DB_SERVER_TEST,\r\n        \"database\": config.LOG_DB_NAME_TEST,\r\n        \"password\": config.LOG_DB_PASSWORD_TEST,\r\n        \"port\":config.LOG_DB_PORT_TEST,\r\n        \"max\": 10,\r\n        \"idleTimeoutMillis\": 30000,\r\n        \"connectionTimeoutMillis\": 5000\r\n    }\r\n} ,\r\n\r\n \r\n\r\n}\r\n\r\nmodule.exports ={\r\n    \"dbConnect\":_config[config.START_PROJECT],\r\n    \"FTPConnect\": {\r\n        \"host\": config.FTP_CONNECT_HOST ,\r\n        \"user\": config.FTP_CONNECT_USER ,\r\n        \"password\": config.FTP_CONNECT_PASSWORD ,\r\n        \"remotePath\": config.FTP_CONNECT_REMOTE_PATH,\r\n        \"localPath\": config.FTP_CONNECT_LOCAL_PATH\r\n   },\r\n   \"host\":config.HOST,\r\n   \"port\":config.PORT,\r\n   \"jwtSecret\":config.JWTSECRET,\r\n   \"customHeaderKey\":config.CUSTOMHERDERKEY,\r\n   \"userSwagger\":config.USERSWAGGER,\r\n   \"passwordSwagger\":config.PASSWORDSWAGGER,\r\n   \"fixData\":{\r\n       \"material_unit\":{\r\n           \"Piece\":config.FIXDATA_MATERIAL_UNIT_PIECE,\r\n           \"Weight\":config.FIXDATA_MATERIAL_UNIT_WEIGHT\r\n       }\r\n   },\r\n   \"logAccessPath\":config.LOGACCESSPATH\r\n   ,\r\n   \"passwordAcademy\":config.PASSWORDACADEMY\r\n\r\n\r\n    }\n\n//# sourceURL=webpack:///./app/appSetting.js?");

/***/ }),

/***/ "./app/appSettingSite.js":
/*!*******************************!*\
  !*** ./app/appSettingSite.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! dotenv */ \"dotenv\").config({ path:process.cwd()+ '/.env' })\r\n\r\nmodule.exports ={\r\n \r\nSTART_PROJECT:process.env.START_PROJECT,\r\n\r\n\r\nDB_SERVER_DEV:process.env.DB_SERVER_DEV,\r\nDB_USERNAME_DEV:process.env.DB_USERNAME_DEV,\r\nDB_PASSWORD_DEV:process.env.DB_PASSWORD_DEV,\r\nDB_NAME_DEV:process.env.DB_NAME_DEV,\r\nDB_PORT_DEV:process.env.DB_PORT_DEV,\r\nLOG_DB_SERVER_DEV:process.env.LOG_DB_SERVER_DEV,\r\nLOG_DB_USERNAME_DEV:process.env.LOG_DB_USERNAME_DEV,\r\nLOG_DB_PASSWORD_DEV:process.env.LOG_DB_PASSWORD_DEV,\r\nLOG_DB_NAME_DEV:process.env.LOG_DB_NAME_DEV,\r\nLOG_DB_PORT_DEV:process.env.LOG_DB_PORT_DEV,\r\n\r\n\r\nDB_SERVER_PROD:process.env.DB_SERVER_PROD,\r\nDB_USERNAME_PROD:process.env.DB_USERNAME_PROD,\r\nDB_PASSWORD_PROD:process.env.DB_PASSWORD_PROD,\r\nDB_NAME_PROD:process.env.DB_NAME_PROD,\r\nDB_PORT_PROD:process.env.DB_PORT_PROD,\r\nLOG_DB_SERVER_PROD:process.env.LOG_DB_SERVER_PROD,\r\nLOG_DB_USERNAME_PROD:process.env.LOG_DB_USERNAME_PROD,\r\nLOG_DB_PASSWORD_PROD:process.env.LOG_DB_PASSWORD_PROD,\r\nLOG_DB_NAME_PROD:process.env.LOG_DB_NAME_PROD,\r\nLOG_DB_PORT_PROD:process.env.LOG_DB_PORT_PROD,\r\n\r\n\r\nDB_SERVER_TEST:process.env.DB_SERVER_TEST,\r\nDB_USERNAME_TEST:process.env.DB_USERNAME_TEST,\r\nDB_PASSWORD_TEST:process.env.DB_PASSWORD_TEST,\r\nDB_NAME_TEST:process.env.DB_NAME_TEST,\r\nDB_PORT_TEST:process.env.DB_PORT_TEST,\r\nLOG_DB_SERVER_TEST:process.env.LOG_DB_SERVER_TEST,\r\nLOG_DB_USERNAME_TEST:process.env.LOG_DB_USERNAME_TEST,\r\nLOG_DB_PASSWORD_TEST:process.env.LOG_DB_PASSWORD_TEST,\r\nLOG_DB_NAME_TEST:process.env.LOG_DB_NAME_TEST,\r\nLOG_DB_PORT_TEST:process.env.LOG_DB_PORT_TEST,\r\n\r\nFTP_CONNECT_HOST:process.env.FTP_CONNECT_HOST,\r\nFTP_CONNECT_USER:process.env.FTP_CONNECT_USER,\r\nFTP_CONNECT_PASSWORD:process.env.FTP_CONNECT_PASSWORD,\r\nFTP_CONNECT_REMOTE_PATH:process.env.FTP_CONNECT_REMOTE_PATH,\r\nFTP_CONNECT_LOCAL_PATH:process.env.FTP_CONNECT_LOCAL_PATH,\r\n\r\nHOST:process.env.HOST,\r\nPORT:process.env.PORT,\r\nJWTSECRET:process.env.JWTSECRET,\r\nCUSTOMHERDERKEY:process.env.CUSTOMHERDERKEY,\r\nUSERSWAGGER:process.env.USERSWAGGER,\r\nPASSWORDSWAGGER:process.env.PASSWORDSWAGGER,\r\nFIXDATA_MATERIAL_UNIT_PIECE:process.env.FIXDATA_MATERIAL_UNIT_PIECE,\r\nFIXDATA_MATERIAL_UNIT_WEIGHT:process.env.FIXDATA_MATERIAL_UNIT_WEIGHT,\r\nLOGACCESSPATH:process.env.LOGACCESSPATH,\r\nPASSWORDACADEMY:process.env.PASSWORDACADEMY,\r\n}\n\n//# sourceURL=webpack:///./app/appSettingSite.js?");

/***/ }),

/***/ "./app/bin/www.js":
/*!************************!*\
  !*** ./app/bin/www.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// #!/usr/bin/env node\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar app = __webpack_require__(/*! ../app */ \"./app/app.js\");\r\nvar debug = __webpack_require__(/*! debug */ \"debug\")('webapi:server');\r\nvar http = __webpack_require__(/*! http */ \"http\");\r\nvar _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\n/**\r\n * Get port from environment and store in Express.\r\n */\r\n\r\nvar port = normalizePort(process.env.PORT || _config.port);\r\napp.set('port', port);\r\n\r\n/**\r\n * Create HTTP server.\r\n */\r\n\r\nvar server = http.createServer(app);\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\n\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Normalize a port into a number, string, or false.\r\n */\r\n\r\nfunction normalizePort(val) {\r\n  var port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (port >= 0) {\r\n    // port number\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  var bind = typeof port === 'string'\r\n    ? 'Pipe ' + port\r\n    : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\n\r\nfunction onListening() {\r\n  var addr = server.address();\r\n  var bind = typeof addr === 'string'\r\n    ? 'pipe ' + addr\r\n    : 'port ' + addr.port;\r\n  debug('Listening on ' + bind);\r\n}\r\n\n\n//# sourceURL=webpack:///./app/bin/www.js?");

/***/ }),

/***/ "./app/cryptoSetting.js":
/*!******************************!*\
  !*** ./app/cryptoSetting.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret;\r\n\r\nconst iv = CryptoJS.enc.Hex.parse(\"101112131415161718191a1b1c1d1e1f\");\r\n\r\nconst encrypt = (wording) => {\r\n    return CryptoJS.AES.encrypt(wording, SECRET,{iv:iv}).toString()\r\n}\r\nconst decrypt=(wording)=>{\r\n    return  CryptoJS.AES.decrypt(wording, SECRET,{iv:iv}).toString(CryptoJS.enc.Utf8);\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n    encrypt: encrypt,\r\n    decrypt: decrypt\r\n}\n\n//# sourceURL=webpack:///./app/cryptoSetting.js?");

/***/ }),

/***/ "./app/dbconnect.js":
/*!**************************!*\
  !*** ./app/dbconnect.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\r\n  Client,\r\n  Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nvar dbConnect = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\n// const connectionString = 'postgresql://postgres:mysecretpassword@localhost:5432/testx';\r\n// const pool = new Pool({\r\n//     connectionString: connectionString,\r\n//   })\r\nlet config = dbConnect.dbConnect.dbConnect;\r\nconst pool = new Pool(config);\r\ntry {\r\n  pool.connect((err, db) => {\r\n    if (err) {\r\n      console.log(\"error connect pool\", err)\r\n    } else {\r\n      db.query('SELECT NOW()', (err, result) => {\r\n        if (err) console.log(\"error connect test Select\", err);\r\n        console.log('connect database-->', result.rows)\r\n\r\n      })\r\n    }\r\n\r\n  });\r\n} catch (e) {\r\n  console.log(\"error connect pool\", e)\r\n} finally {\r\n  pool.end();\r\n}\r\n\r\n// var client = new Client({\r\n//     connectionString: connectionString,\r\n//   })\r\n// client.connect()\r\n// client.query('SELECT NOW()', (err, res) => {\r\n//   console.log(err, res)\r\n//   client.end()\r\n// })\r\n\r\nmodule.exports = {\r\n  connectionPool: pool,\r\n  config: config\r\n};\n\n//# sourceURL=webpack:///./app/dbconnect.js?");

/***/ }),

/***/ "./app/jwtSetting.js":
/*!***************************!*\
  !*** ./app/jwtSetting.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar appSetting = __webpack_require__(/*! ./appSetting.js */ \"./app/appSetting.js\");\r\nvar userService = __webpack_require__(/*! ./service/userService */ \"./app/service/userService.js\")\r\nvar _userService = new userService();\r\n//ใช้ในการ decode jwt ออกมา\r\nconst ExtractJwt = __webpack_require__(/*! passport-jwt */ \"passport-jwt\").ExtractJwt;\r\n//ใช้ในการประกาศ Strategy\r\nconst JwtStrategy = __webpack_require__(/*! passport-jwt */ \"passport-jwt\").Strategy;\r\nconst SECRET = appSetting.jwtSecret; \r\nconst jwtOptions = {\r\n   jwtFromRequest: ExtractJwt.fromHeader(\"authorization\"),\r\n   secretOrKey: SECRET,//SECRETเดียวกับตอนencodeในกรณีนี้คือ MY_SECRET_KEY\r\n}\r\nconst jwtAuth = new JwtStrategy(jwtOptions, (payload, done) => {\r\n   if(payload.sys==\"c\"){\r\n        _userService.checkAuth(payload.sub).then((res)=>(res.rows.length>0)?done(null, true):done(null, false)).catch(e=>done(null, false))\r\n   }else{\r\n      _userService.checkAdminAuth(payload.fup).then((res)=>(res.rows.length>0)?done(null, true):done(null, false)).catch(e=>done(null, false))\r\n   }\r\n  // if(payload.sub=== \"admin\") done(null, true);\r\n   // else done(null, false);\r\n});\r\n\r\nmodule.exports = {\r\n    SECRET : SECRET,\r\n    jwtAuth:jwtAuth\r\n};\n\n//# sourceURL=webpack:///./app/jwtSetting.js?");

/***/ }),

/***/ "./app/query/queryBill.json":
/*!**********************************!*\
  !*** ./app/query/queryBill.json ***!
  \**********************************/
/*! exports provided: filter, check_bill_no, check_bill_no_edit, add, findBillById, update, delBill, findByBil_weigh_compressive, checkByBil, CheckBillRated, filternoonsi, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time,product_and_category , latitude, longitude, compressive_strength, weight_meter ,weight_meter_updated ,is_receive,person_sent,is_remark FROM bill where is_use = true AND  ($1::text is null or bill_no ILIKE '%' || $1 || '%') AND ($2::uuid is null or bill_oem_id = $2) AND (($3::timestamp is null and $4::timestamp is null) or delivery_bill Between $3 and $4) and ($5::boolean is null or is_pack = $5) and ($6::boolean is null or is_receive = $6) ORDER BY delivery_bill\\\",\\\"check_bill_no\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time,product_and_category FROM bill where is_use = true AND   bill_no = $1 AND oem_id = $2;\\\",\\\"check_bill_no_edit\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time,product_and_category FROM bill where is_use = true AND   bill_no = $1 AND oem_id = $2 and id != $3;\\\",\\\"add\\\":\\\"INSERT INTO bill(id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery,create_time,product_and_category,latitude, longitude, compressive_strength, weight_meter, is_receive, person_sent) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24,$25,$26,$27,$28,$29);\\\",\\\"findBillById\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time,product_and_category, latitude, longitude, compressive_strength, weight_meter, is_receive, person_sent, time_receive  FROM bill where id = $1\\\",\\\"update\\\":\\\"UPDATE bill SET  bill_no=$2, customer_name=$3, bill_destination=$4, bill_values=$5, weight=$6, is_pack=$7, remark=$8, create_bill=$9, delivery_bill=$10, delivery_time=$11, update_date=$12, update_by=$13, bill_oem_id=$14, create_time=$15,product_and_category = $16 ,latitude = $17, longitude=$18, compressive_strength = $19, weight_meter = $20, weight_meter_updated = $21, is_receive = $22, person_sent = $23 WHERE id = $1;\\\",\\\"delBill\\\":\\\"UPDATE bill SET is_use = false , update_by = $2,update_date = $3 WHERE id = $1 \\\",\\\"findByBil_weigh_compressive\\\":\\\"SELECT id, bill_no, compressive_strength, weight_meter, weight_meter_updated FROM bill where bill_no = $1;\\\",\\\"checkByBil\\\":\\\"SELECT bill_no FROM bill where bill_no = $1;\\\",\\\"CheckBillRated\\\":\\\"SELECT id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active FROM star_bill WHERE bill_id = $1;\\\",\\\"filternoonsi\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time,product_and_category , latitude, longitude, compressive_strength, weight_meter ,weight_meter_updated ,is_receive,person_sent,is_remark FROM bill where is_use = true AND  ($1::text is null or bill_no ILIKE '%' || $1 || '%') AND ($2::uuid is null or bill_oem_id = $2) AND (($3::timestamp is null and $4::timestamp is null) or delivery_bill Between $3 and $4) and ($5::boolean is null or is_pack = $5) and ($6::boolean is null or is_receive = $6) and is_receive = false ORDER BY delivery_bill\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryBill.json?");

/***/ }),

/***/ "./app/query/queryCompany.json":
/*!*************************************!*\
  !*** ./app/query/queryCompany.json ***!
  \*************************************/
/*! exports provided: getAll, getAllOEM, addNewCompany, addDocCompany, addOEMByCompany, updateCompany, updateOEMByCompany, updateDocCompany, delCompany, delOEMByCompany, delDocCompany, checkNameCompany, getOEMbyCompanyId, getMasterCompany, findCompanyById, findOEMByCompany, findDocByCompany, setupCompany, addUser, addUserDoc, delUser, updateUser, delUserDoc, findUserById, findDocByUser, getAllUser, filterUser, checkUsername, checkEmail, checkUsernameEmail, getCapacityFactory, getviewOemByUserId, getUserDetailByUser, getOemByCompany, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getAll\\\":\\\"select * from \\\\\\\"company\\\\\\\" where is_use=true\\\",\\\"getAllOEM\\\":\\\"select * from \\\\\\\"oem\\\\\\\" where \\\\\\\"company_id\\\\\\\" = any($1::uuid[]) and is_use=true\\\",\\\"addNewCompany\\\":\\\"insert into \\\\\\\"company\\\\\\\" (id, admin_id, name, detail, apply_date, start_date, expire_date, is_factory_active, logo,logo_path,logo_name, abbr, config, create_date, is_use) values ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15)\\\",\\\"addDocCompany\\\":\\\"INSERT INTO \\\\\\\"company_document\\\\\\\"(id, company_id, document,document_path,document_name, create_date, is_use)VALUES ($1, $2, $3, $4, $5,$6,$7)\\\",\\\"addOEMByCompany\\\":\\\"INSERT INTO \\\\\\\"oem\\\\\\\"(id, company_id, admin_id, name, logo,logo_path,logo_name, create_date, is_use,is_active)VALUES ($1, $2, $3, $4, $5, $6, $7,$8,$9,$10)\\\",\\\"updateCompany\\\":\\\"UPDATE \\\\\\\"company\\\\\\\" SET admin_id=$1, name=$2, detail=$3, apply_date=$4, start_date=$5, expire_date=$6, is_factory_active=$7, logo=$8,logo_path=$9,logo_name=$10 , abbr=$11  WHERE id=$12;\\\",\\\"updateOEMByCompany\\\":\\\"UPDATE \\\\\\\"oem\\\\\\\" SET admin_id=$1, name=$2, logo=$3,logo_path=$4,logo_name=$5, is_use=$6, is_active=$7 WHERE id =$8\\\",\\\"updateDocCompany\\\":\\\"UPDATE \\\\\\\"company_document\\\\\\\" SET is_use=$1 where id=$2\\\",\\\"delCompany\\\":\\\"UPDATE \\\\\\\"company\\\\\\\" SET is_use=false where id=$1\\\",\\\"delOEMByCompany\\\":\\\"UPDATE \\\\\\\"oem\\\\\\\" set is_use=false where id=$1\\\",\\\"delDocCompany\\\":\\\"UPDATE \\\\\\\"company_document\\\\\\\" set is_use=false where id=$1\\\",\\\"checkNameCompany\\\":\\\"select name from \\\\\\\"company\\\\\\\" where name ILIKE $1\\\",\\\"getOEMbyCompanyId\\\":\\\"SELECT id ,name,logo,logo_name,logo_path FROM oem where is_use=true and company_id = $1\\\",\\\"getMasterCompany\\\":\\\"select id,name company_name from \\\\\\\"company\\\\\\\" where is_use=true\\\",\\\"findCompanyById\\\":\\\"select id, admin_id, name company_name, detail company_detail, apply_date, start_date, expire_date, is_factory_active, logo, fg_min, fg_max, raw_min, raw_max, rank_a, rank_b, rank_c, rank_d, factory_capacity, create_date, is_use, logo_path, logo_name ,abbr ,config,now()::timestamp from \\\\\\\"company\\\\\\\" where id=$1 and is_use=true\\\",\\\"findOEMByCompany\\\":\\\"select * from \\\\\\\"oem\\\\\\\" where company_id=$1 and is_use=true\\\",\\\"findDocByCompany\\\":\\\"select * from \\\\\\\"company_document\\\\\\\" where company_id=$1 and is_use=true\\\",\\\"setupCompany\\\":\\\"UPDATE \\\\\\\"company\\\\\\\" SET fg_min=$1, fg_max=$2, raw_min=$3, raw_max=$4, rank_a=$5, rank_b=$6, rank_c=$7, rank_d=$8, factory_capacity=$9 , config=$11 WHERE id = $10\\\",\\\"addUser\\\":\\\"INSERT INTO \\\\\\\"identity_user\\\\\\\" (id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile,user_profile_name, user_profile_path, create_date, is_use) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)\\\",\\\"addUserDoc\\\":\\\"INSERT INTO \\\\\\\"user_document\\\\\\\"(id, user_id, document,document_name, document_path, create_date, is_use ) VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"delUser\\\":\\\"UPDATE \\\\\\\"identity_user\\\\\\\" SET is_use=false where id=$1\\\",\\\"updateUser\\\":\\\"UPDATE \\\\\\\"identity_user\\\\\\\" SET admin_id=$1, name=$2, sirname=$3, username=$4, email=$5, password=$6, mobile1=$7, mobile2=$8, detail=$9, is_active=$10, user_profile=$11, user_profile_name=$12, user_profile_path=$13 WHERE id=$14\\\",\\\"delUserDoc\\\":\\\"UPDATE \\\\\\\"user_document\\\\\\\" set is_use=false where id=$1\\\",\\\"findUserById\\\":\\\"SELECT use.id, company_id,com.name as company_name, use.name, sirname, username, email, password, mobile1, mobile2, use.detail,is_active, user_profile, use.is_use, user_profile_name, user_profile_path FROM identity_user use LEFT JOIN company com on com.id= use.company_id where use.id=$1\\\",\\\"findDocByUser\\\":\\\"SELECT id, user_id, document, create_date, is_use, document_name, document_path FROM user_document where user_id=$1 and is_use=true\\\",\\\"getAllUser\\\":\\\"SELECT u.id, u.company_id,c.name company_name, u.name, u.sirname, u.username, u.email, u.mobile1, u.mobile2, u.is_active FROM \\\\\\\"identity_user\\\\\\\" u inner join \\\\\\\"company\\\\\\\" c on c.id=u.company_id where u.is_use=true\\\",\\\"filterUser\\\":\\\"SELECT u.id, u.company_id,c.name company_name, u.name, u.sirname, u.username, u.email, u.mobile1, u.mobile2, u.is_active FROM \\\\\\\"identity_user\\\\\\\" u inner join \\\\\\\"company\\\\\\\" c on c.id=u.company_id where u.is_use=true and ($1::text is null or u.name ILIKE '%' || $1 || '%') and ($2::text is null or u.username ILIKE '%' || $2 || '%') and ($3::text is null or u.email ILIKE '%' || $3 || '%') and ($4::uuid is null or u.company_id = $4)\\\",\\\"checkUsername\\\":\\\"select username from \\\\\\\"identity_user\\\\\\\" where username ILIKE $1\\\",\\\"checkEmail\\\":\\\"select email from \\\\\\\"identity_user\\\\\\\" where email ILIKE $1\\\",\\\"checkUsernameEmail\\\":\\\"select 1 from identity_user where 1=1 and ($1::text is null or username ILIKE $1) or ($2::text is null or email ILIKE $2)\\\",\\\"getCapacityFactory\\\":\\\"select factory_capacity from company where id=$1\\\",\\\"getviewOemByUserId\\\":\\\"SELECT id, user_id, oem_id, is_active FROM permission_oem WHERE user_id = $1 AND is_active = true;\\\",\\\"getUserDetailByUser\\\":\\\"SELECT a.id, a.company_id, a.name, a.sirname, a.username,b.name as company_name FROM identity_user a left join company b on a.company_id = b.id WHERE a.id = $1;\\\",\\\"getOemByCompany\\\":\\\"SELECT id, company_id, admin_id, name, logo, create_date, is_use, logo_name, logo_path, is_active FROM oem WHERE company_id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryCompany.json?");

/***/ }),

/***/ "./app/query/queryCustomer.json":
/*!**************************************!*\
  !*** ./app/query/queryCustomer.json ***!
  \**************************************/
/*! exports provided: add, update, del, findById, findRelateByCustomerId, filter, filterOEM, filterSST, CheckSort, checkNameCustomer, addProductCustomer, getRelateProduct, delProductCusomer, checkProductCustomer, checkName, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"customer\\\\\\\" (id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id,update_date,update_by,oem_id,line_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,$16,$17,$18,$19)\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"customer\\\\\\\" SET   name=$2, detail=$3, contact_tel=$4, contact_fax=$5, customer_email=$6, remark=$7 ,contact_name=$8 , full_name=$9 ,update_date=$10,update_by=$11,line_id=$12 WHERE id=$1\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"customer\\\\\\\" SET is_use = false,update_date= $2,update_by=$3 WHERE  id=$1\\\",\\\"findById\\\":\\\"SELECT id, company_id, name, contact_name, is_use, sort, detail, contact_tel, contact_fax, customer_email, relate_product_id, remark, full_name, line_id FROM customer WHERE is_use = true and id = $1\\\",\\\"findRelateByCustomerId\\\":\\\"SELECT product_id, pc.customer_id,p.no,p.name FROM product_customer pc left join product p on pc.product_id = p.id left join customer c on c.id = pc.customer_id where pc.customer_id = $1 AND p.is_use = true;\\\",\\\"filter\\\":\\\"SELECT * FROM \\\\\\\"customer\\\\\\\"  where is_use = true and company_id = $2 and  ($1::text is null or name ILIKE '%' || $1 || '%') order by sort desc\\\",\\\"filterOEM\\\":\\\"SELECT * FROM \\\\\\\"customer\\\\\\\"  where is_use = true and company_id = $2 and  oem_id = $3 and ($1::text is null or name ILIKE '%' || $1 || '%') order by sort desc\\\",\\\"filterSST\\\":\\\"SELECT * FROM \\\\\\\"customer\\\\\\\"  where is_use = true and company_id = $2 and oem_id = $3 and  ($1::text is null or name ILIKE '%' || $1 || '%') order by sort desc\\\",\\\"CheckSort\\\":\\\"SELECT max(sort) FROM \\\\\\\"customer\\\\\\\" \\\",\\\"checkNameCustomer\\\":\\\"select id, name from \\\\\\\"customer\\\\\\\" where name = $1 and is_use=true and company_id=$2\\\",\\\"addProductCustomer\\\":\\\"INSERT INTO product_customer(id, product_id, customer_id) VALUES ($1, $2, $3);\\\",\\\"getRelateProduct\\\":\\\"SELECT pc.product_id, pc.customer_id,p.name,p.no FROM product_customer pc left join product p on pc.product_id = p.id left join customer c on c.id = pc.customer_id where p.is_use = true ;\\\",\\\"delProductCusomer\\\":\\\"DELETE FROM product_customer WHERE customer_id = $1;\\\",\\\"checkProductCustomer\\\":\\\"SELECT id, product_id, customer_id FROM product_customer where customer_id = $1;\\\",\\\"checkName\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id FROM customer where name = $1 and id != $2\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryCustomer.json?");

/***/ }),

/***/ "./app/query/querydashboard.json":
/*!***************************************!*\
  !*** ./app/query/querydashboard.json ***!
  \***************************************/
/*! exports provided: product, fg_in, fg_out, fg_in2, fg_out2, data_in, data_out, short_stock, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"product\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item FROM product where ($1::uuid is null or oem_id = $1) and is_use = 'true';\\\",\\\"fg_in\\\":\\\"SELECT EXTRACT(YEAR FROM create_date) as year , EXTRACT(MONTH FROM create_date) as month ,product_id,sum(amount) as amount FROM log_product_fg_edit_amount  where product_id = $1 and edit_type = 'true' and ($2::integer is null or EXTRACT(YEAR FROM create_date) = $2) and ($3::integer is null or EXTRACT(MONTH FROM create_date) = $3) group by product_id,EXTRACT(MONTH FROM create_date),EXTRACT(YEAR FROM create_date)\\\",\\\"fg_out\\\":\\\"SELECT EXTRACT(YEAR FROM create_date) as year , EXTRACT(MONTH FROM create_date) as month,product_id,sum(amount) as amount FROM log_product_fg_edit_amount  where product_id = $1 and edit_type = 'false' and ($2::integer is null or EXTRACT(YEAR FROM create_date) = $2) and ($3::integer is null or EXTRACT(MONTH FROM create_date) = $3) group by product_id,EXTRACT(MONTH FROM create_date),EXTRACT(YEAR FROM create_date)\\\",\\\"fg_in2\\\":\\\"SELECT product_id, sum(amount) as amount FROM log_product_fg_edit_amount  where product_id = $1 and edit_type = 'true' group by product_id\\\",\\\"fg_out2\\\":\\\"SELECT product_id, sum(amount) as amount FROM log_product_fg_edit_amount  where product_id = $1 and edit_type = 'false' group by product_id\\\",\\\"data_in\\\":\\\"SELECT EXTRACT(YEAR FROM lfg.create_date) as year , EXTRACT(MONTH FROM lfg.create_date) as month,sum(lfg.amount) as amount FROM log_product_fg_edit_amount lfg left join product p on lfg.product_id = p.id where edit_type = 'true' and ($1::uuid is null or p.oem_id = $1) and ($2::integer is null or EXTRACT(YEAR FROM lfg.create_date) = $2) and ($3::integer is null or EXTRACT(MONTH FROM lfg.create_date) <= $3) group by EXTRACT(MONTH FROM lfg.create_date),EXTRACT(YEAR FROM lfg.create_date)\\\",\\\"data_out\\\":\\\"SELECT EXTRACT(YEAR FROM lfg.create_date) as year , EXTRACT(MONTH FROM lfg.create_date) as month,sum(lfg.amount) as amount FROM log_product_fg_edit_amount lfg left join product p on lfg.product_id = p.id where edit_type = 'false' and ($1::uuid is null or p.oem_id = $1) and ($2::integer is null or EXTRACT(YEAR FROM lfg.create_date) = $2) and ($3::integer is null or EXTRACT(MONTH FROM lfg.create_date) <= $3) group by EXTRACT(MONTH FROM lfg.create_date),EXTRACT(YEAR FROM lfg.create_date)\\\",\\\"short_stock\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item, dip_amount FROM product where fg_amount < min_product and is_use = 'true' and ($1::uuid is null or oem_id = $1) ;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querydashboard.json?");

/***/ }),

/***/ "./app/query/queryDataDetail.json":
/*!****************************************!*\
  !*** ./app/query/queryDataDetail.json ***!
  \****************************************/
/*! exports provided: insertData, insertDataDetail, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"insertData\\\":\\\"INSERT INTO data(title,sort) VALUES($1,$2) RETURNING id\\\",\\\"insertDataDetail\\\":\\\"INSERT INTO data_detail(detail,remark,parent_id) VALUES($1,$2,$3)\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryDataDetail.json?");

/***/ }),

/***/ "./app/query/queryDefluxWipInOut.json":
/*!********************************************!*\
  !*** ./app/query/queryDefluxWipInOut.json ***!
  \********************************************/
/*! exports provided: filterWireFinish, getAllLotMatOut, getLotNo_Wip, getsumHistory, getDetailHsitory, getHistoryWIP, getOldAmount, WipAmountInOut, addLogWipAmount, getcusNameById, getendNameById, updateOutMatLot, getTrackLot, getDetailLogLot, addTEst, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterWireFinish\\\":\\\"SELECT id, diameter, company_id, user_id, oem_id, create_date, amount, weight,diameter_no FROM wire_finished WHERE ($1::text is null or diameter_no ILIKE '%' || $1 || '%') AND ($2::text is null or diameter ILIKE '%' || $2 || '%') AND oem_id = $3 AND is_use = true order by amount desc\\\",\\\"getAllLotMatOut\\\":\\\"SELECT a.id, a.material_id, a.mat_lot_no, a.edit_type, a.amount, a.user_id, a.current_amount, a.create_date, a.weight_by_tag, a.actual_weight, a.ref_lot_no, a.is_active FROM log_materialstp_edit_amount a left join material b on a.material_id = b.id WHERE a.edit_type = false AND a.is_active = true AND b.oem_id = $1  ORDER BY a.create_date\\\",\\\"getLotNo_Wip\\\":\\\"SELECT a.id, a.wire_finished_id, a.user_id,a.edit_type, a.amount, a.create_date, a.deflux_lot_no FROM log_wire_finished_edit_amount a left join wire_finished b on a.wire_finished_id = b.id WHERE deflux_lot_no ILIKE '%' || $1 || '%' and b.oem_id = $2 and a.edit_type = true order by create_date desc\\\",\\\"getsumHistory\\\":\\\"SELECT min(a.create_date) as create_date,a.deflux_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_wire_finished_edit_amount b where b.deflux_lot_no = a.deflux_lot_no and b.edit_type = true and b.wire_finished_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_wire_finished_edit_amount b where b.deflux_lot_no = a.deflux_lot_no and b.edit_type = false and b.wire_finished_id = $1) as amount FROM log_wire_finished_edit_amount a WHERE a.deflux_lot_no is not null and a.wire_finished_id = $1 GROUP BY a.deflux_lot_no order by create_date asc\\\",\\\"getDetailHsitory\\\":\\\"SELECT id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type FROM log_wire_finished_edit_amount WHERE edit_type = true and deflux_lot_no = $1\\\",\\\"getHistoryWIP\\\":\\\"SELECT id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type FROM log_wire_finished_edit_amount WHERE wire_finished_id = $1 AND deflux_lot_no is not null order by create_date desc LIMIT 20;\\\",\\\"getOldAmount\\\":\\\"SELECT amount,weight FROM wire_finished WHERE id = $1;\\\",\\\"WipAmountInOut\\\":\\\"UPDATE wire_finished SET amount=case when amount is null then 0+$1 else amount+$1 end ,weight=case when weight is null then 0+$2 else weight+$2 end WHERE id=$3\\\",\\\"addLogWipAmount\\\":\\\"INSERT INTO log_wire_finished_edit_amount(id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type,is_active) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,$16);\\\",\\\"getcusNameById\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id, line_id, customer_id, update_by, update_date, oem_id FROM customer where id = $1;\\\",\\\"getendNameById\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active, oem_id, line_id, end_user_tel, update_by, update_date FROM end_user where id =$1;\\\",\\\"updateOutMatLot\\\":\\\"UPDATE log_materialstp_edit_amount  SET  is_active = false WHERE mat_lot_no = $1;\\\",\\\"getTrackLot\\\":\\\"SELECT id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type FROM log_wire_finished_edit_amount WHERE wire_finished_id = $1 AND edit_type = true;\\\",\\\"getDetailLogLot\\\":\\\"SELECT id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type FROM log_wire_finished_edit_amount WHERE deflux_lot_no = $1 AND edit_type = true;\\\",\\\"addTEst\\\":\\\"INSERT INTO wire_finished(id, diameter, company_id, user_id, oem_id, amount, weight,create_date)VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryDefluxWipInOut.json?");

/***/ }),

/***/ "./app/query/queryDelivery_time_record.json":
/*!**************************************************!*\
  !*** ./app/query/queryDelivery_time_record.json ***!
  \**************************************************/
/*! exports provided: filter, getStarBillByBillId, filterByView, getBillDetailByNo, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT b.id as bill_id,b.bill_no,b.create_bill,b.create_time,b.delivery_time,b.delivery_bill,c.oem_id as oem_logistic_id,c.plate_number,d.name as car_type , a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.oem_id, a.company_id, a.logistic_date FROM driver a left join bill b on a.bill_id = b.id left join logistic_car c on a.logistic_car_id = c.id left join car_type d on c.car_type_id = d.id WHERE ($1::uuid is null or c.oem_id = $1) AND (($2::timestamp is null and $3::timestamp is null) or a.finish_time Between $2 and $3)  AND ($4::text is null or c.plate_number ILIKE '%' || $4 || '%') AND ($5::text is null or b.bill_no ILIKE '%' || $5 || '%') AND a.company_id = $6;\\\",\\\"getStarBillByBillId\\\":\\\"SELECT id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active FROM star_bill WHERE bill_id = $1;\\\",\\\"filterByView\\\":\\\"SELECT bill_no, customer_name, weight, compressive_strength, weight_meter, car_name, oem_bill_name, car_type_name,delivery_sort,create_bill_time, delivery_bill_time, create_bill, delicery_bill_plan, delicery_bill_actual, user_create_bill, approve_person, is_dummy,user_driver_bill, nickname_driver, assistant_driver, oem_bill_id, company_id, company_name FROM delivery_time_record WHERE ($1::uuid is null or oem_bill_id = $1) AND (($2::timestamp is null and $3::timestamp is null) or delicery_bill_actual Between $2 and $3)  AND ($4::text is null or car_name ILIKE '%' || $4 || '%') AND ($5::text is null or bill_no ILIKE '%' || $5 || '%') AND company_id = $6;\\\",\\\"getBillDetailByNo\\\":\\\"SELECT * FROM bill WHERE bill_no = $1 and is_use =true and oem_id = $2\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryDelivery_time_record.json?");

/***/ }),

/***/ "./app/query/queryDriver.json":
/*!************************************!*\
  !*** ./app/query/queryDriver.json ***!
  \************************************/
/*! exports provided: filter, getDriver_person, addDriver_person, getDriverBillById, DelDP, getStarType, saveStar, getStarByBillId, addEnd_user_logistic, getEnd_userByBillId, getBillDetailByBillId, setStartTime, setFinishTime, updateDeliveryBill, AddremarkToCancle, checkSort, filter_bill, chackuse, save_remarkbill, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT a.id, a.logistic_car_id,b.plate_number, a.bill_id,c.bill_no,c.customer_name, a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.logistic_date,a.remark, a.approve_person FROM driver a left join logistic_car b on a.logistic_car_id = b.id left join bill c on a.bill_id = c.id WHERE b.oem_id = $1 AND (a.logistic_date BETWEEN $2 AND $3 OR a.start_time is not null AND a.finish_time is null) ORDER BY a.logistic_date,a.delivery_sort,c.delivery_bill ;\\\",\\\"getDriver_person\\\":\\\"SELECT id, driver_name_th, driver_name_eg, person_code, citizen_id, card_name, driver_tel, exp_driving_licence, is_use, is_active, oem_id, company_id, create_date, create_by, update_date, update_by,nickname,oem_name_text FROM driver_person WHERE company_id = $1 and is_use = true;\\\",\\\"addDriver_person\\\":\\\"INSERT INTO driver_bill(id, driver_id, driver_person_id, remark) VALUES ($1, $2, $3, $4);\\\",\\\"getDriverBillById\\\":\\\"SELECT id, driver_id, driver_person_id, remark FROM driver_bill WHERE driver_id = $1;\\\",\\\"DelDP\\\":\\\"DELETE FROM driver_bill WHERE driver_id = $1\\\",\\\"getStarType\\\":\\\"SELECT id, star_type_name, oem_id, company_id, is_use, is_active, create_by, create_date, update_date, update_by FROM star_type;\\\",\\\"saveStar\\\":\\\"INSERT INTO public.star_bill(id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"getStarByBillId\\\":\\\"SELECT id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active FROM star_bill WHERE bill_id = $1;\\\",\\\"addEnd_user_logistic\\\":\\\"INSERT INTO end_user_logistic(id, bill_no_id, end_user_id, is_use, create_by, update_by, create_date, update_date, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"getEnd_userByBillId\\\":\\\"SELECT id, bill_no_id, end_user_id, is_use, create_by, update_by, create_date, update_date, oem_id, company_id FROM end_user_logistic WHERE bill_no_id = $1;\\\",\\\"getBillDetailByBillId\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time, product_and_category ,latitude, longitude, compressive_strength, weight_meter,weight_meter_updated FROM bill WHERE id = $1;\\\",\\\"setStartTime\\\":\\\"UPDATE driver SET start_time=$2, update_date=$3, update_by=$4, approve_person = $5 WHERE id = $1;\\\",\\\"setFinishTime\\\":\\\"UPDATE driver SET finish_time=$2, update_date=$3, update_by=$4 WHERE id = $1;\\\",\\\"updateDeliveryBill\\\":\\\"UPDATE bill SET is_delivery=$2 WHERE id = $1;\\\",\\\"AddremarkToCancle\\\":\\\"UPDATE driver SET remark=$2,update_date = $3 ,update_by = $4 WHERE id = $1;\\\",\\\"checkSort\\\":\\\"SELECT id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date, remark FROM driver WHERE delivery_sort = $1 AND logistic_date BETWEEN $2 AND $3 AND logistic_car_id = $4;\\\",\\\"filter_bill\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time, product_and_category, latitude, longitude, compressive_strength, weight_meter, weight_meter_updated,  is_receive, person_sent, person_receive, time_receive, remark_receive, is_remark,approve_bill FROM bill WHERE oem_id = $1 AND is_receive = true AND is_use = true ORDER BY create_date DESC;\\\",\\\"chackuse\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path, is_passchage FROM identity_user WHERE id=$1 AND  is_use=true;\\\",\\\"save_remarkbill\\\":\\\"UPDATE bill SET remark_receive=$2, is_remark=$3, time_receive=$4,approve_bill=$5 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryDriver.json?");

/***/ }),

/***/ "./app/query/queryEnd_user.json":
/*!**************************************!*\
  !*** ./app/query/queryEnd_user.json ***!
  \**************************************/
/*! exports provided: filter, add, findById, update, del, checkName_add, checkFullname_add, checkName_edit, checkFullname_edit, findRelateByEnd_userId, delProductEnd_user, checkProductEnd_user, addProductEnd_user, getBill_ByEndID, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active, oem_id, line_id, end_user_tel, update_by, update_date, email FROM end_user where is_use = true and  ($1::text is null or name ILIKE '%' || $1 || '%')  and  ($2::text is null or fullname ILIKE '%' || $2 || '%') and oem_id = $3\\\",\\\"add\\\":\\\"INSERT INTO end_user(id, name, fullname, contact, address, latitude, longitude, is_use, is_active,oem_id,line_id,end_user_tel,update_date,update_by,email) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10,$11,$12,$13,$14,$15)\\\",\\\"findById\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active, oem_id, line_id, end_user_tel, update_by, update_date, email FROM end_user where is_use = true and id = $1\\\",\\\"update\\\":\\\"UPDATE end_user SET name=$2, fullname=$3, contact=$4, address=$5, latitude=$6, longitude=$7 ,update_date=$8,update_by=$9,line_id = $10,end_user_tel = $11, email = $12 WHERE id = $1 and is_use = true\\\",\\\"del\\\":\\\"UPDATE end_user SET is_use = false,update_date= $2,update_by=$3 WHERE id = $1\\\",\\\"checkName_add\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active FROM end_user where name = $1 and oem_id = $2 and is_use = true;\\\",\\\"checkFullname_add\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active FROM end_user where fullname = $1 and oem_id = $2 and is_use = true;\\\",\\\"checkName_edit\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active FROM end_user where name = $1 and id != $2 and oem_id = $3 and is_use = true;\\\",\\\"checkFullname_edit\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active FROM end_user where fullname = $1 and id != $2  and oem_id = $3 and is_use = true;\\\",\\\"findRelateByEnd_userId\\\":\\\"SELECT product_id, pe.end_user_id,p.no,p.name FROM product_end_user pe left join product p on pe.product_id = p.id left join end_user e on e.id = pe.end_user_id where pe.end_user_id = $1 AND p.is_use = true;\\\",\\\"delProductEnd_user\\\":\\\"DELETE FROM product_end_user WHERE end_user_id = $1;\\\",\\\"checkProductEnd_user\\\":\\\"SELECT id, product_id, end_user_id FROM product_end_user where end_user_id = $1;\\\",\\\"addProductEnd_user\\\":\\\"INSERT INTO product_end_user(id, product_id, end_user_id) VALUES ($1, $2, $3);\\\",\\\"getBill_ByEndID\\\":\\\"SELECT a.id, a.bill_no_id,b.bill_no,b.customer_name, b.bill_destination,b.bill_values, a.end_user_id, a.is_use, a.create_by, a.update_by, a.create_date, a.update_date, a.oem_id, a.company_id FROM end_user_logistic a left join bill b on a.bill_no_id = b.id WHERE a.end_user_id = $1 ORDER BY a.create_date desc;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryEnd_user.json?");

/***/ }),

/***/ "./app/query/queryExpress.json":
/*!*************************************!*\
  !*** ./app/query/queryExpress.json ***!
  \*************************************/
/*! exports provided: Add_sales, Add_oil, Add_montiy, Filter_sales, filter_date_sales, Filter_oil, filter_date_oil, Filter_montiy, filter_date_montiy, Sale_Edit, oil_Edit, montiy_Edit, chack, chack2, checkliter, addFuel_oil2, updateExpreesOil, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"Add_sales\\\":\\\"INSERT INTO input_express_sale(id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, sale_value)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"Add_oil\\\":\\\"INSERT INTO input_express_oil(id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, oil_value)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"Add_montiy\\\":\\\"INSERT INTO input_express_montly(id, create_date, create_by, update_date, update_by, is_use, oem_id, company_id, category_item, steel_bar, wiremesh, black_character, gi_character, color, steel_binding_wire, nail, other, kpi, deformed_bar, input_month, input_year)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20 ,$21);\\\",\\\"Filter_sales\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, sale_value FROM input_express_sale where is_use = true and company_id = $1 and oem_id = $2  Order by update_date DESC ;\\\",\\\"filter_date_sales\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, sale_value FROM input_express_sale where is_use = true and company_id = $1 and update_date between $2 and $3 and oem_id = $4 Order by update_date DESC;\\\",\\\"Filter_oil\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, oil_value FROM input_express_oil where is_use = true and company_id = $1 Order by update_date DESC ;\\\",\\\"filter_date_oil\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, oil_value FROM input_express_oil where is_use = true and company_id = $1 and update_date between $2 and $3 and oem_id = $4 Order by update_date DESC;\\\",\\\"Filter_montiy\\\":\\\"SELECT id, create_date, create_by, update_date, update_by, is_use, oem_id, company_id, category_item, steel_bar, wiremesh, black_character, gi_character, color, steel_binding_wire, nail, other, kpi, deformed_bar, input_month, input_year FROM input_express_montly where is_use = true and company_id = $1 and oem_id = $2 and ($3::Integer is null or input_year = $3) and ($4::Integer is null or input_month = $4) Order by input_year DESC, input_month DESC;\\\",\\\"filter_date_montiy\\\":\\\"SELECT id, update_date, is_use, oem_id, company_id, input_month, input_year WHERE ($3::Integer is null or input_year = $3) and ($4::Integer is null or input_year = $4);\\\",\\\"Sale_Edit\\\":\\\"UPDATE \\\\\\\"input_express_sale\\\\\\\" SET sale_value=$1, update_date=$2, update_by=$3 WHERE id = $4;\\\",\\\"oil_Edit\\\":\\\"UPDATE \\\\\\\"input_express_oil\\\\\\\" SET oil_value=$1, update_date=$2, update_by=$3 WHERE id = $4;\\\",\\\"montiy_Edit\\\":\\\"UPDATE \\\\\\\"input_express_montly\\\\\\\" SET update_date=$1, update_by=$2, category_item=$3, steel_bar=$4, wiremesh=$5, black_character=$6, gi_character=$7, color=$8, steel_binding_wire=$9, nail=$10, other=$11, kpi=$12, deformed_bar=$13, input_month=$14, input_year=$15 WHERE id =$16;\\\",\\\"chack\\\":\\\"SELECT id, is_use, oem_id, company_id, input_month, input_year FROM input_express_montly where company_id = $1 and oem_id = $2 and ($3::Integer is null or input_year = $3) and ($4::Integer is null or input_month = $4) ;\\\",\\\"chack2\\\":\\\"SELECT id, oem_id, company_id, input_month, input_year FROM input_express_montly where oem_id = $1 and  input_year = $2 and  input_month = $3 and id !=  $4 ;\\\",\\\"checkliter\\\":\\\"SELECT id, is_use, oil_value FROM input_express_oil where is_use = true;\\\",\\\"addFuel_oil2\\\":\\\"INSERT INTO log_fuel_consumtion(id, oem_id, liter, create_date, create_by, edit_type, current_amount) VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"updateExpreesOil\\\":\\\"UPDATE input_express_oil SET update_date=$1, update_by=$2, oil_value=$3 WHERE is_use = true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryExpress.json?");

/***/ }),

/***/ "./app/query/queryExternalDataCTS.json":
/*!*********************************************!*\
  !*** ./app/query/queryExternalDataCTS.json ***!
  \*********************************************/
/*! exports provided: get_log_external_data, check_product_by_no, find_product_forcast_by_year_month, add_forecast, update_forecast, add_log_external_data, add_forecast_days, find_product_forcast_day, update_forecast_days, check_express, add_purchase_express, update_purchase_express, checkTEst, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"get_log_external_data\\\":\\\"SELECT a.id, a.external_name, a.create_date,a.oem_id , a.company_id, a.status_upload, a.upload_detail,a.external_type, b.name as create_by FROM external_source as a left join identity_user as b on a.create_by = b.id where a.oem_id = $1 and a.company_id = $2 order by a.create_date desc;\\\",\\\"check_product_by_no\\\":\\\"SELECT id, no, name,wip_amount,fg_amount FROM product WHERE no = $1 AND oem_id = $2  AND is_use = true;\\\",\\\"find_product_forcast_by_year_month\\\":\\\"SELECT id, product_id, year_month, source_data, amount_forcast FROM product_forcast_cts  WHERE product_id = $1 AND year_month = $2 AND source_data = $3;\\\",\\\"add_forecast\\\":\\\"INSERT INTO product_forcast_cts(id, product_id, year_month, amount, amount_forcast, wip_amount, fg_amount, in_hand_amount, user_id, create_date, update_date, source_data, sort) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"update_forecast\\\":\\\"UPDATE product_forcast_cts SET amount_forcast=$2, wip_amount=$3, fg_amount=$4, in_hand_amount=$5, user_id=$6,update_date=$7 WHERE id = $1;\\\",\\\"add_log_external_data\\\":\\\"INSERT INTO external_source(id, external_name, is_use, create_date, create_by, update_date, update_by, oem_id, company_id, status_upload, upload_detail,external_type) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12);\\\",\\\"add_forecast_days\\\":\\\"INSERT INTO product_forcast_day_cts(id, month, year, day, amount_forcast, year_month, create_date, update_date, product_id, source_data) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\\\",\\\"find_product_forcast_day\\\":\\\"SELECT id, month, year, day, amount_forcast, year_month, create_date, update_date, product_id, source_data FROM product_forcast_day_cts WHERE product_id = $1 AND day = $2 AND month = $3 AND year = $4 AND source_data = $5;\\\",\\\"update_forecast_days\\\":\\\"UPDATE product_forcast_day_cts SET  amount_forcast = $2,  update_date = $3 WHERE id = $1;\\\",\\\"check_express\\\":\\\"SELECT  id,po_number, item_number, qty_ordered, item_description,unit_price, delivery_date, is_expless, is_use, update_date, update_by, oem_id, company_id FROM purchase_order_cts WHERE po_number = $1 AND item_number = $2\\\",\\\"add_purchase_express\\\":\\\"INSERT INTO purchase_order_cts(id,po_number, item_number, qty_ordered, item_description,unit_price, delivery_date, is_expless, is_use, update_date, update_by, oem_id, company_id,product_id,item_number2) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);\\\",\\\"update_purchase_express\\\":\\\"UPDATE purchase_order_cts SET  qty_ordered=$2, item_description=$3,unit_price=$4,delivery_date=$5, is_expless=$6, is_use=$7, update_date=$8, update_by=$9 WHERE id = $1;\\\",\\\"checkTEst\\\":\\\"SELECT * FROM product WHERE no = $1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryExternalDataCTS.json?");

/***/ }),

/***/ "./app/query/queryFGInOutCTS.json":
/*!****************************************!*\
  !*** ./app/query/queryFGInOutCTS.json ***!
  \****************************************/
/*! exports provided: filterProduct, getProductModel, filterLotFG, getHistoryFG, getSumFGDate, getSumFGDateExp, getSumFGLot, getLotFG, getLotNo, saveInOutFG, saveInOutFGProduct, getProduct, getLastTag, filterProject, getLastStock, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterProduct\\\":\\\"SELECT id, no, name, product_model_id, fg_amount, min_product, packing_standart FROM product WHERE is_use = true AND ($1::uuid is null or id = $1) AND ($2::text is null or no ILIKE '%' || $2 || '%') and ($3::text is null or name ILIKE '%' || $3 || '%') and ($4::uuid is null or product_model_id = $4) and ($5::uuid is null or oem_id = $5) and ($6::boolean is false or fg_amount < min_product) ORDER BY create_date\\\",\\\"getProductModel\\\":\\\"SELECT id, name FROM product_model WHERE is_use and oem_id = $1 ORDER by sort\\\",\\\"filterLotFG\\\":\\\"SELECT id, product_id, lot_no FROM log_product_fg_edit_amount_cts\\\",\\\"getHistoryFG\\\":\\\"SELECT logfg.id, logfg.lot_no, logfg.amount, logfg.edit_type, logfg.create_date, logfg.project_id, p.project_name, logfg.exp_date, logfg.remark FROM log_product_fg_edit_amount_cts logfg LEFT JOIN project p on logfg.project_id = p.id WHERE product_id = $1 ORDER BY create_date DESC\\\",\\\"getSumFGDate\\\":\\\"SELECT MIN(a.exp_date) as exp_date, a.lot_no, (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.lot_no = a.lot_no AND b.edit_type = true AND b.product_id = $1) - (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.lot_no = a.lot_no AND b.edit_type = false AND b.product_id = $1) as amount FROM log_product_fg_edit_amount_cts a WHERE a.lot_no != 'null' AND a.product_id = $1 GROUP BY a.lot_no ORDER BY exp_date ASC\\\",\\\"getSumFGDateExp\\\":\\\"SELECT a.exp_date, a.lot_no, a.production_order_cts_id, a.tracking_no, (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.exp_date = a.exp_date AND b.lot_no = a.lot_no AND b.edit_type = true AND b.product_id = $1) - (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.exp_date = a.exp_date AND b.lot_no = a.lot_no AND b.edit_type = false AND b.product_id = $1) AS amount FROM log_product_fg_edit_amount_cts a WHERE a.lot_no != 'null' AND a.product_id = $1 GROUP BY a.lot_no, a.exp_date, a.production_order_cts_id, a.tracking_no ORDER BY exp_date ASC\\\",\\\"getSumFGLot\\\":\\\"SELECT MIN(a.exp_date) as exp_date, lot_no, (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.lot_no = a.lot_no AND b.edit_type = true AND b.product_id = $1) - (SELECT COALESCE(SUM(b.amount), 0) FROM log_product_fg_edit_amount_cts b WHERE b.lot_no = a.lot_no AND b.edit_type = false AND b.product_id = $1) as amount FROM log_product_fg_edit_amount_cts a WHERE a.lot_no != 'null' AND a.product_id = $1 GROUP BY a.lot_no ORDER BY lot_no ASC\\\",\\\"getLotFG\\\":\\\"SELECT logfg.id, logfg.lot_no, logfg.amount, p.packing_standart, logfg.exp_date FROM log_product_fg_edit_amount_cts logfg LEFT JOIN product p on logfg.product_id = p.id WHERE logfg.lot_no = $1 AND logfg.product_id = $2 AND edit_type = true\\\",\\\"getLotNo\\\":\\\"SELECT id, no, is_success FROM production_order_cts WHERE is_success = false AND is_use = true AND product_id = $1;\\\",\\\"saveInOutFG\\\":\\\"INSERT INTO log_product_fg_edit_amount_cts( id, product_id, edit_type, amount, project_id, tracking_no, customer_id, lot_no, production_order_cts_id, pack_amount, exp_date, remark, update_date, update_by, create_date, create_by ,current_amount ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17)\\\",\\\"saveInOutFGProduct\\\":\\\"UPDATE product SET fg_amount = $2 WHERE id = $1\\\",\\\"getProduct\\\":\\\"SELECT id, no, name FROM product WHERE id = $1\\\",\\\"getLastTag\\\":\\\"SELECT id FROM log_product_fg_edit_amount_cts WHERE ($1::text is null or tracking_no ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"filterProject\\\":\\\"SELECT id, project_name FROM project WHERE oem_id = $1 AND company_id = $2 AND is_use = true\\\",\\\"getLastStock\\\":\\\"SELECT *  FROM log_product_fg_edit_amount_cts  WHERE product_id = $1  ORDER BY create_date DESC LIMIT 1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryFGInOutCTS.json?");

/***/ }),

/***/ "./app/query/queryFG_STP_InOut.json":
/*!******************************************!*\
  !*** ./app/query/queryFG_STP_InOut.json ***!
  \******************************************/
/*! exports provided: filterProduct, getAllLotWIPOut, getHistoryFG, getLotNo_FG, getOldAmount, FGAmountInOut, AddLogFGAmount, getsumHistory, getDetailHsitory, getcusNameById, getendNameById, updateOutWipLot, getSumLotNoReserved, getTrackLot, getTrackLot2, summary_report, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterProduct\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price,pd.unit, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::boolean is false or p.fg_amount > 0)and ($6::boolean is false or p.is_trade = true)and ($7::boolean is false or p.fg_amount < p.min_product) and p.product_plants_item is null ORDER BY create_date\\\",\\\"getAllLotWIPOut\\\":\\\"SELECT a.id, a.wire_finished_id, a.deflux_lot_no,a.mat_lot_list, a.edit_type, a.amount, a.user_id, a.create_date, a.weight FROM log_wire_finished_edit_amount a left join wire_finished b on a.wire_finished_id = b.id WHERE a.edit_type = false and is_active = true AND b.oem_id = $1   ORDER BY a.create_date\\\",\\\"getHistoryFG\\\":\\\"SELECT id, product_id, ref_lot_no, fg_lot_no, wip_lot_list, edit_type, amount, project_id, exprire_date, remark, is_reserved, customer_id, end_user_id, stp_machine, current_amount, create_date, create_by FROM log_productstp_fg_edit_amount WHERE product_id = $1 AND fg_lot_no is not null order by create_date desc LIMIT 20;\\\",\\\"getLotNo_FG\\\":\\\"SELECT a.id, a.product_id, a.create_by ,a.edit_type, a.amount, a.create_date, a.fg_lot_no FROM log_productstp_fg_edit_amount a left join product b on a.product_id = b.id WHERE fg_lot_no ILIKE '%' || $1 || '%' and b.oem_id = $2 and a.edit_type = true order by create_date desc\\\",\\\"getOldAmount\\\":\\\"SELECT id,no, name, fg_amount FROM product WHERE id = $1;\\\",\\\"FGAmountInOut\\\":\\\"UPDATE product SET fg_amount=case when fg_amount is null then 0.00+$1 else fg_amount+$1 end  WHERE id=$2\\\",\\\"AddLogFGAmount\\\":\\\"INSERT INTO log_productstp_fg_edit_amount(id, product_id, ref_lot_no, fg_lot_no, wip_lot_list, edit_type, amount, project_id, exprire_date, remark, is_reserved, customer_id, end_user_id, stp_machine, current_amount, create_date, create_by) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);\\\",\\\"getsumHistory\\\":\\\"SELECT max(a.create_date) as create_date, max(a.exprire_date) as exprire_date ,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_productstp_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_productstp_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_productstp_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 GROUP BY a.fg_lot_no order by exprire_date asc\\\",\\\"getDetailHsitory\\\":\\\"SELECT id, product_id, ref_lot_no, fg_lot_no, wip_lot_list, edit_type, amount, project_id, exprire_date, remark, is_reserved, customer_id, end_user_id, stp_machine, current_amount, create_date, create_by FROM log_productstp_fg_edit_amount where fg_lot_no = $1 and product_id = $2 and edit_type = true;\\\",\\\"getcusNameById\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id, line_id, customer_id, update_by, update_date, oem_id FROM customer where id = $1;\\\",\\\"getendNameById\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active, oem_id, line_id, end_user_tel, update_by, update_date FROM end_user where id =$1;\\\",\\\"updateOutWipLot\\\":\\\"UPDATE log_wire_finished_edit_amount SET  is_active = false WHERE deflux_lot_no = $1 and wire_finished_id = $2;\\\",\\\"getSumLotNoReserved\\\":\\\"SELECT min(a.create_date) as create_date ,min(a.exprire_date) as exprire_date,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_productstp_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_productstp_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_productstp_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 and a.fg_lot_no is not null and a.is_reserved != true or is_reserved is null GROUP BY a.fg_lot_no order by exprire_date,fg_lot_no asc\\\",\\\"getTrackLot\\\":\\\"SELECT id, product_id, ref_lot_no, fg_lot_no, wip_lot_list, edit_type, amount, project_id, exprire_date, remark, is_reserved, customer_id, end_user_id, stp_machine, current_amount, create_date, create_by FROM log_productstp_fg_edit_amount WHERE product_id = $1 AND edit_type = true;\\\",\\\"getTrackLot2\\\":\\\"SELECT id, amount, deflux_lot_no, mat_lot_list, is_reserve, end_user_id, customer_id, weight, wire_finished_id, user_id, company_id, oem_id, remark, create_date, edit_type FROM log_wire_finished_edit_amount WHERE id = $1 AND edit_type = false;\\\",\\\"summary_report\\\":\\\"SELECT  product_id,p.no,p.name,  edit_type, amount, pj.project_name,ofg.create_date FROM \\\\\\\"log_productstp_fg_edit_amount\\\\\\\" ofg left join \\\\\\\"product\\\\\\\" p on ofg.product_id = p.id left join \\\\\\\"project\\\\\\\" pj on pj.id = ofg.project_id WHERE ofg.edit_type = $1 and amount > 0 and ($2::text is null or p.name ILIKE '%' || $2 || '%') and pj.project_name != 'null' and p.oem_id = $3\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryFG_STP_InOut.json?");

/***/ }),

/***/ "./app/query/queryFactoryChoup.json":
/*!******************************************!*\
  !*** ./app/query/queryFactoryChoup.json ***!
  \******************************************/
/*! exports provided: filterFacChoup, delFacChoup, addFacChoup, check_no_for_add, check_name_for_add, getFacChoup, check_no_for_update, check_name_for_update, updateFacChoup, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterFacChoup\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE ($1::text is null or code ILIKE '%' || $1 || '%') AND ($2::text is null or name ILIKE '%' || $2 || '%') AND company_id = $3 AND is_use = true ORDER BY create_date ;\\\",\\\"delFacChoup\\\":\\\"UPDATE plating_plant SET is_use=false, update_date=$2 WHERE id = $1;\\\",\\\"addFacChoup\\\":\\\"INSERT INTO plating_plant(id, code, name, telnumber, company_id, is_use, create_date, update_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\",\\\"check_no_for_add\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE code = $1 AND company_id = $2 AND is_use = true;\\\",\\\"check_name_for_add\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE name = $1 AND company_id = $2 AND is_use = true;\\\",\\\"getFacChoup\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE id = $1;\\\",\\\"check_no_for_update\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE code = $1 AND company_id = $2 AND id != $3 AND is_use = true;\\\",\\\"check_name_for_update\\\":\\\"SELECT id, code, name, telnumber, company_id, is_use, create_date, update_date FROM plating_plant WHERE name = $1 AND company_id = $2 AND id != $3 AND is_use = true;\\\",\\\"updateFacChoup\\\":\\\"UPDATE plating_plant SET  code=$2, name=$3, telnumber=$4, update_date=$5 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryFactoryChoup.json?");

/***/ }),

/***/ "./app/query/queryFactoryParameter.json":
/*!**********************************************!*\
  !*** ./app/query/queryFactoryParameter.json ***!
  \**********************************************/
/*! exports provided: addSection, checkSectionSort, getSectionByOEM, getSectionById, deleteSection, updateSection, filterSection, checkSectionName_add, checkSectionName_edit, addProcess, checkProcessSort, getProcessByOEM, getProcessById, updateProcess, filterProcess, deleteProcess, checkProcessName_add, checkProcessName_edit, addLine, checkLineSort, getLineByOEM, getLineById, updateLine, filterLine, deleteLine, checkLineName_add, checkLineName_edit, addLineMachine, delLineMachine, editLineMachine, fineLineMachineByLine, fineLineMachine, getLineMachine, addMachine, checkMachineSort, getMachineByOEM, getMachineById, updateMachine, filterMachine, deleteMachine, checkMachineName_add, checkMachineName_edit, addMachineProcess, delMachineProcess, editMachineProcess, fineMachineProcessByMachine, fineMachineProcess, getMachineProcess, AddMachineProduct, getProductByMachine, getMachineProduct, DeleteMPforUpdate, check_MP_del, checkMachineProduct, updateMachineProduct, getToolingRatio, updateToolingRatioById, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"addSection\\\":\\\"INSERT INTO \\\\\\\"section\\\\\\\"  (id, section_name, is_use, sort, oem_id,update_date,update_by) VALUES ( $1, $2, $3, $4, $5, $6, $7)\\\",\\\"checkSectionSort\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"section\\\\\\\"\\\",\\\"getSectionByOEM\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM \\\\\\\"section\\\\\\\" WHERE oem_id = $1\\\",\\\"getSectionById\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM \\\\\\\"section\\\\\\\" WHERE id = $1\\\",\\\"deleteSection\\\":\\\"UPDATE \\\\\\\"section\\\\\\\" SET is_use = false,update_date= $2,update_by=$3 WHERE id= $1\\\",\\\"updateSection\\\":\\\"UPDATE \\\\\\\"section\\\\\\\" SET section_name=$1,update_date=$3,update_by=$4 WHERE id =$2 \\\",\\\"filterSection\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM \\\\\\\"section\\\\\\\" where is_use = true and oem_id = $1 and  ($2::text is null or section_name ILIKE '%' || $2 || '%') order by sort desc\\\",\\\"checkSectionName_add\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM section where is_use = true and section_name = $1 and oem_id = $2\\\",\\\"checkSectionName_edit\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM section where is_use = true and section_name = $1 and id != $2 and oem_id = $3\\\",\\\"addProcess\\\":\\\"INSERT INTO process(id, section_id, process_name, is_use, sort, update_by, update_date, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);\\\",\\\"checkProcessSort\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"process\\\\\\\"\\\",\\\"getProcessByOEM\\\":\\\"SELECT a.id, section_id, b.section_name, process_name, a.is_use, a.sort FROM \\\\\\\"process\\\\\\\"  a left join \\\\\\\"section\\\\\\\" b on a.section_id = b.id WHERE a.is_use = true and b.oem_id = $1 \\\",\\\"getProcessById\\\":\\\"SELECT a.id, section_id, b.section_name, process_name, a.is_use, a.sort FROM \\\\\\\"process\\\\\\\"  a left join \\\\\\\"section\\\\\\\" b on a.section_id = b.id WHERE a.is_use = true and a.id = $1\\\",\\\"updateProcess\\\":\\\"UPDATE \\\\\\\"process\\\\\\\" SET process_name = $1, section_id = $2 ,update_date=$4,update_by=$5 WHERE id = $3\\\",\\\"filterProcess\\\":\\\"SELECT a.id, section_id, b.section_name, process_name, a.is_use, a.sort FROM \\\\\\\"process\\\\\\\"  a left join \\\\\\\"section\\\\\\\" b on a.section_id = b.id WHERE b.oem_id = $3 and a.is_use = true and ($1::uuid is null or a.section_id = $1) and  ($2::text is null or process_name ILIKE '%' || $2 || '%') order by sort desc\\\",\\\"deleteProcess\\\":\\\"UPDATE \\\\\\\"process\\\\\\\" SET is_use = false,update_date= $2,update_by=$3 WHERE id= $1\\\",\\\"checkProcessName_add\\\":\\\"SELECT a.id, a.section_id, a.process_name, a.is_use, a.sort FROM process  a left join section b on a.section_id = b.id where process_name = $1 and a.is_use = true and b.oem_id = $2;\\\",\\\"checkProcessName_edit\\\":\\\"SELECT a.id, a.section_id, a.process_name, a.is_use, a.sort FROM process  a left join section b on a.section_id = b.id where process_name = $1 and a.id != $2 and a.is_use = true and b.oem_id = $3;\\\",\\\"addLine\\\":\\\"INSERT INTO \\\\\\\"line\\\\\\\"( id, line_name, is_use, sort, oem_id,update_date,update_by) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"checkLineSort\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"line\\\\\\\"\\\",\\\"getLineByOEM\\\":\\\"SELECT id, line_name, is_use, sort, oem_id FROM \\\\\\\"line\\\\\\\" WHERE oem_id = $1\\\",\\\"getLineById\\\":\\\"SELECT id, line_name, is_use, sort, oem_id FROM \\\\\\\"line\\\\\\\" WHERE id = $1\\\",\\\"updateLine\\\":\\\"UPDATE \\\\\\\"line\\\\\\\" SET  line_name=$1 ,update_date=$3,update_by=$4 WHERE id = $2\\\",\\\"filterLine\\\":\\\"SELECT id, line_name, is_use, sort, oem_id FROM \\\\\\\"line\\\\\\\" WHERE is_use = true and ($1::uuid is null or id = $1) and  ($2::text is null or line_name ILIKE '%' || $2 || '%') and oem_id = $3 order by sort desc\\\",\\\"deleteLine\\\":\\\"UPDATE \\\\\\\"line\\\\\\\" SET  is_use= false,update_date= $2,update_by=$3  WHERE id = $1\\\",\\\"checkLineName_add\\\":\\\"SELECT id, line_name, is_use, sort, oem_id FROM line where line_name = $1 and oem_id = $2 and is_use = true;\\\",\\\"checkLineName_edit\\\":\\\"SELECT id, line_name, is_use, sort, oem_id FROM line where line_name = $1 and id != $2 and oem_id = $3 and is_use = true;\\\",\\\"addLineMachine\\\":\\\"INSERT INTO \\\\\\\"line_machine\\\\\\\"(id, line_id, machine_id, is_use) VALUES ($1, $2, $3, $4)\\\",\\\"delLineMachine\\\":\\\"DELETE FROM \\\\\\\"line_machine\\\\\\\" WHERE line_id = $1\\\",\\\"editLineMachine\\\":\\\"UPDATE \\\\\\\"line_machine\\\\\\\" SET machine_id=$1 WHERE line_id= $2\\\",\\\"fineLineMachineByLine\\\":\\\"SELECT id, line_id, machine_id, is_use FROM \\\\\\\"line_machine\\\\\\\" WHERE line_id = $1\\\",\\\"fineLineMachine\\\":\\\"SELECT id, line_id, machine_id, is_use FROM \\\\\\\"line_machine\\\\\\\" WHERE line_id = $1 and machine_id=$2\\\",\\\"getLineMachine\\\":\\\"SELECT c.machine_name,b.id,b.is_use,b.sort,b.oem_id FROM line_machine a left join line b on b.id = a.line_id left join matchine c on c.id = a.machine_id WHERE b.oem_id = $1 and b.is_use =true\\\",\\\"addMachine\\\":\\\"INSERT INTO  \\\\\\\"matchine\\\\\\\"( id, machine_name, is_use, sort, oem_id,update_date,update_by) VALUES ($1, $2, $3, $4, $5,$6,$7)\\\",\\\"checkMachineSort\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"matchine\\\\\\\"\\\",\\\"getMachineByOEM\\\":\\\"SELECT id, machine_name, is_use, sort, oem_id FROM  \\\\\\\"matchine\\\\\\\" WHERE oem_id = $1\\\",\\\"getMachineById\\\":\\\"SELECT id, machine_name, is_use, sort, oem_id FROM  \\\\\\\"matchine\\\\\\\" WHERE id = $1\\\",\\\"updateMachine\\\":\\\"UPDATE matchine SET  machine_name=$1 ,update_date=$3,update_by=$4 WHERE id = $2\\\",\\\"filterMachine\\\":\\\"SELECT id, machine_name, is_use, sort, oem_id FROM  \\\\\\\"matchine\\\\\\\" WHERE oem_id = $2 and is_use = true and ($1::text is null or machine_name ILIKE '%' || $1 || '%') order by sort desc\\\",\\\"deleteMachine\\\":\\\"UPDATE  \\\\\\\"matchine\\\\\\\" SET  is_use= false,update_date= $2,update_by=$3  WHERE id = $1\\\",\\\"checkMachineName_add\\\":\\\"SELECT id, machine_name, is_use, sort, oem_id FROM matchine where machine_name = $1 and is_use = true and oem_id = $2;\\\",\\\"checkMachineName_edit\\\":\\\"SELECT id, machine_name, is_use, sort, oem_id FROM matchine where machine_name = $1 and id != $2 and is_use = true and oem_id = $3;\\\",\\\"addMachineProcess\\\":\\\"INSERT INTO \\\\\\\"machine_process\\\\\\\"(id, machine_id, process_id, is_use) VALUES ($1, $2, $3, $4)\\\",\\\"delMachineProcess\\\":\\\"DELETE FROM \\\\\\\"machine_process\\\\\\\" WHERE machine_id = $1\\\",\\\"editMachineProcess\\\":\\\"UPDATE \\\\\\\"machine_process\\\\\\\" SET process_id=$1 WHERE machine_id= $2\\\",\\\"fineMachineProcessByMachine\\\":\\\"SELECT id, machine_id, process_id, is_use FROM \\\\\\\"machine_process\\\\\\\" WHERE machine_id = $1\\\",\\\"fineMachineProcess\\\":\\\"SELECT id, machine_id, process_id, is_use FROM \\\\\\\"machine_process\\\\\\\" WHERE machine_id= $1 and process_id=$2\\\",\\\"getMachineProcess\\\":\\\"SELECT c.process_name,b.id,b.is_use,b.sort,b.oem_id FROM \\\\\\\"machine_process\\\\\\\" a left join \\\\\\\"matchine\\\\\\\" b on b.id = a.machine_id left join \\\\\\\"process\\\\\\\" c on c.id = a.process_id WHERE b.oem_id = $1 and b.is_use =true\\\",\\\"AddMachineProduct\\\":\\\"INSERT INTO machine_product(id, machine_id, product_id, sort, create_date)VALUES ($1, $2, $3, $4, $5);\\\",\\\"getProductByMachine\\\":\\\"SELECT id, machine_id, product_id, sort, create_date FROM machine_product WHERE machine_id = $1;\\\",\\\"getMachineProduct\\\":\\\"SELECT mp.id, machine_id, product_id, no, name, mp.sort, mp.create_date FROM machine_product mp left join product p on mp.product_id = p.id\\\",\\\"DeleteMPforUpdate\\\":\\\"DELETE FROM machine_product WHERE machine_id = $1 and product_id = $2\\\",\\\"check_MP_del\\\":\\\"SELECT id, machine_id, product_id, sort, create_date FROM machine_product where machine_id = $1;\\\",\\\"checkMachineProduct\\\":\\\"SELECT id, machine_id, product_id, sort, create_date FROM machine_product where machine_id = $1 and product_id = $2;\\\",\\\"updateMachineProduct\\\":\\\"UPDATE machine_product SET  product_id=$2, c_leng=$3, cos_pc=$4 WHERE id = $1;\\\",\\\"getToolingRatio\\\":\\\"SELECT * FROM public.tooling_parameter ORDER BY id ASC;\\\",\\\"updateToolingRatioById\\\":\\\"UPDATE public.tooling_parameter SET value=$2 WHERE id=$1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryFactoryParameter.json?");

/***/ }),

/***/ "./app/query/queryFactoryWorkHours.json":
/*!**********************************************!*\
  !*** ./app/query/queryFactoryWorkHours.json ***!
  \**********************************************/
/*! exports provided: filter, checkCompany, update_work_hours, add_work_hours, check_YearMonth, AddCalendar, UpdateCalendar, GetCalendarByCompany, DelCalendar, filterWithOem, checkCompanyWithOem, update_work_hoursWithOem, add_work_hoursWithOem, check_YearMonthWithOem, AddCalendarWithOem, UpdateCalendarWithOem, GetCalendarByCompanyWithOem, DelCalendarWithOem, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT * FROM master_default_workday WHERE company_id = $1\\\",\\\"checkCompany\\\":\\\"SELECT COUNT(*) FROM master_default_workday WHERE company_id = $1\\\",\\\"update_work_hours\\\":\\\"UPDATE master_default_workday SET normal =$3 , ot = $4 WHERE id = $1 AND company_id = $5 AND workday =$2\\\",\\\"add_work_hours\\\":\\\"INSERT INTO master_default_workday(id,workday,normal,ot,is_use,company_id) VALUES ($1,$2,$3,$4,$5,$6)\\\",\\\"check_YearMonth\\\":\\\"SELECT id, month, year, name, company_id, day_detail FROM calendar where year = $1 and month = $2 and company_id = $3;\\\",\\\"AddCalendar\\\":\\\"INSERT INTO calendar(id, month, year, name, company_id, day_detail)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"UpdateCalendar\\\":\\\"UPDATE calendar SET day_detail=$2 WHERE id = $1;\\\",\\\"GetCalendarByCompany\\\":\\\"SELECT id, month, year, name, company_id, day_detail FROM calendar WHERE company_id = $1 ORDER BY year,month\\\",\\\"DelCalendar\\\":\\\"DELETE FROM calendar WHERE id = $1\\\",\\\"filterWithOem\\\":\\\"SELECT * FROM master_default_workday WHERE company_id = $1 and oem_id = $2\\\",\\\"checkCompanyWithOem\\\":\\\"SELECT COUNT(*) FROM master_default_workday WHERE company_id = $1 and oem_id = $2\\\",\\\"update_work_hoursWithOem\\\":\\\"UPDATE master_default_workday SET normal =$3 , ot = $4 WHERE id = $1 AND company_id = $5 AND oem_id = $6 AND workday =$2\\\",\\\"add_work_hoursWithOem\\\":\\\"INSERT INTO master_default_workday(id,workday,normal,ot,is_use,company_id,oem_id) VALUES ($1,$2,$3,$4,$5,$6,$7)\\\",\\\"check_YearMonthWithOem\\\":\\\"SELECT id, month, year, name, company_id, day_detail,oem_id FROM calendar where year = $1 and month = $2 and company_id = $3 and oem_id = $4;\\\",\\\"AddCalendarWithOem\\\":\\\"INSERT INTO calendar(id, month, year, name, company_id, day_detail,oem_id)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"UpdateCalendarWithOem\\\":\\\"UPDATE calendar SET day_detail=$2 WHERE id = $1;\\\",\\\"GetCalendarByCompanyWithOem\\\":\\\"SELECT id, month, year, name, company_id, day_detail FROM calendar WHERE oem_id = $1 ORDER BY year,month\\\",\\\"DelCalendarWithOem\\\":\\\"DELETE FROM calendar WHERE id = $1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryFactoryWorkHours.json?");

/***/ }),

/***/ "./app/query/queryHandheld.json":
/*!**************************************!*\
  !*** ./app/query/queryHandheld.json ***!
  \**************************************/
/*! exports provided: check_tag_no, getAmountById, addLogCutting, updateCutting, addLogWIP, updateWIP, addLogFG, updateFG, getLotNo, getSumLot, getSumLotNoReserved, getLotNo_material, getAmountMATById, addLogMAT, updateMAT, getSumLot_MAT, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"check_tag_no\\\":\\\"SELECT id, track_list, created_date, created_by, tag_no FROM log_history_tracking WHERE tag_no = $1 and oem_id = $2;\\\",\\\"getAmountById\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item, dip_amount FROM product WHERE id = $1;\\\",\\\"addLogCutting\\\":\\\"INSERT INTO log_cutting_edit_amount(id, product_id, user_id, edit_type, amount, create_date, tag_no, remark)VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\",\\\"updateCutting\\\":\\\"UPDATE product SET cut_amount=$2 , update_date=$3 WHERE id = $1;\\\",\\\"addLogWIP\\\":\\\"INSERT INTO log_product_wip_edit_amount(id, product_id, user_id, edit_type, amount, create_date, tag_no,current_amount, remark) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);\\\",\\\"updateWIP\\\":\\\"UPDATE product SET wip_amount=$2 , update_date=$3 WHERE id = $1;\\\",\\\"addLogFG\\\":\\\"INSERT INTO log_product_fg_edit_amount(id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date, remark, color, log_warehouse_details_id, tag_no) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"updateFG\\\":\\\"UPDATE product SET fg_amount=$2 , update_date=$3 WHERE id = $1;\\\",\\\"getLotNo\\\":\\\"SELECT a.id, a.product_id, a.user_id, a.edit_type, a.amount, a.create_date, a.project_id, a.fg_lot_no, a.exprire_date, a.remark, a.color, a.log_warehouse_details_id, a.tag_no FROM log_product_fg_edit_amount a left join product b on a.product_id = b.id WHERE b.oem_id = $2 and fg_lot_no ILIKE '%' || $1 || '%' and a.edit_type = true order by create_date desc\\\",\\\"getSumLot\\\":\\\"SELECT min(a.create_date) as create_date ,min(a.exprire_date) as exprire_date,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_product_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 and a.fg_lot_no is not null GROUP BY a.fg_lot_no order by exprire_date asc\\\",\\\"getSumLotNoReserved\\\":\\\"SELECT min(a.create_date) as create_date ,min(a.exprire_date) as exprire_date,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_product_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 and a.fg_lot_no is not null and a.is_reserved != true or is_reserved is null GROUP BY a.fg_lot_no order by exprire_date,fg_lot_no asc\\\",\\\"getLotNo_material\\\":\\\"SELECT a.id, a.material_id, a.user_id,a.edit_type, a.amount, a.create_date, a.mat_lot_no, a.tag_no, a.exprire_date FROM log_material_edit_amount a left join material b on a.material_id = b.id WHERE mat_lot_no ILIKE '%' || $1 || '%' and b.oem_id = $2 and a.edit_type = true order by create_date desc\\\",\\\"getAmountMATById\\\":\\\"SELECT id, no, name, material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, remark, image, user_id, oem_id, is_active, is_use, is_scan_qr, create_date, update_date, image_name, imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3 FROM material WHERE id = $1\\\",\\\"addLogMAT\\\":\\\"INSERT INTO log_material_edit_amount(id, material_id, user_id, edit_type, amount, create_date, mat_lot_no, tag_no, exprire_date,remark) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10);\\\",\\\"updateMAT\\\":\\\"UPDATE material SET amount=$2 , update_date=$3 WHERE id = $1;\\\",\\\"getSumLot_MAT\\\":\\\"SELECT min(a.create_date) as create_date ,min(a.exprire_date) as exprire_date,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_edit_amount a WHERE a.mat_lot_no != 'null' and a.material_id = $1 and a.mat_lot_no is not null GROUP BY a.mat_lot_no order by exprire_date asc\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryHandheld.json?");

/***/ }),

/***/ "./app/query/queryHandheldCTS.json":
/*!*****************************************!*\
  !*** ./app/query/queryHandheldCTS.json ***!
  \*****************************************/
/*! exports provided: checkTagMat, checkTagMatOut, checkTagWipProd, checkTagWipProdIn, checkTagWipProdOut, getProductionOrderCTSByMatId, getProductionOrderCTSByProductId, getProductionOrderCTS, getDetailByTracking, addLogMatOutCTS, getOldAmountMat, updateAmountMat, GetLotWipProdInStock, addLogWipProdIn, getLastTag, checkTagWipChoupIn, checkTagWipChoupOut, addLogWipChoupOut, addLogPackIn, getLastTagPack, checkTagPackIn, checkTagPackOut, getLotInStockPack, GetLotPackDetail, checkProductNo, addLogFG, getLastTagFG, upDateAmountFG, getProjectByOEM, getFGInStockList, getFGInStockListEXP, getLotFGDetail, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"checkTagMat\\\":\\\"SELECT id, material_id, user_id, edit_type, amount, create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit, supplier_id, ref_coil_no, tracking_no FROM log_material_cts_edit_amount WHERE tracking_no = $1 AND edit_type = true;\\\",\\\"checkTagMatOut\\\":\\\"SELECT * FROM log_material_cts_edit_amount WHERE tracking_no = $1 AND edit_type = false\\\",\\\"checkTagWipProd\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no, order_no, amount, material_id FROM log_wip_prod_edit_amount_cts WHERE coli_no = $1 AND edit_type = true;\\\",\\\"checkTagWipProdIn\\\":\\\"SELECT * FROM log_wip_prod_edit_amount_cts WHERE tracking_no = $1 AND edit_type = true;\\\",\\\"checkTagWipProdOut\\\":\\\"SELECT * FROM log_wip_prod_edit_amount_cts WHERE tracking_no = $1 AND edit_type = false;\\\",\\\"getProductionOrderCTSByMatId\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts WHERE is_success = false AND is_use = true AND material_id = $1;\\\",\\\"getProductionOrderCTSByProductId\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts WHERE is_success = false AND is_use = true AND product_id = $1;\\\",\\\"getProductionOrderCTS\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts WHERE is_success = false AND is_use = true;\\\",\\\"getDetailByTracking\\\":\\\"SELECT * FROM log_material_cts_edit_amount WHERE tracking_no = $1 AND edit_type = true;\\\",\\\"addLogMatOutCTS\\\":\\\"INSERT INTO log_material_cts_edit_amount(id, material_id, user_id, edit_type, amount, create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit, supplier_id, ref_coil_no, tracking_no, is_certificate, supplier_coil, lot_no, production_order_cts_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24);\\\",\\\"getOldAmountMat\\\":\\\"SELECT id, amount FROM material WHERE id = $1;\\\",\\\"updateAmountMat\\\":\\\"UPDATE material SET amount = $2 WHERE id = $1\\\",\\\"GetLotWipProdInStock\\\":\\\"SELECT min(a.create_date) as create_date,a.box_no,(SELECT coalesce(sum(b.amount),0)   FROM log_wip_prod_edit_amount_cts b where b.box_no = a.box_no and b.edit_type = true and b.product_id =  $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_wip_prod_edit_amount_cts b where b.box_no = a.box_no and b.edit_type = false and b.product_id =  $1) as amount FROM log_wip_prod_edit_amount_cts a WHERE a.box_no != 'null' and a.product_id = $1  GROUP BY a.box_no order by create_date desc\\\",\\\"addLogWipProdIn\\\":\\\"INSERT INTO log_wip_prod_edit_amount_cts(id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, lot_no, amount, box_no, product_id, box_date, loss, ref_box_no, log_material_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);\\\",\\\"getLastTag\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no, order_no, amount FROM log_wip_prod_edit_amount_cts WHERE ($1::text is null or tracking_tag_wip_prod ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"checkTagWipChoupIn\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no, a.qc_date,b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM log_wip_chup_edit_amount_cts a LEFT JOIN product b on a.product_id = b.id WHERE a.tracking_tag_wip_chup = $1 AND a.edit_type = true;\\\",\\\"checkTagWipChoupOut\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date FROM log_wip_chup_edit_amount_cts WHERE tracking_tag_wip_chup = $1 AND edit_type = false;\\\",\\\"addLogWipChoupOut\\\":\\\"INSERT INTO log_wip_chup_edit_amount_cts(id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);\\\",\\\"addLogPackIn\\\":\\\"INSERT INTO log_pack_edit_amount_cts(id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount, pack_lot_no) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);\\\",\\\"getLastTagPack\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_name, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount FROM log_pack_edit_amount_cts WHERE ($1::text is null or tracking_tag_pack_chup ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"checkTagPackIn\\\":\\\"SELECT * FROM log_pack_edit_amount_cts WHERE tracking_tag_pack_chup = $1 AND edit_type = true;\\\",\\\"checkTagPackOut\\\":\\\"SELECT * FROM log_pack_edit_amount_cts WHERE tracking_tag_pack_chup = $1 AND edit_type = false;\\\",\\\"getLotInStockPack\\\":\\\"SELECT min(a.create_date) as create_date, a.pack_no,(SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where  b.pack_no = a.pack_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.pack_no = a.pack_no and b.edit_type = false and b.product_id = $1) as amount FROM log_pack_edit_amount_cts a WHERE  a.pack_no != 'null' and a.product_id =$1 GROUP BY a.pack_no order by create_date desc\\\",\\\"GetLotPackDetail\\\":\\\"SELECT \\\\\\\"N/W (g.)\\\\\\\" as nw_number FROM product WHERE id = $1\\\",\\\"checkProductNo\\\":\\\"SELECT * FROM product WHERE no = $1 AND is_use = true\\\",\\\"addLogFG\\\":\\\"INSERT INTO log_product_fg_edit_amount_cts(id, product_id, edit_type, amount, project_id, tracking_no, customer_id, lot_no, production_order_cts_id, pack_amount, exp_date, remark, update_date, update_by, create_date, create_by) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);\\\",\\\"getLastTagFG\\\":\\\"SELECT id, product_id, edit_type, amount, project_id, tracking_no, customer_id, lot_no, production_order_cts_id, pack_amount, exp_date, remark, update_date, update_by, create_date, create_by FROM log_product_fg_edit_amount_cts WHERE ($1::text is null or tracking_no ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"upDateAmountFG\\\":\\\"UPDATE product SET fg_amount = $2 WHERE id = $1\\\",\\\"getProjectByOEM\\\":\\\"SELECT * FROM project WHERE oem_id = $1\\\",\\\"getFGInStockList\\\":\\\"SELECT min(a.exp_date) as exp_date,a.lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_product_fg_edit_amount_cts b where b.lot_no = a.lot_no and b.edit_type = true and b.product_id =  $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount_cts b where b.lot_no = a.lot_no and b.edit_type = false and b.product_id =  $1) as amount FROM log_product_fg_edit_amount_cts a WHERE a.lot_no != 'null' and a.product_id = $1  GROUP BY a.lot_no order by exp_date\\\",\\\"getFGInStockListEXP\\\":\\\"SELECT production_order_cts_id,exp_date,a.lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_product_fg_edit_amount_cts b where b.exp_date = a.exp_date AND b.lot_no = a.lot_no and b.edit_type = true and b.product_id =   $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount_cts b where b.exp_date = a.exp_date AND b.lot_no = a.lot_no and b.edit_type = false and b.product_id =  $1) as amount FROM log_product_fg_edit_amount_cts a WHERE a.lot_no != 'null' and a.product_id =  $1  GROUP BY a.lot_no,a.exp_date,production_order_cts_id order by exp_date\\\",\\\"getLotFGDetail\\\":\\\"SELECT * FROM log_product_fg_edit_amount_cts WHERE product_id =$1 AND lot_no = $2 AND exp_date = $3 AND edit_type = true\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryHandheldCTS.json?");

/***/ }),

/***/ "./app/query/queryHistory.json":
/*!*************************************!*\
  !*** ./app/query/queryHistory.json ***!
  \*************************************/
/*! exports provided: getDeliveryDefaul, getDelivery, getDeliveryDefaul2, getDelivery3, getDelivery2, filter_cutting, filter_material1, filter_material, filter_material_stp, get_deflux_lot_all, filter_deflux, filter_product_fg, filter_product_fg_project1, filter_product_fg_project, filter_productStp_fg_project, filter_product_wip, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getDeliveryDefaul\\\":\\\"SELECT x.id, x.product_id, b.no, b.name as product_name , x.user_id, a.name, a.sirname, a.username x.edit_type, x.amount, x.create_date,x.color,x.remark,x.sell_price,x.buy_price FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" x  left join \\\\\\\"identity_user\\\\\\\" a on a.id = x.user_id left join \\\\\\\"product\\\\\\\" b on b.id = x.product_id where oem_id = $1 and edit_type = false and ($2::text is null or b.no ILIKE '%' || $2|| '%') and x.color is null ORDER by create_date desc;\\\",\\\"getDelivery\\\":\\\"SELECT x.id, x.product_id, b.no, b.name as product_name , x.user_id, a.name, a.sirname, a.username, x.edit_type, x.amount, x.create_date,x.color,x.remark,x.sell_price,x.buy_price FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" x  left join \\\\\\\"identity_user\\\\\\\" a on a.id = x.user_id left join \\\\\\\"product\\\\\\\" b on b.id = x.product_id where oem_id = $1 and edit_type = false and ($2::text is null or b.no ILIKE '%' || $2|| '%') and ($3::text is null or x.color = $3) ORDER by create_date desc;\\\",\\\"getDeliveryDefaul2\\\":\\\"SELECT x.id, x.product_id, b.no, b.name as product_name , x.user_id, a.name, a.sirname, a.username, x.edit_type, x.amount, x.create_date,x.color,x.remark,x.sell_price,x.buy_price FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" x  left join \\\\\\\"identity_user\\\\\\\" a on a.id = x.user_id left join \\\\\\\"product\\\\\\\" b on b.id = x.product_id where oem_id = $1 and edit_type = false and ($4::text is null or b.no ILIKE '%' || $4|| '%') and x.color is null AND x.create_date BETWEEN $2 AND $3 ORDER by create_date desc;\\\",\\\"getDelivery3\\\":\\\"SELECT x.id, x.product_id, b.no, b.name as product_name , x.user_id, a.name, a.sirname, a.username, x.edit_type, x.amount, x.create_date,x.color,x.remark,x.sell_price,x.buy_price FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" x  left join \\\\\\\"identity_user\\\\\\\" a on a.id = x.user_id left join \\\\\\\"product\\\\\\\" b on b.id = x.product_id where oem_id = $1 and edit_type = false and ($4::text is null or b.no ILIKE '%' || $4|| '%') and x.color is null AND x.create_date BETWEEN $2 AND $3 ORDER by create_date desc;\\\",\\\"getDelivery2\\\":\\\"SELECT x.id, x.product_id, b.no, b.name as product_name , x.user_id, a.name, a.sirname, a.username, x.edit_type, x.amount, x.create_date,x.color,x.remark,x.sell_price,x.buy_price FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" x  left join \\\\\\\"identity_user\\\\\\\" a on a.id = x.user_id left join \\\\\\\"product\\\\\\\" b on b.id = x.product_id where oem_id = $1 and edit_type = false and ($4::text is null or b.no ILIKE '%' || $4|| '%') and ($5::text is null or x.color = $5) AND x.create_date BETWEEN $2 AND $3 ORDER by create_date desc;\\\",\\\"filter_cutting\\\":\\\"SELECT a.id, product_id, b.no, b.name, a.user_id, edit_type, a.amount, a.create_date FROM \\\\\\\"log_cutting_edit_amount\\\\\\\" a left join \\\\\\\"product\\\\\\\" b on b.id = a.product_id where oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and ($3::text is null or name ILIKE '%' || $3 || '%') ORDER by create_date desc\\\",\\\"filter_material1\\\":\\\"SELECT a.id, material_id, b.no, b.name, a.user_id, edit_type, a.amount, a.create_date, c.username FROM \\\\\\\"log_material_edit_amount\\\\\\\" a left join \\\\\\\"material\\\\\\\" b on b.id = a.material_id left join identity_user c on c.id = a.user_id where oem_id = $1 and ($2::text is null or b.no ILIKE '%' || $2 || '%') and ($3::text is null or b.name ILIKE '%' || $3 || '%')  ORDER by create_date desc\\\",\\\"filter_material\\\":\\\"SELECT no, name, activity_type,mat_lot_no, amount, oem_id, oem, company_id, company, date, username FROM material_fg where oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and ($3::text is null or name ILIKE '%' || $3 || '%') AND ($4::timestamp is null or date Between $4 and $5) ORDER by date desc;\\\",\\\"filter_material_stp\\\":\\\"SELECT no, name, mat_lot_no, weight_by_tag, actual_weight, activity_type, amount, oem_id, oem, company_id, company, date, username FROM materialstp_fg where oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and ($3::text is null or name ILIKE '%' || $3 || '%') AND ($4::timestamp is null or date Between $4 and $5) ORDER by date desc;\\\",\\\"get_deflux_lot_all\\\":\\\"SELECT deflux_lot_no, mat_lot_list FROM log_wire_finished_edit_amount WHERE edit_type = true;\\\",\\\"filter_deflux\\\":\\\"SELECT b.diameter_no,b.diameter, a.amount, a.deflux_lot_no, a.mat_lot_list, a.is_reserve, a.end_user_id, a.customer_id, a.weight, a.wire_finished_id, a.user_id, a.company_id, a.oem_id, a.remark, a.create_date, a.edit_type, a.is_active FROM log_wire_finished_edit_amount a LEFT JOIN wire_finished b ON a.wire_finished_id = b.id WHERE a.company_id = $1 AND a.oem_id = $2 AND ($3::text is null or b.diameter_no ILIKE '%' || $3 || '%') AND ($4::text is null or b.diameter ILIKE '%' || $4 || '%') AND ($5::timestamp is null or a.create_date Between $5 and $6) ORDER by a.create_date desc;\\\",\\\"filter_product_fg\\\":\\\"SELECT a.id, product_id, b.no, b.name, a.user_id, edit_type, a.amount, a.create_date, c.username FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" a left join \\\\\\\"product\\\\\\\" b on b.id = a.product_id left join identity_user c on c.id = a.user_id where b.oem_id = $1 and ($2::text is null or b.no ILIKE '%' || $2 || '%') and ($3::text is null or b.name ILIKE '%' || $3 || '%')  ORDER by create_date desc\\\",\\\"filter_product_fg_project1\\\":\\\"SELECT a.id, product_id, b.no, b.name, a.user_id, edit_type, a.amount,c.project_name, a.create_date, d.username,a.stp_machine FROM log_product_fg_edit_amount a left join product b on b.id = a.product_id left join project c on a.project_id = c.id left join identity_user d on d.id = a.user_id WHERE b.oem_id = $1 and ($2::text is null or b.no ILIKE '%' || $2 || '%') and ($3::text is null or b.name ILIKE '%' || $3 || '%')  ORDER by create_date desc\\\",\\\"filter_product_fg_project\\\":\\\"SELECT no, name, activity_type, amount, project, stp_machine, oem_id, oem, company_id, company,remark,date, username FROM product_fg WHERE oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and($3::text is null or name ILIKE '%' || $3 || '%') AND ($4::timestamp is null or date Between $4 and $5) ORDER by date desc;\\\",\\\"filter_productStp_fg_project\\\":\\\"SELECT no, name, activity_type, amount, project, stp_machine, oem_id, oem, company_id, company,remark, date, username FROM productstp_fg WHERE oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and($3::text is null or name ILIKE '%' || $3 || '%') AND ($4::timestamp is null or date Between $4 and $5) ORDER by date desc;\\\",\\\"filter_product_wip\\\":\\\"SELECT a.id, product_id, b.no, b.name, a.user_id, edit_type, a.amount, a.create_date FROM \\\\\\\"log_product_wip_edit_amount\\\\\\\" a left join \\\\\\\"product\\\\\\\" b on b.id = a.product_id where oem_id = $1 and ($2::text is null or no ILIKE '%' || $2 || '%') and ($3::text is null or name ILIKE '%' || $3 || '%')  ORDER by create_date desc\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryHistory.json?");

/***/ }),

/***/ "./app/query/queryLoad_status.json":
/*!*****************************************!*\
  !*** ./app/query/queryLoad_status.json ***!
  \*****************************************/
/*! exports provided: add, checkStatus_add, filter, findById, checkStatus_edit, update, del, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO load_status(id, status, company_id, remark, is_use, update_date, update_by)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"checkStatus_add\\\":\\\"SELECT id, status, company_id, remark, is_use, update_date, update_by FROM load_status WHERE status = $1 and company_id = $2 and is_use = true\\\",\\\"filter\\\":\\\"SELECT id, status, company_id, remark, is_use, update_date, update_by FROM load_status WHERE ($1::text is null or status ILIKE '%' || $1 || '%') and company_id = $2 and is_use = true order by update_date desc\\\",\\\"findById\\\":\\\"SELECT id, status, company_id, remark, is_use, update_date, update_by FROM load_status WHERE id = $1\\\",\\\"checkStatus_edit\\\":\\\"SELECT id, status, company_id, remark, is_use, update_date, update_by FROM load_status WHERE status = $1 and id != $2 and company_id =$3 and is_use = true\\\",\\\"update\\\":\\\"UPDATE load_status SET  status=$2, remark=$3, update_date=$4, update_by=$5 WHERE id = $1;\\\",\\\"del\\\":\\\"UPDATE load_status SET  is_use=false ,update_date=$2, update_by=$3 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryLoad_status.json?");

/***/ }),

/***/ "./app/query/queryLog.json":
/*!*********************************!*\
  !*** ./app/query/queryLog.json ***!
  \*********************************/
/*! exports provided: add, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO log( id, date, activity) VALUES ($1, $2, $3)\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryLog.json?");

/***/ }),

/***/ "./app/query/queryLogin.json":
/*!***********************************!*\
  !*** ./app/query/queryLogin.json ***!
  \***********************************/
/*! exports provided: checkAdminPassword, updateAdminToken, updateUserToken, getById, checkUserPassword, getByUser, getByAdmin, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"checkAdminPassword\\\":\\\"select id,username from \\\\\\\"admin\\\\\\\" where \\\\\\\"username\\\\\\\"=$1 and \\\\\\\"password\\\\\\\"=$2 and \\\\\\\"is_use\\\\\\\"=true\\\",\\\"updateAdminToken\\\":\\\"update \\\\\\\"admin\\\\\\\" set \\\\\\\"token\\\\\\\"=$1,\\\\\\\"token_create\\\\\\\"=$2,\\\\\\\"token_expired\\\\\\\"=$3 where \\\\\\\"username\\\\\\\"=$4 and \\\\\\\"is_use\\\\\\\"=true\\\",\\\"updateUserToken\\\":\\\"update \\\\\\\"identity_user\\\\\\\" set \\\\\\\"token\\\\\\\"=$1,\\\\\\\"token_create\\\\\\\"=$2,\\\\\\\"token_expired\\\\\\\"=$3 where \\\\\\\"username\\\\\\\"=$4 and \\\\\\\"is_use\\\\\\\"=true\\\",\\\"getById\\\":\\\"select * from login where \\\\\\\"Id\\\\\\\"=$1\\\",\\\"checkUserPassword\\\":\\\"select id,username,password,company_id,token from identity_user where \\\\\\\"username\\\\\\\"=$1 and \\\\\\\"is_use\\\\\\\"=true\\\",\\\"getByUser\\\":\\\"select username from identity_user where \\\\\\\"username\\\\\\\"=$1 and \\\\\\\"is_use\\\\\\\"=true limit 1\\\",\\\"getByAdmin\\\":\\\"select username from \\\\\\\"admin\\\\\\\" where \\\\\\\"id\\\\\\\"=$1 and \\\\\\\"is_use\\\\\\\"=true limit 1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryLogin.json?");

/***/ }),

/***/ "./app/query/queryLoop.json":
/*!**********************************!*\
  !*** ./app/query/queryLoop.json ***!
  \**********************************/
/*! exports provided: add, checkNo_add, filter, findById, checkLoopNo_edit, update, del, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO loop(id, loop_no, company_id, remark, is_use, update_date, update_by)VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"checkNo_add\\\":\\\"SELECT id, loop_no, company_id, remark, is_use, update_date, update_by FROM loop WHERE loop_no = $1 and company_id = $2 and is_use = true\\\",\\\"filter\\\":\\\"SELECT id, loop_no, company_id, remark, is_use, update_date, update_by FROM loop WHERE ($1::text is null or loop_no ILIKE '%' || $1 || '%') and company_id = $2 and is_use = true ORDER BY update_date desc\\\",\\\"findById\\\":\\\"SELECT id, loop_no, company_id, remark, is_use, update_date, update_by FROM loop WHERE id = $1\\\",\\\"checkLoopNo_edit\\\":\\\"SELECT id, loop_no, company_id, remark, is_use, update_date, update_by FROM loop WHERE loop_no = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"update\\\":\\\"UPDATE loop SET  loop_no=$2, remark=$3 ,update_date=$4, update_by=$5 WHERE id = $1\\\",\\\"del\\\":\\\"UPDATE loop SET is_use=false, update_date=$2, update_by=$3 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryLoop.json?");

/***/ }),

/***/ "./app/query/queryMatInOutCTS.json":
/*!*****************************************!*\
  !*** ./app/query/queryMatInOutCTS.json ***!
  \*****************************************/
/*! exports provided: get_lot_in_stock_by_material_id, get_lot_in_stock_detail, get_lot_history, getmaterial_mgt_data, getlotNo, getDetailLotNo, get_material_edit_type_query, get_material_amount_sum, check_material_cinvoice_no_coil_no, add_log_material_cts_edit_amount, update_material_cts_edit_amount, update_log_material_cts_edit_amount, check_material_qc_by_coil_no, checkCoilToGen, update_material_cer, update_material_qc_approved, filter_mgt_data_with_time, filter_mgt_data_with_out_time, allMaterialByOEM, allMaterialByCOM, allMaterialByCOM//, get_location_by_company, get_supplier_active, get_supplier_by_company, get_product_material, check_material_ref_coil, getLastTag, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"get_lot_in_stock_by_material_id\\\":\\\"SELECT min(a.create_date) as create_date,a.coil_no,(SELECT coalesce(sum(b.amount),0)   FROM log_material_cts_edit_amount b where b.coil_no = a.coil_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_cts_edit_amount b where b.coil_no = a.coil_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_cts_edit_amount a WHERE a.coil_no != 'null' and a.material_id = $1 GROUP BY a.coil_no order by create_date asc\\\",\\\"get_lot_in_stock_detail\\\":\\\"SELECT a.id, a.material_id, a.user_id, a.edit_type, a.amount, a.create_date, a.current_amount, a.qc_check, a.check_date, a.qc_approve_person, a.coil_no, a.invoice_no, a.ref_coil_no, a.warehouse_id as location_id, b.location as location_name, a.tag_weight, a.actual_weight, a.grade,a.supplier_id, c.name as supplier_name,c.full_name as supplier_full_name, a.tracking_no,a.is_certificate, a.supplier_coil FROM log_material_cts_edit_amount a LEFT JOIN warehouse b on a.warehouse_id = b.id LEFT JOIN material_supplier c on c.id = a.supplier_id WHERE a.coil_no = $1 AND a.edit_type = true AND a.material_id = $2\\\",\\\"get_lot_history\\\":\\\"SELECT a.id, a.material_id, a.user_id, a.edit_type, a.amount, a.create_date, a.current_amount, a.qc_check, a.check_date, a.qc_approve_person, a.coil_no, a.invoice_no,a.ref_coil_no, a.warehouse_id,b.location as location_name, a.tag_weight, a.actual_weight, a.grade, c.name as supplier_name,c.full_name as supplier_full_name FROM log_material_cts_edit_amount a LEFT JOIN warehouse b on a.warehouse_id = b.id LEFT JOIN material_supplier c on c.id = a.supplier_id WHERE a.material_id = $1 ORDER BY  a.create_date desc LIMIT 20\\\",\\\"getmaterial_mgt_data\\\":\\\"SELECT a.no as material_no, a.name as material_name, a.material_supplier_id as material_supplier_id, a.amount as material_amount ,b.name as material_supplier_name FROM material as a LEFT JOIN material_supplier as b on material_supplier_id = b.id where a.id = $1;\\\",\\\"getlotNo\\\":\\\"SELECT id,no,is_success FROM production_order_cts WHERE is_success = false AND is_use = true AND material_id = $1;\\\",\\\"getDetailLotNo\\\":\\\"SELECT id,no,is_success FROM production_order_cts WHERE no = $1\\\",\\\"get_material_edit_type_query\\\":\\\"SELECT min(a.create_date) as create_date,a.coil_no,(SELECT coalesce(sum(b.amount),0)   FROM log_material_cts_edit_amount b where b.coil_no = a.coil_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_cts_edit_amount b where b.coil_no = a.coil_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_cts_edit_amount a WHERE a.coil_no != 'null' and a.material_id = $1 and a.coil_no = $2 and a.invoice_no = $3 GROUP BY a.coil_no order by create_date asc\\\",\\\"get_material_amount_sum\\\":\\\"SELECT amount FROM material where id = $1;\\\",\\\"check_material_cinvoice_no_coil_no\\\":\\\"SELECT id, material_id, user_id, edit_type, amount, create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit FROM log_material_cts_edit_amount where material_id = $1 and coil_no = $2\\\",\\\"add_log_material_cts_edit_amount\\\":\\\"INSERT INTO log_material_cts_edit_amount( id, material_id, user_id, edit_type, amount, create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit,supplier_id, ref_coil_no,tracking_no,is_certificate,supplier_coil,lot_no, production_order_cts_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17,$18,$19,$20,$21,$22,$23,$24);\\\",\\\"update_material_cts_edit_amount\\\":\\\"UPDATE material SET amount=$2, update_date=$3 WHERE id = $1;\\\",\\\"update_log_material_cts_edit_amount\\\":\\\"UPDATE log_material_cts_edit_amount SET is_certificate = $2, invoice_no = $3, supplier_id = $4, grade = $5, warehouse_id = $6, tag_weight = $7, supplier_coil = $8, ref_coil_no = $9  WHERE id = $1;\\\",\\\"check_material_qc_by_coil_no\\\":\\\"SELECT id, material_id, user_id, edit_type, amount, create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit,supplier_id,ref_coil_no,tracking_no,is_certificate, supplier_coil FROM log_material_cts_edit_amount where coil_no = $1 and edit_type = true and qc_check = true;\\\",\\\"checkCoilToGen\\\":\\\"SELECT edit_type, amount, create_date, coil_no, invoice_no FROM log_material_cts_edit_amount WHERE ($1::text is null or coil_no LIKE '%' || $1 || '%' ) AND edit_type = true ORDER BY create_date DESC;\\\",\\\"update_material_cer\\\":\\\"UPDATE \\\\\\\"log_material_cts_edit_amount\\\\\\\" SET is_certificate = $4 WHERE material_id = $1 and coil_no = $2 and invoice_no = $3 and edit_type = true;\\\",\\\"update_material_qc_approved\\\":\\\"UPDATE \\\\\\\"log_material_cts_edit_amount\\\\\\\" SET  qc_approve_person = $4, qc_check = $5, check_date = $6 WHERE material_id = $1 and coil_no = $2 and invoice_no = $3 and edit_type = true;\\\",\\\"filter_mgt_data_with_time\\\":\\\"SELECT mat_log.id,oem.company_id , material_id, mat.no, mat.name, mat_log.user_id, edit_type,mat_log.amount, mat_log.create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit  ,mat.image,mat.image_name, mat.imaget_path FROM log_material_cts_edit_amount mat_log LEFT JOIN material mat ON mat.id = mat_log.material_id LEFT JOIN oem oem on oem.id = mat.oem_id  LEFT JOIN company com on com.id = oem.company_id  WHERE  ($1::text is null or mat.no LIKE '%' || $1 || '%' ) AND ($2::text is null or mat.name LIKE '%' || $2 || '%' ) AND company_id = $3 AND check_date BETWEEN $4 AND $5 ORDER BY mat.create_date\\\",\\\"filter_mgt_data_with_out_time\\\":\\\"SELECT mat_log.id,oem.company_id , material_id, mat.no, mat.name, mat_log.user_id, edit_type,mat_log.amount, mat_log.create_date, current_amount, qc_check, check_date, qc_approve_person, coil_no, invoice_no, warehouse_id, tag_weight, actual_weight, grade, unit  ,mat.image,mat.image_name, mat.imaget_path FROM log_material_cts_edit_amount mat_log LEFT JOIN material mat ON mat.id = mat_log.material_id LEFT JOIN oem oem on oem.id = mat.oem_id  LEFT JOIN company com on com.id = oem.company_id  WHERE  ($1::text is null or mat.no LIKE '%' || $1 || '%' ) AND ($2::text is null or mat.name LIKE '%' || $2 || '%' ) AND company_id = $3 \\\",\\\"allMaterialByOEM\\\":\\\"SELECT a.id, a.no,  a.name, material_type_id, material_spec_id,e.name as material_spec, material_size_id,d.name as material_size, buy_price, material_supplier_id, material_unit_id, amount, description, a.remark, a.image, a.user_id, a.oem_id, a.is_active, a.is_use, is_scan_qr, a.create_date, a.update_date, a.image_name, a.imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3, mat_dimention FROM material a   LEFT JOIN oem b on b.id = a.oem_id  LEFT JOIN company c on c.id = b.company_id LEFT JOIN material_size d on a.material_size_id = d.id LEFT JOIN material_spec e on a.material_spec_id = e.id   WHERE oem_id = $1 AND ($2::text is null or a.no ILIKE '%' || $2 || '%') AND ($3::text is null or a.name ILIKE '%' || $3 || '%') AND  b.company_id = $4 \\\",\\\"allMaterialByCOM\\\":\\\"SELECT a.id, a.no,  a.name, material_type_id, material_spec_id,e.name as material_spec, material_size_id,d.name as material_size, buy_price, material_supplier_id, material_unit_id, amount, description, a.remark, a.image, a.user_id, a.oem_id, a.is_active, a.is_use, is_scan_qr, a.create_date, a.update_date, a.image_name, a.imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3, mat_dimention FROM material a   LEFT JOIN oem b on b.id = a.oem_id  LEFT JOIN company c on c.id = b.company_id LEFT JOIN material_size d on a.material_size_id = d.id LEFT JOIN material_spec e on a.material_spec_id = e.id  WHERE ($1::text is null or a.no ILIKE '%' || $1 || '%') AND ($2::text is null or a.name ILIKE '%' || $2 || '%') AND  b.company_id = $3 AND a.is_use = true ORDER BY a.create_date\\\",\\\"allMaterialByCOM//\\\":\\\"SELECT a.id, a.no,  a.name, material_type_id, material_spec_id,e.name as material_spec, material_size_id,d.name as material_size, buy_price, material_supplier_id, material_unit_id, amount, description, a.remark, a.image, a.user_id, a.oem_id, a.is_active, a.is_use, is_scan_qr, a.create_date, a.update_date, a.image_name, a.imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3, mat_dimention FROM material a   LEFT JOIN oem b on b.id = a.oem_id  LEFT JOIN company c on c.id = b.company_id LEFT JOIN material_size d on a.material_size_id = d.id LEFT JOIN material_spec e on a.material_spec_id = e.id   WHERE  ($1::text is null or a.name ILIKE '%' || $1 || '%') AND  b.company_id = $2 \\\",\\\"get_location_by_company\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id FROM warehouse WHERE company_id = $1 AND is_use = true;\\\",\\\"get_supplier_active\\\":\\\"SELECT a.id, a.material_id, a.supplier_id,b.full_name ,a.is_active, a.sort, a.buy_price, a.create_date, a.is_use, a.minimum_order, a.lead_time_days, a.remark FROM material_supplier_relations a LEFT JOIN material_supplier b ON a.supplier_id = b.id WHERE a.is_active = true AND a.material_id = $1;\\\",\\\"get_supplier_by_company\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, supplier_email, supplier_email_person, remark, detail, full_name, supplier_email_person2, line_id, update_by, update_date FROM material_supplier WHERE company_id = $1 AND is_use = true;\\\",\\\"get_product_material\\\":\\\"SELECT id, product_id, material_id,\\\\\\\"d.\\\\\\\" as dimention FROM product_material WHERE material_id = $1;\\\",\\\"check_material_ref_coil\\\":\\\"SELECT id, material_id, coil_no, invoice_no FROM log_material_cts_edit_amount WHERE material_id = $1 AND coil_no = $2;\\\",\\\"getLastTag\\\":\\\"SELECT * FROM log_material_cts_edit_amount WHERE ($1::text is null or tracking_no ILIKE '%' || $1 || '%') AND edit_type = true\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryMatInOutCTS.json?");

/***/ }),

/***/ "./app/query/queryMatInOutSTP.json":
/*!*****************************************!*\
  !*** ./app/query/queryMatInOutSTP.json ***!
  \*****************************************/
/*! exports provided: filter, materialAmountInOut, addLogMaterialAmount, getsumHistory, getDetailHsitory, getHistoryMAT, getLotNo_material, getOldAmount, getDetailLogLot, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"select m.*, mu.name as material_unit from material m left join material_unit mu on m.material_unit_id = mu.id where m.is_use=true AND ($1::text is null or m.no ILIKE '%' || $1 || '%') and ($2::text is null or m.name ILIKE '%' || $2 || '%') and ($3::uuid is null or m.material_type_id = $3) and ($4::uuid is null or m.material_spec_id = $4 ) and ($5::uuid is null or m.material_size_id = $5 ) and ($6::uuid is null or m.material_supplier_id = $6 ) and ($7::uuid is null or m.oem_id = $7 )\\\",\\\"materialAmountInOut\\\":\\\"UPDATE material SET amount=case when amount is null then 0+$1 else amount+$1 end  WHERE id=$2\\\",\\\"addLogMaterialAmount\\\":\\\"INSERT INTO log_materialstp_edit_amount(id, material_id, mat_lot_no, edit_type, amount, user_id, current_amount, create_date, weight_by_tag, actual_weight, ref_lot_no,is_active)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,$12);\\\",\\\"getsumHistory\\\":\\\"SELECT min(a.create_date) as create_date,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_materialstp_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_materialstp_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_materialstp_edit_amount a WHERE a.mat_lot_no != 'null' and a.material_id = $1 GROUP BY a.mat_lot_no order by create_date asc\\\",\\\"getDetailHsitory\\\":\\\"SELECT id, material_id, mat_lot_no, edit_type, amount, user_id, current_amount, create_date, weight_by_tag, actual_weight, ref_lot_no FROM log_materialstp_edit_amount WHERE edit_type = true and mat_lot_no = $1\\\",\\\"getHistoryMAT\\\":\\\"SELECT id, material_id, mat_lot_no, edit_type, amount, user_id, current_amount, create_date, weight_by_tag, actual_weight, ref_lot_no, is_active FROM log_materialstp_edit_amount WHERE material_id = $1 AND mat_lot_no is not null order by create_date desc LIMIT 20\\\",\\\"getLotNo_material\\\":\\\"SELECT a.id, a.material_id, a.user_id,a.edit_type, a.amount, a.create_date, a.mat_lot_no FROM log_materialstp_edit_amount a left join material b on a.material_id = b.id WHERE mat_lot_no ILIKE '%' || $1 || '%' and b.oem_id = $2 and a.edit_type = true order by create_date desc\\\",\\\"getOldAmount\\\":\\\"SELECT amount FROM material WHERE id = $1;\\\",\\\"getDetailLogLot\\\":\\\"SELECT  mat_lot_no, edit_type, weight_by_tag, actual_weight,ref_lot_no FROM log_materialstp_edit_amount WHERE edit_type = true AND mat_lot_no = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryMatInOutSTP.json?");

/***/ }),

/***/ "./app/query/queryMaterailConCts.json":
/*!********************************************!*\
  !*** ./app/query/queryMaterailConCts.json ***!
  \********************************************/
/*! exports provided: filterMaterialByView, filterMaterialByViewhad, filterMaterialByViewhad1, filter2, filter, getMat, getlogMatCTS, getMinOrder, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterMaterialByView\\\":\\\"SELECT * FROM history_material_cts where oem_id = $1 and company_id = $2 and ($3::text is null or \\\\\\\"material no \\\\\\\"  ILIKE '%' || $3 || '%') and ($4::text is null or \\\\\\\"material name\\\\\\\" ILIKE '%' || $4 || '%') AND ($5::timestamp is null or date Between $5 and $6) ORDER by date desc;\\\",\\\"filterMaterialByViewhad\\\":\\\"SELECT * FROM history_material_cts\\\",\\\"filterMaterialByViewhad1\\\":\\\"select c.column_name from information_schema.tables t left join information_schema.columns c on t.table_schema = c.table_schema and t.table_name = c.table_name where table_type = VIEW and t.table_name = $1 and t.table_schema not in ('information_schema', 'pg_catalog')\\\",\\\"filter2\\\":\\\"SELECT a.id, a.material_id, a.user_id, a.edit_type, a.amount, a.create_date as log_create_date, a.current_amount, a.qc_check, a.check_date, a.qc_approve_person, a.coil_no, a.invoice_no, a.warehouse_id, a.tag_weight, a.actual_weight, a.grade, a.unit, a.supplier_id, a.ref_coil_no, a.tracking_no, a.is_certificate, a.supplier_coil, a.lot_no, a.production_order_cts_id,m.*,mu.name as material_unit, sp.name as spec_name FROM log_material_cts_edit_amount as a left join material as m on a.material_id = m.id left join material_unit mu on m.material_unit_id = mu.id left join material_spec as sp on m.material_spec_id = sp.id where m.oem_id = $1 and a.edit_type = false and ($2::text is null or m.no   ILIKE '%' || $2 || '%') and ($3::text is null or m.name  ILIKE '%' || $3 || '%') and ($4::uuid is null or m.material_type_id = $4)and ($7::uuid is null or m.material_spec_id = $7)and ($8::uuid is null or m.material_size_id = $8 )and ($9::uuid is null or m.material_supplier_id = $9)AND ($5::timestamp is null or a.create_date Between $5 and $6) ORDER by a.create_date desc;\\\",\\\"filter\\\":\\\"SELECT a.id, a.material_id, a.user_id, a.edit_type, a.amount, a.create_date as log_create_date, a.current_amount, a.qc_check, a.check_date, a.qc_approve_person, a.coil_no, a.invoice_no, a.warehouse_id, a.tag_weight, a.actual_weight, a.grade, a.unit, a.supplier_id, a.ref_coil_no, a.tracking_no, a.is_certificate, a.supplier_coil, a.lot_no, a.production_order_cts_id,m.no ,m.name,m.amount as material_amount,m.image,m.image_name,m.imaget_path,m.weight_piece,m.coil_weight  FROM log_material_cts_edit_amount as a left join material as m on a.material_id = m.id where m.oem_id = $1 and a.edit_type = false and ($2::text is null or m.no ILIKE '%' || $2 || '%') and ($3::text is null or m.name  ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.create_date Between $4 and $5) ORDER by a.create_date desc;\\\",\\\"getMat\\\":\\\"SELECT a.id, a.no, a.name, a.material_type_id, a.material_spec_id, a.material_size_id, a.buy_price, a.material_supplier_id,a.material_unit_id, a.amount, a.description, a.remark, a.image, a.user_id, a.oem_id, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.image_name, a.imaget_path, a.weight_piece, a.supplier_lead_time, a.minimum_lot, a.minimum_order_supplier, a.material_supplier2_id, a.material_supplier3_id, a.buy_price2, a.buy_price3, a.supplier_lead_time2, a.supplier_lead_time3, a.mat_dimention, a.coil_weight ,mu.name as material_unit, sp.name as spec_name FROM material as a left join material_unit mu on a.material_unit_id = mu.id left join material_spec as sp on a.material_spec_id = sp.id where a.is_use = true and a.oem_id = $1 and ($2::text is null or a.no ILIKE '%' || $2 || '%') and ($3::text is null or a.name  ILIKE '%' || $3 || '%') and ($4::uuid is null or a.material_type_id = $4) and ($5::uuid is null or a.material_spec_id = $5) and ($6::uuid is null or a.material_size_id = $6 ) and ($7::uuid is null or a.material_supplier_id = $7);\\\",\\\"getlogMatCTS\\\":\\\"SELECT  sum(tag_weight) as sum_tag_weight FROM log_material_cts_edit_amount where material_id = $1 and ($2::timestamp is null or create_date Between $2 and $3) and edit_type = false ;\\\",\\\"getMinOrder\\\":\\\"SELECT id, material_id, supplier_id, is_active, sort, buy_price, create_date, is_use, minimum_order, lead_time_days, remark, mat_cycle_time FROM material_supplier_relations where material_id = $1 and is_active = true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryMaterailConCts.json?");

/***/ }),

/***/ "./app/query/queryMaterial.json":
/*!**************************************!*\
  !*** ./app/query/queryMaterial.json ***!
  \**************************************/
/*! exports provided: add, update, updateNoAmount, del, findById, findByNo, update_material_desktop, insert_log_material_edit_mount, filter, filterwittoutOEM, checkNoMaterial, checkNoMaterial2, checkNameMaterial, checkNoMaterial_edit, getMaterialType, getMaterialSpec, getMaterialSize, getMaterialSupplier, findMaterialTypeByName, findMaterialSpecByName, findMaterialSizeByName, findMaterialSupplierByName, materialAmountInOut, addLogMaterialAmount, getValueAmount, findMaterialByName, getHistory, getsumHistory, getdataHistory, getdataAllHistory, check_supplier_del, DeleteMSforUpdate, checkMaterialSupplier, updateMaerialSupplier, addMaterialSupplier, get_supplier, get_supplier_active, update_sort, getHistoryMAT, filltermatsize, checkNoMaterialsize, CheckSortMatsize, addmatsize, checkNameMaterialsize_edit, updateMatsize, findBynamesize, delmatsize, filltermatspec, findBynamespec, checkNoMaterialspec, CheckSortMatspec, addmatspec, checkNameMaterialspec_edit, updateMatspec, delmatspec, filltermattype, findBynametype, checkNoMaterialtype, CheckSortMattype, addmattype, checkNameMaterialtype_edit, updateMattype, delmattype, filltermodel_category, delmc, findBymcid, checkMCname, CheckSortMc, addmc, checkMc_edit, updateMc, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"material\\\\\\\" (id, no, name, material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, remark, image, image_name, imaget_path, user_id, oem_id, is_active, is_use, is_scan_qr,weight_piece,supplier_lead_time,minimum_lot, minimum_order_supplier, create_date, update_date, coil_weight)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27);\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"material\\\\\\\" SET no=$1, name=$2, material_type_id=$3, material_spec_id=$4, material_size_id=$5, buy_price=$6, material_supplier_id=$7, material_unit_id=$8, amount=$9, description=$10, remark=$11, image=$12, image_name=$13, imaget_path=$14, user_id=$15, oem_id=$16, is_active=$17, update_date=$18 ,weight_piece=$19,supplier_lead_time=$20,minimum_lot=$21, minimum_order_supplier=$22, coil_weight=$24 WHERE  id=$23\\\",\\\"updateNoAmount\\\":\\\"UPDATE \\\\\\\"material\\\\\\\" SET no=$1, name=$2, material_type_id=$3, material_spec_id=$4, material_size_id=$5, buy_price=$6, material_supplier_id=$7, material_unit_id=$8, description=$9, remark=$10, image=$11, image_name=$12, imaget_path=$13, user_id=$14, oem_id=$15, is_active=$16, update_date=$17 ,weight_piece=$18,supplier_lead_time=$19,minimum_lot=$20, minimum_order_supplier=$21, coil_weight=$23 WHERE  id=$22\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"material\\\\\\\" SET is_use =false WHERE  id=$1;\\\",\\\"findById\\\":\\\"select id, no, name, material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, remark, image, user_id, oem_id, is_active, is_use, is_scan_qr, create_date, update_date, image_name, imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, coil_weight from \\\\\\\"material\\\\\\\" where id=$1\\\",\\\"findByNo\\\":\\\"SELECT a.id,a.no,b.name,amount,a.material_size_id FROM \\\\\\\"material\\\\\\\" a LEFT JOIN \\\\\\\"material_size\\\\\\\" b on a.material_size_id = b.id where no = $1 and a.oem_id = $2 and a.is_use = true\\\",\\\"update_material_desktop\\\":\\\"UPDATE \\\\\\\"material\\\\\\\" SET amount = $2 where no = $1 and oem_id = $3 and is_use = true\\\",\\\"insert_log_material_edit_mount\\\":\\\"INSERT INTO \\\\\\\"log_material_edit_amount\\\\\\\" (id,material_id,user_id,edit_type,amount,create_date)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"filter\\\":\\\"select m.*, mu.name as material_unit, sp.name as spec_name from material m left join material_unit mu on m.material_unit_id = mu.id left join material_spec as sp on m.material_spec_id = sp.id where m.is_use=true AND ($1::text is null or m.no ILIKE '%' || $1 || '%') and ($2::text is null or m.name ILIKE '%' || $2 || '%') and ($3::uuid is null or m.material_type_id = $3) and ($4::uuid is null or m.material_spec_id = $4 ) and ($5::uuid is null or m.material_size_id = $5 ) and ($6::uuid is null or m.material_supplier_id = $6 ) and ($7::uuid is null or m.oem_id = $7 ) and ($8::boolean is null or m.amount > m.minimum_lot)\\\",\\\"filterwittoutOEM\\\":\\\"select m.*, mu.name as material_unit, sp.name as spec_name from material m left join material_unit mu on m.material_unit_id = mu.id  inner join oem a on a.id = m.oem_id inner join company b on b.id = a.company_id left join material_spec as sp on m.material_spec_id = sp.id where m.is_use=true AND ($1::text is null or m.no ILIKE '%' || $1 || '%') and ($2::text is null or m.name ILIKE '%' || $2 || '%') and ($3::uuid is null or m.material_type_id = $3) and ($4::uuid is null or m.material_spec_id = $4 ) and ($5::uuid is null or m.material_size_id = $5 ) and ($6::uuid is null or m.material_supplier_id = $6) and  b.id = $7 and ($8::boolean is null or m.amount > m.minimum_lot)\\\",\\\"checkNoMaterial\\\":\\\"select id,no,oem_id from \\\\\\\"material\\\\\\\" where no = $1 and oem_id = $2 and is_use = true \\\",\\\"checkNoMaterial2\\\":\\\"select id,no from \\\\\\\"material\\\\\\\" where no = $1 and oem_id = $2 and is_use = true \\\",\\\"checkNameMaterial\\\":\\\"select id,no from \\\\\\\"material\\\\\\\" where name = $1 and is_use = true and oem_id=$2\\\",\\\"checkNoMaterial_edit\\\":\\\"select id,no from \\\\\\\"material\\\\\\\" where no = $1 and id != $2 and oem_id = $3 and is_use = true\\\",\\\"getMaterialType\\\":\\\"SELECT id,name FROM \\\\\\\"material_type\\\\\\\" WHERE is_use=true and company_id=$1 ORDER BY sort ASC \\\",\\\"getMaterialSpec\\\":\\\"SELECT id,name FROM \\\\\\\"material_spec\\\\\\\" WHERE is_use=true and company_id=$1 ORDER BY sort ASC \\\",\\\"getMaterialSize\\\":\\\"SELECT id,name FROM \\\\\\\"material_size\\\\\\\" WHERE is_use=true and company_id=$1 ORDER BY sort ASC \\\",\\\"getMaterialSupplier\\\":\\\"SELECT id,name FROM \\\\\\\"material_supplier\\\\\\\" WHERE is_use=true and company_id=$1 ORDER BY sort ASC \\\",\\\"findMaterialTypeByName\\\":\\\"SELECT id,name FROM \\\\\\\"material_type\\\\\\\" WHERE is_use=true and name ILIKE $1\\\",\\\"findMaterialSpecByName\\\":\\\"SELECT id,name FROM \\\\\\\"material_spec\\\\\\\" WHERE is_use=true and name ILIKE $1\\\",\\\"findMaterialSizeByName\\\":\\\"SELECT id,name FROM \\\\\\\"material_size\\\\\\\" WHERE is_use=true and name ILIKE $1\\\",\\\"findMaterialSupplierByName\\\":\\\"SELECT id,name FROM \\\\\\\"material_supplier\\\\\\\" WHERE is_use=true and name ILIKE $1\\\",\\\"materialAmountInOut\\\":\\\"UPDATE material SET amount=case when amount is null then 0+$1 else amount+$1 end  WHERE id=$2\\\",\\\"addLogMaterialAmount\\\":\\\"INSERT INTO log_material_edit_amount(id, material_id, user_id, edit_type, amount, create_date, mat_lot_no) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"getValueAmount\\\":\\\"SELECT CASE WHEN amount is null then 0+$1 else amount+$1 end as amount from material where id=$2\\\",\\\"findMaterialByName\\\":\\\"SELECT id, no, name FROM material where is_use = true and no ILIKE $1\\\",\\\"getHistory\\\":\\\"SELECT id, material_id, user_id, edit_type, amount, create_date, mat_lot_no FROM log_material_edit_amount where material_id = $1 and mat_lot_no != 'null' order by create_date\\\",\\\"getsumHistory\\\":\\\"SELECT min(a.create_date) as create_date,min(a.exprire_date) as exprire_date,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_edit_amount a WHERE a.mat_lot_no != 'null' and a.material_id = $1 GROUP BY a.mat_lot_no order by create_date asc\\\",\\\"getdataHistory\\\":\\\"SELECT min(a.create_date) as create_date ,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0) FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_edit_amount a WHERE a.material_id = $1 and a.mat_lot_no = $2 GROUP BY a.mat_lot_no\\\",\\\"getdataAllHistory\\\":\\\"SELECT a.id, (SELECT coalesce(SUM(b.amount),0) FROM material b WHERE b.id = a.id ) - ((SELECT  coalesce(SUM(b.amount),0)FROM public.log_material_edit_amount b WHERE b.material_id = a.id and b.mat_lot_no != 'null' and b.edit_type = true) - (SELECT  coalesce(SUM(b.amount),0) FROM public.log_material_edit_amount b WHERE b.material_id = a.id and b.mat_lot_no != 'null' and b.edit_type = false))as amount FROM material a WHERE a.amount IS NOT null and id = $1 GROUP BY a.id\\\",\\\"check_supplier_del\\\":\\\"SELECT id, material_id, supplier_id, is_active, sort, buy_price FROM material_supplier_relations WHERE material_id = $1;\\\",\\\"DeleteMSforUpdate\\\":\\\"DELETE FROM material_supplier_relations WHERE material_id = $1 and supplier_id = $2\\\",\\\"checkMaterialSupplier\\\":\\\"SELECT id, material_id, supplier_id, is_active, sort, buy_price FROM material_supplier_relations WHERE material_id = $1 and supplier_id = $2\\\",\\\"updateMaerialSupplier\\\":\\\"UPDATE material_supplier_relations SET buy_price=$2, is_active = $3, sort=$4, create_date = $5, minimum_order =$6, lead_time_days =$7, remark =$8, mat_cycle_time =$9 WHERE id = $1;\\\",\\\"addMaterialSupplier\\\":\\\"INSERT INTO material_supplier_relations(id, material_id, supplier_id, is_active, sort, buy_price, create_date,is_use,minimum_order,lead_time_days,remark,mat_cycle_time)VALUES ($1, $2, $3, $4, $5, $6, $7,$8,$9,$10,$11,$12);\\\",\\\"get_supplier\\\":\\\"SELECT msr.id, material_id, supplier_id, msr.is_active, msr.sort, buy_price, name as supplier,msr.create_date,msr.minimum_order, msr.lead_time_days, msr.remark, msr.mat_cycle_time FROM material_supplier_relations msr left join material_supplier ms on msr.supplier_id = ms.id WHERE material_id = $1;\\\",\\\"get_supplier_active\\\":\\\"SELECT msr.id, material_id, supplier_id, msr.is_active, msr.sort, buy_price, name as supplier,msr.create_date,msr.minimum_order, msr.lead_time_days, msr.remark, msr.mat_cycle_time FROM material_supplier_relations msr left join material_supplier ms on msr.supplier_id = ms.id WHERE material_id = $1 AND msr.is_active = true;\\\",\\\"update_sort\\\":\\\"UPDATE material_supplier_relations SET sort=$2 WHERE id = $1;\\\",\\\"getHistoryMAT\\\":\\\"SELECT id, material_id, user_id, edit_type, amount, create_date, mat_lot_no, tag_no FROM log_material_edit_amount WHERE material_id = $1 AND mat_lot_no is not null order by create_date desc LIMIT 20\\\",\\\"filltermatsize\\\":\\\"SELECT * FROM material_size where is_use = 'true' and  company_id = $2  and ($1::text is null or name ILIKE '%' || $1 || '%');\\\",\\\"checkNoMaterialsize\\\":\\\"select name from \\\\\\\"material_size\\\\\\\" where name = $1 and is_use = true and  company_id = $2\\\",\\\"CheckSortMatsize\\\":\\\"SELECT max(sort) FROM \\\\\\\"material_size\\\\\\\" \\\",\\\"addmatsize\\\":\\\"INSERT INTO \\\\\\\"material_size\\\\\\\" (id,company_id,name,is_use,sort,remark,update_date,update_by)VALUES ($1,$2,$3,$4,$5,$6,$7,$8);\\\",\\\"checkNameMaterialsize_edit\\\":\\\"select * from \\\\\\\"material_size\\\\\\\" where id != $1 and is_use = true and company_id = $2 and name =$3 \\\",\\\"updateMatsize\\\":\\\"UPDATE \\\\\\\"material_size\\\\\\\" SET  name = $2, remark = $3,update_date= $4,update_by=$5 WHERE id = $1\\\",\\\"findBynamesize\\\":\\\"SELECT id, company_id, name, is_use, sort,remark FROM material_size where is_use = 'true' and  id = $1;\\\",\\\"delmatsize\\\":\\\"UPDATE \\\\\\\"material_size\\\\\\\" SET is_use ='false',update_by= $2,update_date=$3 WHERE  id=$1;\\\",\\\"filltermatspec\\\":\\\"SELECT * FROM material_spec where is_use = 'true' and  company_id = $2  and ($1::text is null or name ILIKE '%' || $1 || '%');\\\",\\\"findBynamespec\\\":\\\"SELECT id, company_id, name, is_use, sort,remark FROM material_spec where is_use = 'true' and  id = $1;\\\",\\\"checkNoMaterialspec\\\":\\\"select name from \\\\\\\"material_spec\\\\\\\" where name = $1 and is_use = true and  company_id = $2\\\",\\\"CheckSortMatspec\\\":\\\"SELECT max(sort) FROM \\\\\\\"material_spec\\\\\\\" \\\",\\\"addmatspec\\\":\\\"INSERT INTO \\\\\\\"material_spec\\\\\\\" (id,company_id,name,is_use,sort,remark,update_date,update_by)VALUES ($1,$2,$3,$4,$5,$6,$7,$8);\\\",\\\"checkNameMaterialspec_edit\\\":\\\"select * from \\\\\\\"material_spec\\\\\\\" where id != $1 and is_use = true and  company_id = $2 and name =$3 \\\",\\\"updateMatspec\\\":\\\"UPDATE \\\\\\\"material_spec\\\\\\\" SET  name = $2, remark = $3,update_date= $4,update_by=$5  WHERE id = $1\\\",\\\"delmatspec\\\":\\\"UPDATE \\\\\\\"material_spec\\\\\\\" SET is_use ='false',update_by= $2,update_date=$3 WHERE  id=$1;\\\",\\\"filltermattype\\\":\\\"SELECT * FROM material_type where is_use = 'true' and  company_id = $2  and ($1::text is null or name ILIKE '%' || $1 || '%');\\\",\\\"findBynametype\\\":\\\"SELECT id, company_id, name, is_use, sort,remark FROM material_type where is_use = 'true' and  id = $1;\\\",\\\"checkNoMaterialtype\\\":\\\"select name from \\\\\\\"material_type\\\\\\\" where name = $1 and is_use = true and  company_id = $2\\\",\\\"CheckSortMattype\\\":\\\"SELECT max(sort) FROM \\\\\\\"material_type\\\\\\\" \\\",\\\"addmattype\\\":\\\"INSERT INTO \\\\\\\"material_type\\\\\\\" (id,company_id,name,is_use,sort,remark,update_date,update_by)VALUES ($1,$2,$3,$4,$5,$6,$7,$8);\\\",\\\"checkNameMaterialtype_edit\\\":\\\"select * from \\\\\\\"material_type\\\\\\\" where id != $1 and is_use = true and  company_id = $2 and name =$3\\\",\\\"updateMattype\\\":\\\"UPDATE \\\\\\\"material_type\\\\\\\" SET  name = $2, remark = $3,  update_by= $4,update_date=$5  WHERE id = $1\\\",\\\"delmattype\\\":\\\"UPDATE \\\\\\\"material_type\\\\\\\" SET is_use ='false',update_by= $2,update_date=$3  WHERE  id=$1;\\\",\\\"filltermodel_category\\\":\\\"SELECT * FROM product_model where is_use = 'true' and  oem_id = $2  and ($1::text is null or name ILIKE '%' || $1 || '%');\\\",\\\"delmc\\\":\\\"UPDATE \\\\\\\"product_model\\\\\\\" SET is_use ='false',update_by= $2,update_date=$3 WHERE  id=$1;\\\",\\\"findBymcid\\\":\\\"SELECT * FROM product_model where is_use = 'true' and  id = $1;\\\",\\\"checkMCname\\\":\\\"select name from \\\\\\\"product_model\\\\\\\" where name = $1 and is_use = true and  oem_id = $2\\\",\\\"CheckSortMc\\\":\\\"SELECT max(sort) FROM \\\\\\\"product_model\\\\\\\" \\\",\\\"addmc\\\":\\\"INSERT INTO \\\\\\\"product_model\\\\\\\" (id,oem_id,name,is_use,sort,remark,update_date,update_by)VALUES ($1,$2,$3,$4,$5,$6,$7,$8);\\\",\\\"checkMc_edit\\\":\\\"select * from \\\\\\\"product_model\\\\\\\" where id != $1 and is_use = true and  oem_id = $2 and name =$3\\\",\\\"updateMc\\\":\\\"UPDATE \\\\\\\"product_model\\\\\\\" SET  name = $2, remark = $3,  update_by= $4,update_date=$5  WHERE id = $1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryMaterial.json?");

/***/ }),

/***/ "./app/query/queryMaterialPlaning.json":
/*!*********************************************!*\
  !*** ./app/query/queryMaterialPlaning.json ***!
  \*********************************************/
/*! exports provided: filterMaterialPlaning, addMaterialForcast, findByProductForcast, updateMaterialForcast, filterMaterialConsumption, check_order, add_order, updateListMaterial, cancle_order, filter_order, filter_orderByDate, Getminmatlot, Getordermat, Getsupier, GetOSLByID, GetMaterialByID, getlist_matetailById, GetDetailsByMatID, GetMSRdetail, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterMaterialPlaning\\\":\\\"select pc.year_month, m.oem_id,m.material_supplier_id,m.supplier_lead_time,msu.name material_supplier, m.no,m.name,mt.name material_type ,mu.name material_unit ,ms.name material_spec,msi.name material_size ,m.buy_price,pc.in_hand_amount ,pc.amount_forcast product_amount,pc.id product_forcast_id,pm.id product_material_id from product_forcast pc left join product_material pm on pc.product_id = pm.product_id left join material m on pm.material_id = m.id left join material_type mt on m.material_type_id = mt.id left join material_unit mu on m.material_unit_id = mu.id left join material_spec ms on m.material_spec_id = ms.id left join material_size msi on m.material_size_id = msi.id left join material_supplier msu on m.material_supplier_id = msu.id where m.is_use =true and ($1::INTEGER is null or pc.year_month = $1) and ($2::text is null or m.no ILIKE '%' || $2 || '%') and($3::text is null or m.name ILIKE '%' || $3 || '%') and($4::uuid is null or m.material_type_id = $4) and($5::uuid is null or m.material_spec_id = $5) and($6::uuid is null or m.material_size_id = $6) and($7::uuid is null or m.material_supplier_id = $7) and m.oem_id = $8\\\",\\\"addMaterialForcast\\\":\\\"INSERT INTO material_forcast(id, product_material_id, product_forcast_id, amount, product_amount, user_id, create_date, update_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\\\",\\\"findByProductForcast\\\":\\\"select * from material_forcast where product_material_id =$1 and product_forcast_id=$2\\\",\\\"updateMaterialForcast\\\":\\\"UPDATE material_forcast SET amount=$1, product_amount=$2, user_id=$3, update_date=$4 WHERE id=$5\\\",\\\"filterMaterialConsumption\\\":[\\\"select \\\",\\\"m.no,m.name,mt.name material_type,m.material_type_id, mu.name material_unit,m.material_unit_id\\\",\\\",ms.name material_spec, m.material_spec_id,msi.name material_size,m.material_size_id, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=1) and EXTRACT(isoyear FROM create_date) = $1) m1, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=2) and EXTRACT(isoyear FROM create_date) = $1) m2, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=3) and EXTRACT(isoyear FROM create_date) = $1) m3, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=4) and EXTRACT(isoyear FROM create_date) = $1) m4, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=5) and EXTRACT(isoyear FROM create_date) = $1) m5, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=6) and EXTRACT(isoyear FROM create_date) = $1) m6, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=7) and EXTRACT(isoyear FROM create_date) = $1) m7, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=8) and EXTRACT(isoyear FROM create_date) = $1) m8, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=9) and EXTRACT(isoyear FROM create_date) = $1) m9, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=10) and EXTRACT(isoyear FROM create_date) = $1) m10, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=11) and EXTRACT(isoyear FROM create_date) = $1) m11, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and( EXTRACT(MONTH FROM create_date)=12) and EXTRACT(isoyear FROM create_date) = $1) m12, \\\",\\\"(select sum(amount) from log_material_edit_amount where material_id =m.id and edit_type=false and EXTRACT(isoyear FROM create_date) = $1) y \\\",\\\"from material m \\\",\\\"left join material_type mt ON mt.id = m.material_type_id \\\",\\\"left join material_unit mu ON mu.id = m.material_unit_id \\\",\\\"left join material_spec ms ON ms.id = m.material_spec_id \\\",\\\"left join material_size msi ON msi.id = m.material_size_id \\\",\\\"where m.is_use=true and ($2::uuid is null or m.oem_id = $2)\\\"],\\\"check_order\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by FROM material_order where order_no ILIKE '%' || $1 || '%' and oem_id =$2\\\",\\\"add_order\\\":\\\"INSERT INTO material_order(id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product,oem_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\\\",\\\"updateListMaterial\\\":\\\"UPDATE material_order SET  list_product= $2 , list_header= $3  WHERE id = $1 ;\\\",\\\"cancle_order\\\":\\\"UPDATE material_order SET is_active = false, cancle_by =$2 where id = $1\\\",\\\"filter_order\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product as list_material, list_header, oem_id FROM \\\\\\\"material_order\\\\\\\"  where is_active = true and is_use = true and  ($1::text is null or order_no ILIKE '%' || $1 || '%') and oem_id = $2 ORDER BY create_date desc\\\",\\\"filter_orderByDate\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product as list_material, list_header, oem_id FROM \\\\\\\"material_order\\\\\\\"  where is_active = true and is_use = true and  ($1::text is null or order_no ILIKE '%' || $1 || '%') and create_date BETWEEN $2 AND $3 and oem_id = $4 ORDER BY create_date desc\\\",\\\"Getminmatlot\\\":\\\"SELECT m.id,no, m.name as material_name,ms.name as supplier_name,material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, m.remark, image, user_id, oem_id, is_active, m.is_use, is_scan_qr, create_date, update_date, image_name, imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3 FROM material m left join product_material pm on m.id=pm.material_id left join material_supplier ms on ms.id = m.material_supplier_id where pm.id =$1 ;\\\",\\\"Getordermat\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product as list_mat, list_header from material_order where id  = $1;\\\",\\\"Getsupier\\\":\\\"SELECT ms.id, company_id, name, ms.is_use, ms.sort, contact_name, contact_tel, contact_fax, supplier_email, supplier_email_person, remark, detail, full_name, supplier_email_person2 FROM material_supplier ms left join material_supplier_relations msr  on msr.supplier_id = ms.id where msr.is_active = 'true' and ms.company_id = $1 ;\\\",\\\"GetOSLByID\\\":\\\"SELECT id, customer, refpo, oslno, partno_list, created_date, created_by, oem_id, process_id, start_plan, manpower, calculate, end_plan FROM log_osl where id = $1;\\\",\\\"GetMaterialByID\\\":\\\"SELECT id, no, name, material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, remark, image, user_id, oem_id, is_active, is_use, is_scan_qr, create_date, update_date, image_name, imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3 FROM material WHERE id = $1;\\\",\\\"getlist_matetailById\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product as list_material, list_header, oem_id FROM material_order where id = $1;\\\",\\\"GetDetailsByMatID\\\":\\\"SELECT m.id, m.no, m.name, m.material_type_id,mt.name as material_type, m.material_spec_id,mp.name as material_spec,m.material_size_id,ms.name as material_size, m.buy_price, m.material_supplier_id,msp.name as supplier_name,m.material_unit_id,mu.name as material_unit, m.amount  FROM material m left join material_size ms on m.material_size_id = ms.id left join material_type mt on mt.id = m.material_type_id left join material_spec mp on mp.id = m.material_spec_id left join material_supplier msp on msp.id = m.material_supplier_id left join material_unit mu on mu.id = m.material_unit_id   where m.id = $1\\\",\\\"GetMSRdetail\\\":\\\"SELECT msr.id, msr.material_id, msr.supplier_id, msr.is_active, msr.sort, msr.buy_price, msr.create_date, msr.is_use, msr.minimum_order, msr.lead_time_days, msr.remark,ms.contact_name,ms.supplier_email,ms.contact_tel,ms.contact_fax FROM material_supplier_relations msr left join material_supplier ms on msr.supplier_id = ms.id where msr.material_id = $1 and msr.is_active = true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryMaterialPlaning.json?");

/***/ }),

/***/ "./app/query/queryOrderSummary.json":
/*!******************************************!*\
  !*** ./app/query/queryOrderSummary.json ***!
  \******************************************/
/*! exports provided: filterOSLByNo, filterOSLByNo2, getSection, getProcess, getMachine, getOrder, getDay_off, getDay_off_detail, GetList_productByOrder, GetOrder_product_test, GetCycle_timeByListProduct, GetCycle_timeByProductId, GetProductByProductId, GetProduct_Detail, GetnotsumcycletimeByproductId, GetInhandById, check_osl_no, AddOSL_log, UpdateOSL_log, findOSLById, getProcessByProductID, GetOrder_product, GetOSL_table, findMachineByProcessId, Addtageno, checktag, checkolstag, SetActualOSL, getMachineByProductId, getMaterial_lot, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterOSLByNo\\\":\\\"SELECT id, customer, refpo, oslno, partno_list, created_date, created_by, oem_id, process_id, start_plan, manpower, calculate,is_draft FROM \\\\\\\"log_osl\\\\\\\" where ($1::text is null or oslno ILIKE '%' || $1 || '%') AND oem_id = $2 AND is_draft is not true order by created_date desc\\\",\\\"filterOSLByNo2\\\":\\\"SELECT id, customer, refpo, oslno, partno_list, created_date, created_by, oem_id, process_id, start_plan, manpower, calculate,is_draft FROM \\\\\\\"log_osl\\\\\\\" where ($1::text is null or oslno ILIKE '%' || $1 || '%') AND oem_id = $2 AND is_draft = true order by created_date desc\\\",\\\"getSection\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM section WHERE is_use = true AND oem_id = $1\\\",\\\"getProcess\\\":\\\"SELECT id, section_id, process_name, is_use, sort FROM process WHERE is_use = true AND section_id = $1\\\",\\\"getMachine\\\":\\\"SELECT  machine_id,machine_name,process_id,mp.is_use FROM machine_process mp left join matchine m on mp.machine_id = m.id WHERE mp.is_use = true AND mp.process_id = $1\\\",\\\"getOrder\\\":\\\"SELECT * FROM product_order ORDER BY order_no DESC FETCH FIRST ROW ONLY\\\",\\\"getDay_off\\\":\\\"SELECT count(*) FROM day_off WHERE date_off BETWEEN $1 AND $2 ;\\\",\\\"getDay_off_detail\\\":\\\"SELECT id, name, day_off FROM day_off WHERE date_off BETWEEN $1 AND $2 ;\\\",\\\"GetList_productByOrder\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product FROM product_order where id = $1\\\",\\\"GetOrder_product_test\\\":\\\"SELECT product_id,SUM(amount)as amount FROM product_forcast where (product_order_id = $1 or product_order_id = $2 or product_order_id = $3 or product_order_id = $4 or product_order_id = $5 or product_order_id = $6 or product_order_id = $7 or product_order_id = $8 or product_order_id = $9 or product_order_id = $10)  and amount > 0 GROUP BY product_id  ORDER BY amount DESC\\\",\\\"GetCycle_timeByListProduct\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id FROM public.cycle_time where product_id = $1 and process_id = $2 and is_use = true\\\",\\\"GetCycle_timeByProductId\\\":\\\"SELECT product_id,SUM(cycle_time)as cycle_time FROM cycle_time where product_id = $1 and ( ($2::uuid is null or process_id =$2) or process_id = $3 or process_id = $4 or process_id = $5 or process_id = $6 or process_id = $7 or process_id = $8 or process_id = $9 or process_id = $10 or process_id = $11 or process_id = $12 or process_id = $13 or process_id = $14 or process_id = $15 or process_id = $16 or process_id = $17 or process_id = $18 or process_id = $19 or process_id = $20 or process_id = $21) group by product_id\\\",\\\"GetProductByProductId\\\":\\\"SELECT p.id, p.no, p.name,ct.process_id FROM product p left join cycle_time ct on p.id = ct.product_id WHERE p.id = $1 \\\",\\\"GetProduct_Detail\\\":\\\"SELECT A.product_id, A.material_id, wt_mtr, c_leng, cos_pc, B.no AS mat_no,D.name AS mat_size, F.name AS mat_type,E.name AS mat_spec,G.name AS product_route , I.name AS Customer FROM product_material A LEFT JOIN material B ON B.id = A.material_id LEFT JOIN product_detail C ON C.product_id = A.product_id LEFT JOIN material_size D ON D.id = B.material_size_id LEFT JOIN material_spec E ON E.id = B.material_spec_id LEFT JOIN material_type F ON F.id = B.material_type_id LEFT JOIN product_route G ON G.id = C.product_route_id LEFT JOIN product_customer H ON H.product_id = C.product_id LEFT JOIN customer I ON I.id = H.customer_id WHERE A.product_id = $1\\\",\\\"GetnotsumcycletimeByproductId\\\":\\\"SELECT p.id, machine_id, line_id, process_id,pc.process_name, cycle_time,  product_id,p.name as product_name FROM cycle_time ct left join product p on p.id = ct.product_id left join process pc on ct.process_id = pc.id where ct.product_id = $1\\\",\\\"GetInhandById\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item, dip_amount FROM product where id = $1;\\\",\\\"check_osl_no\\\":\\\"SELECT count(*) FROM log_osl\\\",\\\"AddOSL_log\\\":\\\"INSERT INTO log_osl (id, customer, refpo, oslno, partno_list, created_date, created_by, oem_id, process_id, start_plan, manpower, calculate, end_plan,is_draft)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);\\\",\\\"UpdateOSL_log\\\":\\\"UPDATE log_osl SET customer=$2, refpo=$3, partno_list=$4 , process_id=$5, start_plan=$6, manpower=$7, calculate=$8, end_plan=$9, is_draft = $10 WHERE id =$1 ;\\\",\\\"findOSLById\\\":\\\"SELECT o.name as oem_name,os.id,os.customer, os.refpo, os.oslno,os.partno_list,os.created_date,os.created_by, os.oem_id, os.process_id, os.start_plan,os.manpower, os.calculate, os.end_plan FROM log_osl os left join oem o on os.oem_id=o.id where os.id = $1;\\\",\\\"getProcessByProductID\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id, sort FROM cycle_time where product_id = $1 and is_use = true;\\\",\\\"GetOrder_product\\\":\\\"SELECT id, product_id, year_month, amount, amount_forcast, wip_amount, fg_amount, in_hand_amount, user_id, create_date, update_date, product_order_id FROM product_forcast where product_order_id = $1 and amount > 0\\\",\\\"GetOSL_table\\\":\\\"SELECT po.order_no,pd.no, pd.name ,pc.process_name,pf.amount,ct.cycle_time FROM product pd left join cycle_time ct on pd.id = ct.product_id left join process pc on ct.process_id = pc.id left join product_forcast pf on pf.product_id = pd.id left join product_order po on po.id = pf.product_order_id WHERE po.order_no = $1 and ct.process_id = $2 and pc.is_use = 'true' and pf.amount > 0 ;\\\",\\\"findMachineByProcessId\\\":\\\"SELECT mp.id, machine_id, process_id,process_name,machine_name, m.oem_id FROM machine_process mp left join matchine m on m.id = mp.machine_id left join process p on mp.process_id = p.id where mp.process_id = $1 and m.oem_id = $2 and mp.is_use = true\\\",\\\"Addtageno\\\":\\\"INSERT INTO log_history_tracking (id, track_list, created_date, created_by, tag_no, oem_id)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"checktag\\\":\\\"SELECT id, track_list, created_date, created_by, tag_no FROM log_history_tracking where tag_no ILIKE '%' || $1 || '%'\\\",\\\"checkolstag\\\":\\\"SELECT oslno FROM log_osl where oslno ILIKE '%' || $1 || '%'\\\",\\\"SetActualOSL\\\":\\\"UPDATE log_osl SET partno_list = $2 WHERE id = $1;\\\",\\\"getMachineByProductId\\\":\\\"SELECT mp.id, mp.machine_id, mp.product_id, mp.sort, mp.create_date,m.machine_name FROM machine_product mp left join matchine m on mp.machine_id = m.id WHERE product_id = $1;\\\",\\\"getMaterial_lot\\\":\\\"SELECT max(a.exprire_date) as exprire_date ,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_edit_amount a WHERE a.mat_lot_no != 'null' and a.material_id = $1 GROUP BY a.mat_lot_no order by exprire_date asc\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryOrderSummary.json?");

/***/ }),

/***/ "./app/query/queryPackInOutCTS.json":
/*!******************************************!*\
  !*** ./app/query/queryPackInOutCTS.json ***!
  \******************************************/
/*! exports provided: filterProductPack, get_lot_Pack, getlotNo, checklotnoByID, getLastTag, inSavelogPack, OutSavelogPack, getLotInStock, GetLotPackDetail1, GetLotPackDetail, GetLotCTSDetail, GetLotPackHistrory, GetLotOutPackDetail, getLotInStockKg, getLotInStockPiece, getLotPackFilter, getProductionOrder, checkPackToGen, checkBoxToGen, check_product_ref_box, getPackloginreport, GetLotWipPackDetail, getProductionOrderDetail, chackbox, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterProductPack\\\":\\\"SELECT a.id as product_id, a.no as product_no, a.name as product_name, a.product_model_id, a.qty_unit, a.user_id, a.oem_id, a.wip_amount, a.fg_amount, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.cut_amount, a.min_product, a.min_lot, a.is_assy, a.logistic_amount, a.end_user_amount, a.product_plants_item, a.dip_amount, a.is_trade, a.surface, a.\\\\\\\"N/W (g.)\\\\\\\" as nw, b.image,b.image_name, b.imaget_path FROM product as a left join product_detail as b on a.id = b.product_id where a.oem_id = $1 and a.is_use = true and ($2::text is null or a.no ILIKE '%' || $2 || '%') and ($3::text is null or a.name ILIKE '%' || $3 || '%');\\\",\\\"get_lot_Pack\\\":\\\"SELECT min(a.create_date) as create_date,a.unit_amount,(SELECT coalesce(sum(b.unit_amount),0) FROM log_pack_edit_amount_cts b where b.unit_amount = a.unit_amount and b.edit_type = true and b.product_id =  $1) - (SELECT coalesce(sum(b.unit_amount),0) FROM log_pack_edit_amount_cts b where b.unit_amount = a.unit_amount and b.edit_type = false and b.product_id =  $1) as amount FROM log_pack_edit_amount_cts a WHERE a.unit_amount != null and a.product_id = $1 GROUP BY a.unit_amount order by create_date desc;\\\",\\\"getlotNo\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no, a.qc_date,b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM log_wip_chup_edit_amount_cts as a left join product as b on a.product_id = b.id where edit_type = false and ($1::timestamp is null or a.update_date Between $1 and $2);\\\",\\\"checklotnoByID\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no FROM log_pack_edit_amount_cts where wip_chup_lot_no = $1 and edit_type = true;\\\",\\\"getLastTag\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount FROM log_pack_edit_amount_cts WHERE ($1::text is null or tracking_tag_pack_chup ILIKE '%' || $1 || '%') AND edit_type = true;\\\",\\\"inSavelogPack\\\":\\\"INSERT INTO log_pack_edit_amount_cts(id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount, pack_lot_no,box_no,box_date,ref_box_no) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);\\\",\\\"OutSavelogPack\\\":\\\"INSERT INTO log_pack_edit_amount_cts(id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount, pack_lot_no) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);\\\",\\\"getLotInStock\\\":\\\"SELECT min(a.create_date) as create_date, a.pack_no,(SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where  b.pack_no = a.pack_no and b.edit_type = true and b.product_id =  $1) -(SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.pack_no = a.pack_no and b.edit_type = false and b.product_id =  $1) as weight_amount , (SELECT coalesce(sum(b.piece_amount),0) FROM log_pack_edit_amount_cts b where  b.pack_no = a.pack_no and b.edit_type = true and b.product_id =  $1) - (SELECT coalesce(sum(b.piece_amount),0) FROM log_pack_edit_amount_cts b where b.pack_no = a.pack_no and b.edit_type = false and b.product_id =  $1)  as piece_amount FROM log_pack_edit_amount_cts a WHERE  a.pack_no != 'null' and a.product_id = $1 GROUP BY a.pack_no order by create_date desc\\\",\\\"GetLotPackDetail1\\\":\\\"SELECT a.id, a.edit_type, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id, a.tracking_tag_wip_chup, a.pack_no, a.product_id, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount ,b.plating_plant_id,c.name as plating_plant_name FROM log_pack_edit_amount_cts as a left join log_wip_chup_edit_amount_cts as b on a.log_wip_chup_edit_amount_cts_id = b.id left join plating_plant as c on b.plating_plant_id = c.id where a.product_id = $1 and a.wip_chup_lot_no = $2 and a.edit_type = true;\\\",\\\"GetLotPackDetail\\\":\\\"SELECT a.id,a.edit_type,b.po_no, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id, a.tracking_tag_wip_chup, a.pack_no, a.product_id, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss,a.pack_lot_no, a.weight_amount, a.piece_amount ,b.plating_plant_id,c.code as plating_plant_code, c.name as plating_plant_name,d.\\\\\\\"N/W (g.)\\\\\\\" as nw_number,c.telnumber as tel,d.surface,box_no,box_date,ref_box_no FROM log_pack_edit_amount_cts as a left join log_wip_chup_edit_amount_cts as b on a.log_wip_chup_edit_amount_cts_id = b.id left join plating_plant as c on b.plating_plant_id = c.id left join product as d on a.product_id = d.id where a.product_id = $1 and a.pack_no = $2 and a.edit_type = true;\\\",\\\"GetLotCTSDetail\\\":\\\"SELECT a.customer_id,b.full_name FROM production_order_cts a LEFT JOIN customer b ON a.customer_id = b.id WHERE a.no = $1;\\\",\\\"GetLotPackHistrory\\\":\\\"SELECT a.id, a.edit_type,a.pack_lot_no, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id, a.tracking_tag_wip_chup, a.pack_no, a.product_id, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount ,b.plating_plant_id,c.name as plating_plant_name,c.telnumber as tel ,a.box_no,a.box_date,a.ref_box_no FROM log_pack_edit_amount_cts as a left join log_wip_chup_edit_amount_cts as b on a.log_wip_chup_edit_amount_cts_id = b.id left join plating_plant as c on b.plating_plant_id = c.id where a.product_id = $1 ORDER BY a.create_date DESC\\\",\\\"GetLotOutPackDetail\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount FROM log_pack_edit_amount_cts where product_id = $1 and wip_chup_lot_no = $2 and edit_type = true;\\\",\\\"getLotInStockKg\\\":\\\"SELECT min(a.create_date) as create_date, a.wip_chup_lot_no,(SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.piece_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.piece_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = false and b.product_id = $1) as weight_amount FROM log_pack_edit_amount_cts a WHERE a.piece_amount is null and a.wip_chup_lot_no != 'null' and a.product_id =$1 GROUP BY a.wip_chup_lot_no order by create_date desc\\\",\\\"getLotInStockPiece\\\":\\\"SELECT min(a.create_date) as create_date, a.wip_chup_lot_no,(SELECT coalesce(sum(b.piece_amount),0)FROM log_pack_edit_amount_cts b where b.weight_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.piece_amount),0) FROM log_pack_edit_amount_cts b where b.weight_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = false and b.product_id = $1) as piece_amount FROM log_pack_edit_amount_cts a WHERE a.weight_amount is null and a.wip_chup_lot_no != 'null' and a.product_id =$1 GROUP BY a.wip_chup_lot_no order by create_date desc\\\",\\\"getLotPackFilter\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount FROM log_pack_edit_amount_cts  where wip_chup_lot_no = $1 and edit_type = true; \\\",\\\"getProductionOrder\\\":\\\"SELECT id,no,is_success FROM production_order_cts WHERE is_success = false AND is_use = true AND product_id = $1;\\\",\\\"checkPackToGen\\\":\\\"SELECT pack_no FROM log_pack_edit_amount_cts WHERE ($1::text is null or pack_no LIKE '%' || $1 || '%' ) AND edit_type = true ORDER BY create_date DESC;\\\",\\\"checkBoxToGen\\\":\\\"SELECT box_no FROM log_pack_edit_amount_cts WHERE ($1::text is null or box_no LIKE '%' || $1 || '%' ) AND edit_type = true ORDER BY create_date DESC;\\\",\\\"check_product_ref_box\\\":\\\"SELECT id, product_id, pack_no FROM log_pack_edit_amount_cts WHERE product_id = $1 AND pack_no = $2;\\\",\\\"getPackloginreport\\\":\\\"SELECT * FROM log_pack_edit_amount_cts WHERE is_use is TRUE AND pack_no =$1\\\",\\\"GetLotWipPackDetail\\\":\\\"SELECT * FROM log_pack_edit_amount_cts WHERE product_id = $1 AND pack_no = $2 AND edit_type = true;\\\",\\\"getProductionOrderDetail\\\":\\\"SELECT a.id,  a.no as order_no,  a.customer_id,  a.product_id,  a.plated,  a.material_id,  a.amount,  a.user_producer,  a.total_time_producer,  a.finish_date_producer,  a.remark,  a.setup_ng_record,  a.user_document,  a.is_use, a.create_date, a.is_success, a.finish_date_plan,b.no as product_no,b.name as product_name,c.name as customer_name FROM production_order_cts a LEFT JOIN  product b on b.id = a.product_id LEFT JOIN customer c on c.id = a.customer_id WHERE a.no = $1;\\\",\\\"chackbox\\\":\\\"SELECT id, edit_type, pack_no, ref_box_no FROM log_pack_edit_amount_cts where pack_no = $1 AND edit_type = true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryPackInOutCTS.json?");

/***/ }),

/***/ "./app/query/queryPermission.json":
/*!****************************************!*\
  !*** ./app/query/queryPermission.json ***!
  \****************************************/
/*! exports provided: findByUserId, getAllMenu, getAllFeature, filterFeature, getAllFeatureUser, getAllUser, checkMenuSort, checkFeature, checkFeatureUser, checkNameFeature, addMenu, addFeature, addFeatureUser, delFeaturePemission, addFeaturePemission, updateFeatureUser, updateFeature, updateMenu, checkSupMenu, delMenu, delFeature, delFeatureUser, filterMenuLv1, filterMenuLv2, get_level_all, get_level_1, get_level_2, get_level_3, find_level_Byid, find_level_Byid_temp, findByFeatureId, findByFeatureUserDataId, update_level_Byid, getLevelByLv, delMenuPermission, addMenuPermission, findMenuPermissionByUserId, getMenuByUserId, getFeatureByUserId, getAll_icon, getMenuByLevel, update_sort, getOEMByUserID, findOemUserById, delOemPermission, addOemPermission, academy_getCategoryAll, academy_getCategory2, academy_getCategory, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"findByUserId\\\":\\\"SELECT x.id, user_id, x.is_use, feature_id ,b.id menu_id, b.name menu_name, a.id feature_id, a.name feature_name FROM \\\\\\\"permission\\\\\\\" x left join \\\\\\\"feature\\\\\\\" a on a.id = x.feature_id left join \\\\\\\"menu\\\\\\\" b on b.id = a.menu_id left join \\\\\\\"identity_user\\\\\\\" c on c.id = x.user_id where user_id = $1\\\",\\\"getAllMenu\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, display_name FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true ORDER by sort ASC  \\\",\\\"getAllFeature\\\":\\\"SELECT f.id, f.name as feature,f.display_name as display_feature, f.menu_id ,m.name as menu,f.sort, f.create_date, f.create_by, f.update_by, f.update_date, f.is_use FROM \\\\\\\"feature\\\\\\\" f left join menu m on f.menu_id = m.id WHERE f.is_use = true ORDER BY m.name\\\",\\\"filterFeature\\\":\\\"SELECT f.id, f.name as feature,f.display_name as display_feature, f.menu_id ,m.name as menu,f.sort, f.create_date, f.create_by, f.update_by, f.update_date, f.is_use FROM \\\\\\\"feature\\\\\\\" f left join menu m on f.menu_id = m.id WHERE f.is_use = true and ($1::text is null or f.name ILIKE '%' || $1 || '%') and ($2::uuid is null or f.menu_id = $2)  ORDER BY m.name\\\",\\\"getAllFeatureUser\\\":\\\"SELECT pf.id, pf.user_id, ft.name as feature , iu.name as name_user, iu.sirname as sirname_user, pf.feature_id ,pf.is_use FROM permission_feature pf Left Join identity_user iu on pf.user_id = iu.id Left Join feature ft on pf.feature_id = ft.id where pf.is_use = true\\\",\\\"getAllUser\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path FROM identity_user where is_use = true\\\",\\\"checkMenuSort\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"menu\\\\\\\"\\\",\\\"checkFeature\\\":\\\"SELECT MAX (sort) FROM \\\\\\\"feature\\\\\\\"\\\",\\\"checkFeatureUser\\\":\\\"SELECT id, user_id, is_use, feature_id FROM permission_feature where user_id = $1 and feature_id = $2 and is_use = true\\\",\\\"checkNameFeature\\\":\\\"SELECT id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use FROM feature where name = $1 AND menu_id = $2\\\",\\\"addMenu\\\":\\\"INSERT INTO \\\\\\\"menu\\\\\\\" (id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20)\\\",\\\"addFeature\\\":\\\"INSERT INTO \\\\\\\"feature\\\\\\\" (id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use,display_name) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9,$10)\\\",\\\"addFeatureUser\\\":\\\"INSERT INTO \\\\\\\"permission_feature\\\\\\\" ( id, user_id, is_use, feature_id) VALUES ($1, $2, $3, $4)\\\",\\\"delFeaturePemission\\\":\\\"DELETE FROM permission_feature WHERE user_id = $1;\\\",\\\"addFeaturePemission\\\":\\\"INSERT INTO \\\\\\\"permission_feature\\\\\\\" ( id, user_id, is_use, feature_id) VALUES ($1, $2, $3, $4)\\\",\\\"updateFeatureUser\\\":\\\"UPDATE \\\\\\\"permission_feature\\\\\\\" SET user_id= $2, feature_id= $3 WHERE id = $1 and is_use = true\\\",\\\"updateFeature\\\":\\\"UPDATE \\\\\\\"feature\\\\\\\" SET name= $2,display_name=$3, menu_id= $4, update_by= $5, update_date= $6 WHERE id = $1 and is_use = true\\\",\\\"updateMenu\\\":\\\"UPDATE \\\\\\\"menu\\\\\\\" SET name = $2 ,display_name =$3 ,path = $4,update_date = $5, update_by = $6 ,parent_id = $7,icon = $8,image_name = $9,image_path = $10,is_image = $11, academy = $12, cover_name= $13, cover_path= $14, cover= $15 WHERE id = $1 and is_use = true\\\",\\\"checkSupMenu\\\":\\\"SELECT count(*) FROM \\\\\\\"menu\\\\\\\" WHERE parent_id = $1 AND is_use = true \\\",\\\"delMenu\\\":\\\"UPDATE \\\\\\\"menu\\\\\\\" SET is_use = false WHERE id=$1 \\\",\\\"delFeature\\\":\\\"UPDATE \\\\\\\"feature\\\\\\\" SET is_use = false WHERE id=$1 \\\",\\\"delFeatureUser\\\":\\\"UPDATE \\\\\\\"permission_feature\\\\\\\" SET is_use = false WHERE id=$1\\\",\\\"filterMenuLv1\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true and level = 1 and ($1::text is null or name ILIKE '%' || $1 || '%')\\\",\\\"filterMenuLv2\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true and parent_id = $2 and level = 2 and ($1::text is null or name ILIKE '%' || $1 || '%') \\\",\\\"get_level_all\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true order by sort ASC\\\",\\\"get_level_1\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true AND level = 1 and ($1::text is null or name ILIKE '%' || $1 || '%') and ($2::text is null or path ILIKE '%' || $2 || '%') order by sort ASC\\\",\\\"get_level_2\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true AND level = 2 and ($1::text is null or name ILIKE '%' || $1 || '%') and ($2::text is null or path ILIKE '%' || $2 || '%') and ($3::uuid is null or parent_id = $3) order by sort ASC\\\",\\\"get_level_3\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true AND level = 3 and ($1::text is null or name ILIKE '%' || $1 || '%') and ($2::text is null or path ILIKE '%' || $2 || '%') and ($3::uuid is null or parent_id = $3) order by sort ASC\\\",\\\"find_level_Byid\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true AND id = $1\\\",\\\"find_level_Byid_temp\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true AND id = $1\\\",\\\"findByFeatureId\\\":\\\"SELECT id, name, menu_id, sort, create_date, create_by, update_by, update_date, is_use,display_name FROM feature WHERE id = $1\\\",\\\"findByFeatureUserDataId\\\":\\\"SELECT id, user_id, is_use, feature_id FROM permission_feature where user_id = $1;\\\",\\\"update_level_Byid\\\":\\\"UPDATE \\\\\\\"menu\\\\\\\" SET name = $2 ,path = $3,parent_id = $4,level = $5 WHERE id = $1\\\",\\\"getLevelByLv\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon FROM menu where is_use =true and parent_id = $1;\\\",\\\"delMenuPermission\\\":\\\"DELETE FROM permission_menu WHERE user_id = $1;\\\",\\\"addMenuPermission\\\":\\\"INSERT INTO permission_menu(id, menu_id, is_use, user_id) VALUES ($1, $2, $3, $4);\\\",\\\"findMenuPermissionByUserId\\\":\\\"SELECT m.name,pm.menu_id, pm.is_use, pm.user_id FROM permission_menu pm left join menu m on pm.menu_id = m.id where pm.user_id = $1;\\\",\\\"getMenuByUserId\\\":\\\"SELECT a.id, name, path, parent_id, level, created_date, created_by, update_date, update_by, a.is_use, sort, icon, image_name, image_path, is_image, display_name,academy , link_dashboard ,is_dashboard  FROM permission_menu b left join menu a on  a.id = b.menu_id WHERE user_id = $1 and a.is_use = true order by sort ASC\\\",\\\"getFeatureByUserId\\\":\\\"SELECT  user_id,feature_id,f.name as feature,f.display_name as feature_name,m.id as menu_id ,m.name as menu,m.level FROM permission_feature pf left join feature f on pf.feature_id = f.id left join menu m on f.menu_id = m.id WHERE user_id = $1;\\\",\\\"getAll_icon\\\":\\\"SELECT id, icon, is_use FROM icon where is_use = true\\\",\\\"getMenuByLevel\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image,display_name FROM menu Where is_use = true and level = $1 order by sort ASC\\\",\\\"update_sort\\\":\\\"UPDATE \\\\\\\"menu\\\\\\\" SET  update_date=$1, update_by=$2,  sort=$3 WHERE id = $4;\\\",\\\"getOEMByUserID\\\":\\\"SELECT u.id as user_id, u.company_id as company_id, u.admin_id, u.name as user_name, sirname, username, email, password, mobile1, mobile2, u.detail as user_detail, u.is_active, user_profile, token, token_create, token_expired, u.create_date, u.is_use, u.user_profile_name, u.user_profile_path,o.id as oem_id, o.company_id oem_comId, o.admin_id, o.name as oem_name, o.logo as oem_logo, o.create_date, o.is_use, o.logo_name as oem_logoName, o.logo_path as oem_logoPath, o.is_active as oem_isActive FROM identity_user u left join company c on c.id = u.company_id left join oem o on o.company_id = c.id where c.is_use = true and u.id = $1 and o.is_active = true; \\\",\\\"findOemUserById\\\":\\\"SELECT id, user_id, oem_id, is_active FROM permission_oem where user_id = $1;\\\",\\\"delOemPermission\\\":\\\"DELETE FROM permission_oem WHERE user_id = $1;\\\",\\\"addOemPermission\\\":\\\"INSERT INTO \\\\\\\"permission_oem\\\\\\\" ( id, user_id, oem_id, is_active) VALUES ($1, $2, $3, $4);\\\",\\\"academy_getCategoryAll\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\\\"menu\\\\\\\" where id in (select parent_id from \\\\\\\"menu\\\\\\\") and is_use = true order by sort ASC;\\\",\\\"academy_getCategory2\\\":\\\"SELECT id, name,display_name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon,image_name, image_path, is_image, academy, cover_name, cover_path, cover FROM \\\\\\\"menu\\\\\\\" WHERE is_use = true order by sort ASC\\\",\\\"academy_getCategory\\\":\\\"SELECT id, name, path, parent_id, level, created_date, created_by, update_date, update_by, is_use, sort, icon, image_name, image_path, is_image, display_name, academy, cover_name, cover_path, cover FROM \\\\\\\"menu\\\\\\\" where id in (select parent_id from \\\\\\\"menu\\\\\\\") and is_use = true and ($1::uuid is null or id = $1) order by sort ASC;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryPermission.json?");

/***/ }),

/***/ "./app/query/queryPlanningCTS.json":
/*!*****************************************!*\
  !*** ./app/query/queryPlanningCTS.json ***!
  \*****************************************/
/*! exports provided: getProduct, getForecastByYearMonth, getForecastDayByYearMonth, getFgInByYearMonth, getFgOutByYearMonth, getStockLastMonthByYearMonth, getPoOrderByYearMonth, getPoDeliveryByDate, getCustomerByProduct, getChoupInByYearMonth, getChoupOutByYearMonth, getPackInByYearMonth, getPackOutByYearMonth, getLastStock, getLastStockByLek, getLastStockByLek2, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getProduct\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item, dip_amount, is_trade, surface FROM product WHERE ($1::text is null or no ILIKE '%' || $1 || '%') AND ($2::uuid is null or product_model_id = $2) AND oem_id = $3 AND is_use = true;\\\",\\\"getForecastByYearMonth\\\":\\\"SELECT id, product_id, year_month, amount, amount_forcast, wip_amount, fg_amount, in_hand_amount, user_id, create_date, update_date, source_data, sort FROM product_forcast_cts WHERE year_month = $1 AND product_id = $2 ORDER BY sort;\\\",\\\"getForecastDayByYearMonth\\\":\\\"SELECT id, month, year, day, amount_forcast, year_month, create_date, update_date, product_id, source_data FROM product_forcast_day_cts WHERE year_month = $1 AND product_id = $2;\\\",\\\"getFgInByYearMonth\\\":\\\"SELECT * FROM log_product_fg_edit_amount_cts WHERE product_id = $1 AND edit_type = true AND create_date BETWEEN $2 AND $3 ORDER BY create_date;\\\",\\\"getFgOutByYearMonth\\\":\\\"SELECT * FROM log_product_fg_edit_amount_cts WHERE product_id = $1 AND edit_type = false AND create_date BETWEEN $2 AND $3 ORDER BY create_date;\\\",\\\"getStockLastMonthByYearMonth\\\":\\\"SELECT fg_amount FROM product WHERE id = $1  ORDER BY create_date desc;\\\",\\\"getPoOrderByYearMonth\\\":\\\"SELECT id, no, plant, supplier, po_number, item_category, item_number, ac, qty_ordered, item_description, material_name, destination_name, inspection_flag, job_number, buyer, unit_price, po_amount, delivery_date, qty, po_issue_date, currency, po_month, po_year, is_expless, is_use, update_date, update_by, oem_id, company_id, sonum, cuscod, sodat, dlvdat, loccod, product_id, item_number2 FROM purchase_order_cts WHERE product_id = $1 AND delivery_date BETWEEN $2 AND $3;\\\",\\\"getPoDeliveryByDate\\\":\\\"SELECT id, no, plant, supplier, po_number, item_category, item_number, ac, qty_ordered, item_description, material_name, destination_name, inspection_flag, job_number, buyer, unit_price, po_amount, delivery_date, qty, po_issue_date, currency, po_month, po_year, is_expless, is_use, update_date, update_by, oem_id, company_id, sonum, cuscod, sodat, dlvdat, loccod, product_id, item_number2 FROM purchase_order_cts WHERE product_id = $1 AND delivery_date BETWEEN $2 AND $3 AND is_use = true ORDER BY delivery_date;\\\",\\\"getCustomerByProduct\\\":\\\"SELECT a.product_id, a.customer_id, b.name as customer_name FROM product_customer a LEFT JOIN customer b on a.customer_id = b.id WHERE a.product_id = $1 AND b.is_use = true;\\\",\\\"getChoupInByYearMonth\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no, a.qc_date, b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM log_wip_chup_edit_amount_cts a LEFT JOIN product b ON a.product_id = b.id WHERE a.product_id = $1 AND a.create_date BETWEEN $2 AND $3 AND a.edit_type = true;\\\",\\\"getChoupOutByYearMonth\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no, a.qc_date, b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM log_wip_chup_edit_amount_cts a LEFT JOIN product b ON a.product_id = b.id WHERE a.product_id = $1 AND a.create_date BETWEEN $2 AND $3 AND a.edit_type = false;\\\",\\\"getPackInByYearMonth\\\":\\\"SELECT a.id, a.edit_type, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id, a.tracking_tag_wip_chup, a.pack_no, a.product_id, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount, a.pack_lot_no, b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM public.log_pack_edit_amount_cts a LEFT JOIN product b ON a.product_id = b.id WHERE a.product_id = $1 AND a.create_date BETWEEN $2 AND $3 AND a.edit_type = true;\\\",\\\"getPackOutByYearMonth\\\":\\\"SELECT a.id, a.edit_type, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id, a.tracking_tag_wip_chup, a.pack_no, a.product_id, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount, a.pack_lot_no, b.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM public.log_pack_edit_amount_cts a LEFT JOIN product b ON a.product_id = b.id WHERE a.product_id = $1 AND a.create_date BETWEEN $2 AND $3 AND a.edit_type = false;\\\",\\\"getLastStock\\\":\\\"SELECT *, CASE  WHEN edit_type IS TRUE THEN current_amount + amount  ELSE current_amount - amount END AS current_amount_sum FROM log_product_fg_edit_amount_cts  WHERE product_id = $1 AND create_date BETWEEN $2 AND $3 ORDER BY create_date DESC LIMIT 1\\\",\\\"getLastStockByLek\\\":\\\"SELECT * FROM log_product_fg_edit_amount_cts  WHERE product_id = $1 AND create_date BETWEEN $2 AND $3 ORDER BY create_date DESC LIMIT 1\\\",\\\"getLastStockByLek2\\\":\\\"SELECT * FROM log_product_fg_edit_amount_cts  WHERE product_id = $1 ORDER BY create_date DESC LIMIT 1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryPlanningCTS.json?");

/***/ }),

/***/ "./app/query/queryProduct.json":
/*!*************************************!*\
  !*** ./app/query/queryProduct.json ***!
  \*************************************/
/*! exports provided: getProductModel, getProductRoute, getProductSize, getProductColor, checkNameProduct, checkNameProduct2, CheckCustomerProduct, addProduct, addProductDetail, checkProductMaterial, checkProductProduct, updateProductMaterials, updateProductProducts, updateCycle_time, addProductMaterial1, addProductMaterial, addProductProduct, addProductCustomer, addCycle_time, delCycle_time, check_cycle_time, check_pro_del, check_mat_del, getsumHistory, getsumHistoryDetail, getcusNameById, getendNameById, getlog_detailFG, getlog_detailOutFG, sum_FGlot_no, suminFG, sumoutFG, getdataHistory, getdataAllHistory, checkPMforUpdate, DeletePMforUpdate, DeletePPforUpdate, updateProduct, UpdateProductCustomer, updateProductDetail, updateProductMaterial, delProduct, findProductById, findmultipleMatByProductId, findmutipleProductByProductId, findCustomeProductByProductId, findProductIdByNo, findMaterialIdByNo, findProductByName, filterProduct, filterProductcheck, filterProductAll, filterProductAllcheck, findProductModelByName, findProductRouteByName, findProductSizeByName, findProductColorByName, productWIPAmountInOut, addLogProductWIPAmount, getValueProductWIPAmount, productFGAmountInOut, addLogProductFGAmount, summary_report, getValueProductFGAmount, productCuttingInOut, getValueProductCuttingAmount, addLogProductEnd_userAmount, getValueProductEnd_userAmount, productEnd_userAmountInOut, addLogProductLogisticAmount, getValueProductLogisticAmount, productLogisticAmountInOut, findByNo, update_product_wip_desktop, update_product_fg_desktop, update_product_cut_desktop, insert_log_product_wip_edit_mount, insert_log_product_fg_edit_mount, insert_log_product_cut_edit_mount, insert_log_warehouse_details, filterProductchoupOsl, filterProductchoup, filter_partno_Osl, getProductModelOsl, getValueProductDIPAmount, addLogProductDIPAmount, productDIPAmountInOut, check_cycle_del, DeletePCforUpdate, checkProcessCycleTime, updateProcessCycleTime, addProcessCycleTime, getHistoryFG, check_supplier_del, DeletePSforUpdate, checkProductSupplier, updateProductSupplier, addProductSupplier, get_supplier, get_supplier_Active, update_sort, DeleteMachineforUpdate, AddMachine, get_machine, addLogFG, product_model_report, product_report, product_null_report, addLogCutting, chackloopproductno, get_customer, get_plating_product, chack_plating_product, add_plating_product, edit_plating_product, del_plating_product, chack_product_customer, add_product_customer, edit_product_customer, del_product_customer, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getProductModel\\\":\\\"select id,name from product_model where is_use and oem_id=$1 order by sort\\\",\\\"getProductRoute\\\":\\\"select id,name from product_route where is_use and oem_id=$1 order by sort\\\",\\\"getProductSize\\\":\\\"select id,name from product_size where is_use and oem_id=$1 order by sort\\\",\\\"getProductColor\\\":\\\"select id,name from product_color where is_use and oem_id=$1 order by sort\\\",\\\"checkNameProduct\\\":\\\"select * from product p left join product_detail pd on p.id = pd.product_id where p.no = $1 and p.is_use=true and p.oem_id=$2 and ($3::uuid is null or p.id !=$3)\\\",\\\"checkNameProduct2\\\":\\\"select * from product p left join product_detail pd on p.id = pd.product_id where p.no = $1 and p.is_use=true and p.oem_id=$2 and p.id !=$3\\\",\\\"CheckCustomerProduct\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item FROM product where id = $1 and oem_id = $2 and is_use = true\\\",\\\"addProduct\\\":\\\"INSERT INTO product (id, no, name, product_model_id, qty_unit, min_product, min_lot, user_id, oem_id, is_active, is_use, is_scan_qr, create_date, update_date, is_assy, product_plants_item, is_trade, surface, \\\\\\\"N/W (g.)\\\\\\\", packing_standart)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16,$17,$18,$19,$20)\\\",\\\"addProductDetail\\\":\\\"INSERT INTO product_detail (product_id, image, description, sell_price, circle_time, sku_user, product_route_id, product_size_id, product_color_id, image_name, imaget_path, sku_system,cost, size, unit, thickness, weight, cross_section_area, stp_type, width, height, blade_head) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12,$13,$14,$15,$16,$17,$18,$19,$20,$21,$22)\\\",\\\"checkProductMaterial\\\":\\\"SELECT id, product_id, material_id, wt_mtr, c_leng, cos_pc, remark FROM product_material where product_id = $1 and material_id = $2;\\\",\\\"checkProductProduct\\\":\\\"SELECT id, product_id, product_sub, amount, remark FROM product_product WHERE product_id = $1 and product_sub = $2 ;\\\",\\\"updateProductMaterials\\\":\\\"UPDATE product_material SET  wt_mtr=$2, c_leng=$3, cos_pc=$4, amount=$5, unit=$6, \\\\\\\"G/W. (g.)\\\\\\\" = $7, \\\\\\\"d.\\\\\\\" = $8, \\\\\\\"t.\\\\\\\" = $9, \\\\\\\"w.\\\\\\\" = $10, \\\\\\\"l.\\\\\\\" =$11 WHERE id = $1;\\\",\\\"updateProductProducts\\\":\\\"UPDATE product_product SET amount=$3 WHERE product_id = $1 and product_sub = $2 and update_date = $4 and update_by = $5 ;\\\",\\\"updateCycle_time\\\":\\\"UPDATE cycle_time SET cycle_time= $1 WHERE process_id = $2 and product_id = $3;\\\",\\\"addProductMaterial1\\\":\\\"INSERT INTO product_material (id, product_id, material_id, wt_mtr, c_leng, cos_pc,remark,amount,unit) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\\\",\\\"addProductMaterial\\\":\\\"INSERT INTO product_material(id, product_id, material_id, wt_mtr, c_leng, cos_pc, remark, amount, unit,\\\\\\\"G/W. (g.)\\\\\\\", \\\\\\\"d.\\\\\\\", \\\\\\\"t.\\\\\\\", \\\\\\\"w.\\\\\\\", \\\\\\\"l.\\\\\\\") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10,$11,$12,$13,$14)\\\",\\\"addProductProduct\\\":\\\"INSERT INTO product_product (id, product_id, product_sub, amount, remark,update_date,update_by) VALUES ($1, $2, $3, $4, $5,$6, $7)\\\",\\\"addProductCustomer\\\":\\\"INSERT INTO product_customer(id, product_id, customer_id) VALUES ($1, $2, $3)\\\",\\\"addCycle_time\\\":\\\"INSERT INTO cycle_time(id,process_id, cycle_time, is_use, product_id) VALUES ($1, $2, $3, $4, $5)\\\",\\\"delCycle_time\\\":\\\"DELETE FROM cycle_time WHERE process_id = $1 and product_id = $2;\\\",\\\"check_cycle_time\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id FROM cycle_time where process_id = $1 and product_id = $2 and is_use = true\\\",\\\"check_pro_del\\\":\\\"SELECT id, product_id, product_sub, amount, remark FROM product_product where product_id = $1;\\\",\\\"check_mat_del\\\":\\\"SELECT id, product_id, material_id, wt_mtr, c_leng, cos_pc, remark FROM product_material where product_id = $1;\\\",\\\"getsumHistory\\\":\\\"SELECT max(a.create_date) as create_date, max(a.exprire_date) as exprire_date ,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)   FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_product_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 GROUP BY a.fg_lot_no order by exprire_date asc\\\",\\\"getsumHistoryDetail\\\":\\\"SELECT id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date, remark, color, log_warehouse_details_id, tag_no, log_status_id, is_reserved, customer_id,end_user_id,stp_machine FROM log_product_fg_edit_amount where fg_lot_no = $1 and product_id = $2 and edit_type = true;\\\",\\\"getcusNameById\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id, line_id, customer_id, update_by, update_date, oem_id FROM customer where id = $1;\\\",\\\"getendNameById\\\":\\\"SELECT id, name, fullname, contact, address, latitude, longitude, is_use, is_active, oem_id, line_id, end_user_tel, update_by, update_date FROM end_user where id =$1;\\\",\\\"getlog_detailFG\\\":\\\"SELECT id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date FROM log_product_fg_edit_amount WHERE product_id = $1 and edit_type = true And fg_lot_no != 'null' order by exprire_date\\\",\\\"getlog_detailOutFG\\\":\\\"SELECT max(a.create_date) as create_date ,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0)FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true)  - (SELECT coalesce(sum(b.amount),0)  FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false) as amount FROM log_product_fg_edit_amount a WHERE a.fg_lot_no != 'null' and a.product_id = $1 GROUP BY a.fg_lot_no order by create_date asc\\\",\\\"sum_FGlot_no\\\":\\\"SELECT fg_lot_no, sum(amount) FROM log_product_fg_edit_amount where product_id = $1 and fg_lot_no != 'null' group by fg_lot_no\\\",\\\"suminFG\\\":\\\"SELECT fg_lot_no,sum(amount) FROM log_product_fg_edit_amount where product_id = $1  and fg_lot_no != 'null' and edit_type = true group by fg_lot_no;\\\",\\\"sumoutFG\\\":\\\"SELECT fg_lot_no,sum(amount) FROM log_product_fg_edit_amount where product_id = $1  and fg_lot_no != 'null' and edit_type = false group by fg_lot_no;\\\",\\\"getdataHistory\\\":\\\"SELECT max(a.create_date) as create_date ,a.fg_lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.amount),0) FROM log_product_fg_edit_amount b where b.fg_lot_no = a.fg_lot_no and b.edit_type = false and b.product_id = $1) as amount FROM log_product_fg_edit_amount a WHERE a.product_id = $1 and a.fg_lot_no = $2 GROUP BY a.fg_lot_no\\\",\\\"getdataAllHistory\\\":\\\"SELECT a.id, (SELECT coalesce(SUM(b.fg_amount),0) FROM product b WHERE b.id = a.id ) - ((SELECT  coalesce(SUM(b.amount),0)FROM log_product_fg_edit_amount b WHERE b.product_id = a.id and b.fg_lot_no != 'null' and b.edit_type = true) - (SELECT  coalesce(SUM(b.amount),0) FROM log_product_fg_edit_amount b WHERE b.product_id = a.id and b.fg_lot_no != 'null' and b.edit_type = false))as fg_amount FROM product a WHERE a.fg_amount IS NOT null and id = $1 GROUP BY a.id\\\",\\\"checkPMforUpdate\\\":\\\"SELECT id, product_id, material_id, wt_mtr, c_leng, cos_pc, remark FROM product_material where product_id = $1 and material_id = $2\\\",\\\"DeletePMforUpdate\\\":\\\"DELETE FROM product_material WHERE product_id = $1 and material_id = $2\\\",\\\"DeletePPforUpdate\\\":\\\"DELETE FROM product_product WHERE product_id = $1 and product_sub = $2\\\",\\\"updateProduct\\\":\\\"UPDATE product SET no=$1, name=$2, product_model_id=$3, qty_unit = $4, min_product = $5, min_lot = $6, user_id=$7, update_date=$8, is_assy=$10 ,is_trade=$11,surface=$12,\\\\\\\"N/W (g.)\\\\\\\"=$13,packing_standart=$14  WHERE id=$9\\\",\\\"UpdateProductCustomer\\\":\\\"UPDATE product SET  no = $2, name = $3,is_use = $4,update_date = $5 WHERE id = $1;\\\",\\\"updateProductDetail\\\":\\\"UPDATE product_detail SET image=$1, description=$2, sell_price=$3, circle_time=$4, sku_user=$5, product_route_id=$6, product_size_id=$7, product_color_id=$8, image_name=$9, imaget_path=$10, sku_system=$11 ,cost = $13,size=$14, unit=$15, thickness=$16, weight=$17, cross_section_area=$18, stp_type=$19, width=$20, height=$21, blade_head=$22 WHERE product_id=$12\\\",\\\"updateProductMaterial\\\":\\\"UPDATE product_material SET material_id=$1, wt_mtr=$2, c_leng=$3, cos_pc=$4 WHERE id=$5\\\",\\\"delProduct\\\":\\\"UPDATE product SET is_use =false ,user_id=$1,update_date=$2 WHERE id=$3\\\",\\\"findProductById\\\":\\\"SELECT p.id, p.no, p.name,p.surface,p.is_assy, p.product_model_id, p.qty_unit, p.min_product,p.min_lot, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.\\\\\\\"N/W (g.)\\\\\\\" as nw_number, p.packing_standart, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system,pd.cost,pd.size,pd.unit,pd.thickness,pd.weight,pd.cross_section_area , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head  from product p left join product_detail pd on p.id = pd.product_id  where p.is_use = true and p.id=$1\\\",\\\"findmultipleMatByProductId\\\":\\\"SELECT pm.id, pm.product_id, pm.material_id,m.no,m.name, m.material_type_id,m.material_spec_id,m.material_size_id, pm.wt_mtr, pm.c_leng, pm.cos_pc, pm.remark, pm.amount as amount_txt, pm.unit as unit_txt,pm.\\\\\\\"G/W. (g.)\\\\\\\" as gw_number, pm.\\\\\\\"d.\\\\\\\" as d_number, pm.\\\\\\\"t.\\\\\\\" as t_number, pm.\\\\\\\"w.\\\\\\\" as w_number, pm.\\\\\\\"l.\\\\\\\" as l_number FROM product_material pm left join material m on m.id = pm.material_id where product_id = $1 AND m.is_use = true\\\",\\\"findmutipleProductByProductId\\\":\\\"SELECT pp.id, pp.product_id, pp.product_sub,p.no,p.name, pp.amount, pp.remark FROM product_product pp left join product p on pp.product_sub = p.id where pp.product_id = $1\\\",\\\"findCustomeProductByProductId\\\":\\\"SELECT id, no as customer_item, name as customer_item_name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item FROM product where product_plants_item = $1 and is_use = true order by create_date\\\",\\\"findProductIdByNo\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot FROM product where no = $1 and oem_id = $2 and is_use = true\\\",\\\"findMaterialIdByNo\\\":\\\"SELECT id, no, name, material_type_id, material_spec_id, material_size_id, buy_price, material_supplier_id, material_unit_id, amount, description, remark, image, user_id, oem_id, is_active, is_use, is_scan_qr, create_date, update_date, image_name, imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3 FROM material where no = $1 and oem_id = $2 and is_use = true;\\\",\\\"findProductByName\\\":\\\"SELECT id, no, name FROM product where is_use=true and no ILIKE $1 and ($2::uuid is null or oem_id =$2)\\\",\\\"filterProduct\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name,p.surface , p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price,pd.unit, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head, pd.description from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::boolean is false or p.fg_amount > 0)and ($6::boolean is false or p.is_trade = true)and ($7::boolean is false or p.fg_amount < p.min_product) and p.product_plants_item is null ORDER BY create_date\\\",\\\"filterProductcheck\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::boolean is false or p.fg_amount > 0) and p.product_plants_item is null ORDER BY create_date\\\",\\\"filterProductAll\\\":\\\"SELECT p.id, p.no, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy, p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head  from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4)  and ($5::boolean is false or p.fg_amount > 0)and ($6::boolean is false or p.is_trade = true)and ($7::boolean is false or p.fg_amount < p.min_product)  ORDER BY create_date\\\",\\\"filterProductAllcheck\\\":\\\"SELECT p.id, p.no, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy, p.product_plants_item, p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and p.fg_amount > 0 ORDER BY create_date\\\",\\\"findProductModelByName\\\":\\\"SELECT id,name FROM \\\\\\\"product_model\\\\\\\" WHERE is_use=true and name ILIKE $1 and ($2::uuid is null or oem_id =$2)\\\",\\\"findProductRouteByName\\\":\\\"SELECT id,name FROM \\\\\\\"product_route\\\\\\\" WHERE is_use=true and name ILIKE $1 and ($2::uuid is null or oem_id =$2)\\\",\\\"findProductSizeByName\\\":\\\"SELECT id,name FROM \\\\\\\"product_size\\\\\\\" WHERE is_use=true and name ILIKE $1 and ($2::uuid is null or oem_id =$2)\\\",\\\"findProductColorByName\\\":\\\"SELECT id,name FROM \\\\\\\"product_color\\\\\\\" WHERE is_use=true and name ILIKE $1 and ($2::uuid is null or oem_id =$2)\\\",\\\"productWIPAmountInOut\\\":\\\"UPDATE product SET wip_amount=CASE WHEN wip_amount is null then 0+$1 ELSE wip_amount+$1 END WHERE id=$2\\\",\\\"addLogProductWIPAmount\\\":\\\"INSERT INTO log_product_wip_edit_amount(id, product_id, user_id, edit_type, amount, create_date,remark) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"getValueProductWIPAmount\\\":\\\"SELECT CASE WHEN wip_amount is null then 0+$1 else wip_amount+$1 end as amount from product where id=$2\\\",\\\"productFGAmountInOut\\\":\\\"UPDATE product SET fg_amount=CASE WHEN fg_amount is null then 0+$1 ELSE fg_amount+$1 END WHERE id=$2\\\",\\\"addLogProductFGAmount\\\":\\\"INSERT INTO log_product_fg_edit_amount(id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date,remark,color,log_warehouse_details_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,$12)\\\",\\\"summary_report\\\":\\\"SELECT  product_id,p.no,p.name,  edit_type, amount, pj.project_name,ofg.create_date FROM \\\\\\\"log_product_fg_edit_amount\\\\\\\" ofg left join \\\\\\\"product\\\\\\\" p on ofg.product_id = p.id left join \\\\\\\"project\\\\\\\" pj on pj.id = ofg.project_id WHERE ofg.edit_type = $1 and amount > 0 and ($2::text is null or p.name ILIKE '%' || $2 || '%') and pj.project_name != 'null' and p.oem_id = $3\\\",\\\"getValueProductFGAmount\\\":\\\"SELECT CASE WHEN fg_amount is null then 0+$1 else fg_amount+$1 end as amount from product where id=$2\\\",\\\"productCuttingInOut\\\":\\\"UPDATE product SET cut_amount =CASE WHEN cut_amount is null then 0+$1 ELSE cut_amount+$1 END WHERE id=$2\\\",\\\"getValueProductCuttingAmount\\\":\\\"SELECT CASE WHEN cut_amount is null then 0+$1 else cut_amount+$1 end as amount from product where id=$2\\\",\\\"addLogProductEnd_userAmount\\\":\\\"INSERT INTO log_end_user(id, end_user_id, product_id, user_id, edit_type, amount, create_date) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"getValueProductEnd_userAmount\\\":\\\"SELECT CASE WHEN end_user_amount is null then 0+$1 else end_user_amount+$1 end as amount from product where id=$2\\\",\\\"productEnd_userAmountInOut\\\":\\\"UPDATE product SET end_user_amount=CASE WHEN end_user_amount is null then 0+$1 ELSE end_user_amount+$1 END WHERE id=$2\\\",\\\"addLogProductLogisticAmount\\\":\\\"INSERT INTO log_logistic(id, logistic_id, product_id, user_id, edit_type, amount, create_date)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"getValueProductLogisticAmount\\\":\\\"SELECT CASE WHEN logistic_amount is null then 0+$1 else logistic_amount+$1 end as amount from product where id=$2\\\",\\\"productLogisticAmountInOut\\\":\\\"UPDATE product SET logistic_amount=CASE WHEN logistic_amount is null then 0+$1 ELSE logistic_amount+$1 END WHERE id=$2\\\",\\\"findByNo\\\":\\\"SELECT id, no, name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product FROM product where no = $1 and oem_id = $2 and is_active = true\\\",\\\"update_product_wip_desktop\\\":\\\"UPDATE \\\\\\\"product\\\\\\\" SET wip_amount = $2 where no = $1 and oem_id = $3 and is_use = true\\\",\\\"update_product_fg_desktop\\\":\\\"UPDATE \\\\\\\"product\\\\\\\" SET fg_amount = $2 where no = $1 and oem_id = $3 and is_use = true\\\",\\\"update_product_cut_desktop\\\":\\\"UPDATE \\\\\\\"product\\\\\\\" SET cut_amount = $2 where no = $1 and oem_id = $3 and is_use = true\\\",\\\"insert_log_product_wip_edit_mount\\\":\\\"INSERT INTO \\\\\\\"log_product_wip_edit_amount\\\\\\\" (id,product_id,user_id,edit_type,amount,create_date)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"insert_log_product_fg_edit_mount\\\":\\\"INSERT INTO \\\\\\\"log_product_fg_edit_amount\\\\\\\" (id,product_id,user_id,edit_type,amount,create_date,project_id)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"insert_log_product_cut_edit_mount\\\":\\\"INSERT INTO \\\\\\\"log_cutting_edit_amount\\\\\\\" (id,product_id,user_id,edit_type,amount,create_date)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"insert_log_warehouse_details\\\":\\\"INSERT INTO log_warehouse_details(id, loop_id, warehouse_id, load_status_id, remark, description, create_date, rack_id, product_on_rack)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9);\\\",\\\"filterProductchoupOsl\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.dip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item, pd.stp_type,  pd.width,  pd.height,  pd.blade_head from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::uuid is null or p.id =$5) and p.product_plants_item is null ORDER BY create_date\\\",\\\"filterProductchoup\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name, p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.dip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item, pd.stp_type,  pd.width,  pd.height,  pd.blade_head from product p left join product_detail pd on p.id = pd.product_id  where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and p.product_plants_item is null ORDER BY create_date\\\",\\\"filter_partno_Osl\\\":\\\"SELECT partno_list FROM log_osl where id = $1\\\",\\\"getProductModelOsl\\\":\\\"select id, oslno from log_osl where oem_id=$1 order by oslno\\\",\\\"getValueProductDIPAmount\\\":\\\"SELECT CASE WHEN dip_amount is null then 0+$1 else dip_amount+$1 end as amount from product where id=$2\\\",\\\"addLogProductDIPAmount\\\":\\\"INSERT INTO log_dip_fg_edit_amount(id, product_id, user_id, edit_type, amount, create_date, osl_id) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"productDIPAmountInOut\\\":\\\"UPDATE product SET dip_amount=CASE WHEN dip_amount is null then 0+$1 ELSE dip_amount+$1 END WHERE id=$2\\\",\\\"check_cycle_del\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id, sort FROM cycle_time where product_id = $1;\\\",\\\"DeletePCforUpdate\\\":\\\"DELETE FROM cycle_time WHERE product_id = $1 and process_id = $2\\\",\\\"checkProcessCycleTime\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id, sort FROM cycle_time where product_id = $1 AND process_id = $2;\\\",\\\"updateProcessCycleTime\\\":\\\"UPDATE cycle_time SET cycle_time=$2, sort=$3 WHERE id = $1;\\\",\\\"addProcessCycleTime\\\":\\\"INSERT INTO cycle_time(id, machine_id, line_id, process_id, cycle_time, is_use, product_id, sort)VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\",\\\"getHistoryFG\\\":\\\"SELECT id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date, remark, color, log_warehouse_details_id, tag_no, log_status_id, is_reserved, customer_id, end_user_id, stp_machine FROM log_product_fg_edit_amount WHERE product_id = $1 AND fg_lot_no is not null order by create_date desc LIMIT 20;\\\",\\\"check_supplier_del\\\":\\\"SELECT id, product_id, supplier_id, is_active, sort, create_date, is_use, buy_price FROM product_supplier WHERE product_id = $1;\\\",\\\"DeletePSforUpdate\\\":\\\"DELETE FROM product_supplier WHERE product_id = $1 and supplier_id = $2\\\",\\\"checkProductSupplier\\\":\\\"SELECT id, product_id, supplier_id, is_active, sort, create_date, is_use, buy_price FROM product_supplier WHERE product_id = $1 and supplier_id = $2 and sort = $3\\\",\\\"updateProductSupplier\\\":\\\"UPDATE product_supplier SET buy_price=$2, is_active = $3, sort=$4, create_date = $5, minimum_order = $6, lead_time = $7, remark = $8 ,update_date= $9,update_by=$10 WHERE id = $1;\\\",\\\"addProductSupplier\\\":\\\"INSERT INTO product_supplier(id, product_id, supplier_id, is_active, sort, create_date, is_use, buy_price,minimum_order,lead_time,remark,update_date,update_by)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"get_supplier\\\":\\\"SELECT msr.id, product_id, supplier_id, msr.is_active, msr.sort, buy_price, name as supplier,msr.create_date,msr.minimum_order,msr.lead_time,msr.remark FROM product_supplier msr left join material_supplier ms on msr.supplier_id = ms.id WHERE product_id = $1;\\\",\\\"get_supplier_Active\\\":\\\"SELECT msr.id, product_id, supplier_id, msr.is_active, msr.sort, buy_price, name as supplier,msr.create_date,msr.minimum_order,msr.lead_time,msr.remark,ms.name as supplier, ms.line_id as line,ms.contact_tel as tel FROM product_supplier msr left join material_supplier ms on msr.supplier_id = ms.id WHERE msr.is_active =true and product_id = $1;\\\",\\\"update_sort\\\":\\\"UPDATE product_supplier SET sort=$2 WHERE id = $1;\\\",\\\"DeleteMachineforUpdate\\\":\\\"DELETE FROM machine_product WHERE product_id = $1;\\\",\\\"AddMachine\\\":\\\"INSERT INTO machine_product(id, machine_id, product_id, sort, create_date)VALUES ($1, $2, $3, $4, $5);\\\",\\\"get_machine\\\":\\\"SELECT id, machine_id, product_id, sort, create_date FROM machine_product where product_id = $1;\\\",\\\"addLogFG\\\":\\\"INSERT INTO log_product_fg_edit_amount(id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date, remark, color, log_warehouse_details_id, tag_no, log_status_id, is_reserved, customer_id,end_user_id, stp_machine,sell_price,buy_price,current_amount) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20,$21);\\\",\\\"product_model_report\\\":\\\"SELECT id, oem_id, name, is_use, sort, update_date, update_by, remark FROM product_model WHERE is_use=true AND oem_id=$1;\\\",\\\"product_report\\\":\\\"SELECT a.id, a.no, a.name, a.product_model_id, a.user_id, a.oem_id,a.fg_amount, a.is_active, a.is_use,  a.create_date, a.update_date, b.description, b.sell_price FROM product a LEFT JOIN product_detail b on a.id = b.product_id WHERE is_use=true AND product_model_id=$1;\\\",\\\"product_null_report\\\":\\\"SELECT a.id, a.no, a.name, a.product_model_id, a.user_id, a.oem_id,a.fg_amount, a.is_active, a.is_use,  a.create_date, a.update_date, b.description, b.sell_price FROM product a LEFT JOIN product_detail b on a.id = b.product_id WHERE a.is_use=true AND a.product_model_id is not null AND a.oem_id=$1 ;\\\",\\\"addLogCutting\\\":\\\"INSERT INTO log_cutting_edit_amount(id, product_id, user_id, edit_type, amount, create_date, remark, tag_no) VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\",\\\"chackloopproductno\\\":\\\"SELECT id, no, name, oem_id, is_use=true FROM product WHERE oem_id =$1 AND is_use= true Order by no desc;\\\",\\\"get_customer\\\":\\\"SELECT a.id, a.product_id, a.customer_id, b.name, b.contact_name, b.is_use, b.full_name, b.line_id, b.id as cus_id FROM product_customer a Left join customer b on a.customer_id = b.id  WHERE b.is_use = true AND a.product_id = $1;\\\",\\\"get_plating_product\\\":\\\"SELECT a.id, a.plating_plat_id, a.product_id, a.is_use, a.is_active, a.create_date, b.id as fac_id, b.code, b.name, b.telnumber, b.address FROM plating_product a LEFT JOIN plating_plant b on a.plating_plat_id = b.id WHERE a.product_id =$1 AND a.is_use = true AND a.is_active = true;\\\",\\\"chack_plating_product\\\":\\\"SELECT id, plating_plat_id, product_id FROM plating_product WHERE product_id =$1;\\\",\\\"add_plating_product\\\":\\\"INSERT INTO plating_product(id, plating_plat_id, product_id, is_use, is_active, create_date)VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"edit_plating_product\\\":\\\"UPDATE plating_product SET  plating_plat_id=$2, product_id=$3, create_date=$4 WHERE id=$1;\\\",\\\"del_plating_product\\\":\\\"DELETE FROM plating_product WHERE id=$1;\\\",\\\"chack_product_customer\\\":\\\"SELECT id, product_id, customer_id FROM product_customer WHERE product_id = $1;\\\",\\\"add_product_customer\\\":\\\"INSERT INTO product_customer(id, product_id, customer_id) VALUES ($1, $2, $3);\\\",\\\"edit_product_customer\\\":\\\"UPDATE product_customer SET product_id=$2, customer_id=$3 WHERE id=$1;\\\",\\\"del_product_customer\\\":\\\"DELETE FROM product_customer WHERE id=$1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryProduct.json?");

/***/ }),

/***/ "./app/query/queryProductPlaning.json":
/*!********************************************!*\
  !*** ./app/query/queryProductPlaning.json ***!
  \********************************************/
/*! exports provided: findProductForcastbyYearMoth, findProductForcastbyYearMothCheck, findProductForcast, findProductForcast2, addProductForcast, updateProductForcast, updateProductForcast_add, addLogProductForcast, updateRealOrder, getC_leng, findOrder, filter_order, filter_orderByDate, check_order, cancle_order, add_order, productMonitoring, GetProductDetail, GetProductDetail2, add_details, add_product_header, updateListProduct, getOrderNo, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"findProductForcastbyYearMoth\\\":\\\"SELECT pf.id FROM product p left join product_forcast pf on pf.product_id = p.id where pf.year_month = $1 and p.no ILIKE $2\\\",\\\"findProductForcastbyYearMothCheck\\\":\\\"SELECT  pf.id , pf.amount_forcast, pf.wip_amount, pf.fg_amount, pf.in_hand_amount, pf.year_month, pf.amount, pf.product_id FROM product p left join product_forcast pf on pf.product_id = p.id where pf.year_month = $1 and p.no = $2 and p.oem_id = $3\\\",\\\"findProductForcast\\\":\\\"select p.id,p.no,p.name,p.wip_amount,p.fg_amount ,(select sum(amount) from log_product_fg_edit_amount where edit_type=false and product_id =p.id and EXTRACT(MONTH FROM create_date) = $4 and EXTRACT(isoyear FROM create_date) = $3 )as delivery,(select amount_forcast from product_forcast where product_id =p.id and amount_forcast > 0  and year_month=($3+$4))as amount_forcast , (select amount_forcast from product_forcast where product_id =p.id and year_month= CAST(nullif((substring($5 from 1 for 6)), '') AS integer))as n1 ,(select amount_forcast from product_forcast where product_id =p.id and year_month=CAST(nullif((substring($5 from 7 for 6)), '') AS integer))as n2,(select amount_forcast from product_forcast where product_id =p.id and year_month=CAST(nullif((substring($5 from 13 for 6)), '') AS integer))as n3,(select amount_forcast from product_forcast where product_id =p.id and year_month=CAST(nullif((substring($5 from 19 for 6)), '') AS integer))as n4  from product p right join product_forcast pf on p.id = pf.product_id where p.is_use=true and ($1::text is null or p.no ILIKE $1) and p.oem_id=$2  group by p.id order by (COALESCE(p.wip_amount, 0)+ COALESCE(p.fg_amount, 0)) desc\\\",\\\"findProductForcast2\\\":\\\"select * from product where no = $1 and oem_id = $2 and is_use = true\\\",\\\"addProductForcast\\\":\\\"INSERT INTO product_forcast(id, product_id, year_month, amount, amount_forcast, wip_amount, fg_amount, in_hand_amount, user_id, create_date, update_date,issue_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,$12)\\\",\\\"updateProductForcast\\\":\\\"UPDATE product_forcast SET amount_forcast=$1, wip_amount=$2, fg_amount=$3, in_hand_amount=$4, user_id=$5, update_date=$6,issue_date=$8 WHERE id=$7\\\",\\\"updateProductForcast_add\\\":\\\"UPDATE product_forcast SET amount_forcast=case when amount_forcast is null then 0+$1 else amount_forcast+$1 end, wip_amount=$2, fg_amount=$3, in_hand_amount=$4, user_id=$5, update_date=$6,issue_date=$8 WHERE id=$7\\\",\\\"addLogProductForcast\\\":\\\"INSERT INTO log_product_forcast(id, product_id, year_month, amount_forcast, wip_amount, fg_amount, in_hand_amount, user_id, create_date,issue_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10)\\\",\\\"updateRealOrder\\\":\\\"UPDATE \\\\\\\"product_forcast\\\\\\\" SET amount = $1 ,user_id = $2 ,update_date = $3 ,product_order_id = $5 where id=$4\\\",\\\"getC_leng\\\":\\\"SELECT p.id, p.no, p.name,c_leng,m.amount,m.id as mat_id, m.no as mat_no FROM product p left join product_material pm on p.id = pm.product_id left join material m on pm.material_id = m.id where p.id = $1 and p.oem_id = $2\\\",\\\"findOrder\\\":\\\"SELECT po.order_no, p.no,p.name, pf.amount FROM \\\\\\\"product_forcast\\\\\\\" pf left join \\\\\\\"product_order\\\\\\\" po on pf.product_order_id = po.id left join \\\\\\\"product\\\\\\\" p on pf.product_id = p.id WHERE pf.product_order_id = $1 AND pf.amount > 0 ORDER BY pf.amount DESC\\\",\\\"filter_order\\\":\\\"SELECT * FROM \\\\\\\"product_order\\\\\\\"  where is_active = true and is_use = true and  ($1::text is null or order_no ILIKE '%' || $1 || '%') and oem_id = $2 ORDER BY create_date desc\\\",\\\"filter_orderByDate\\\":\\\"SELECT * FROM \\\\\\\"product_order\\\\\\\"  where is_active = true and is_use = true and  ($1::text is null or order_no ILIKE '%' || $1 || '%') and create_date BETWEEN $2 AND $3 and oem_id = $4 ORDER BY create_date desc\\\",\\\"check_order\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by FROM product_order where order_no ILIKE '%' || $1 || '%' and oem_id = $2\\\",\\\"cancle_order\\\":\\\"UPDATE product_order SET is_active = false, cancle_by =$2 where id = $1\\\",\\\"add_order\\\":\\\"INSERT INTO product_order(id, order_no, is_use, is_active, create_by, create_date, cancle_by,list_product,oem_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\\\",\\\"productMonitoring\\\":[\\\"select \\\",\\\"p.no,p.name,pm.name product_model,p.qty_unit,pr.name product_route,c.fg_min min_stk,c.fg_max max_stk \\\",\\\",(select sum(amount) from log_product_fg_edit_amount where product_id =p.id and edit_type=false and( EXTRACT(MONTH FROM create_date)>=1 and EXTRACT(MONTH FROM create_date) <= 12) and EXTRACT(isoyear FROM create_date) = $4) as delivery \\\",\\\",(select sum(amount) from log_product_fg_edit_amount where product_id =p.id and edit_type=false and( EXTRACT(MONTH FROM create_date)>=1 and EXTRACT(MONTH FROM create_date) <= 03) and EXTRACT(isoyear FROM create_date) = $4) as q1 \\\",\\\",(select sum(amount) from log_product_fg_edit_amount where product_id =p.id and edit_type=false and( EXTRACT(MONTH FROM create_date)>=4 and EXTRACT(MONTH FROM create_date) <= 06) and EXTRACT(isoyear FROM create_date) = $4) as q2 \\\",\\\",(select sum(amount) from log_product_fg_edit_amount where product_id =p.id and edit_type=false and( EXTRACT(MONTH FROM create_date)>=7 and EXTRACT(MONTH FROM create_date) <= 09) and EXTRACT(isoyear FROM create_date) = $4) as q3 \\\",\\\",(select sum(amount) from log_product_fg_edit_amount where product_id =p.id and edit_type=false and( EXTRACT(MONTH FROM create_date)>=10 and EXTRACT(MONTH FROM create_date)<= 12 )and EXTRACT(isoyear FROM create_date) = $4) as q4 \\\",\\\",p.is_active status,c.rank_a,c.rank_b,c.rank_c,c.rank_d \\\",\\\"from product p \\\",\\\"left join product_detail pd on p.id = pd.product_id \\\",\\\"left join product_route pr on pr.id = pd.product_route_id \\\",\\\"left join product_model pm on p.product_model_id = pm.id \\\",\\\"inner join product_forcast pf on p.id = pf.product_id \\\",\\\"left join oem o on p.oem_id = o.id \\\",\\\"left join company c on c.id= o.company_id \\\",\\\"where p.is_use=true and p.oem_id=$1 and pf.year_month  BETWEEN $2 AND $3\\\"],\\\"GetProductDetail\\\":\\\"SELECT m.id as mat_id, m.no as mat_no,pm.wt_mtr,pm.c_leng,pm.cos_pc ,ms.name as mat_size,mp.name as mat_spec FROM product p left join product_material pm on p.id = pm.product_id left join material m on pm.material_id = m.id left join material_size ms on m.material_size_id = ms.id left join material_spec mp on m.material_spec_id = mp.id where p.id = $1 and p.oem_id = $2 \\\",\\\"GetProductDetail2\\\":\\\"SELECT max(a.create_date) as create_date ,a.mat_lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = true and b.material_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_material_edit_amount b where b.mat_lot_no = a.mat_lot_no and b.edit_type = false and b.material_id = $1) as amount FROM log_material_edit_amount a WHERE a.mat_lot_no != 'null' and a.material_id = $1 GROUP BY a.mat_lot_no order by create_date asc\\\",\\\"add_details\\\":\\\"INSERT INTO product_order(id, order_no, is_use, is_active, create_by, create_date, cancle_by,list_product) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\\\",\\\"add_product_header\\\":\\\"INSERT INTO product_order(id, order_no, is_use, is_active, create_by, create_date, cancle_by,list_header) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\\\",\\\"updateListProduct\\\":\\\"UPDATE product_order SET  list_product= $2 , list_header= $3  WHERE id = $1 ;\\\",\\\"getOrderNo\\\":\\\"SELECT id, order_no, is_use, is_active, create_by, create_date, cancle_by, list_product, list_header, oem_id FROM product_order WHERE oem_id =$2 AND order_no ILIKE '%' || $1 || '%' order by create_date desc\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryProductPlaning.json?");

/***/ }),

/***/ "./app/query/queryProductionLine.json":
/*!********************************************!*\
  !*** ./app/query/queryProductionLine.json ***!
  \********************************************/
/*! exports provided: add, findById, getLineAll, getProcessAll, getSectionAll, getMachineAll, productionLineAll, addCycleTime, updateCycleTime, fineCycleTimeByProdId, getMachineByProcess, getSectionByCom, getProcessBySection, getCycle_time, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"tracking_tag\\\\\\\"( id, tracking_name, amount, keep_date, product_id, section_id, is_use, is_active, is_dispatch, tag_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\\\",\\\"findById\\\":\\\"\\\",\\\"getLineAll\\\":\\\"SELECT id, line_name, is_use, sort FROM \\\\\\\"line\\\\\\\" WHERE is_use = true \\\",\\\"getProcessAll\\\":\\\"SELECT id, section_id, process_name, is_use, sort FROM \\\\\\\"process\\\\\\\" WHERE is_use = true ORDER BY sort ASC\\\",\\\"getSectionAll\\\":\\\"SELECT id, section_name, is_use, sort FROM \\\\\\\"section\\\\\\\" WHERE is_use = true and oem_id = $1\\\",\\\"getMachineAll\\\":\\\"SELECT id, machine_name, is_use, sort FROM \\\\\\\"matchine\\\\\\\" WHERE is_use = true\\\",\\\"productionLineAll\\\":\\\"SELECT x.id , x.machine_id , a.machine_name , x.line_id , b.line_name , x.process_id , c.process_name , x.cycle_time , x.is_use , x.product_id ,d.no product_no ,d.min_product FROM \\\\\\\"cycle_time\\\\\\\" x left join \\\\\\\"matchine\\\\\\\" a on a.id = x.machine_id left join \\\\\\\"line\\\\\\\" b on b.id = x.line_id left join \\\\\\\"process\\\\\\\" c on c.id = x.process_id left join \\\\\\\"product\\\\\\\" d on d.id = x.product_id where d.oem_id = $1 \\\",\\\"addCycleTime\\\":\\\"INSERT INTO \\\\\\\"cycle_time\\\\\\\" (id, machine_id, line_id, process_id, cycle_time, is_use, product_id )VALUES ($1, $4, $3, $5, $6, $7, $8)\\\",\\\"updateCycleTime\\\":\\\"UPDATE \\\\\\\"cycle_time\\\\\\\" SET cycle_time=$1 WHERE product_id=$2 and process_id =$3\\\",\\\"fineCycleTimeByProdId\\\":\\\"SELECT x.id, a.id as process_id,a.process_name,b.id as section_id,b.section_name,cycle_time, x.is_use, product_id FROM \\\\\\\"cycle_time\\\\\\\" x left join \\\\\\\"process\\\\\\\" a on a.id = x.process_id left join \\\\\\\"section\\\\\\\" b on a.section_id = b.id where x.is_use = true AND x.product_id = $1\\\",\\\"getMachineByProcess\\\":\\\"UPDATE \\\\\\\"cycle_time\\\\\\\" SET cycle_time=$1 WHERE product_id=$2 and process_id =$3\\\",\\\"getSectionByCom\\\":\\\"SELECT DISTINCT on (e.section_name)  c.section_id,e.section_name FROM \\\\\\\"cycle_time\\\\\\\" x left join \\\\\\\"matchine\\\\\\\" a on a.id = x.machine_id  left join \\\\\\\"line\\\\\\\" b on b.id = x.line_id left join \\\\\\\"process\\\\\\\" c on c.id = x.process_id  left join \\\\\\\"product\\\\\\\" d on d.id = x.product_id left join \\\\\\\"section\\\\\\\" e on e.id = c.section_id where oem_id = $1 and e.is_use = true\\\",\\\"getProcessBySection\\\":\\\"UPDATE \\\\\\\"cycle_time\\\\\\\" SET cycle_time=$1 WHERE product_id=$2 and process_id =$3\\\",\\\"getCycle_time\\\":\\\"SELECT id, machine_id, line_id, process_id, cycle_time, is_use, product_id FROM cycle_time where product_id = $1 and is_use = true\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryProductionLine.json?");

/***/ }),

/***/ "./app/query/queryProductionOrderCts.json":
/*!************************************************!*\
  !*** ./app/query/queryProductionOrderCts.json ***!
  \************************************************/
/*! exports provided: checkProductionCTsSave, SaveProductionCTs, getProNo, getProductionByID, updateProduction, filterProductionCTS, filterProductionCTSone, delProductionCTS, loopmatlog, customerlog, productlog, updateSatatusID, filterProduct, filterProductByCustomer, lotcheckwippord, lotcheckwipChupWeight_amount, lotcheckwipChupPrice_amount, lotPackPrice_amount, getIDChup, lotPackWeight_amount_use, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"checkProductionCTsSave\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts where no = $1;\\\",\\\"SaveProductionCTs\\\":\\\"INSERT INTO production_order_cts( id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by,time_per_product,producer_date,is_success,finish_date_plan) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18,$19,$20,$21,$22);\\\",\\\"getProNo\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts where no ILIKE '%' || $1 || '%';\\\",\\\"getProductionByID\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date,is_success,finish_date_plan FROM production_order_cts where id = $1;\\\",\\\"updateProduction\\\":\\\"UPDATE production_order_cts SET customer_id=$2, product_id=$3, plated=$4, material_id=$5, amount=$6, user_producer=$7, total_time_producer=$8, finish_date_producer=$9, remark=$10, setup_ng_record=$11, user_document=$12, is_use=$13,update_date=$14, update_by=$15, time_per_product= $16, producer_date= $17, finish_date_plan=$18 WHERE id = $1;\\\",\\\"filterProductionCTS\\\":\\\"SELECT a.id, a.no, a.customer_id, a.product_id, a.plated, a.material_id, a.amount, a.user_producer, a.total_time_producer, a.finish_date_producer, a.remark, a.setup_ng_record, a.user_document, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.producer_date, a.time_per_product,a.is_success,a.finish_date_plan, b.name as customer,b.oem_id FROM production_order_cts a LEFT JOIN customer b on b.id = a.customer_id WHERE  ($1::text is null or a.no LIKE '%' || $1 || '%' ) AND ($2::text is null or b.name LIKE '%' || $2 || '%' ) and b.oem_id = $5 AND a.is_use = true AND a.producer_date BETWEEN $3 AND $4 ORDER BY a.no  desc;\\\",\\\"filterProductionCTSone\\\":\\\"SELECT a.id, a.no, a.customer_id, a.product_id, a.plated, a.material_id, a.amount, a.user_producer, a.total_time_producer, a.finish_date_producer, a.remark, a.setup_ng_record, a.user_document, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.producer_date, a.time_per_product,a.is_success,a.finish_date_plan, b.name as customer,b.oem_id FROM production_order_cts a LEFT JOIN customer b on b.id = a.customer_id WHERE  b.oem_id = $3 and ($1::text is null or a.no LIKE '%' || $1 || '%' ) AND ($2::text is null or b.name LIKE '%' || $2 || '%' ) AND a.is_use = true ORDER BY a.no desc;\\\",\\\"delProductionCTS\\\":\\\" UPDATE \\\\\\\"production_order_cts\\\\\\\" SET is_use = false, update_date=$2,update_by=$3 WHERE  id=$1;\\\",\\\"loopmatlog\\\":\\\"SELECT a.id, a.no, a.name, a.material_type_id, a.material_spec_id, a.material_size_id, a.buy_price, a.material_unit_id, a.amount, a.description, a.remark, a.image, a.user_id,  a.oem_id, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.image_name,  a.imaget_path, a.weight_piece, a.supplier_lead_time, a.minimum_lot, a.minimum_order_supplier, a.material_supplier2_id, a.material_supplier3_id, a.buy_price2, a.buy_price3, a.supplier_lead_time2, a.supplier_lead_time3, a.coil_weight FROM material a LEFT JOIN material_spec b on a.material_spec_id = b.id WHERE a.id = $1;\\\",\\\"customerlog\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel, contact_fax, customer_email, customer_email_personermail, remark, detail, full_name, customer_email_person2, relate_product_id, line_id, customer_id, update_by, update_date, oem_id FROM customer WHERE id = $1 \\\",\\\"productlog\\\":\\\"SELECT a.id, a.no, a.name as product_name, a.product_model_id, a.qty_unit, a.user_id, a.oem_id, a.wip_amount, a.fg_amount, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.cut_amount, a.min_product, a.min_lot, a.is_assy, a.logistic_amount, a.end_user_amount, a.product_plants_item, a.dip_amount, a.is_trade, a.\\\\\\\"N/W (g.)\\\\\\\" as nw_number, b.\\\\\\\"G/W. (g.)\\\\\\\" as gw_number, c.customer_id, d.full_name  FROM product a LEFT JOIN product_material b on b.product_id = a.id LEFT JOIN product_customer c on a.id = c.product_id LEFT JOIN customer d on c.customer_id = d.id WHERE a.id = $1 ORDER by a.update_date desc;\\\",\\\"updateSatatusID\\\":\\\"UPDATE production_order_cts SET update_date = $2, update_by=$3 ,is_success = $4 WHERE id=$1;\\\",\\\"filterProduct\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name,p.surface , p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price,pd.unit, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head ,customer.customer_id from product p left join product_detail pd on p.id = pd.product_id left join product_customer as customer on p.id = customer.product_id where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::boolean is false or p.fg_amount > 0)and ($6::boolean is false or p.is_trade = true)and ($7::boolean is false or p.fg_amount < p.min_product) and p.product_plants_item is null ORDER BY p.create_date\\\",\\\"filterProductByCustomer\\\":\\\"SELECT p.id, p.no,p.product_model_id, p.name,p.surface , p.product_model_id, p.qty_unit, p.user_id, p.oem_id, p.wip_amount, p.fg_amount,p.min_product,p.end_user_amount,p.logistic_amount, pd.image, pd.description, pd.sell_price,pd.unit, pd.circle_time, pd.sku_user, pd.product_route_id, pd.product_size_id, pd.product_color_id, pd.image_name, pd.imaget_path, pd.sku_system  product_material_id, p.cut_amount, p.is_assy , p.product_plants_item , p.is_trade, pd.stp_type,  pd.width,  pd.height,  pd.blade_head ,customer.customer_id from product p left join product_detail pd on p.id = pd.product_id left join product_customer as customer on p.id = customer.product_id where p.is_use =true  AND ($1::text is null or p.no ILIKE '%' || $1 || '%') and ($2::text is null or p.name ILIKE '%' || $2 || '%') and ($3::uuid is null or p.product_model_id =$3) and ($4::uuid is null or p.oem_id =$4) and ($5::boolean is false or p.fg_amount > 0)and ($6::boolean is false or p.is_trade = true)and ($7::boolean is false or p.fg_amount < p.min_product) and p.product_plants_item is null and customer.customer_id = $8 ORDER BY p.create_date\\\",\\\"lotcheckwippord\\\":\\\"SELECT min(a.create_date) as create_date,a.lot_no,(SELECT coalesce(sum(b.amount),0)FROM log_wip_prod_edit_amount_cts b where b.lot_no = a.lot_no and b.edit_type = true and b.product_order_cts_id =  $1) - (SELECT coalesce(sum(b.amount),0)FROM log_wip_prod_edit_amount_cts b where b.lot_no = a.lot_no and b.edit_type = false and b.product_order_cts_id =  $1) as amount FROM log_wip_prod_edit_amount_cts a WHERE a.lot_no != 'null' and a.product_order_cts_id = $1 GROUP BY a.lot_no order by create_date desc\\\",\\\"lotcheckwipChupWeight_amount\\\":\\\"SELECT min(a.create_date) as create_date, a.lot_no,(SELECT coalesce(sum(b.weight_amount),0)FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.lot_no = a.lot_no and b.edit_type = true and b.production_order_cts_id = $1) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.lot_no = a.lot_no and b.edit_type = false and b.production_order_cts_id = $1) as amount FROM log_wip_chup_edit_amount_cts a WHERE a.picecs_amount is null and a.lot_no != 'null' and a.production_order_cts_id =$1 GROUP BY a.lot_no order by create_date desc\\\",\\\"lotcheckwipChupPrice_amount\\\":\\\"SELECT min(a.create_date) as create_date, a.lot_no,(SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.lot_no = a.lot_no and b.edit_type = true and b.production_order_cts_id = $1) - (SELECT coalesce(sum(b.picecs_amount),0)FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.lot_no = a.lot_no and b.edit_type = false and b.production_order_cts_id = $1) as amount FROM log_wip_chup_edit_amount_cts a WHERE a.weight_amount  is null and a.lot_no != 'null' and a.production_order_cts_id =$1 GROUP BY a.lot_no order by create_date desc\\\",\\\"lotPackPrice_amount\\\":\\\"SELECT min(a.create_date) as create_date, a.wip_chup_lot_no,(SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = true and b.log_wip_chup_edit_amount_cts_id = $1) - (SELECT coalesce(sum(b.picecs_amount),0)FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.wip_chup_lot_no = a.wip_chup_lot_no and b.edit_type = false and b.log_wip_chup_edit_amount_cts_id = $1) as amount FROM log_wip_chup_edit_amount_cts a WHERE a.weight_amount  is null and a.wip_chup_lot_no != 'null' and a.log_wip_chup_edit_amount_cts_id =$1 GROUP BY a.wip_chup_lot_no order by create_date desc\\\",\\\"getIDChup\\\":\\\"SELECT * FROM  log_wip_chup_edit_amount_cts where production_order_cts_id = $1 and edit_type = false\\\",\\\"lotPackWeight_amount_use\\\":\\\"SELECT min(a.create_date) as create_date, a.pack_lot_no,(SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.piece_amount is null and b.pack_lot_no = a.pack_lot_no and b.edit_type = true and b.product_id = $1 and pack_lot_no = $2) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_pack_edit_amount_cts b where b.piece_amount is null and b.pack_lot_no = a.pack_lot_no and b.edit_type = false and b.product_id = $1 and pack_lot_no = $2) as amount FROM log_pack_edit_amount_cts a WHERE a.piece_amount is null and a.pack_lot_no != 'null' and a.product_id =$1  and pack_lot_no = $2GROUP BY a.pack_lot_no order by create_date desc\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryProductionOrderCts.json?");

/***/ }),

/***/ "./app/query/queryProject.json":
/*!*************************************!*\
  !*** ./app/query/queryProject.json ***!
  \*************************************/
/*! exports provided: add, update, del, findById, GetMenu, filter, CheckSort, checkNameProject, checkProjectName_add, checkProjectName_edit, testfilter, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"project\\\\\\\" (id, project_name, company_id, contact_name, contect_tel, contact_email, detail, is_use,update_date,update_by,oem_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8,$9,$10,$11)\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"project\\\\\\\" SET   project_name = $2, contact_name = $3, contect_tel = $4, contact_email = $5, detail = $6 ,update_date=$7,update_by=$8 WHERE id = $1\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"project\\\\\\\" SET is_use =false,update_date= $2,update_by=$3 WHERE  id=$1\\\",\\\"findById\\\":\\\"SELECT id, project_name, company_id, contact_name, contect_tel, contact_email, detail, is_use FROM \\\\\\\"project\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"GetMenu\\\":\\\"SELECT id, project_name  FROM \\\\\\\"project\\\\\\\" WHERE is_use = true\\\",\\\"filter\\\":\\\"SELECT * FROM \\\\\\\"project\\\\\\\"  where is_use = true and company_id = $3 and oem_id = $2 and  ($1::text is null or project_name ILIKE '%' || $1 || '%')\\\",\\\"CheckSort\\\":\\\"SELECT max(sort) FROM \\\\\\\"project\\\\\\\" \\\",\\\"checkNameProject\\\":\\\"select id,project_name from \\\\\\\"project\\\\\\\" where project_name ILIKE $1 and is_use=true and company_id=$2\\\",\\\"checkProjectName_add\\\":\\\"SELECT id, project_name, company_id, contact_name, contect_tel, contact_email, detail, is_use FROM project where project_name = $1 and company_id = $2 and is_use = true\\\",\\\"checkProjectName_edit\\\":\\\"SELECT id, project_name, company_id, contact_name, contect_tel, contact_email, detail, is_use FROM project where project_name = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"testfilter\\\":\\\"SELECT id, section_name, is_use, sort, oem_id FROM section where is_use = true or section_name = 'test'\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryProject.json?");

/***/ }),

/***/ "./app/query/queryPromotion.json":
/*!***************************************!*\
  !*** ./app/query/queryPromotion.json ***!
  \***************************************/
/*! exports provided: addPromotion, filterPromotion, findPromotionById, updatePromotion, delPromotion, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"addPromotion\\\":\\\"INSERT INTO promotion(id, topic_promotion, detail_promotion, source_promotion, image_promotion, start_promotion, end_promotion, is_use, oem_id, company_id, update_by, create_date, image_path)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"filterPromotion\\\":\\\"SELECT id, topic_promotion,detail_promotion,source_promotion,image_promotion,start_promotion,end_promotion,is_use,oem_id,company_id,update_by, create_date,image_path FROM promotion where ($1::text is null or topic_promotion ILIKE '%' || $1 || '%') and oem_id = $2 and is_use = true order by create_date desc;\\\",\\\"findPromotionById\\\":\\\"SELECT id, topic_promotion,detail_promotion,source_promotion,image_promotion,start_promotion,end_promotion,is_use,oem_id,company_id,update_by, create_date,image_path FROM promotion where id = $1\\\",\\\"updatePromotion\\\":\\\"UPDATE promotion SET topic_promotion=$2, detail_promotion=$3, source_promotion=$4, image_promotion=$5, start_promotion=$6, end_promotion=$7, update_by=$8, image_path=$9 WHERE id = $1;\\\",\\\"delPromotion\\\":\\\"UPDATE promotion SET is_use = false WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryPromotion.json?");

/***/ }),

/***/ "./app/query/queryReport.json":
/*!************************************!*\
  !*** ./app/query/queryReport.json ***!
  \************************************/
/*! exports provided: purchase_order_cts, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"purchase_order_cts\\\":\\\"SELECT id, no, plant, supplier, po_number, item_category, item_number, ac, qty_ordered, item_description, material_name, destination_name, inspection_flag, job_number, buyer, unit_price, po_amount, delivery_date, qty, po_issue_date, currency, po_month, po_year, is_expless, is_use, update_date, update_by, oem_id, company_id FROM purchase_order_cts where oem_id = $1 and company_id = $2 and delivery_date BETWEEN $3 AND $4;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryReport.json?");

/***/ }),

/***/ "./app/query/queryReport_pdf.json":
/*!****************************************!*\
  !*** ./app/query/queryReport_pdf.json ***!
  \****************************************/
/*! exports provided: filterReportDD, filterReportDD2, ReporDDcar, filterReportDR, filtersaleexprss, get_bill_logistic, check_star_bill, get_driver_person, getBill, getdriver, getBill2, getBillall, sale_experss01, checkRateByBillId, filterLogisticInOutReport, getLogisticInOutReport, monthlyfuel, monthlyfuelall, monthlybill, monthlybillall, getplate_number_pair_Cost_join, getplate_number_pair_Cost1, getplate_number_pair_Cost, check_month, getAll_pair_Cost, getAll_month_pair_Cost, getstp_machine, stp_end_user, stp_customer, fg_check, STP_FG_check, deflux_stp, getbillreport, chackuse, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterReportDD\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.update_date, a.update_by, a.approve_person, a.oem_id, a.company_id, a.logistic_date, b.bill_no, b.customer_name, b.bill_destination,b.bill_values, b.weight, b.product_and_category, c.plate_number, c.box_number, c.logistic_group_id, d.driver_person_id, q.nickname, q.is_dummy, d.remark FROM driver a LEFT JOIN bill b on a.bill_id = b.id LEFT JOIN logistic_car c on c.id = a.logistic_car_id LEFT JOIN driver_bill d on a.id = d.driver_id LEFT JOIN driver_person q on q.id = d.driver_person_id LEFT JOIN star_bill y on y.bill_id = a.bill_id WHERE c.logistic_group_id = $1 and y.bill_id is not null and a.logistic_date between $2 and $3 and a.oem_id = $4 and a.company_id = $5 Order by  a.start_time  ;\\\",\\\"filterReportDD2\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.update_date, a.update_by, a.approve_person, a.oem_id, a.company_id, a.logistic_date, b.bill_no, b.customer_name, b.bill_destination,b.bill_values, b.weight, b.product_and_category, c.plate_number, c.box_number, c.logistic_group_id, d.driver_person_id, q.nickname, q.is_dummy, d.remark FROM driver a LEFT JOIN bill b on a.bill_id = b.id LEFT JOIN logistic_car c on c.id = a.logistic_car_id LEFT JOIN driver_bill d on a.id = d.driver_id LEFT JOIN driver_person q on q.id = d.driver_person_id LEFT JOIN star_bill y on y.bill_id = a.bill_id WHERE c.logistic_group_id = $1 and y.bill_id is not null and a.logistic_date between $2 and $3 and a.oem_id = $4 and a.company_id = $5 Order by   c.plate_number   ;\\\",\\\"ReporDDcar\\\":\\\"SELECT id, car_name, box_number FROM logistic_car;\\\",\\\"filterReportDR\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.start_time, a.is_use, a.is_active,  a.update_date, a.update_by, a.oem_id, a.company_id, a.logistic_date, b.customer_name, b.bill_destination, b.bill_values, b.update_date, b.weight, b.is_pack,  b.remark, c.plate_number, d.driver_person_id, q.driver_name_th, b.bill_no FROM driver a LEFT JOIN bill b on b.id = a.bill_id LEFT JOIN logistic_car c on c.id = a.logistic_car_id LEFT JOIN driver_bill d on d.driver_id = a.id LEFT JOIN driver_person q on q.id = d.driver_person_id WHERE a.company_id = $1 and ($2::uuid is null or a.oem_id = $2 ) and logistic_date between $3 and $4 ;\\\",\\\"filtersaleexprss\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, sale_value FROM input_express_sale WHERE company_id = $1 and oem_id = $2 ;\\\",\\\"get_bill_logistic\\\":\\\"SELECT  a.id,a.logistic_car_id, a.bill_id,b.bill_no,b.product_and_category,b.bill_values,b.weight,b.customer_name,b.bill_destination,c.plate_number, a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.oem_id, a.company_id, a.logistic_date, b.remark, a.approve_person FROM driver a LEFT JOIN bill b ON a.bill_id = b.id LEFT JOIN logistic_car c ON a.logistic_car_id = c.id WHERE b.company_id = $1 AND b.oem_id = $2 AND a.logistic_date between $3  and $4\\\",\\\"check_star_bill\\\":\\\"SELECT id, star_type_id, bill_id FROM star_bill WHERE bill_id = $1 AND is_use = true ;\\\",\\\"get_driver_person\\\":\\\"SELECT a.id, a.driver_id, a.driver_person_id,b.nickname, a.remark as assistant FROM driver_bill a LEFT JOIN driver_person b ON a.driver_person_id = b.id WHERE b.is_dummy = false AND a.driver_id = $1;\\\",\\\"getBill\\\":\\\"SELECT a.id, a.bill_no, a.customer_name, a.bill_destination, a.bill_values, a.weight, a.is_pack,  a.create_bill, a.delivery_bill, a.delivery_time, a.is_use, a.update_date,  a.oem_id, a.company_id, a.bill_oem_id,a.create_time, b.logistic_car_id, b.oem_car_id, b.start_time,b.logistic_date,b.remark ,c.plate_number,d.bill_id ,a.remark as remark_bill, a.is_remark  FROM bill a left join driver b on b.bill_id = a.id left join logistic_car c on c.id = b.logistic_car_id left join star_bill d on a.id = d.bill_id  where a.bill_oem_id =$1 and a.company_id =$2 and d.bill_id is null  and a.is_use = true and a.is_remark is null Order by b.logistic_date,a.create_bill DESC ;\\\",\\\"getdriver\\\":\\\"SELECT a.id, a.driver_id, a.driver_person_id, a.remark,b.logistic_date, b.oem_id,  b.company_id,b.bill_id  FROM driver_bill a left join driver b on b.id = a.driver_id  left join bill c on c.id = b.bill_id  where a.remark is not null and b.oem_id = $1 and b.logistic_date BETWEEN $2 and $3 and b.company_id = $4 ;\\\",\\\"getBill2\\\":\\\"SELECT a.id, a.bill_no, a.customer_name, a.bill_destination, a.bill_values, a.weight, a.is_pack,  a.create_bill, a.delivery_bill, a.delivery_time, a.is_use, a.update_date,  a.oem_id, a.company_id, a.bill_oem_id, b.logistic_car_id, b.oem_car_id, b.start_time,b.logistic_date,b.remark,c.plate_number,d.bill_id  FROM bill a left join driver b on b.bill_id = a.id left join logistic_car c on c.id = b.logistic_car_id left join star_bill d on a.id = d.bill_id  where a.bill_oem_id =$1 and a.delivery_bill BETWEEN $2 and $3 and a.company_id =$4 and a.is_use = true and d.bill_id is null and b.remark is null;\\\",\\\"getBillall\\\":\\\"SELECT a.id, a.bill_no, a.customer_name, a.bill_destination, a.bill_values, a.weight, a.is_pack, a.remark, a.create_bill, a.delivery_bill, a.delivery_time, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.bill_oem_id, a.is_delivery, a.create_time FROM bill a left join star_bill b on b.bill_id = a.id where b.bill_id = a.id and a.bill_oem_id = $1 and a.is_use = true and a.create_bill BETWEEN $2 and $3 and a.company_id =$4\\\",\\\"sale_experss01\\\":\\\"SELECT id, is_use, oem_id, company_id, create_date, update_date, create_by, update_by, date, sale_value FROM input_express_sale WHERE oem_id = $1 and update_date BETWEEN $2 and $3 and company_id = $4\\\",\\\"checkRateByBillId\\\":\\\"SELECT id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active FROM star_bill where bill_id = $1\\\",\\\"filterLogisticInOutReport\\\":\\\"SELECT a.id, a.car_name, a.sim_number, a.car_type_id,b.name as car_type, a.box_number, a.plate_number, a.mileage, a.oem_id, a.company_id, a.capacity, a.tax, a.next_tax, a.chassis_number, a.vin_number, a.car_year, a.model_car, a.band_car, a.fuel_efficiency, a.kpi, a.truck_id, a.is_truck, a.image_person, a.image_person_name, a.is_use, a.is_active, a.person_sirname_car, a.person_lastname_car, a.person_tel_car, a.update_by, a.create_date, a.logistic_group_id, a.image_person_path FROM logistic_car a left join car_type  b on a.car_type_id = b.id WHERE ($1::text is null or a.plate_number LIKE '%' || $1 || '%') AND ($2::uuid is null or a.oem_id = $2) AND a.company_id = $3 and a.logistic_group_id = '38dc8839-7424-4465-9ca4-36d136231010';\\\",\\\"getLogisticInOutReport\\\":\\\"SELECT id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date,remark FROM driver WHERE logistic_car_id = $1 and is_use = true and logistic_date BETWEEN $2 AND $3\\\",\\\"monthlyfuel\\\":\\\"SELECT a.id, a.car_name,  a.car_type_id, a.box_number, a.plate_number, a.mileage, a.oem_id, a.company_id, a.capacity, a.chassis_number, a.fuel_efficiency, a.kpi, a.is_use, a.is_active, a.person_sirname_car, a.person_lastname_car, a.person_tel_car, a.update_by, a.create_date, a.logistic_group_id, a.image_person_path, a.update_date,b.name, c.name as oem_name_id ,d.mileage_number, d.liter, d.is_use as record_use , d.record_date FROM logistic_car a left join car_type b on a.car_type_id = b.id left join oem c on c.id = a.oem_id  left join oil_record d on a.id = d.logistic_car_id WHERE a.logistic_group_id = $1 and a.is_use = true and d.is_use = true and ($2::uuid is null or a.oem_id = $2) and  d.record_date  BETWEEN $3 and $4 and a.company_id = $5  Order by a.plate_number DESC ;\\\",\\\"monthlyfuelall\\\":\\\"SELECT a.id, a.car_name, a.company_id, a.car_type_id, a.box_number, a.plate_number, a.mileage, a.oem_id, a.company_id, a.capacity, a.chassis_number, a.fuel_efficiency, a.kpi, a.is_use, a.is_active, a.person_sirname_car, a.person_lastname_car, a.person_tel_car, a.update_by, a.create_date, a.logistic_group_id, a.image_person_path, a.update_date,b.name, c.name as oem_name_id ,d.mileage_number, d.liter, d.is_use, d.record_date  FROM logistic_car a left join car_type b on a.car_type_id = b.id left join oem c on c.id = a.oem_id left join oil_record d on a.id = d.logistic_car_id WHERE a.logistic_group_id = $1 and a.is_use = true and d.is_use = true and d.record_date  BETWEEN $2 and $3 and a.company_id =$4 and ($5::uuid is null or a.oem_id = $5);\\\",\\\"monthlybill\\\":\\\"SELECT a.id, a.bill_no, a.customer_name, a.bill_destination, a.bill_values, a.is_pack, a.remark, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.bill_oem_id, a.is_delivery, a.create_time, a.product_and_category FROM bill a left join star_bill b on b.bill_id = a.id where bill_oem_id = $1 and b.bill_id = a.id and a.is_use = true and a.create_date BETWEEN $2 and $3 and a.company_id =$4\\\",\\\"monthlybillall\\\":\\\"SELECT a.id, a.bill_no, a.customer_name, a.bill_destination, a.bill_values, a.is_pack, a.remark, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.bill_oem_id, a.is_delivery, a.create_time, a.product_and_category, c.name FROM bill a left join star_bill b on b.bill_id = a.id left join oem c on a.oem_id = c.id where b.bill_id = a.id and a.is_use = true and a.create_date BETWEEN $1 and $2 and a.company_id =$3\\\",\\\"getplate_number_pair_Cost_join\\\":\\\"SELECT a.id,a.oem_id, a.company_id,a.logistic_car_id,b.plate_number FROM car_maintenance a left join logistic_car b on a.logistic_car_id = b.id where a.oem_id =$1 and a.company_id = $2;\\\",\\\"getplate_number_pair_Cost1\\\":\\\"SELECT id, plate_number,oem_id, company_id FROM logistic_car where oem_id = $1 and company_id = $2;\\\",\\\"getplate_number_pair_Cost\\\":\\\"SELECT a.id, a.plate_number,a.oem_id, a.company_id ,b.maintenance_number ,b.price FROM logistic_car a left join car_maintenance b on a.id = b.logistic_car_id where a.oem_id = $1 and a.company_id = $2;\\\",\\\"check_month\\\":\\\"SELECT oem_id,finish_date FROM car_maintenance where oem_id = $1;\\\",\\\"getAll_pair_Cost\\\":\\\"SELECT a.id, a.detail_order, a.maintenance_number, a.mileage_number, a.price, a.oem_id, a.company_id, a.create_date, a.update_by, a.logistic_car_id, a.document_date, a.finish_date, a.type_maintenance, a.location_maintenance, a.status_maintenance, a.remark, a.begin_date, a.spare_part,a.spare_part_amount, a.spare_part_unit, a.apare_part_status, a.price_per_unit, a.purchase, a.withdraw, a.seq, b.plate_number, b.person_sirname_car, b.person_lastname_car,b.oem_id FROM car_maintenance a left join logistic_car b on a.logistic_car_id = b.id where b.oem_id = $1 and b.company_id = $2 and a.finish_date BETWEEN $3 and $4;\\\",\\\"getAll_month_pair_Cost\\\":\\\"SELECT a.id,a.maintenance_number, a.price, a.oem_id,a.document_date,a.finish_date,b.plate_number,b.oem_id FROM car_maintenance a left join logistic_car b on a.logistic_car_id = b.id where b.oem_id = $1 and b.company_id = $2 and a.finish_date BETWEEN $3 and $4 order by a.finish_date;\\\",\\\"getstp_machine\\\":\\\"SELECT a.id, a.no, a.name, a.product_model_id, a.qty_unit, a.user_id, a.oem_id, a.wip_amount, a.fg_amount, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.cut_amount, a.min_product, a.min_lot, a.is_assy, a.logistic_amount, a.end_user_amount, a.product_plants_item, a.dip_amount, a.is_trade, b.product_id, b.stp_type, b.width, b.height, b.blade_head,c.name as name_oem FROM product a left join product_detail b on a.id = b. product_id left join oem c on c.id = a. oem_id where a.oem_id = $1  Order by a.id  DESC ;\\\",\\\"stp_end_user\\\":\\\"SELECT a.id, a.name as name_end_user, a.fullname as full_name_end_user, a.contact, a.address,  a.is_use, a.is_active, a.oem_id, a.update_by, a.update_date, b.product_id FROM end_user a left join product_end_user b on b.end_user_id = a.id;\\\",\\\"stp_customer\\\":\\\"SELECT a.id, a.company_id, a.name as name_customer, a.is_use, a.sort, a.contact_name, a.contact_tel, a.remark, a.detail, a.full_name as full_name_customer, a.update_by, a.update_date, a.oem_id, b.product_id FROM customer a left join product_customer b on b.customer_id = a.id;\\\",\\\"fg_check\\\":\\\"SELECT id, product_id, user_id, edit_type, amount, create_date, project_id, fg_lot_no, exprire_date, remark, color, log_warehouse_details_id, tag_no, log_status_id, is_reserved, customer_id, end_user_id, stp_machine, current_amount FROM log_product_fg_edit_amount  Order by  product_id  DESC ;\\\",\\\"STP_FG_check\\\":\\\"SELECT id, product_id, ref_lot_no, fg_lot_no, wip_lot_list, edit_type, amount, project_id, exprire_date, remark, is_reserved, customer_id, end_user_id, stp_machine, current_amount, create_date, create_by FROM log_productstp_fg_edit_amount where create_date  BETWEEN $1 and $2  Order by  product_id  DESC ;\\\",\\\"deflux_stp\\\":\\\"SELECT a.id, a.amount, a.deflux_lot_no, a.mat_lot_list, a.is_reserve, a.end_user_id, a.customer_id, a.weight, a.wire_finished_id, a.user_id, a.company_id,a.oem_id, a.remark, a.create_date, a.edit_type, a.is_active,b.diameter FROM log_wire_finished_edit_amount a left join wire_finished b on b.id = a.wire_finished_id Order by  id  DESC;\\\",\\\"getbillreport\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time, product_and_category, latitude, longitude, compressive_strength, weight_meter, weight_meter_updated, is_receive, person_sent, time_receive, remark_receive, approve_bill FROM bill WHERE bill_oem_id =$1 AND is_use =true AND is_receive=true AND time_receive between $2 and $3 ;\\\",\\\"chackuse\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path, is_passchage FROM identity_user WHERE id=$1 AND  is_use=true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryReport_pdf.json?");

/***/ }),

/***/ "./app/query/querySnManagement.json":
/*!******************************************!*\
  !*** ./app/query/querySnManagement.json ***!
  \******************************************/
/*! exports provided: get_sn_number, save_sn_number, save_airLeakAdd, filter_serial_number, update_hydroAdd, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"get_sn_number\\\":\\\"SELECT id, serial_no, hydrostatic_test, generate_qr, weigth, air_leak_test, packing, create_date, crate_by, oem_id, company_id FROM serial_number where serial_no = $1 and oem_id = $2 and company_id = $3;\\\",\\\"save_sn_number\\\":\\\"INSERT INTO serial_number(id,serial_no,create_date, crate_by, oem_id, company_id) VALUES ($1, $2, $3, $4, $5,$6);\\\",\\\"save_airLeakAdd\\\":\\\"UPDATE serial_number SET air_leak_test=$2, packing=$3 WHERE id = $1;\\\",\\\"filter_serial_number\\\":\\\"SELECT id, serial_no as sn_number , hydrostatic_test as hydro_status , generate_qr, weigth, air_leak_test as airleak_status, packing, create_date, crate_by, oem_id, company_id FROM serial_number where oem_id = $1 and company_id = $2 and ($3::text is null or serial_no LIKE '%' || $3 || '%') ORDER BY create_date DESC;\\\",\\\"update_hydroAdd\\\":\\\"UPDATE serial_number SET hydrostatic_test=$2, weigth=$3 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querySnManagement.json?");

/***/ }),

/***/ "./app/query/querySparePart.json":
/*!***************************************!*\
  !*** ./app/query/querySparePart.json ***!
  \***************************************/
/*! exports provided: addSparePart, checkNo, checkNo_edit, filter, addSparePartRelation, update, delSparePartRelation, delSparePart, findById, addLogSparePartAmount, getValueSparePartAmount, SparePartAmountInOut, checkSparePartProduct, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"addSparePart\\\":\\\"INSERT INTO spare_part(id, spare_part_no, spare_part_name, description, is_use, amount, company_id)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"checkNo\\\":\\\"SELECT * FROM \\\\\\\"spare_part\\\\\\\" WHERE spare_part_no = $1;\\\",\\\"checkNo_edit\\\":\\\"SELECT * FROM \\\\\\\"spare_part\\\\\\\" WHERE spare_part_no = $1 and id != $2;\\\",\\\"filter\\\":\\\"SELECT A.id, spare_part_no, spare_part_name, description,A.amount, A.is_use ,A.company_id, product_id ,no FROM \\\\\\\"spare_part\\\\\\\" A LEFT JOIN spare_part_product B ON spare_part_id = A.ID LEFT JOIN product C ON C.id = B.product_id WHERE A.is_use = true AND ($1::text is null or spare_part_no ILIKE '%' || $1 || '%') AND ($2::text is null or spare_part_name ILIKE '%' || $2 || '%') AND  ($3::text is null or no ILIKE '%' || $3 || '%') AND A.company_id = $4\\\",\\\"addSparePartRelation\\\":\\\"INSERT INTO \\\\\\\"spare_part_product\\\\\\\" ( id, spare_part_id, product_id) VALUES ($1, $2, $3);\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"spare_part\\\\\\\" SET spare_part_no=$2, spare_part_name=$3, description=$4 ,amount=$5 WHERE id = $1;\\\",\\\"delSparePartRelation\\\":\\\"DELETE FROM \\\\\\\"spare_part_product\\\\\\\" WHERE spare_part_id = $1;\\\",\\\"delSparePart\\\":\\\"UPDATE \\\\\\\"spare_part\\\\\\\" SET is_use = false WHERE id = $1;\\\",\\\"findById\\\":\\\"SELECT A.id, spare_part_no, spare_part_name, description,A.amount, A.is_use, product_id ,no ,name, product_model_id FROM spare_part A LEFT JOIN spare_part_product B ON spare_part_id = A.ID LEFT JOIN product C ON C.id = B.product_id WHERE A.is_use = true AND A.id = $1;\\\",\\\"addLogSparePartAmount\\\":\\\"INSERT INTO log_spare_part_edit_amount(id, edit_type, user_id, amount, loop_id, expire_date, warehouse_id, location, load_status_id, create_date)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"getValueSparePartAmount\\\":\\\"SELECT CASE WHEN amount is null then 0+$1 else amount+$1 end as amount from spare_part where id=$2\\\",\\\"SparePartAmountInOut\\\":\\\"UPDATE spare_part SET amount=CASE WHEN amount is null then 0+$1 ELSE amount+$1 END WHERE id=$2\\\",\\\"checkSparePartProduct\\\":\\\"SELECT id, spare_part_id, product_id FROM spare_part_product where spare_part_id = $1 and product_id = $2;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querySparePart.json?");

/***/ }),

/***/ "./app/query/querySupplier.json":
/*!**************************************!*\
  !*** ./app/query/querySupplier.json ***!
  \**************************************/
/*! exports provided: add, update, del, findById, filter, CheckSort, checkNameSupplier, checkFullNameSupplier, checkNameSupplier_edit, checkFullNameSupplier_edit, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"material_supplier\\\\\\\" (id ,company_id ,name ,sort ,detail ,contact_tel,contact_fax ,supplier_email ,supplier_email_person ,remark ,is_use, contact_name, full_name,line_id,update_date,update_by)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13,$14,$15,$16)\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"material_supplier\\\\\\\" SET  name=$1, detail=$2, contact_tel=$3, contact_fax=$4, supplier_email=$5, supplier_email_person=$6, remark=$7 ,contact_name=$8 , full_name=$9 , line_id = $11,update_date=$12,update_by=$13 WHERE id=$10\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"material_supplier\\\\\\\" SET is_use =false,update_date= $2,update_by=$3 WHERE  id=$1;\\\",\\\"findById\\\":\\\"SELECT id, company_id, name, contact_name, is_use, sort, detail, contact_tel, contact_fax, supplier_email, supplier_email_person, remark, full_name,line_id FROM \\\\\\\"material_supplier\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"filter\\\":\\\"SELECT * FROM \\\\\\\"material_supplier\\\\\\\"  where is_use = true and company_id = $3 and  ($1::text is null or name ILIKE '%' || $1 || '%') and ($2::text is null or full_name LIKE '%' || $2 || '%')\\\",\\\"CheckSort\\\":\\\"SELECT max(sort) FROM \\\\\\\"material_supplier\\\\\\\" \\\",\\\"checkNameSupplier\\\":\\\"select id,name from \\\\\\\"material_supplier\\\\\\\" where name = $1 and is_use= true and company_id=$2\\\",\\\"checkFullNameSupplier\\\":\\\"select id,name from \\\\\\\"material_supplier\\\\\\\" where full_name = $1 and is_use= true and company_id=$2\\\",\\\"checkNameSupplier_edit\\\":\\\"select id,name from \\\\\\\"material_supplier\\\\\\\" where name = $1 and id != $2 and is_use= true and company_id=$3\\\",\\\"checkFullNameSupplier_edit\\\":\\\"select id,name from \\\\\\\"material_supplier\\\\\\\" where full_name = $1 and id != $2 and is_use= true and company_id=$3\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querySupplier.json?");

/***/ }),

/***/ "./app/query/queryTooling.json":
/*!*************************************!*\
  !*** ./app/query/queryTooling.json ***!
  \*************************************/
/*! exports provided: getToolingSupplier, getToolingBrand, getToolingParameter, filterToolingM, deleteTooling, checkTooling, checkToolingCodeDuplicate, getfilterTooling, getfilterToolingUnderMin, checkUpdateToolingCodeDuplicate, addToolingM, addSupplierM, getToolingDataById, getToolingSupplierById, updateToolingM, updateSupplierM, checkToolingSupplierById, deleteToolingSupplierM, getLotNo, filterToolingInquiry, SaveLotInBound, getTooling, updateTooling, getLotInStock, getLotHistory, updateLotInStock, SaveLotOutBound, getLogLastest, findAmountSameToolingByLotNo, getsumHistory, getsumHistoryDetail, getSumLotNoReserved, getIQToolingNo, addToolingInquiry, addInquiry, getInquiryById, getToolingInquiryById, updateInquiry, checkToolingInquiryByTId, updateToolingInquiry, deleteToolingInquiry, getToolingLogEditAmount, getToolingReceiveStatus, deleteToolingPOById, filterToolingPO, getToolingBySupplierId, filterToolingPO1, filterToolingPOInquiry, findToolingBySupplierId, updatePO_inquiry, getPO_inquiryByToolingId, getToolingForSuggest, sumLogOutTooling, GetAmountTooling, getToolingBySupplierIdAndPOIDCOPY, getSupplierHasThisTooling, getToolingInSupplier, getToolingInquiryById2, getToolingBySupplierIdAndPOID, filterInquiry, filterInquiryListByInquiryId, filterPoDrafByInquryID, addPoDrafByInquryID, updatePoDrafByInquryID, getPoInquiry, addPoInquiry, addListPoInquiry, finePOToolingInquiry, updatePOToolingInquiry, ckecked_po_id, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getToolingSupplier\\\":\\\"SELECT * FROM tooling_supplier WHERE is_use = true AND company_id = $1 ORDER BY sort;\\\",\\\"getToolingBrand\\\":\\\"SELECT * FROM brand WHERE brand_is_use = true AND brand_is_active = true AND brand_company_id = $1 AND brand_oem_id = $2;\\\",\\\"getToolingParameter\\\":\\\"SELECT * FROM tooling_parameter WHERE is_use = true AND is_active = true;\\\",\\\"filterToolingM\\\":\\\"SELECT t.id AS t_id, * FROM tooling AS t LEFT JOIN brand AS b ON t.brand_id = b.brand_id LEFT JOIN tooling_relation_supplier AS trs ON t.id = trs.tooling_id WHERE t.company_id = $1 AND t.oem_id = $2 AND ($3::text is null or t.tooling_code ILIKE '%' || $3 || '%') AND ($4::text is null or t.tooling_name ILIKE '%' || $4 || '%') AND ($5::uuid is null or trs.supplier_id = $5) AND ($6::uuid is null or t.brand_id = $6) AND t.is_use = true AND t.is_active = true;\\\",\\\"deleteTooling\\\":\\\"UPDATE tooling SET is_use = false, updated_by = $2, updated_date = $3 WHERE id = $1;\\\",\\\"checkTooling\\\":\\\"SELECT * FROM tooling WHERE is_use = true AND is_active = true AND company_id = $1 AND oem_id = $2 AND tooling_code = $3;\\\",\\\"checkToolingCodeDuplicate\\\":\\\"SELECT * FROM tooling WHERE tooling_code=$1 AND is_use = true AND is_active = true;\\\",\\\"getfilterTooling\\\":\\\"SELECT t.id AS t_id, * FROM tooling AS t LEFT JOIN brand AS b ON t.brand_id = b.brand_id LEFT JOIN tooling_relation_supplier AS trs ON t.id = trs.tooling_id WHERE t.company_id = $1 AND t.oem_id = $2 AND ($3::text is null or t.tooling_code ILIKE '%' || $3 || '%') AND ($4::text is null or t.tooling_name ILIKE '%' || $4 || '%') AND ($5::uuid is null or trs.supplier_id = $5) AND ($6::uuid is null or t.brand_id = $6) AND t.is_use = true AND t.is_active = true ORDER BY t.tooling_code;\\\",\\\"getfilterToolingUnderMin\\\":\\\"SELECT t.id AS t_id, * FROM tooling AS t LEFT JOIN brand AS b ON t.brand_id = b.brand_id LEFT JOIN tooling_relation_supplier AS trs ON t.id = trs.tooling_id WHERE t.company_id = $1 AND t.oem_id = $2 AND ($3::text is null or t.tooling_code ILIKE '%' || $3 || '%') AND ($4::text is null or t.tooling_name ILIKE '%' || $4 || '%') AND ($5::uuid is null or trs.supplier_id = $5) AND ($6::uuid is null or t.brand_id = $6) AND t.is_use = true AND t.is_active = true AND COALESCE(t.amount, 0) < COALESCE(t.min_stock, 0) ORDER BY t.tooling_code;\\\",\\\"checkUpdateToolingCodeDuplicate\\\":\\\"SELECT * FROM tooling WHERE tooling_code=$1 AND id!=$2 AND is_use = true AND is_active = true;\\\",\\\"addToolingM\\\":\\\"INSERT INTO tooling( id, tooling_code, tooling_name, amount, brand_id, min_stock, max_stock, consumption, ratio, tooling_detail, tooling_path_name, tooling_img_name, is_use, is_active, created_date, updated_date, created_by, updated_by, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20);\\\",\\\"addSupplierM\\\":\\\"INSERT INTO tooling_relation_supplier( id, tooling_id, supplier_id, buy_price, minimum_order, lead_time, remark, sort, is_use, is_active, created_date, updated_date, created_by, updated_by, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);\\\",\\\"getToolingDataById\\\":\\\"SELECT * FROM tooling AS t WHERE t.id = $1 AND t.is_use=true;\\\",\\\"getToolingSupplierById\\\":\\\"SELECT * FROM tooling_relation_supplier AS ts WHERE ts.tooling_id=$1 AND ts.is_use=true ORDER BY ts.is_active DESC\\\",\\\"updateToolingM\\\":\\\"UPDATE tooling SET tooling_code=$2, tooling_name=$3, brand_id=$4, min_stock=$5, max_stock=$6, consumption=$7, ratio=$8, tooling_detail=$9, tooling_path_name=$10, tooling_img_name=$11, updated_date=$12, updated_by=$13, oem_id=$14, company_id=$15 WHERE id=$1 AND is_use=true;\\\",\\\"updateSupplierM\\\":\\\"UPDATE tooling_relation_supplier SET tooling_id=$2, supplier_id=$3, buy_price=$4, minimum_order=$5, lead_time=$6, remark=$7, sort=$8, is_active=$9, updated_date=$10, updated_by=$11, oem_id=$12, company_id=$13 WHERE id=$1 AND is_use=true;\\\",\\\"checkToolingSupplierById\\\":\\\"SELECT * FROM tooling_relation_supplier WHERE id=$1 AND is_use=true;\\\",\\\"deleteToolingSupplierM\\\":\\\"UPDATE tooling_relation_supplier SET is_use=false WHERE id=$1;\\\",\\\"getLotNo\\\":\\\"SELECT id, lot_no, tooling_id, purchase_order_id, edit_type, amount, remark, created_date, updated_date, created_by, updated_by, oem_id, company_id, current_amount FROM log_tooling_edit_amount WHERE oem_id=$1 AND (lot_no ILIKE '%' || $2 || '%') AND edit_type=true ORDER BY lot_no DESC LIMIT 1;\\\",\\\"filterToolingInquiry\\\":\\\"SELECT a.id, a.inquiry_no, a.remark, a.is_use, a.is_active, a.created_date, a.updated_date, a.created_by, a.updated_by, a.oem_id, a.company_id, SUM(b.amount) as amount FROM inquiry AS a  LEFT JOIN tooling_inquiry AS b ON a.id = b.inquiry_id WHERE ($1::text is null or a.inquiry_no ILIKE '%' || $1 || '%') AND b.is_use=true AND a.is_use=true GROUP BY a.id, a.inquiry_no, a.remark, a.is_use, a.is_active, a.created_date, a.updated_date, a.created_by, a.updated_by, a.oem_id, a.company_id ORDER BY a.inquiry_no DESC;\\\",\\\"SaveLotInBound\\\":\\\"INSERT INTO log_tooling_edit_amount(id, lot_no, tooling_id, purchase_order_id, edit_type, amount, remark, created_date, updated_date, created_by, updated_by, oem_id, company_id, current_amount) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);\\\",\\\"getTooling\\\":\\\"SELECT * FROM public.tooling WHERE id=$1 AND oem_id=$2 AND company_id =$3;\\\",\\\"updateTooling\\\":\\\"UPDATE public.tooling SET amount=$1, updated_by=$2, updated_date=$3 WHERE id=$4 AND oem_id=$5 AND company_id =$6;\\\",\\\"getLotInStock\\\":\\\"SELECT a.id, a.lot_no, a.tooling_id, a.purchase_order_id, a.edit_type, a.amount, a.remark, a.created_date, a.updated_date, a.created_by, a.updated_by, a.oem_id, a.company_id, a.current_amount, b.po_no FROM public.log_tooling_edit_amount as a LEFT JOIN public.purchase_order as b ON a.purchase_order_id = b.id WHERE a.company_id = $1 AND a.oem_id = $2 AND a.tooling_id =$3 AND a.edit_type=true;\\\",\\\"getLotHistory\\\":\\\"SELECT id, lot_no, tooling_id, purchase_order_id, edit_type, amount, remark, created_date, updated_date, created_by, updated_by, oem_id, company_id, current_amount FROM public.log_tooling_edit_amount WHERE company_id = $1 AND oem_id = $2 AND tooling_id =$3 ORDER BY created_date DESC;\\\",\\\"updateLotInStock\\\":\\\"UPDATE public.tooling SET amount=$1, updated_date=$2, updated_by=$3, oem_id=$4, company_id=$5 WHERE id=$6;\\\",\\\"SaveLotOutBound\\\":\\\"INSERT INTO public.log_tooling_edit_amount(id, lot_no, tooling_id, purchase_order_id, edit_type, amount, remark, created_date, updated_date, created_by, updated_by, oem_id, company_id, current_amount) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14);\\\",\\\"getLogLastest\\\":\\\"SELECT * FROM public.log_tooling_edit_amount WHERE tooling_id = $1 AND oem_id = $2 AND  company_id=$3 AND edit_type=true ORDER BY created_date DESC LIMIT 1;\\\",\\\"findAmountSameToolingByLotNo\\\":\\\"SELECT * FROM public.log_tooling_edit_amount WHERE tooling_id = $1 AND oem_id = $2 AND  company_id=$3 AND edit_type=true;\\\",\\\"getsumHistory\\\":\\\"SELECT max(a.created_date) as create_date , a.lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_tooling_edit_amount b where b.lot_no = a.lot_no and b.edit_type = true and b.tooling_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_tooling_edit_amount b where b.lot_no = a.lot_no and b.edit_type = false and b.tooling_id = $1) as amount FROM log_tooling_edit_amount a WHERE a.lot_no != 'null' and a.tooling_id = $1 GROUP BY a.lot_no order by create_date asc\\\",\\\"getsumHistoryDetail\\\":\\\" SELECT * FROM log_tooling_edit_amount WHERE lot_no = $1 AND tooling_id = $2 AND edit_type=true \\\",\\\"getSumLotNoReserved\\\":\\\"SELECT min(a.created_date) as create_date ,a.lot_no,(SELECT coalesce(sum(b.amount),0) FROM log_tooling_edit_amount b where b.lot_no = a.lot_no and b.edit_type = true and b.tooling_id = $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_tooling_edit_amount b where b.lot_no = a.lot_no and b.edit_type = false and b.tooling_id = $1) as amount FROM log_tooling_edit_amount a WHERE a.lot_no != 'null' and a.tooling_id = $1 and a.lot_no is not null GROUP BY a.lot_no order by lot_no asc\\\",\\\"getIQToolingNo\\\":\\\"SELECT inquiry_no FROM public.inquiry ORDER BY inquiry_no DESC LIMIT 1;\\\",\\\"addToolingInquiry\\\":\\\"INSERT INTO public.tooling_inquiry( id, inquiry_id, tooling_id, amount, is_use, is_active, created_date, updated_date, created_by, updated_by) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"addInquiry\\\":\\\"INSERT INTO public.inquiry(id, inquiry_no, remark, is_use, is_active, created_date, updated_date, created_by, updated_by, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11);\\\",\\\"getInquiryById\\\":\\\"SELECT * FROM public.inquiry WHERE id=$1 AND is_use=true AND is_active=true;\\\",\\\"getToolingInquiryById\\\":\\\"SELECT a.id, a.inquiry_id, a.tooling_id, a.amount, a.is_use, a.is_active, b.tooling_code, b.tooling_name, b.brand_id, b.min_stock, b.max_stock, b.consumption, b.ratio, b.tooling_detail, b.tooling_path_name, b.tooling_img_name, c.brand_name FROM public.tooling_inquiry AS a LEFT JOIN tooling AS b ON a.tooling_id=b.id LEFT JOIN brand AS c ON c.brand_id = b.brand_id WHERE a.inquiry_id=$1 AND a.is_use=true AND a.is_active=true;\\\",\\\"updateInquiry\\\":\\\"UPDATE public.inquiry SET remark=$2, updated_date=$3, updated_by=$4 WHERE id=$1 AND is_use=true AND is_active=true;\\\",\\\"checkToolingInquiryByTId\\\":\\\"SELECT * FROM public.tooling_inquiry WHERE tooling_id=$1 AND inquiry_id=$2 AND is_use=true AND is_active=true;\\\",\\\"updateToolingInquiry\\\":\\\"UPDATE public.tooling_inquiry SET tooling_id=$3, amount=$4, updated_date=$5, updated_by=$6 WHERE id=$1 AND inquiry_id=$2 AND is_use=true;\\\",\\\"deleteToolingInquiry\\\":\\\"UPDATE public.tooling_inquiry SET is_use=false, is_active=false WHERE id=$1;\\\",\\\"getToolingLogEditAmount\\\":\\\"SELECT a.id, a.lot_no, a.tooling_id, a.purchase_order_id, a.edit_type, a.amount as amount_out, a.remark, a.created_date, a.oem_id, a.company_id, a.current_amount, b.tooling_name, b.amount, b.tooling_code, b.brand_id, b.min_stock, b.max_stock, b.consumption, b.ratio, b.tooling_detail, b.tooling_path_name, b.tooling_img_name, c.brand_name FROM public.log_tooling_edit_amount AS a LEFT JOIN public.tooling AS b ON b.id=a.tooling_id LEFT JOIN public.brand AS c ON c.brand_id=b.brand_id WHERE a.edit_type=false AND a.created_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND a.created_date < DATE_TRUNC('month', CURRENT_DATE) AND b.amount < b.min_stock;\\\",\\\"getToolingReceiveStatus\\\":\\\"SELECT id, status_name as name, created_date, updated_date, is_use FROM public.tooling_receive_status WHERE is_use=true;\\\",\\\"deleteToolingPOById\\\":\\\"UPDATE public.po_inquiry SET is_use=false, is_active=false WHERE id=$1;\\\",\\\"filterToolingPO\\\":\\\"SELECT a.id, inquiry_id, a.tooling_id, a.amount, a.price, a.is_receive, a.receive_amount, a.receive_status, a.po_id, a.tooling_supplier_id, a.updated_date, a.receive_date, b.po_no FROM  public.po_inquiry AS a LEFT JOIN public.purchase_order AS b ON a.po_id=b.id WHERE ($1::text IS NULL OR b.po_no ILIKE '%' || $1 || '%') AND ($2::uuid IS NULL OR a.tooling_supplier_id = $2) AND ($3::uuid IS NULL OR a.receive_status = $3) AND (($4::timestamp IS NULL AND $5::timestamp IS NULL) OR a.receive_date >= $4 AND a.receive_date <= $5) AND a.is_use=true ORDER BY b.po_no DESC;\\\",\\\"getToolingBySupplierId\\\":\\\"SELECT a.tooling_id, a.receive_amount, a.amount, a.is_receive, a.po_id, b.tooling_name, a.tooling_supplier_id, c.po_no, d.lead_time FROM public.po_inquiry AS a LEFT JOIN public.tooling AS b ON a.tooling_id=b.id LEFT JOIN public.purchase_order AS c ON c.id=a.po_id LEFT JOIN public.tooling_relation_supplier AS d ON d.supplier_id=a.tooling_supplier_id AND d.tooling_id = a.tooling_id WHERE a.tooling_supplier_id=$1 AND a.is_use=true;\\\",\\\"filterToolingPO1\\\":\\\"SELECT id FROM public.purchase_order WHERE ($1::text IS NULL OR po_no ILIKE '%' || $1 || '%') AND is_use=true;\\\",\\\"filterToolingPOInquiry\\\":\\\"SELECT updated_date, tooling_supplier_id FROM public.po_inquiry WHERE ($1::uuid IS NULL OR tooling_supplier_id = $1) AND ($2::timestamp IS NULL OR updated_date >= $2) AND ($3::timestamp IS NULL OR updated_date <= $3) AND ($4::uuid IS NULL OR receive_status = $4) AND is_use=true;\\\",\\\"findToolingBySupplierId\\\":\\\"SELECT a.tooling_id, a.receive_amount, a.amount, b.tooling_name FROM public.po_inquiry AS a LEFT JOIN public.tooling AS b ON a.tooling_id=b.id WHERE a.tooling_supplier_id=$1 AND a.is_use=true;\\\",\\\"updatePO_inquiry\\\":\\\"UPDATE public.po_inquiry SET amount=$2, updated_date=$3,is_receive=$4,receive_amount=$5,receive_status=$6 ,updated_by=$7, receive_date=$9 WHERE tooling_id=$1 AND is_use=true AND tooling_supplier_id=$8;\\\",\\\"getPO_inquiryByToolingId\\\":\\\"SELECT id, inquiry_id, tooling_id, amount, price, is_receive, receive_amount, receive_status, is_use, is_active, created_date, updated_date, created_by, updated_by, po_id, tooling_supplier_id FROM public.po_inquiry WHERE tooling_id=$1 AND is_use=true AND tooling_supplier_id=$2;\\\",\\\"getToolingForSuggest\\\":\\\"SELECT a.id AS tooling_id, a.tooling_code, a.tooling_name, a.amount, a.brand_id, a.min_stock, a.max_stock, a.consumption, a.ratio, a.tooling_detail, a.tooling_path_name, a.tooling_img_name, b.brand_name, c.minimum_order, c.created_date FROM public.tooling AS a LEFT JOIN public.brand AS b ON b.brand_id = a.brand_id LEFT JOIN ( SELECT tooling_id, MIN(created_date) AS pre_created_date FROM public.tooling_relation_supplier GROUP BY tooling_id ) AS pre_c ON pre_c.tooling_id = a.id LEFT JOIN public.tooling_relation_supplier AS c ON c.created_date = pre_c.pre_created_date AND c.tooling_id = a.id WHERE a.is_use = true AND c.is_use=true;\\\",\\\"sumLogOutTooling\\\":\\\"SELECT SUM(amount) AS total_amount FROM public.log_tooling_edit_amount WHERE edit_type = false AND tooling_id = $1 AND created_date >= DATE_TRUNC('month', CURRENT_DATE - INTERVAL '1 month') AND created_date < DATE_TRUNC('month', CURRENT_DATE);\\\",\\\"GetAmountTooling\\\":\\\"SELECT amount FROM public.tooling WHERE id=$1 AND is_use=true;\\\",\\\"getToolingBySupplierIdAndPOIDCOPY\\\":\\\"SELECT a.tooling_id, a.receive_amount, a.amount, a.is_receive, a.po_id, b.tooling_name, a.tooling_supplier_id, a.price, a.receive_date, c.po_no, d.lead_time, e.name, e.contact_name, e.contact_tel, e.contact_fax FROM public.po_inquiry AS a LEFT JOIN public.tooling AS b ON a.tooling_id=b.id LEFT JOIN public.purchase_order AS c ON c.id=a.po_id LEFT JOIN public.tooling_relation_supplier AS d ON d.supplier_id=a.tooling_supplier_id AND d.tooling_id = a.tooling_id LEFT JOIN public.tooling_supplier AS e ON a.tooling_supplier_id=e.id WHERE a.tooling_supplier_id=$1 AND a.po_id=$2 AND a.is_use=true;\\\",\\\"getSupplierHasThisTooling\\\":\\\"SELECT a.supplier_id FROM tooling_relation_supplier as a LEFT JOIN tooling_supplier as b ON a.supplier_id = b.id WHERE a.tooling_id=$1 AND a.is_use=true;\\\",\\\"getToolingInSupplier\\\":\\\"SELECT * FROM public.tooling_relation_supplier WHERE tooling_id=$1 AND is_use=true;\\\",\\\"getToolingInquiryById2\\\":\\\"SELECT a.inquiry_id, a.tooling_id, a.amount, b.tooling_code, b.tooling_name, c.supplier_id , d.full_name as supplier_name, d.supplier_email FROM tooling_inquiry a LEFT JOIN tooling b ON a.tooling_id = b.id LEFT JOIN tooling_relation_supplier c ON a.tooling_id = c.tooling_id LEFT JOIN tooling_supplier d ON c.supplier_id = d.id WHERE inquiry_id = $1 AND a.is_use = true\\\",\\\"getToolingBySupplierIdAndPOID\\\":\\\"SELECT a.tooling_id, a.receive_amount, a.amount, a.is_receive, a.po_id, b.tooling_name, a.tooling_supplier_id, a.price, a.receive_date, c.po_no, d.lead_time, d.buy_price, e.name, e.contact_name, e.contact_tel, e.contact_fax FROM public.po_inquiry AS a LEFT JOIN public.tooling AS b ON a.tooling_id=b.id LEFT JOIN public.purchase_order AS c ON c.id=a.po_id LEFT JOIN public.tooling_relation_supplier AS d ON d.supplier_id=a.tooling_supplier_id AND d.tooling_id = a.tooling_id LEFT JOIN public.tooling_supplier AS e ON a.tooling_supplier_id=e.id WHERE a.tooling_supplier_id=$1 AND a.po_id=$2 AND a.is_use=true;\\\",\\\"filterInquiry\\\":\\\"SELECT i.* FROM inquiry i WHERE is_use = true and is_active = true and company_id = $1 and oem_id = $2\\\",\\\"filterInquiryListByInquiryId\\\":\\\"SELECT ti.*,i.inquiry_no,t.tooling_code, t.tooling_name  ,ts.id as supplier_id, ts.name as supplier_name ,trs.id as tooling_relation_supplier FROM tooling_inquiry ti LEFT JOIN tooling t on  t.id = ti.tooling_id  LEFT JOIN tooling_relation_supplier trs on trs.tooling_id = ti.tooling_id LEFT JOIN tooling_supplier ts on ts.id = trs.supplier_id LEFT JOIN inquiry i on i.id = ti.inquiry_id WHERE ti.inquiry_id = $1 and ti.is_use = TRUE and ti.is_active = TRUE and ts.id IS not null and ts.name  IS not null\\\",\\\"filterPoDrafByInquryID\\\":\\\"SELECT * FROM po_inquiry_draft WHERE inquiry_id = $1\\\",\\\"addPoDrafByInquryID\\\":\\\"INSERT INTO po_inquiry_draft(id,inquiry_id, tooling_id , amount , price, tooling_supplier_id, is_select , created_date ,updated_date ) VALUES($1, $2 ,$3, $4, $5 ,$6 ,$7 ,$8,$9)\\\",\\\"updatePoDrafByInquryID\\\":\\\"UPDATE po_inquiry_draft SET amount =$2, price =$3 ,is_select =$4 ,updated_date =$5 WHERE id = $1\\\",\\\"getPoInquiry\\\":\\\"SELECT po_no FROM purchase_order WHERE is_use = TRUE and is_active =TRUE AND company_id = $1 and oem_id = $2 ORDER BY created_date DESC LIMIT 1\\\",\\\"addPoInquiry\\\":\\\"INSERT INTO purchase_order(id , is_use ,is_active ,created_date ,updated_date ,created_by , updated_by,oem_id,company_id,po_no) VALUES($1, $2 ,$3,$4,$5 ,$6 ,$7 ,$8 ,$9, $10 );\\\",\\\"addListPoInquiry\\\":\\\"INSERT INTO po_inquiry(id,inquiry_id,tooling_id,amount,price,is_receive,receive_amount,receive_status,is_use,is_active,created_date,updated_date,created_by,updated_by,po_id,tooling_supplier_id,receive_date,issue_date) VALUES ($1, $2 ,$3,$4,$5 ,$6 ,$7 ,$8 ,$9, $10,$11 ,$12,$13,$14,$15,$16,$17,$18)\\\",\\\"finePOToolingInquiry\\\":\\\"SELECT pi.inquiry_id,po.po_no ,pi.issue_date ,po.id FROM po_inquiry  pi LEFT JOIN purchase_order po ON po.id =  pi.po_id WHERE pi.po_id = $1  LIMIT 1\\\",\\\"updatePOToolingInquiry\\\":\\\"UPDATE po_inquiry SET amount=$4 ,price =$5 , issue_date = $6 WHERE tooling_id = $1 AND inquiry_id = $2 AND po_id = $3\\\",\\\"ckecked_po_id\\\":\\\"SELECT * FROM po_inquiry WHERE po_id = $1\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryTooling.json?");

/***/ }),

/***/ "./app/query/queryTrackingTag.json":
/*!*****************************************!*\
  !*** ./app/query/queryTrackingTag.json ***!
  \*****************************************/
/*! exports provided: add, checkProductName, getTagId, getSection, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"tracking_tag\\\\\\\" ( id, tracking_name, amount, keep_date, product_id, section_id, is_use, is_active, is_dispatch, tag_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\\\",\\\"checkProductName\\\":\\\"SELECT * FROM \\\\\\\"product\\\\\\\" where no = $1 and oem_id = $2 and is_use = true\\\",\\\"getTagId\\\":\\\"SELECT tag_id FROM \\\\\\\"tracking_tag\\\\\\\"  order by tag_id desc limit 1\\\",\\\"getSection\\\":\\\"SELECT id, section_name, is_use, sort FROM \\\\\\\"section\\\\\\\" where is_use = true\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryTrackingTag.json?");

/***/ }),

/***/ "./app/query/queryUser.json":
/*!**********************************!*\
  !*** ./app/query/queryUser.json ***!
  \**********************************/
/*! exports provided: getUserById, update, checkPS, changePS, checkGenAccount, checkEmpUser, AddIdenUser, saveLineApi, getEmployee, checkInfoEmpLineByIdLine, checkIdentityEmpLineById, getLineByUserId, updateLineApi, updateStatusUser, getConfigMenuDefault, getConfigFeatureDefault, setPermissionOem, setPermissionMenu, setPermissionFeature, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"getUserById\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path FROM identity_user where id = $1;\\\",\\\"update\\\":\\\"UPDATE identity_user SET  name=$2, sirname=$3, email=$4, mobile1=$5, mobile2=$6, detail=$7, user_profile=$8, user_profile_name=$9, user_profile_path=$10 WHERE id = $1;\\\",\\\"checkPS\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path FROM identity_user  where id = $1\\\",\\\"changePS\\\":\\\"UPDATE identity_user SET  password=$2 WHERE id = $1;\\\",\\\"checkGenAccount\\\":\\\"SELECT * FROM identity_user WHERE id = $1 AND is_use = true\\\",\\\"checkEmpUser\\\":\\\"SELECT * FROM identity_user WHERE ($1::text is null or username LIKE '%' || $1 || '%') ORDER BY create_date \\\",\\\"AddIdenUser\\\":\\\"INSERT INTO identity_user(id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path, is_passchange) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21);\\\",\\\"saveLineApi\\\":\\\"INSERT INTO public.line_login(id, user_id, login_id, password, lastupdated_by, lastupdated_at, line_id, line_img, line_name, token) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10);\\\",\\\"getEmployee\\\":\\\"SELECT * FROM identity_user WHERE id = $1 AND is_use = true\\\",\\\"checkInfoEmpLineByIdLine\\\":\\\"SELECT id, user_id, login_id, password, lastupdated_by, lastupdated_at, line_id, line_img, line_name, token FROM public.line_login WHERE line_id=$1;\\\",\\\"checkIdentityEmpLineById\\\":\\\"SELECT id, company_id, admin_id, name, sirname, username, email, password, mobile1, mobile2, detail, is_active, user_profile, token, token_create, token_expired, create_date, is_use, user_profile_name, user_profile_path, is_passchange FROM public.identity_user WHERE id=$1 AND is_use=true;\\\",\\\"getLineByUserId\\\":\\\"SELECT id, user_id, login_id, password, lastupdated_by, lastupdated_at, line_id, line_img, line_name, token FROM public.line_login WHERE user_id=$1;\\\",\\\"updateLineApi\\\":\\\"UPDATE public.line_login SET user_id=$2, login_id=$3, password=$4, lastupdated_by=$5, lastupdated_at=$6, line_id=$7, line_img=$8, line_name=$9, token=$10 WHERE id=$1;\\\",\\\"updateStatusUser\\\":\\\"UPDATE identity_user SET is_use=$2, is_active=$3 WHERE id = $1;\\\",\\\"getConfigMenuDefault\\\":\\\"SELECT * FROM config_menu_default WHERE company_id = $1 AND oem_id = $2;\\\",\\\"getConfigFeatureDefault\\\":\\\"SELECT * FROM config_feature_default WHERE company_id = $1 AND oem_id = $2;\\\",\\\"setPermissionOem\\\":\\\"INSERT INTO permission_oem(user_id, oem_id, is_active) VALUES ($1, $2, $3);\\\",\\\"setPermissionMenu\\\":\\\"INSERT INTO permission_menu(menu_id, is_use, user_id) VALUES ($1, $2, $3);\\\",\\\"setPermissionFeature\\\":\\\"INSERT INTO permission_feature(user_id, is_use, feature_id) VALUES ($1, $2, $3);\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryUser.json?");

/***/ }),

/***/ "./app/query/queryWarehouse.json":
/*!***************************************!*\
  !*** ./app/query/queryWarehouse.json ***!
  \***************************************/
/*! exports provided: add_warehouse, update, del, checkWarehouseNo_add_warehouse, filter, findById, checkWarehouseNo_edit, check_del, checkWarehouselocation_edit, filter_tem_in_warehouse, findItemWarehouseById, filter_rack, filter_rack_dp, getWarehouse, add_rack, checkWarehouseNo_add_rack, findById_rack, update_rack, checkWarehouseNo_edit_rack, del_rack, check_del_rack, add_rack_floor, checkWarehouseNo_add_rack_floor, filter_rack_floor, findById_rack_floor, update_rack_floor, checkWarehouseNo_edit_rack_floor, del_rack_floor, getWarehouse_rack, checkWarehouselocation_add_rack, addWarehouseProduct, getWarehouseProduct, getWarehouseProduct2, check_product_del, DeleteWPforUpdate, checkWarehouseProduct, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add_warehouse\\\":\\\"INSERT INTO \\\\\\\"warehouse\\\\\\\" (id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET code_no = $2, description = $3, location = $4, capacity = $5, parent_id = $6, update_date = $7, update_by = $8 WHERE id = $1\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET is_use = false WHERE  id=$1\\\",\\\"checkWarehouseNo_add_warehouse\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and company_id = $2 and is_use = true\\\",\\\"filter\\\":\\\"SELECT * FROM \\\\\\\"warehouse\\\\\\\"  where is_use = true and company_id = $2 and warehouse_type_id = '41743525-fedb-444e-931e-f4ed6d78f909' and ($1::text is null or code_no ILIKE '%' || $1 || '%')\\\",\\\"findById\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id FROM \\\\\\\"warehouse\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"checkWarehouseNo_edit\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"check_del\\\":\\\"SELECT count(*) FROM \\\\\\\"warehouse\\\\\\\" WHERE parent_id = $1 \\\",\\\"checkWarehouselocation_edit\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where location = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"filter_tem_in_warehouse\\\":\\\"SELECT w.id, w.company_id, w.code_no, w.description, w.location, w.capacity, w.parent_id, wt.type, w.is_use, w.update_date, w.update_by, w.warehouse_type_id FROM warehouse w left join warehouse_type wt on w.warehouse_type_id = wt.id where w.is_use = true and wt.type = $3 and ($1::text is null or w.code_no ILIKE '%' || $1 || '%') and w.company_id = $2 and  w.parent_id = $4\\\",\\\"findItemWarehouseById\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id FROM \\\\\\\"warehouse\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"filter_rack\\\":\\\"SELECT * FROM \\\\\\\"warehouse\\\\\\\"  where is_use = true and company_id = $2 and warehouse_type_id = '7963d597-23ce-4ab7-904b-791c1192e657' and ($1::text is null or code_no ILIKE '%' || $1 || '%')\\\",\\\"filter_rack_dp\\\":\\\"SELECT * FROM \\\\\\\"warehouse\\\\\\\"  where is_use = true and warehouse_type_id = '7963d597-23ce-4ab7-904b-791c1192e657' and parent_id = $1 \\\",\\\"getWarehouse\\\":\\\"SELECT w.id, w.company_id, w.code_no, w.description, w.location, w.capacity, w.parent_id, w.is_use, w.update_date, w.update_by, w.warehouse_type_id,wt.type , wt.remark FROM warehouse w left join warehouse_type wt on wt.id = w.warehouse_type_id where wt.type = 'Warehouse'and w.is_use = 'true';\\\",\\\"add_rack\\\":\\\"INSERT INTO \\\\\\\"warehouse\\\\\\\" (id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\\\",\\\"checkWarehouseNo_add_rack\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and company_id = $2 and is_use = true\\\",\\\"findById_rack\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id FROM \\\\\\\"warehouse\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"update_rack\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET code_no = $2, description = $3, location = $4, capacity = $5, parent_id = $6, update_date = $7, update_by = $8 WHERE id = $1\\\",\\\"checkWarehouseNo_edit_rack\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"del_rack\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET is_use = false WHERE  id=$1\\\",\\\"check_del_rack\\\":\\\"SELECT count(*) FROM \\\\\\\"warehouse\\\\\\\" WHERE parent_id = $1 \\\",\\\"add_rack_floor\\\":\\\"INSERT INTO \\\\\\\"warehouse\\\\\\\" (id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\\\",\\\"checkWarehouseNo_add_rack_floor\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and company_id = $2 and is_use = true\\\",\\\"filter_rack_floor\\\":\\\"SELECT * FROM \\\\\\\"warehouse\\\\\\\"  where is_use = true and company_id = $2 and warehouse_type_id = '7b18f9a8-cd76-4d48-b43a-59de75e43d13' and ($1::text is null or code_no ILIKE '%' || $1 || '%') \\\",\\\"findById_rack_floor\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by, warehouse_type_id FROM \\\\\\\"warehouse\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"update_rack_floor\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET code_no = $2, description = $3, location = $4, capacity = $5, parent_id = $6, update_date = $7, update_by = $8 WHERE id = $1\\\",\\\"checkWarehouseNo_edit_rack_floor\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where code_no = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"del_rack_floor\\\":\\\"UPDATE \\\\\\\"warehouse\\\\\\\" SET is_use = false WHERE  id=$1\\\",\\\"getWarehouse_rack\\\":\\\"SELECT w.id, w.company_id, w.code_no, w.description, w.location, w.capacity, w.parent_id, w.is_use, w.update_date, w.update_by, w.warehouse_type_id,wt.type , wt.remark FROM warehouse w left join warehouse_type wt on wt.id = w.warehouse_type_id where wt.type = 'Rack';\\\",\\\"checkWarehouselocation_add_rack\\\":\\\"SELECT id, company_id, code_no, description, location, capacity, parent_id, is_use, update_date, update_by FROM warehouse where location = $1 and company_id = $2 and is_use = true\\\",\\\"addWarehouseProduct\\\":\\\"INSERT INTO warehouse_product(id, warehouse_id, product_id, is_active, sort, create_date, is_use)VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"getWarehouseProduct\\\":\\\"SELECT wp.id, wp.warehouse_id, wp.product_id, wp.is_active, wp.sort, wp.create_date, wp.is_use,p.name,p.no FROM warehouse_product wp left join product p on wp.product_id = p.id WHERE warehouse_id = $1;\\\",\\\"getWarehouseProduct2\\\":\\\"SELECT wp.id, wp.warehouse_id, wp.product_id, wp.is_active, wp.sort, wp.create_date, wp.is_use,p.name,p.no FROM warehouse_product wp left join product p on wp.product_id = p.id\\\",\\\"check_product_del\\\":\\\"SELECT id, warehouse_id, product_id, is_active, sort, create_date, is_use FROM warehouse_product WHERE warehouse_id = $1;\\\",\\\"DeleteWPforUpdate\\\":\\\"DELETE FROM warehouse_product WHERE warehouse_id = $1 and product_id = $2\\\",\\\"checkWarehouseProduct\\\":\\\"SELECT id, warehouse_id, product_id, is_active, sort, create_date, is_use FROM warehouse_product WHERE warehouse_id = $1 and product_id = $2\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryWarehouse.json?");

/***/ }),

/***/ "./app/query/queryWarehouse_type.json":
/*!********************************************!*\
  !*** ./app/query/queryWarehouse_type.json ***!
  \********************************************/
/*! exports provided: add, checkType_add, filter, findById, checkType_edit, update, del, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO warehouse_type(id, type, company_id, remark, is_use, update_date, update_by) VALUES ($1, $2, $3, $4, $5, $6, $7)\\\",\\\"checkType_add\\\":\\\"SELECT id, type, company_id, remark, is_use, update_date, update_by FROM warehouse_type WHERE type = $1 and company_id = $2 and is_use = true\\\",\\\"filter\\\":\\\"SELECT id, type, company_id, remark, is_use, update_date, update_by FROM warehouse_type WHERE ($1::text is null or type ILIKE '%' || $1 || '%') and company_id = $2 and is_use = true order by update_date desc\\\",\\\"findById\\\":\\\"SELECT id, type, company_id, remark, is_use, update_date, update_by FROM warehouse_type WHERE id = $1\\\",\\\"checkType_edit\\\":\\\"SELECT id, type, company_id, remark, is_use, update_date, update_by FROM warehouse_type WHERE type = $1 and id != $2 and company_id = $3 and is_use = true\\\",\\\"update\\\":\\\"UPDATE warehouse_type SET type=$2 ,remark=$3, update_date=$4, update_by=$5 WHERE id =$1\\\",\\\"del\\\":\\\"UPDATE warehouse_type SET is_use=false, update_date=$2, update_by=$3 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryWarehouse_type.json?");

/***/ }),

/***/ "./app/query/queryWipProdInOutCTS.json":
/*!*********************************************!*\
  !*** ./app/query/queryWipProdInOutCTS.json ***!
  \*********************************************/
/*! exports provided: filterMaterial, filterProduct, checkBoxToGen, check_product_ref_box, addLogWipProdAmount, getLastTag, GetLotWipProdInStock, GetLotWipProdDetail, GetLotWipProdHistory, getproduct_mgt_data, checkLotWipProd, getProductionOrder, getProductionOrderDetail, filterMaterialreport, goMaterialreport, checklog_colreport, name_customreport, getWiplogProdinreport, GetLotWipProdDetailreport, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterMaterial\\\":\\\"SELECT a.id, a.no,  a.name, material_type_id, material_spec_id,e.name as material_spec, material_size_id,d.name as material_size, buy_price, material_supplier_id, material_unit_id, amount, description, a.remark, a.image, a.user_id, a.oem_id, a.is_active, a.is_use, is_scan_qr, a.create_date, a.update_date, a.image_name, a.imaget_path, weight_piece, supplier_lead_time, minimum_lot, minimum_order_supplier, material_supplier2_id, material_supplier3_id, buy_price2, buy_price3, supplier_lead_time2, supplier_lead_time3, mat_dimention FROM material a   LEFT JOIN oem b on b.id = a.oem_id  LEFT JOIN company c on c.id = b.company_id LEFT JOIN material_size d on a.material_size_id = d.id LEFT JOIN material_spec e on a.material_spec_id = e.id  WHERE ($1::text is null or a.no ILIKE '%' || $1 || '%') AND ($2::text is null or a.name ILIKE '%' || $2 || '%') AND  b.company_id = $3 AND a.is_use = true ORDER BY a.create_date\\\",\\\"filterProduct\\\":\\\"SELECT a.id, a.no, a.name, a.product_model_id, a.qty_unit, a.user_id, a.oem_id, a.wip_amount, a.fg_amount, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.cut_amount, a.min_product, a.min_lot, a.is_assy, a.logistic_amount, a.end_user_amount, a.product_plants_item, a.dip_amount, a.is_trade, a.surface, a.\\\\\\\"N/W (g.)\\\\\\\" as nw, a.packing_standart, b.image_name, b.imaget_path as image_path FROM product a LEFT JOIN product_detail b on a.id = b.product_id WHERE ($1::text is null or no ILIKE '%' || $1 || '%') AND ($2::text is null or name ILIKE '%' || $2 || '%') AND oem_id = $3 AND is_use = true;\\\",\\\"checkBoxToGen\\\":\\\"SELECT box_no FROM log_wip_prod_edit_amount_cts WHERE ($1::text is null or box_no LIKE '%' || $1 || '%' ) AND edit_type = true ORDER BY create_date DESC;\\\",\\\"check_product_ref_box\\\":\\\"SELECT id, product_id, box_no FROM log_wip_prod_edit_amount_cts WHERE product_id = $1 AND box_no = $2;\\\",\\\"addLogWipProdAmount\\\":\\\"INSERT INTO log_wip_prod_edit_amount_cts(id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, lot_no, amount, box_no, product_id, box_date, loss, ref_box_no, log_material_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17);\\\",\\\"getLastTag\\\":\\\"SELECT id FROM log_wip_prod_edit_amount_cts WHERE ($1::text is null or tracking_no ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"GetLotWipProdInStock\\\":\\\"SELECT min(a.create_date) as create_date,a.box_no,(SELECT coalesce(sum(b.amount),0)   FROM log_wip_prod_edit_amount_cts b where b.box_no = a.box_no and b.edit_type = true and b.product_id =  $1) - (SELECT coalesce(sum(b.amount),0)  FROM log_wip_prod_edit_amount_cts b where b.box_no = a.box_no and b.edit_type = false and b.product_id =  $1) as amount FROM log_wip_prod_edit_amount_cts a WHERE a.box_no != 'null' and a.product_id = $1  GROUP BY a.box_no order by create_date desc\\\",\\\"GetLotWipProdDetail\\\":\\\"SELECT id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, box_no,ref_box_no, lot_no, amount, product_id FROM log_wip_prod_edit_amount_cts WHERE product_id = $1 AND box_no = $2 AND edit_type = true;\\\",\\\"GetLotWipProdHistory\\\":\\\"SELECT id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, lot_no, amount, box_no, product_id, box_date, loss, ref_box_no, log_material_id FROM log_wip_prod_edit_amount_cts WHERE product_id =$1 ORDER BY create_date desc\\\",\\\"getproduct_mgt_data\\\":\\\"SELECT no , name  FROM product where id = $1;\\\",\\\"checkLotWipProd\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount, user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts WHERE no = $1 AND is_use = true;\\\",\\\"getProductionOrder\\\":\\\"SELECT id,no,is_success FROM production_order_cts WHERE is_success = false AND is_use = true AND product_id = $1;\\\",\\\"getProductionOrderDetail\\\":\\\"SELECT a.id,  a.no as order_no,  a.customer_id,  a.product_id,  a.plated,  a.material_id,  a.amount,  a.user_producer,  a.total_time_producer,  a.finish_date_producer,  a.remark,  a.setup_ng_record,  a.user_document,  a.is_use, a.create_date, a.is_success, a.finish_date_plan,b.no as product_no,b.name as product_name,c.name as customer_name FROM production_order_cts a LEFT JOIN  product b on b.id = a.product_id LEFT JOIN customer c on c.id = a.customer_id WHERE a.id = $1;\\\",\\\"filterMaterialreport\\\":\\\"SELECT a.id, a.no, a.name,a.material_supplier_id,a.amount,a.oem_id, a.is_active, a.is_use, a.weight_piece,a.coil_weight,b.name as name_supplier, c.company_id FROM material a LEFT JOIN material_supplier b on a.material_supplier_id = b.id LEFT JOIN oem c on c.id = a.oem_id WHERE a.is_use = true  AND c.company_id = $1;\\\",\\\"goMaterialreport\\\":\\\"SELECT a.id, a.no, a.name,a.material_supplier_id,a.amount,a.oem_id, a.is_active, a.is_use, a.weight_piece,a.coil_weight,b.name as name_supplier, c.company_id FROM material a LEFT JOIN material_supplier b on a.material_supplier_id = b.id LEFT JOIN oem c on c.id = a.oem_id WHERE a.is_use = true AND a.id = $1 AND c.company_id = $2;\\\",\\\"checklog_colreport\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no,amount,material_id FROM log_wip_prod_edit_amount_cts WHERE material_id=$1 AND is_use = true ;\\\",\\\"name_customreport\\\":\\\"SELECT id, company_id, name, is_use, sort, contact_name, contact_tel FROM material_supplier WHERE id = $1;\\\",\\\"getWiplogProdinreport\\\":\\\"SELECT id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, lot_no, amount, box_no, product_id, box_date, loss, ref_box_no, log_material_id FROM log_wip_prod_edit_amount_cts WHERE is_use = true and tracking_no = $1;\\\",\\\"GetLotWipProdDetailreport\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no, amount, material_id FROM log_wip_prod_edit_amount_cts a left join production_order_cts b on a.product_order_cts_id WHERE material_id = $1 AND coli_no = $2 AND edit_type = true;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryWipProdInOutCTS.json?");

/***/ }),

/***/ "./app/query/queryWipshupOutInCTS.json":
/*!*********************************************!*\
  !*** ./app/query/queryWipshupOutInCTS.json ***!
  \*********************************************/
/*! exports provided: filterWipshup, get_log_wip_chup_edit_amount_cts, get_log_wip_chup_edit_amount_cts_join, getMasterplantShup, getCoilNo, getProductByID, getLotInStock, getLotInStock2, getLotInStock24, getLotInStock21, getLotInStockKg, getLotInStockPiece, getlotdetail, getLotInStockjoinlogProd, GetLotWipChupDetail, getLastTag_prod, getLastTag, getLastPackTag, addLogWipShupAmount1, addLogWipShupAmount, checklotno, checklotnoByID, update_lot_qc_approved, GetLotWipChupHistory, GetLotShupProdDetail, GetLotWipShupInStock, name_customShupreport, GetLotWipShupDetail, getProNo, AutoinSavelogPack, checkPackNoToGen, getProNoByPlate, getnamecom, production_cts_detil, GetChupOutByID, getProductionOrder, checkTagc, checkPoNo, getlotdetailByTag, getchup, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterWipshup\\\":\\\"SELECT a.id as product_id, a.no as product_no, a.name as product_name, a.product_model_id, a.qty_unit, a.user_id, a.oem_id, a.wip_amount, a.fg_amount, a.is_active, a.is_use, a.is_scan_qr, a.create_date, a.update_date, a.cut_amount, a.min_product, a.min_lot, a.is_assy, a.logistic_amount, a.end_user_amount, a.product_plants_item, a.dip_amount, a.is_trade, a.surface, a.\\\\\\\"N/W (g.)\\\\\\\" as nw, b.image,b.image_name, b.imaget_path FROM product as a left join product_detail as b on a.id = b.product_id where a.oem_id = $1 and a.is_use = true and ($2::text is null or a.no ILIKE '%' || $2 || '%') and ($3::text is null or a.name ILIKE '%' || $3 || '%');\\\",\\\"get_log_wip_chup_edit_amount_cts\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve,lot_no FROM log_wip_chup_edit_amount_cts where edit_type = true and product_id = $1 and is_use = true;\\\",\\\"get_log_wip_chup_edit_amount_cts_join\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve,b.coli_no FROM log_wip_chup_edit_amount_cts as a left join log_wip_prod_edit_amount_cts as b on a.log_wip_prod_edit_amount_cts_id = b.id where a.edit_type = true and a.product_id = $1 and a.is_use = true;\\\",\\\"getMasterplantShup\\\":\\\"SELECT id, code, name, telnumber, company_id, address, is_use, create_date, update_date FROM plating_plant where is_use = true and company_id = $1;\\\",\\\"getCoilNo\\\":\\\"SELECT id, product_order_cts_id, tracking_no, edit_type, is_use, create_date, create_by, update_date, update_by, lot_no, amount, box_no, product_id, box_date, loss, ref_box_no, log_material_id FROM log_wip_prod_edit_amount_cts where edit_type = false and ($1::timestamp is null or update_date Between $1 and $2);\\\",\\\"getProductByID\\\":\\\"SELECT id as product_id, no as product_no, name as product_name, product_model_id, qty_unit, user_id, oem_id, wip_amount, fg_amount, is_active, is_use, is_scan_qr, create_date, update_date, cut_amount, min_product, min_lot, is_assy, logistic_amount, end_user_amount, product_plants_item, dip_amount, is_trade, surface, \\\\\\\"N/W (g.)\\\\\\\" as nw FROM product where id = $1;\\\",\\\"getLotInStock\\\":\\\"SELECT min(a.create_date) as create_date, a.po_no,(SELECT coalesce(sum(b.weight_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.po_no = a.po_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.po_no = a.po_no and b.edit_type = false and b.product_id = $1) as amount FROM log_wip_chup_edit_amount_cts a WHERE a.picecs_amount is null and a.po_no != 'null' and a.product_id =$1 GROUP BY a.po_no order by create_date desc\\\",\\\"getLotInStock2\\\":\\\"SELECT min(a.create_date) as create_date, a.po_no,(SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.po_no = a.po_no and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.weight_amount is null and b.po_no = a.po_no and b.edit_type = false and b.product_id = $1) as amount FROM log_wip_chup_edit_amount_cts a WHERE a.weight_amount  is null and a.po_no != 'null' and a.product_id =$1 GROUP BY a.po_no order by create_date desc\\\",\\\"getLotInStock24\\\":\\\"SELECT min(a.create_date) as create_date, a.tracking_tag_wip_chup,(SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is not null and b.tracking_tag_wip_chup = a.tracking_tag_wip_chup and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.picecs_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is not null and b.tracking_tag_wip_chup = a.tracking_tag_wip_chup and b.edit_type = false and b.product_id = $1) as picecs_amount FROM log_wip_chup_edit_amount_cts a WHERE a.picecs_amount is not null and a.tracking_tag_wip_chup != 'null' and a.product_id =$1 GROUP BY a.tracking_tag_wip_chup order by create_date desc\\\",\\\"getLotInStock21\\\":\\\"SELECT min(a.create_date) as create_date, a.tracking_tag_wip_chup,(SELECT coalesce(sum(b.weight_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.tracking_tag_wip_chup = a.tracking_tag_wip_chup and b.edit_type = true and b.product_id = $1) - (SELECT coalesce(sum(b.weight_amount),0) FROM log_wip_chup_edit_amount_cts b where b.picecs_amount is null and b.tracking_tag_wip_chup = a.tracking_tag_wip_chup and b.edit_type = false and b.product_id = $1) as weight_amount FROM log_wip_chup_edit_amount_cts a WHERE a.picecs_amount  is  null and a.tracking_tag_wip_chup != 'null' and a.product_id =$1 GROUP BY a.tracking_tag_wip_chup order by create_date desc\\\",\\\"getLotInStockKg\\\":\\\"SELECT id,edit_type,  weight_amount, picecs_amount, loss_amount, product_id, is_use, create_date,  po_no FROM log_wip_chup_edit_amount_cts where edit_type = true and picecs_amount is null and is_use = true and product_id =$1 Order by create_date desc;\\\",\\\"getLotInStockPiece\\\":\\\"SELECT id,edit_type,  weight_amount, picecs_amount, loss_amount, product_id, is_use, create_date,  po_no FROM log_wip_chup_edit_amount_cts where edit_type = true and picecs_amount is not null and is_use = true and product_id =$1 Order by create_date desc;\\\",\\\"getlotdetail\\\":\\\"SELECT a.id, a.edit_type, a.product_id, a.tracking_tag_wip_chup, a.lot_no, a.plating_plant_id, a.is_use,a.po_no, a.create_date, a.estimate_date, a.production_order_cts_id, b.name as name_com,b.telnumber, b.code as sub_name_com,a.po_no FROM log_wip_chup_edit_amount_cts a left join plating_plant b on b.id = a.plating_plant_id WHERE a.product_id =$1 AND a.is_use=true AND a.po_no =$2 order by a.po_no ;\\\",\\\"getLotInStockjoinlogProd\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount,a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date,a.update_by, a.qc_approve, b.coli_no as prod_coli_no, b.order_no as prod_order_no, b.amount as prod_amount,b.po_no as prod_po_no,c.name as plant_name, c.code as plant_code FROM log_wip_chup_edit_amount_cts as a lift join log_wip_prod_edit_amount_cts as b on a.log_wip_prod_edit_amount_cts_id = b.id left join plating_plant as c on a.plating_plant_id = c.id where a.edit_type = true and a.product_id = $1 and a.is_use = true;\\\",\\\"GetLotWipChupDetail\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no, a.qc_date, a.estimate_date, a.actual_date, a.po_no,a.production_order_cts_id,b.name as plating_plant_name,b.code as sub_plating_name,b.telnumber,pd.\\\\\\\"N/W (g.)\\\\\\\" as nw FROM log_wip_chup_edit_amount_cts as a left join plating_plant as b on a.plating_plant_id = b.id left join product as pd on a.product_id = pd.id where a.product_id = $1 and a.tracking_tag_wip_chup = $2 and a.edit_type = true;\\\",\\\"getLastTag_prod\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no, order_no, amount FROM log_wip_prod_edit_amount_cts WHERE ($1::text is null or tracking_tag_wip_prod ILIKE '%' || $1 || '%') AND edit_type = true\\\",\\\"getLastTag\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no FROM log_wip_chup_edit_amount_cts  WHERE ($1::text is null or tracking_tag_wip_chup ILIKE '%' || $1 || '%') AND edit_type = true;\\\",\\\"getLastPackTag\\\":\\\"SELECT id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount, pack_lot_no FROM log_pack_edit_amount_cts WHERE ($1::text is null or tracking_tag_pack_chup ILIKE '%' || $1 || '%') AND edit_type = true;\\\",\\\"addLogWipShupAmount1\\\":\\\"INSERT INTO log_wip_chup_edit_amount_cts(id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no,qc_date)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18,$19);\\\",\\\"addLogWipShupAmount\\\":\\\"INSERT INTO log_wip_chup_edit_amount_cts(id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no, production_order_cts_id)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23);\\\",\\\"checklotno\\\":\\\"SELECT id, log_material_id, product_order_cts_id, po_no, tracking_tag_wip_prod, edit_type, is_use, create_date, create_by, update_date, update_by, coli_no, order_no, amount, material_id FROM log_wip_prod_edit_amount_cts where coli_no = $1 and is_use = true;\\\",\\\"checklotnoByID\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no, production_order_cts_id FROM log_wip_chup_edit_amount_cts where lot_no = $1 and edit_type = true;\\\",\\\"update_lot_qc_approved\\\":\\\"UPDATE log_wip_chup_edit_amount_cts SET loss_amount = $7, qc_approve=$4, lot_no=$2, qc_date=$5 WHERE product_id = $1 and lot_no = $2 and edit_type = $6 and tracking_tag_wip_chup = $3;\\\",\\\"GetLotWipChupHistory\\\":\\\"SELECT a.id, a.log_wip_prod_edit_amount_cts_id, a.tracking_tag_wip_prod, a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id, a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.qc_approve, a.lot_no,a.qc_date,a.estimate_date,a.actual_date,a.po_no,a.production_order_cts_id,b.name as plating_plant_name,b.code as sub_plating_name,b.telnumber FROM log_wip_chup_edit_amount_cts as a left join plating_plant as b on a.plating_plant_id = b.id where a.product_id = $1 ORDER BY a.create_date desc;\\\",\\\"GetLotShupProdDetail\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no, production_order_cts_id FROM log_wip_chup_edit_amount_cts where product_id = $1 and tracking_tag_wip_chup = $2 and edit_type = true;\\\",\\\"GetLotWipShupInStock\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod,edit_type, tracking_tag_wip_chup, weight_amount,picecs_amount, product_id,  is_use, create_date,create_by, update_date,  lot_no, qc_date FROM log_wip_chup_edit_amount_cts WHERE is_use = true AND product_id = $1 AND tracking_tag_wip_chup=$2 AND is_use=true AND edit_type=true ;\\\",\\\"name_customShupreport\\\":\\\"SELECT a.id, a.product_id, a.customer_id,b.name,b.oem_id,b.is_use FROM product_customer a LEFT JOIN customer b on a.customer_id = b.id WHERE b.is_use=true AND product_id = $ 1;\\\",\\\"GetLotWipShupDetail\\\":\\\"SELECT b.id, b.log_material_id, b.product_order_cts_id, b.po_no, b.coli_no, b.order_no, a.id, a.tracking_tag_wip_chup, a.lot_no, a.product_id,a.log_wip_prod_edit_amount_cts_id,a.edit_type FROM log_wip_chup_edit_amount_cts a LEFT JOIN log_wip_prod_edit_amount_cts b on b.id = a.log_wip_prod_edit_amount_cts_id WHERE a.product_id = $1 AND a.lot_no = $2 AND a.edit_type = true;\\\",\\\"getProNo\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no,production_order_cts_id FROM log_wip_chup_edit_amount_cts where (po_no ILIKE '%' || $1 || '%') order by create_date desc;\\\",\\\"AutoinSavelogPack\\\":\\\"INSERT INTO log_pack_edit_amount_cts(id, edit_type, unit_amount, is_use, create_date, create_by, update_date, update_by, log_wip_chup_edit_amount_cts_id, tracking_tag_wip_chup, pack_no, product_id, tracking_tag_pack_chup, wip_chup_lot_no, pack_loss, weight_amount, piece_amount, pack_lot_no)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18);\\\",\\\"checkPackNoToGen\\\":\\\"SELECT pack_no FROM log_pack_edit_amount_cts WHERE ($1::text is null or pack_no LIKE '%' || $1 || '%' ) AND edit_type = true ORDER BY create_date DESC;\\\",\\\"getProNoByPlate\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id, weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no,production_order_cts_id FROM log_wip_chup_edit_amount_cts where ($1::timestamp is null or create_date Between $1 and $2) and plating_plant_id = $3;\\\",\\\"getnamecom\\\":\\\"SELECT id, code, name, telnumber, company_id, address, is_use, create_date, update_date FROM plating_plant WHERE is_use=true;\\\",\\\"production_cts_detil\\\":\\\"SELECT id, no, customer_id, product_id, plated, material_id, amount,user_producer, total_time_producer, finish_date_producer, remark, setup_ng_record, user_document, is_use, create_date, create_by, update_date, update_by, time_per_product, producer_date, is_success, finish_date_plan FROM production_order_cts where product_id = $1 And is_use =true;\\\",\\\"GetChupOutByID\\\":\\\"SELECT id, log_wip_prod_edit_amount_cts_id, tracking_tag_wip_prod, edit_type, tracking_tag_wip_chup, plating_plant_id,weight_amount, picecs_amount, loss_amount, product_id, unit_convert, is_use, create_date, create_by, update_date, update_by, qc_approve, lot_no, qc_date, estimate_date, actual_date, po_no, production_order_cts_id FROM log_wip_chup_edit_amount_cts where id = $1;\\\",\\\"getProductionOrder\\\":\\\"SELECT id,no,is_success FROM production_order_cts WHERE is_success = false AND is_use = true AND product_id = $1;\\\",\\\"checkTagc\\\":\\\"SELECT po_no FROM log_wip_chup_edit_amount_cts where po_no = $1;\\\",\\\"checkPoNo\\\":\\\"SELECT * FROM log_wip_chup_edit_amount_cts where (po_no ILIKE '%' || $1 || '%');\\\",\\\"getlotdetailByTag\\\":\\\"SELECT a.id, a.edit_type, a.product_id, a.tracking_tag_wip_chup, a.lot_no, a.plating_plant_id, a.is_use,a.po_no, a.create_date, a.estimate_date, a.production_order_cts_id, b.name as name_com,b.telnumber, b.code as sub_name_com,a.po_no FROM log_wip_chup_edit_amount_cts a left join plating_plant b on b.id = a.plating_plant_id WHERE  a.tracking_tag_wip_chup = $1 AND a.edit_type = true;\\\",\\\"getchup\\\":\\\"SELECT * FROM log_wip_chup_edit_amount_cts where id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryWipshupOutInCTS.json?");

/***/ }),

/***/ "./app/query/queryexternalData.json":
/*!******************************************!*\
  !*** ./app/query/queryexternalData.json ***!
  \******************************************/
/*! exports provided: externalData, getExterDate, del, checkDriver_detail, importDriverDetil, UPdateDriverDetil, update_logistic_car, fineTypeByName, finePlateNumber, update_logistic_cars, Add_logisic_car_DTC, Add_car_type, addTypeCar, getTypeSortMax, updateLogisTicForDTC, addLogisticCar, getIdlogisticByPlateNumber, CheckCarMaintenant, AddCarMaintenance, UpdateMainenace, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"externalData\\\":\\\"INSERT INTO external_source (id,external_name,is_use, create_date, create_by, update_date, update_by, oem_id, company_id,status_upload, upload_detail) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10,$11)\\\",\\\"getExterDate\\\":\\\"SELECT a.id, a.external_name, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.status_upload, a.upload_detail, b.name,b.sirname FROM external_source a left join identity_user b on b.id = a.create_by where a.company_id = $1 and a.is_use = true Order by a.update_date DESC\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"external_source\\\\\\\" SET is_use = false WHERE id=$1\\\",\\\"checkDriver_detail\\\":\\\"SELECT id, driver_name_th, driver_name_eg, person_code, citizen_id, card_name, driver_tel, exp_driving_licence, is_use, is_active, oem_id, company_id, create_date, create_by, update_date, update_by, nickname,id_person FROM driver_person where id_person = $1;\\\",\\\"importDriverDetil\\\":\\\"INSERT INTO driver_person(id, driver_name_th, driver_name_eg, person_code, citizen_id, card_name, driver_tel, exp_driving_licence, is_use, is_active, oem_id, company_id, create_date, create_by, update_date, update_by, nickname,oem_name_text, id_person) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19);\\\",\\\"UPdateDriverDetil\\\":\\\"UPDATE driver_person SET driver_name_th=$2, driver_name_eg=$3, person_code=$4,  card_name=$5, driver_tel=$6, exp_driving_licence=$7, update_date=$8, update_by=$9, nickname=$10, citizen_id = $11, oem_name_text = $12 WHERE  id_person = $1;\\\",\\\"update_logistic_car\\\":\\\"UPDATE logistic_car SET car_name= $2, sim_number=$3, car_type_id=$4, plate_number=$5, oem_id=$6,capacity=$7, tax=$8, next_tax=$9, chassis_number=$10, vin_number=$11, car_year=$12, model_car=$13, band_car=$14, is_truck=$15, is_use=$16, is_active=$17, person_sirname_car=$18, person_lastname_car=$19, person_tel_car=$20, update_by=$21, create_date=$22, logistic_group_id=$23, update_date=$24 WHERE id = $1;\\\",\\\"fineTypeByName\\\":\\\"SELECT id,name FROM car_type WHERE is_use = true and name = $1;\\\",\\\"finePlateNumber\\\":\\\"SELECT id,plate_number,is_use FROM logistic_car where is_use = true and plate_number = $1; \\\",\\\"update_logistic_cars\\\":\\\"UPDATE logistic_car SET car_name= $2, sim_number=$3, car_type_id=$4, box_number=$5,  plate_number=$6, mileage=$7, oem_id=$8, company_id=$9, capacity=$10, tax=$11,  next_tax=$12, chassis_number=$13, vin_number=$14, car_year=$15, model_car=$16, band_car=$17, fuel_efficiency=$18, kpi=$19, truck_id=$20, is_truck=$21, image_person=$22,  image_person_name=$23, is_use=$24, is_active=$25, person_sirname_car=$26, person_lastname_car=$27,  person_tel_car=$28, update_by=$29, create_date=$30, logistic_group_id=$31,  image_person_path=$32, update_date=$33 WHERE id = $1;\\\",\\\"Add_logisic_car_DTC\\\":\\\"INSERT INTO logistic_car(id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id,company_id, capacity, tax,next_tax, chassis_number,vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person, image_person_name, is_use, is_active, person_sirname_car, person_lastname_car, person_tel_car, update_by, create_date, logistic_group_id, image_person_path, update_date)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33);\\\",\\\"Add_car_type\\\":\\\"INSERT INTO car_type (id, name, is_use, sort, update_date, update_by, oem_id, company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8);\\\",\\\"addTypeCar\\\":\\\"INSERT INTO \\\\\\\"car_type\\\\\\\"( id, name, is_use) VALUES ($1, $2, $3);\\\",\\\"getTypeSortMax\\\":\\\"SELECT Max (sort) FROM  \\\\\\\"logistic_type\\\\\\\" WHERE is_use = true;\\\",\\\"updateLogisTicForDTC\\\":\\\"UPDATE logistic_car SET car_type_id=$2,oem_id =$3, capacity=$4, car_year=$5,band_car=$6, is_truck=$7, person_sirname_car=$8, person_lastname_car=$9,person_tel_car=$10, update_by=$11, logistic_group_id=$12, update_date=$13 WHERE id = $1;\\\",\\\"addLogisticCar\\\":\\\"INSERT INTO logistic_car(id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person, is_use, is_active, person_sirname_car, person_lastname_car, person_tel_car, update_by, create_date, logistic_group_id,image_person_path,update_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31,$32,$33);\\\",\\\"getIdlogisticByPlateNumber\\\":\\\"SELECT id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person, image_person_name, is_use, is_active, person_sirname_car, person_lastname_car, person_tel_car, update_by, create_date, logistic_group_id, image_person_path, update_date FROM logistic_car WHERE plate_number = $1;\\\",\\\"CheckCarMaintenant\\\":\\\"SELECT id, detail_order, maintenance_number, mileage_number, price, oem_id, company_id, create_date, update_by, logistic_car_id, document_date, finish_date, type_maintenance, location_maintenance, status_maintenance, remark, begin_date,seq FROM car_maintenance WHERE  logistic_car_id = $1 AND maintenance_number = $2 AND seq = $3;\\\",\\\"AddCarMaintenance\\\":\\\"INSERT INTO car_maintenance (id, detail_order, maintenance_number, mileage_number, price, oem_id, company_id, create_date, update_by, logistic_car_id, document_date, finish_date, type_maintenance, location_maintenance, status_maintenance, remark, begin_date, spare_part, spare_part_amount, spare_part_unit, apare_part_status, price_per_unit, purchase, withdraw,seq) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25);\\\",\\\"UpdateMainenace\\\":\\\"UPDATE car_maintenance SET detail_order=$2, mileage_number=$3, price=$4, update_by=$5, document_date=$6, finish_date=$7, type_maintenance=$8, location_maintenance=$9, status_maintenance=$10, remark=$11, begin_date=$12, spare_part=$13, spare_part_amount=$14, spare_part_unit=$15, apare_part_status=$16, price_per_unit=$17, purchase=$18, withdraw=$19 WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryexternalData.json?");

/***/ }),

/***/ "./app/query/queryfuelConsumtion.json":
/*!********************************************!*\
  !*** ./app/query/queryfuelConsumtion.json ***!
  \********************************************/
/*! exports provided: get_fuel_consumtion1, get_fuel_consumtion, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"get_fuel_consumtion1\\\":\\\"SELECT a.id, a.logistic_car_id, a.record_date, a.mileage_number, a.liter, a.oil_location_id, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, b.oil_location_name,c.plate_number,c.kpi,c.person_sirname_car,c.person_lastname_car, c.car_type_id,c.logistic_group_id,d.name, e.logistic_group_name FROM oil_record a left join oil_location b on a.oil_location_id = b.id left join logistic_car c on a.logistic_car_id = c.id left join car_type d on c.car_type_id = d.id left join logistic_group e on c.logistic_group_id = e.id  where a.is_use = true and a.company_id = $1 and a.oem_id = $2 and ($3::text is null or c.plate_number ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.record_date Between $4 and $5) ORDER BY c.plate_number;\\\",\\\"get_fuel_consumtion\\\":\\\"SELECT plate_number, name, company, company_id, oem_id, oem, kpi, mileage, liter, oil_location_name, record_date, person_car FROM fuel_consumtion where company_id = $1 and oem_id = $2 and($3::text is null or plate_number ILIKE '%' || $3 || '%') and ($4::timestamp is null or record_date Between $4 and $5) ORDER BY record_date desc;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/queryfuelConsumtion.json?");

/***/ }),

/***/ "./app/query/querylogistic.json":
/*!**************************************!*\
  !*** ./app/query/querylogistic.json ***!
  \**************************************/
/*! exports provided: add, update, del, findById, GetMenu, filter2, filter, filter_all, filter_all2, checkNamelogistic, checkNamelogistic2, checkNo_add, checkName_add, checkNo_edit, checkName_edit, del_dtcCar, logistic_car_checkName_add, addLogisticCar, logistic_car_checkPlate_number, updateLogisticCar, addLogisticFromIsUse, GetCarType, checkPlateCar, checkPlateCar2, checkChassisCar, checkChassisCar2, addTowTruck, findTowTruckById, filter_towTruck, editTowTruck, delTowTruck, allOemByCompany, getlogistic_type, checkTypeCar, addTypeCar, getTypeSortMax, fineTypeByid, finelogisticId, fineTypeByName, updateLogisTicForDTC, updateLogisTicForDTC_isUse, updateLogisTic, updateLogisTicDTC, fineMaintenaceHistoryByCarID, getplate_number, getplate_number2, getgas_station, addrecordOil, addrecordOil2, updateMile, filterrecordOil, filtOil_not_oem, updateOil_record, findoilbyid, findoilbyid1, delOil_record, chackplate_date, chekUpdaterecordOill, getcar_type, checkliter, addFuel_oil, addFuel_oil2, updateExpreesOil, fineImageBbyCarId, clearImageList, addListNewImageCar, getBill, getBillOutLogistic, SaveLogisticInOut, UpdateLogisticInOut, getLogisticInOut, getLogisticInOut2, getBillById, DelLogisToSave, getLogisticDetailByID, getBillInDriver, getBillInDriver2, DelLogisticInOutById, CheckbillEnd, filterLogisticInOut, filterLogisticInOutReport, getLogisticInOutReport, getDriverBillById, getPersonDriverDetail, getcartype, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"add\\\":\\\"INSERT INTO \\\\\\\"logistic\\\\\\\" (id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use,oem_id,company_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\\\",\\\"update\\\":\\\"UPDATE \\\\\\\"logistic\\\\\\\" SET   logistic_type_id = $2, deliver = $3, deliver_content = $4, logistic_no = $5, logistic_name = $6  WHERE id = $1\\\",\\\"del\\\":\\\"UPDATE \\\\\\\"logistic\\\\\\\" SET is_use =false WHERE  id=$1\\\",\\\"findById\\\":\\\"SELECT id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use FROM \\\\\\\"logistic\\\\\\\" WHERE is_use = true and id = $1\\\",\\\"GetMenu\\\":\\\"SELECT id, logistic_name, logistic_no FROM \\\\\\\"logistic\\\\\\\" WHERE is_use = true\\\",\\\"filter2\\\":\\\"SELECT a.id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person_path, image_person, a.is_use, a.is_active, person_sirname_car, person_lastname_car, person_tel_car, a.update_by, a.create_date, logistic_group_id ,logistic_group_name, b.logistic_group_name ,a.update_date FROM \\\\\\\"logistic_car\\\\\\\" a LEFT JOIN logistic_group b on b.id = a.logistic_group_id WHERE a.is_use =true and a.is_active=true and company_id = $1 and oem_id = $2 and ($3::text is null or plate_number LIKE '%' || $3 || '%') Order by plate_number asc\\\",\\\"filter\\\":\\\"SELECT a.id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person_path, image_person, a.is_use, a.is_active, person_sirname_car, person_lastname_car, person_tel_car, a.update_by, a.create_date, logistic_group_id ,logistic_group_name, b.logistic_group_name,a.update_date FROM \\\\\\\"logistic_car\\\\\\\" a LEFT JOIN logistic_group b on b.id = a.logistic_group_id WHERE a.is_use =true and a.is_active=true and company_id = $1 and oem_id = $2 and ($3::text is null or plate_number LIKE '%' || $3 || '%') and  logistic_group_name = $4 Order by plate_number asc \\\",\\\"filter_all\\\":\\\"SELECT a.id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person_path, image_person, a.is_use, a.is_active, person_sirname_car, person_lastname_car, person_tel_car, a.update_by, a.create_date, logistic_group_id ,logistic_group_name, b.logistic_group_name,a.update_date FROM \\\\\\\"logistic_car\\\\\\\" a LEFT JOIN logistic_group b on b.id = a.logistic_group_id  WHERE a.is_use =true and a.is_active=true and company_id = $1 and ($2::text is null or plate_number LIKE '%' || $2 || '%') and  logistic_group_name = $3 Order by plate_number asc \\\",\\\"filter_all2\\\":\\\"SELECT a.id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person_path, image_person, a.is_use, a.is_active, person_sirname_car, person_lastname_car, person_tel_car, a.update_by, a.create_date, logistic_group_id ,logistic_group_name, b.logistic_group_name ,a.update_date FROM \\\\\\\"logistic_car\\\\\\\" a LEFT JOIN logistic_group b on b.id = a.logistic_group_id  WHERE a.is_use =true and a.is_active=true and company_id = $1 and ($2::text is null or plate_number LIKE '%' || $2 || '%')  Order by plate_number asc \\\",\\\"checkNamelogistic\\\":\\\"select id, logistic_name, logistic_no from logistic where logistic_no = $1 and id != $2 and is_use=true\\\",\\\"checkNamelogistic2\\\":\\\"select id, logistic_name, logistic_no from \\\\\\\"logistic\\\\\\\" where id = $1 and logistic_no = $2 and is_use=true \\\",\\\"checkNo_add\\\":\\\"SELECT id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use FROM logistic where logistic_no = $1 and and company_id = $2 and is_use = true;\\\",\\\"checkName_add\\\":\\\"SELECT id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use FROM logistic where logistic_name = $1 and company_id = $2 and is_use = true;\\\",\\\"checkNo_edit\\\":\\\"SELECT id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use FROM logistic where logistic_no = $1 and id != $2 and company_id = $3 and is_use = true;\\\",\\\"checkName_edit\\\":\\\"SELECT id, logistic_type_id, deliver, deliver_content, logistic_no, logistic_name, is_use FROM logistic where logistic_name = $1 and id != $2  and company_id = $3  and is_use = true;\\\",\\\"del_dtcCar\\\":\\\"UPDATE logistic_car SET is_use=$2, is_active=$3, update_date=$4 , update_by =$5 WHERE  id=$1;\\\",\\\"logistic_car_checkName_add\\\":\\\"SELECT count(id) FROM logistic_car where car_name = $1 and is_use is true;\\\",\\\"addLogisticCar\\\":\\\"INSERT INTO logistic_car(id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person_name,image_person_path, image_person, is_use, is_active, person_sirname_car, person_lastname_car, person_tel_car, update_by, create_date, logistic_group_id,update_date) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31,$32,$33);\\\",\\\"logistic_car_checkPlate_number\\\":\\\"SELECT id,is_use,plate_number FROM logistic_car where plate_number = $1 \\\",\\\"updateLogisticCar\\\":\\\"UPDATE logistic_car SET  car_name=$2, sim_number=$3, car_type_id=$4, box_number=$5, mileage=$6, oem_id=$7, capacity=$8, tax=$9, next_tax=$10, chassis_number=$11, vin_number=$12, car_year=$13, model_car=$14, band_car=$15, fuel_efficiency=$16, kpi=$17, truck_id=$18, is_truck=$19, image_person_name=$20, image_person=$21,  person_sirname_car=$22, person_lastname_car=$23, person_tel_car=$24, update_by=$25, update_date=$26, logistic_group_id=$27 WHERE plate_number = $1;\\\",\\\"addLogisticFromIsUse\\\":\\\"\\\",\\\"GetCarType\\\":\\\"SELECT id, name, is_use FROM car_type WHERE is_use = true;\\\",\\\"checkPlateCar\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE plate_number = $1 AND is_use = true;\\\",\\\"checkPlateCar2\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE plate_number = $1 AND id != $2 AND is_use = true \\\",\\\"checkChassisCar\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE chassis_number = $1 AND is_use = true;\\\",\\\"checkChassisCar2\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE chassis_number = $1 AND id != $2 AND is_use = true \\\",\\\"addTowTruck\\\":\\\"INSERT INTO tow_truck(id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13);\\\",\\\"findTowTruckById\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE id = $1;\\\",\\\"filter_towTruck\\\":\\\"SELECT id, plate_number, chassis_number, model_car, car_type_id, truck_detail, is_use, is_active, create_date, update_by, update_date, oem_id, company_id FROM tow_truck WHERE is_use = true AND ($1::text is null or plate_number ILIKE '%' || $1 || '%') AND ($2::text is null or chassis_number ILIKE '%' || $2 || '%') AND ($3::text is null or model_car ILIKE '%' || $3 || '%')  AND ($4::uuid is null or car_type_id =$4) AND oem_id = $5\\\",\\\"editTowTruck\\\":\\\"UPDATE tow_truck SET plate_number=$2, chassis_number=$3, model_car=$4, car_type_id=$5, truck_detail=$6,update_by=$7, update_date=$8 WHERE id = $1;\\\",\\\"delTowTruck\\\":\\\"UPDATE tow_truck SET is_use = false, update_by=$2, update_date=$3 WHERE id = $1;\\\",\\\"allOemByCompany\\\":\\\"SELECT id, company_id,  name FROM oem WHERE is_use = true and is_active =true and company_id = $1;\\\",\\\"getlogistic_type\\\":\\\"SELECT id, name, is_use, sort, update_date, update_by, oem_id, company_id FROM car_type WHERE is_use = true;\\\",\\\"checkTypeCar\\\":\\\"SELECT  count (name) FROM \\\\\\\"car_type\\\\\\\" WHERE name = $1 and is_use = true\\\",\\\"addTypeCar\\\":\\\"INSERT INTO \\\\\\\"car_type\\\\\\\"( id, name, is_use) VALUES ($1, $2, $3);\\\",\\\"getTypeSortMax\\\":\\\"SELECT Max (sort) FROM  \\\\\\\"logistic_type\\\\\\\" WHERE is_use = true;\\\",\\\"fineTypeByid\\\":\\\"SELECT id, name, sort, is_use FROM logistic_type  WHERE id =$1;\\\",\\\"finelogisticId\\\":\\\"SELECT a.id, car_name, sim_number, car_type_id, b.name as car_type_name, box_number, plate_number, mileage, a.oem_id, a.company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck,image_person_name,image_person_path, image_person, a.is_use, a.is_active, person_sirname_car, person_lastname_car, person_tel_car, a.update_by, a.create_date, logistic_group_id ,logistic_group_name FROM logistic_car a left join car_type b on b.id = a.car_type_id left join  logistic_group c on c.id = a.logistic_group_id WHERE a.id = $1;\\\",\\\"fineTypeByName\\\":\\\"SELECT id FROM car_type WHERE is_use = true and name = $1;\\\",\\\"updateLogisTicForDTC\\\":\\\"UPDATE \\\\\\\"logistic_car\\\\\\\" SET car_name=$2, sim_number=$3, car_type_id=$4, box_number=$5, plate_number=$6,mileage=$7, oem_id=$8, company_id=$9, update_by=$10, update_date=$11, logistic_group_id=$12 WHERE id = $1;\\\",\\\"updateLogisTicForDTC_isUse\\\":\\\"UPDATE \\\\\\\"logistic_car\\\\\\\" SET car_name=$2, sim_number=$3, car_type_id=$4, box_number=$5, plate_number=$6,mileage=$7, oem_id=$8, company_id=$9, update_by=$10, update_date=$11, logistic_group_id=$12, is_use=$13, is_active = $14 WHERE id = $1;\\\",\\\"updateLogisTic\\\":\\\"UPDATE \\\\\\\"logistic_car\\\\\\\" SET car_name=$2, sim_number=$3, car_type_id=$4, box_number=$5, plate_number=$6, mileage=$7, capacity=$8, tax=$9, next_tax=$10, chassis_number=$11, vin_number=$12, car_year=$13, model_car=$14, band_car=$15, fuel_efficiency=$16, kpi=$17, truck_id=$18, is_truck=$19, image_person=$20, image_person_name=$21, person_sirname_car=$22, person_lastname_car=$23, person_tel_car=$24, update_by=$25, image_person_path=$26, update_date=$27  WHERE id = $1;\\\",\\\"updateLogisTicDTC\\\":\\\"UPDATE \\\\\\\"logistic_car\\\\\\\" SET  capacity=$2, tax=$3, next_tax=$4, chassis_number=$5, vin_number=$6, car_year=$7, model_car=$8, band_car=$9, fuel_efficiency=$10, kpi=$11, truck_id=$12, is_truck=$13, image_person=$14, image_person_name=$15,person_sirname_car=$16, person_lastname_car=$17, person_tel_car=$18, update_by=$19,  image_person_path=$20, car_type_id=$21, update_date=$22 WHERE id=$1;\\\",\\\"fineMaintenaceHistoryByCarID\\\":\\\"SELECT a.id, detail_order, maintenance_number, mileage_number, price, b.name as oem_id, a.company_id, a.create_date, a.update_by,c.plate_number as logistic_car_id, document_date, finish_date, type_maintenance, location_maintenance, status_maintenance, remark, begin_date, spare_part, spare_part_amount, spare_part_unit, apare_part_status, price_per_unit, purchase, withdraw, seq  FROM car_maintenance a LEFT JOIN oem b on b.id = a.oem_id LEFT JOIN logistic_car c on c.id = a.logistic_car_id Where logistic_car_id = $1 \\\",\\\"getplate_number\\\":\\\"SELECT id, plate_number, oem_id, company_id, is_use FROM logistic_car WHERE is_use = true and oem_id = $1 ORDER BY plate_number;\\\",\\\"getplate_number2\\\":\\\"SELECT id, plate_number, oem_id, company_id, is_use FROM logistic_car WHERE is_use = true and company_id = $1 ORDER BY plate_number;\\\",\\\"getgas_station\\\":\\\"SELECT id, oil_location_name FROM oil_location  WHERE company_id = $1 and is_use = true;\\\",\\\"addrecordOil\\\":\\\"INSERT INTO oil_record (id, logistic_car_id, record_date, mileage_number, liter, oil_location_id, is_use, create_date, create_by, update_date, update_by, oem_id, company_id, slip_image_path, slip_image_name,current_amount_meter, fuel_giver, fuel_receiver) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14,$15,$16,$17,$18);\\\",\\\"addrecordOil2\\\":\\\"INSERT INTO oil_record (id, logistic_car_id, record_date, mileage_number, liter, oil_location_id, is_use, create_date, create_by, update_date, update_by, oem_id, company_id, slip_image_path, slip_image_name,fuel_receiver) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14,$15,$16);\\\",\\\"updateMile\\\":\\\"UPDATE Logistic_car SET mileage = $1 WHERE id = $2;\\\",\\\"filterrecordOil\\\":\\\"SELECT a.id, a.logistic_car_id, a.record_date, a.mileage_number, a.liter, a.oil_location_id, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.slip_image_path,a.slip_image_name,b.plate_number, c.oil_location_name FROM \\\\\\\"oil_record\\\\\\\" a LEFT JOIN \\\\\\\"logistic_car\\\\\\\" b on b.id = a.logistic_car_id LEFT JOIN \\\\\\\"oil_location\\\\\\\" c on a.oil_location_id = c.id where a.company_id = $1 and a.is_use = true and ($2::text is null or b.plate_number LIKE '%' || $2 || '%') and ($3::uuid is null or c.id = $3) and ($4::uuid is null or a.oem_id = $4)  AND ($5::timestamp is null or a.record_date Between $5 and $6) ORDER BY a.record_date DESC ;\\\",\\\"filtOil_not_oem\\\":\\\"SELECT a.id, a.logistic_car_id, a.record_date, a.mileage_number, a.liter, a.oil_location_id, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.slip_image_path,a.slip_image_name,b.plate_number, c.oil_location_name FROM \\\\\\\"oil_record\\\\\\\" a LEFT JOIN \\\\\\\"logistic_car\\\\\\\" b on b.id = a.logistic_car_id LEFT JOIN \\\\\\\"oil_location\\\\\\\" c on a.oil_location_id = c.id where a.company_id = $1 and a.is_use = true and ($2::text is null or b.plate_number LIKE '%' || $2 || '%') and ($3::uuid is null or c.id = $3) AND ($4::timestamp is null or a.record_date Between $4 and $5) ORDER BY a.record_date DESC ;\\\",\\\"updateOil_record\\\":\\\"UPDATE \\\\\\\"oil_record\\\\\\\" SET id=$1, logistic_car_id=$2, record_date=$3, mileage_number=$4, liter=$5, oil_location_id=$6, is_use=$7, create_date=$8, create_by=$9, update_date=$10, update_by=$11, oem_id=$12, company_id=$13, slip_image_path=$14,slip_image_name=$15 ,current_amount_meter=$16, fuel_giver=$17, fuel_receiver=$18 WHERE id = $1;\\\",\\\"findoilbyid\\\":\\\"SELECT id, logistic_car_id, record_date, mileage_number, liter, oil_location_id, is_use, create_date, create_by, update_date, update_by, oem_id, company_id, slip_image_path, slip_image_name,current_amount_meter, fuel_giver, fuel_receiver FROM oil_record where id = $1;\\\",\\\"findoilbyid1\\\":\\\"SELECT a.id, a.oil_location_id, a.is_use, b.oil_location_name FROM oil_record a LEFT JOIN oil_location b on a.oil_location_id = b.id where a.id= $1;\\\",\\\"delOil_record\\\":\\\"UPDATE oil_record SET is_use = false WHERE id = $1\\\",\\\"chackplate_date\\\":\\\"SELECT a.id,logistic_car_id, record_date, b.plate_number FROM oil_record a LEFT JOIN logistic_car b on b.id = a.logistic_car_id WHERE b.id = $1 and record_date = $2 and a.is_use = true;\\\",\\\"chekUpdaterecordOill\\\":\\\"SELECT id, logistic_car_id, record_date FROM oil_record WHERE id != $1 and logistic_car_id = $2 and record_date = $3;\\\",\\\"getcar_type\\\":\\\"SELECT id, car_type_id FROM logistic_car where is_use = true and id = $1;\\\",\\\"checkliter\\\":\\\"SELECT id, is_use, oil_value FROM input_express_oil where is_use = true;\\\",\\\"addFuel_oil\\\":\\\"INSERT INTO log_fuel_consumtion(id, logistic_car_id, oem_id, mileage_number, liter, oil_location_id, create_date, create_by) VALUES ($1, $2, $3, $4, $5, $6,$7, $8);\\\",\\\"addFuel_oil2\\\":\\\"INSERT INTO log_fuel_consumtion(id, oem_id, liter, create_date, create_by, edit_type, current_amount) VALUES ($1, $2, $3, $4, $5, $6, $7);\\\",\\\"updateExpreesOil\\\":\\\"UPDATE input_express_oil SET update_date=$1, update_by=$2, oil_value=$3 WHERE is_use = true;\\\",\\\"fineImageBbyCarId\\\":\\\"SELECT id, logistic_car_id, image_car, image_car_name, image_car_path, is_use, sort, update_by, update_date, oem_id, company_id FROM logistic_car_image WHERE logistic_car_id = $1;\\\",\\\"clearImageList\\\":\\\"DELETE FROM logistic_car_image WHERE logistic_car_id = $1;\\\",\\\"addListNewImageCar\\\":\\\"INSERT INTO logistic_car_image(  id,logistic_car_id, image_car, image_car_name, image_car_path, is_use, sort, update_by, update_date, oem_id, company_id) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9, $10,$11);\\\",\\\"getBill\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time FROM bill WHERE bill_oem_id = $1 and  is_use = true  and is_delivery != true and is_receive is not true;\\\",\\\"getBillOutLogistic\\\":\\\"SELECT id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date,remark FROM driver WHERE logistic_car_id != $1 and is_use = true;\\\",\\\"SaveLogisticInOut\\\":\\\"INSERT INTO driver(id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16);\\\",\\\"UpdateLogisticInOut\\\":\\\"UPDATE driver SET  oem_car_id=$2, delivery_sort=$3,  update_date=$4, update_by=$5,  logistic_date=$6 WHERE id = $1;\\\",\\\"getLogisticInOut\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.logistic_date,b.bill_no, b.customer_name, b.bill_destination, b.bill_values,a.remark FROM driver a left join bill b on a.bill_id = b.id WHERE a.logistic_car_id = $1 and a.is_use = true AND ( a.logistic_date BETWEEN $2 AND $3 OR a.start_time is not null AND a.finish_time is null AND a.remark is null)   ORDER BY a.create_date\\\",\\\"getLogisticInOut2\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.logistic_date,b.bill_no, b.customer_name, b.bill_destination, b.bill_values,a.remark FROM driver a left join bill b on a.bill_id = b.id WHERE a.logistic_car_id = $1 and a.is_use = true and a.remark is null ORDER BY a.create_date\\\",\\\"getBillById\\\":\\\"SELECT id, bill_no, customer_name, bill_destination, bill_values, weight, is_pack, remark, create_bill, delivery_bill, delivery_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, bill_oem_id, is_delivery, create_time FROM bill WHERE id = $1\\\",\\\"DelLogisToSave\\\":\\\"DELETE FROM driver WHERE logistic_car_id = $1 and start_time is null and finish_time is null;\\\",\\\"getLogisticDetailByID\\\":\\\"SELECT a.id, a.car_name, a.sim_number, a.car_type_id,b.name as car_type, a.box_number, a.plate_number, a.mileage, a.oem_id, a.company_id, a.capacity, a.tax, a.next_tax, a.chassis_number, a.vin_number, a.car_year, a.model_car, a.band_car, a.fuel_efficiency, a.kpi, a.truck_id, a.is_truck, a.image_person, a.image_person_name, a.is_use, a.is_active, a.person_sirname_car, a.person_lastname_car, a.person_tel_car, a.update_by, a.create_date, a.logistic_group_id, a.image_person_path FROM logistic_car a left join car_type b on a.car_type_id = b.id WHERE a.id = $1\\\",\\\"getBillInDriver\\\":\\\"SELECT id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date FROM driver WHERE bill_id = $1 AND logistic_car_id = $2 AND delivery_sort = $3 AND logistic_date BETWEEN $4 AND $5;\\\",\\\"getBillInDriver2\\\":\\\"SELECT id, logistic_car_id, bill_id, oem_car_id, delivery_sort, start_time, finish_time, is_use, is_active, create_date, create_by, update_date, update_by, oem_id, company_id, logistic_date FROM driver WHERE bill_id = $1 AND logistic_car_id = $2 AND remark is null\\\",\\\"DelLogisticInOutById\\\":\\\"DELETE FROM driver WHERE id = $1 AND remark is null;\\\",\\\"CheckbillEnd\\\":\\\"SELECT id, star_type_id, bill_id, star_value, oem_id, company_id, create_date, create_by, update_date, update_by, remark, is_use, is_active FROM star_bill WHERE bill_id = $1;\\\",\\\"filterLogisticInOut\\\":\\\"SELECT id, car_name, sim_number, car_type_id, box_number, plate_number, mileage, oem_id, company_id, capacity, tax, next_tax, chassis_number, vin_number, car_year, model_car, band_car, fuel_efficiency, kpi, truck_id, is_truck, image_person, image_person_name, is_use, is_active, person_sirname_car, person_lastname_car, person_tel_car, update_by, create_date, logistic_group_id, image_person_path FROM logistic_car WHERE ($1::text is null or plate_number LIKE '%' || $1 || '%') AND ($2::uuid is null or oem_id = $2) AND company_id = $3  AND is_use =true ORDER BY plate_number \\\",\\\"filterLogisticInOutReport\\\":\\\"SELECT a.id, a.car_name, a.sim_number, a.car_type_id,b.name as car_type, a.box_number, a.plate_number, a.mileage, a.oem_id, a.company_id, a.capacity, a.tax, a.next_tax, a.chassis_number, a.vin_number, a.car_year, a.model_car, a.band_car, a.fuel_efficiency, a.kpi, a.truck_id, a.is_truck, a.image_person, a.image_person_name, a.is_use, a.is_active, a.person_sirname_car, a.person_lastname_car, a.person_tel_car, a.update_by, a.create_date, a.logistic_group_id, a.image_person_path FROM logistic_car a left join car_type  b on a.car_type_id = b.id  WHERE ($1::text is null or a.plate_number LIKE '%' || $1 || '%') AND ($2::uuid is null or a.oem_id = $2) AND a.company_id = $3 and a.logistic_group_id = '38dc8839-7424-4465-9ca4-36d136231010';\\\",\\\"getLogisticInOutReport\\\":\\\"SELECT a.id, a.logistic_car_id, a.bill_id, a.oem_car_id, a.delivery_sort, a.start_time, a.finish_time, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.oem_id, a.company_id, a.logistic_date,b.bill_no, b.customer_name, b.bill_destination, b.bill_values,a.remark FROM driver a left join bill b on a.bill_id = b.id WHERE a.logistic_car_id = $1 and a.is_use = true and a.logistic_date BETWEEN $2 AND $3\\\",\\\"getDriverBillById\\\":\\\"SELECT id, driver_id, driver_person_id, remark FROM driver_bill WHERE driver_id = $1;\\\",\\\"getPersonDriverDetail\\\":\\\"SELECT a.id, a.driver_id, a.driver_person_id, a.remark,b.driver_name_th,b.nickname FROM driver_bill a left join driver_person b on a.driver_person_id = b.id WHERE a.driver_id = $1;\\\",\\\"getcartype\\\":\\\"SELECT * FROM car_type where is_use = true and id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querylogistic.json?");

/***/ }),

/***/ "./app/query/querymaterialSTC.json":
/*!*****************************************!*\
  !*** ./app/query/querymaterialSTC.json ***!
  \*****************************************/
/*! exports provided: addMaterialSTC, GetMat_stc_M_Y, chackStcadd, getAllMaterialValue, getAllMaterialValue1, addMaterialValueByID, addMaterialValueByID1, updateMaterialValueByID, updateMaterialValueByID1, checkMonthYear, checkSSLdata, updateMatSSM, insertMatSSM, insertYearMonthSSM, updateMatDaily, insertMatDaily, findbill, update_weight_tiger, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"addMaterialSTC\\\":\\\"INSERT INTO \\\\\\\"item_material_date\\\\\\\" (id,month,year,is_use,oem_id,company_id )VALUES ($1,$2,$3,$4,$5,$6);\\\",\\\"GetMat_stc_M_Y\\\":\\\"SELECT id, month, year, is_use, oem_id, company_id FROM item_material_date WHERE company_id = $1 and ($2::integer is null or month =  $2 ) and ($3::integer is null or year = $3 ) order by year DESC, month DESC;\\\",\\\"chackStcadd\\\":\\\"SELECT id, month, year, is_use, oem_id, company_id FROM item_material_date where month = $1 and year = $2 and company_id = $3 and oem_id = $4;\\\",\\\"getAllMaterialValue\\\":\\\"SELECT id, item_material_date_id, oem_id, company_id, stc_cement_powder_1, is_use, is_active, create_date, create_by, update_date, update_by, seq, stc_cement_powder_2, stc_fly_ash, ssm_cement_powder_1, ssm_cement_powder_2, ssm_fly_ash, ssm_retarder, ssm_coarse_sand, ssm_stone, exp_cement, exp_fly_ash, exp_retarder, exp_coarse_sand, exp_stone FROM item_material_value WHERE is_use = true and item_material_date_id = $1 order by seq asc\\\",\\\"getAllMaterialValue1\\\":\\\"SELECT a.id, a.item_material_date_id, a.oem_id, a.company_id, a.stc_cement_powder_1, a.is_use, a.is_active, a.create_date, a.create_by, a.update_date, a.update_by, a.seq, a.stc_cement_powder_2, a.stc_fly_ash, a.ssm_cement_powder_1, a.ssm_cement_powder_2, a.ssm_fly_ash, a.ssm_retarder, a.ssm_coarse_sand, a.ssm_stone, a.exp_cement, a.exp_fly_ash, a.exp_retarder, a.exp_coarse_sand, a.exp_stone, a.in_cement_elephan, a.in_cement_eagle, a.in_flyash_ton, a.in_retarder_ton, a.in_no_number, a.in_flyash_kg, a.in_stone_3_8, a.in_stone_3_4, a.in_coarse_sand, a.in_retarder, a.in_user_update, a.in_remark, a.in_cement, b.username FROM item_material_value as a left join identity_user as b on a.update_by = b.id WHERE a.is_use = true and a.item_material_date_id = $1 order by a.seq asc\\\",\\\"addMaterialValueByID\\\":\\\"INSERT INTO item_material_value(item_material_date_id, oem_id, company_id, stc_cement_powder_1, is_use, is_active, create_date, create_by, update_date, update_by, seq, stc_cement_powder_2, stc_fly_ash, exp_cement, exp_fly_ash, exp_retarder, exp_coarse_sand, exp_stone) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,$16,$17,$18);\\\",\\\"addMaterialValueByID1\\\":\\\"INSERT INTO item_material_value(item_material_date_id, oem_id, company_id, stc_cement_powder_1, is_use, is_active, create_date, create_by, update_date, update_by,seq, stc_cement_powder_2, stc_fly_ash, exp_cement, exp_fly_ash, exp_retarder,exp_coarse_sand, exp_stone,in_no_number, in_flyash_kg, in_stone_3_8,in_stone_3_4,in_coarse_sand,in_retarder,in_remark,in_cement)VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15,$16,$17,$18,$19,$20,$21,$22,$23,$24,$25,$26);\\\",\\\"updateMaterialValueByID\\\":\\\"UPDATE item_material_value SET stc_cement_powder_1 =$1, update_date=$2, update_by=$3, stc_cement_powder_2=$4, stc_fly_ash=$5, exp_cement=$6, exp_fly_ash=$7, exp_retarder=$8, exp_coarse_sand=$9, exp_stone=$10 WHERE id = $11 ;\\\",\\\"updateMaterialValueByID1\\\":\\\"UPDATE item_material_value SET stc_cement_powder_1 =$1, update_date=$2, update_by=$3, stc_cement_powder_2=$4, stc_fly_ash=$5, exp_cement=$6, exp_fly_ash=$7, exp_retarder=$8, exp_coarse_sand=$9,exp_stone=$10,in_no_number=$11, in_flyash_kg=$12, in_stone_3_8=$13,in_stone_3_4=$14,in_coarse_sand=$15,in_retarder=$16,in_remark=$17,in_cement = $18 WHERE id = $19 ;\\\",\\\"checkMonthYear\\\":\\\"SELECT id, is_use, oem_id, company_id, month, year FROM item_material_date WHERE month = $1 and year = $2 and oem_id =$3 and company_id = $4 ;\\\",\\\"checkSSLdata\\\":\\\"SELECT id, item_material_date_id, oem_id, company_id, stc_cement_powder_1, is_use, is_active, create_date, create_by, update_date, update_by, seq, stc_cement_powder_2, stc_fly_ash, ssm_cement_powder_1, ssm_cement_powder_2, ssm_fly_ash, ssm_retarder, ssm_coarse_sand, ssm_stone, exp_cement, exp_fly_ash, exp_retarder, exp_coarse_sand, exp_stone, in_cement_elephan, in_cement_eagle, in_flyash_ton, in_retarder_ton, in_no_number, in_flyash_kg, in_stone_3_8, in_stone_3_4, in_coarse_sand, in_retarder, in_user_update, in_remark FROM item_material_value WHERE item_material_date_id = $1 AND seq = $2;\\\",\\\"updateMatSSM\\\":\\\"UPDATE item_material_value SET oem_id = $1 , company_id=$2,update_date=$3, update_by=$4, seq=$5,  ssm_cement_powder_1=$6, ssm_cement_powder_2=$7, ssm_fly_ash=$8, ssm_retarder=$9, ssm_coarse_sand=$10, ssm_stone=$11  WHERE id = $12;\\\",\\\"insertMatSSM\\\":\\\"INSERT INTO item_material_value( id, item_material_date_id, oem_id, company_id,is_use, is_active, create_date, create_by, update_date, update_by, seq, ssm_cement_powder_1, ssm_cement_powder_2, ssm_fly_ash, ssm_retarder, ssm_coarse_sand, ssm_stone) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17);\\\",\\\"insertYearMonthSSM\\\":\\\"INSERT INTO item_material_date (id, is_use, oem_id, company_id, month, year) VALUES ($1, $2, $3, $4, $5, $6);\\\",\\\"updateMatDaily\\\":\\\"UPDATE item_material_value SET   oem_id=$1, company_id=$2, update_date=$3, update_by=$4,seq =$5, in_cement_elephan=$6, in_cement_eagle=$7, in_flyash_ton=$8, in_retarder_ton=$9 WHERE id=$10;\\\",\\\"insertMatDaily\\\":\\\"INSERT INTO item_material_value(id, item_material_date_id, oem_id, company_id, is_use, is_active, create_date, create_by, update_date, update_by, seq, in_cement_elephan, in_cement_eagle, in_flyash_ton, in_retarder_ton) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15);\\\",\\\"findbill\\\":\\\"SELECT bill_id ,b.bill_no, c.plate_number FROM driver a LEFT JOIN bill b on b.id = a.bill_id LEFT JOIN logistic_car c on c.id = a.logistic_car_id WHERE b.bill_no = $1 and c.plate_number = $2; \\\",\\\"update_weight_tiger\\\":\\\"UPDATE bill SET  weight=$1 ,compressive_strength=$2, weight_meter=$3, weight_meter_updated=$4 WHERE id = $5;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querymaterialSTC.json?");

/***/ }),

/***/ "./app/query/querywareHouseCTS.json":
/*!******************************************!*\
  !*** ./app/query/querywareHouseCTS.json ***!
  \******************************************/
/*! exports provided: filterCheckedByView, filterMaterialByView, filterMaterialByViewhad, filterMaterialByViewhad1, filter_product_fg_project, filter_product_fg_project_hard, no_tuen, filterChuplog, filterChuplog_false, filterlogFgEditCts, filterlogFgEditCts_false, filterlogPackCts, filterlogPackCts_false, filter_log_wip_prod, filter_log_wip_prod_false, getCustomerByproduct_order, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterCheckedByView\\\":\\\"SELECT * FROM history_material_cts where ($1::text is null or \\\\\\\"activity type\\\\\\\" = $1::text) AND ($2::timestamp is null or date Between $2 and $3) ORDER by date desc;\\\",\\\"filterMaterialByView\\\":\\\"SELECT * FROM history_material_cts where oem_id = $1 and company_id = $2 and ($3::text is null or \\\\\\\"material no \\\\\\\"  ILIKE '%' || $3 || '%') and ($4::text is null or \\\\\\\"material name\\\\\\\" ILIKE '%' || $4 || '%') AND ($5::timestamp is null or date Between $5 and $6) ORDER by date desc;\\\",\\\"filterMaterialByViewhad\\\":\\\"SELECT * FROM history_material_cts\\\",\\\"filterMaterialByViewhad1\\\":\\\"select c.column_name from information_schema.tables t left join information_schema.columns c on t.table_schema = c.table_schema and t.table_name = c.table_name where table_type = VIEW and t.table_name = $1 and t.table_schema not in ('information_schema', 'pg_catalog')\\\",\\\"filter_product_fg_project\\\":\\\"SELECT * FROM product_fg where oem_id = $1 and company_id = $2 and ($3::text is null or no ILIKE '%' || $3 || '%') and ($4::text is null or name ILIKE '%' || $4 || '%') AND ($5::timestamp is null or date Between $5 and $6) ORDER by date desc;\\\",\\\"filter_product_fg_project_hard\\\":\\\"SELECT * FROM product_fg\\\",\\\"no_tuen\\\":\\\"SELECT a.id, a.material_id, a.user_id, a.edit_type, a.amount, a.create_date, a.current_amount, a.qc_check, a.check_date, a.qc_approve_person, a.coil_no, a.invoice_no, a.warehouse_id, a.tag_weight,a.grade, a.supplier_id, a.tracking_no,b.no as material_no, b.name as material_name,b.minimum_lot, c.full_name as name_supplier, o.name FROM log_material_cts_edit_amount a LEFT JOIN material b on a.material_id = b.id LEFT JOIN material_supplier c on a.supplier_id = c.id LEFT JOIN oem o on b.oem_id = o.id;\\\",\\\"filterChuplog\\\":\\\"SELECT a.id,a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.\\\\\\\"N/W (g.)\\\\\\\" as nw,b.oem_id as produc_oem_id,b.wip_amount as produc_wip_amount,c.code as plant_code,c.name as plant_name,c.telnumber as plant_telnumber,a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.lot_no, a.estimate_date, a.actual_date, a.po_no, a.production_order_cts_id,d.username FROM log_wip_chup_edit_amount_cts as a left join product as b on a.product_id = b.id left join plating_plant as c on a.plating_plant_id = c.id left join identity_user as d on a.create_by = d.id WHERE b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.create_date Between $4 and $5) and (edit_type = $6 or $6::bool is null) ORDER by a.create_date desc;\\\",\\\"filterChuplog_false\\\":\\\"SELECT a.id,a.edit_type, a.tracking_tag_wip_chup, a.plating_plant_id, a.weight_amount, a.picecs_amount, a.loss_amount, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.\\\\\\\"N/W (g.)\\\\\\\" as nw,b.oem_id as produc_oem_id,b.wip_amount as produc_wip_amount,c.code as plant_code,c.name as plant_name,c.telnumber as plant_telnumber,a.unit_convert, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.lot_no, a.estimate_date, a.actual_date, a.po_no, a.production_order_cts_id,d.username FROM log_wip_chup_edit_amount_cts as a left join product as b on a.product_id = b.id left join plating_plant as c on a.plating_plant_id = c.id left join identity_user as d on a.create_by = d.id WHERE b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.create_date Between $4 and $5) and (edit_type = false) ORDER by a.create_date desc;\\\",\\\"filterlogFgEditCts\\\":\\\"SELECT a.id, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.oem_id as produc_oem_id,c.name as oem_name,b.wip_amount as produc_wip_amount, a.edit_type, a.amount, a.project_id,d.project_name,d.contact_name as project_contact_name,d.contect_tel as project_contect_tel ,a.tracking_no, a.customer_id,f.name as not_customer_name, a.lot_no, a.production_order_cts_id,e.no as order_no, a.pack_amount, a.exp_date, a.remark, a.update_date, a.update_by,a.create_date,a.create_by,g.name as frist_name_user, g.username FROM log_product_fg_edit_amount_cts as a left join product as b on a.product_id = b.id left join oem as c on b.oem_id = c.id left join project as d on a.project_id = d.id left join production_order_cts as e on a.production_order_cts_id = e.id left join customer as f on a.customer_id = f.id left join identity_user as g on a.create_by = g.id where b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%')and ($4::timestamp is null or a.create_date Between $4 and $5) and (a.edit_type = $6 or $6::bool is null) ORDER by a.create_date desc;\\\",\\\"filterlogFgEditCts_false\\\":\\\"SELECT a.id, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.oem_id as produc_oem_id,c.name as oem_name,b.wip_amount as produc_wip_amount, a.edit_type, a.amount, a.project_id,d.project_name,d.contact_name as project_contact_name,d.contect_tel as project_contect_tel ,a.tracking_no, a.customer_id,f.name as not_customer_name, a.lot_no, a.production_order_cts_id,e.no as order_no, a.pack_amount, a.exp_date, a.remark, a.update_date, a.update_by,a.create_date,a.create_by,g.name as frist_name_user, g.username FROM log_product_fg_edit_amount_cts as a left join product as b on a.product_id = b.id left join oem as c on b.oem_id = c.id left join project as d on a.project_id = d.id left join production_order_cts as e on a.production_order_cts_id = e.id left join customer as f on a.customer_id = f.id left join identity_user as g on a.create_by = g.id where b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%')and ($4::timestamp is null or a.create_date Between $4 and $5) and (a.edit_type = false) ORDER by a.create_date desc;\\\",\\\"filterlogPackCts\\\":\\\"SELECT a.id, a.edit_type, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id,c.plating_plant_id ,c.po_no as chup_po_no,d.code as plant_code, d.name as plant_name, d.telnumber,a.tracking_tag_wip_chup, a.pack_no, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.oem_id as produc_oem_id,b.wip_amount as produc_wip_amount,b.\\\\\\\"N/W (g.)\\\\\\\" as nw, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount, a.pack_lot_no,f.username FROM log_pack_edit_amount_cts as a left join product as b on a.product_id = b.id left join log_wip_chup_edit_amount_cts as c on a.log_wip_chup_edit_amount_cts_id = c.id left join plating_plant as d on c.plating_plant_id = d.id left join identity_user as f on a.create_by = f.id WHERE b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.create_date Between $4 and $5) and (a.edit_type = $6 or $6::bool is null) ORDER by a.create_date desc;\\\",\\\"filterlogPackCts_false\\\":\\\"SELECT a.id, a.edit_type, a.unit_amount, a.is_use, a.create_date, a.create_by, a.update_date, a.update_by, a.log_wip_chup_edit_amount_cts_id,c.plating_plant_id ,c.po_no as chup_po_no,d.code as plant_code, d.name as plant_name, d.telnumber,a.tracking_tag_wip_chup, a.pack_no, a.product_id,b.no as product_no,b.name as product_name,b.qty_unit as product_qty_unit,b.oem_id as produc_oem_id,b.wip_amount as produc_wip_amount,b.\\\\\\\"N/W (g.)\\\\\\\" as nw, a.tracking_tag_pack_chup, a.wip_chup_lot_no, a.pack_loss, a.weight_amount, a.piece_amount, a.pack_lot_no,f.username FROM log_pack_edit_amount_cts as a left join product as b on a.product_id = b.id left join log_wip_chup_edit_amount_cts as c on a.log_wip_chup_edit_amount_cts_id = c.id left join plating_plant as d on c.plating_plant_id = d.id left join identity_user as f on a.create_by = f.id WHERE b.oem_id = $1 and ($2::text is null or b.no  ILIKE '%' || $2 || '%')and ($3::text is null or b.name ILIKE '%' || $3 || '%') and ($4::timestamp is null or a.create_date Between $4 and $5) and (a.edit_type = false) ORDER by a.create_date desc;\\\",\\\"filter_log_wip_prod\\\":\\\"SELECT a.id, a.product_order_cts_id, a.tracking_no, edit_type, a.is_use, a.create_date, a.create_by, a.lot_no, a.amount, box_no, a.product_id, box_date, loss, ref_box_no, b.no,b.customer_id,c.no as product_no, c.name as product_name,c.\\\\\\\"N/W (g.)\\\\\\\"as nw,c.oem_id, cm.full_name,o.name as name_oem ,u.username as usename FROM log_wip_prod_edit_amount_cts a LEFT JOIN production_order_cts b on b.id = a.product_order_cts_id LEFT JOIN product c on c.id = a.product_id LEFT JOIN customer cm on cm.id = b.customer_id LEFT JOIN oem o on o.id = c.oem_id LEFT JOIN identity_user u on u.id = a.create_by WHERE c.oem_id = $1  and ($2::text is null or c.no  ILIKE '%' || $2 || '%') and ($3::text is null or c.name ILIKE '%' || $3 || '%') and (edit_type = $6 or $6::bool is null) AND ($4::timestamp is null or a.create_date Between $4 and $5) ORDER by a.create_date desc ;\\\",\\\"filter_log_wip_prod_false\\\":\\\"SELECT a.id, a.product_order_cts_id, a.tracking_no, edit_type, a.is_use, a.create_date, a.create_by, a.lot_no, a.amount, box_no, a.product_id, box_date, loss, ref_box_no, b.no,b.customer_id,c.no as product_no, c.name as product_name,c.\\\\\\\"N/W (g.)\\\\\\\"as nw,c.oem_id, cm.full_name,o.name as name_oem ,u.username as usename FROM log_wip_prod_edit_amount_cts a LEFT JOIN production_order_cts b on b.id = a.product_order_cts_id LEFT JOIN product c on c.id = a.product_id LEFT JOIN customer cm on cm.id = b.customer_id LEFT JOIN oem o on o.id = c.oem_id LEFT JOIN identity_user u on u.id = a.create_by WHERE c.oem_id = $1  and ($2::text is null or c.no  ILIKE '%' || $2 || '%') and ($3::text is null or c.name ILIKE '%' || $3 || '%') and (edit_type = false) AND ($4::timestamp is null or a.create_date Between $4 and $5) ORDER by a.create_date desc ;\\\",\\\"getCustomerByproduct_order\\\":\\\"SELECT a.id, a.customer_id, b.name as customer_name FROM production_order_cts as a left join customer as b on a.customer_id = b.id where a.id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querywareHouseCTS.json?");

/***/ }),

/***/ "./app/query/querywinSpeed.json":
/*!**************************************!*\
  !*** ./app/query/querywinSpeed.json ***!
  \**************************************/
/*! exports provided: filterPO, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filterPO\\\":\\\"select * from PO_BILL WHERE PO_ID  LIKE '% $1 %' ORDER BY PO_ID DESC\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querywinSpeed.json?");

/***/ }),

/***/ "./app/query/querywire_ready_toUse.json":
/*!**********************************************!*\
  !*** ./app/query/querywire_ready_toUse.json ***!
  \**********************************************/
/*! exports provided: filter, addwires, chekUpdatereWire, chekUpdatereWire_add, UpdatereWire, filbyIDWire, delwire, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"filter\\\":\\\"SELECT id, diameter, company_id, user_id, oem_id, amount, weight, create_date, diameter_no FROM wire_finished where ($1::text is null or diameter_no LIKE '%' || $1 || '%') and ($2::text is null or diameter LIKE '%' || $2 || '%') and company_id = $3 and oem_id = $4 and is_use = true ORDER BY amount desc;\\\",\\\"addwires\\\":\\\"INSERT INTO wire_finished(id, diameter, company_id, user_id, oem_id, amount, weight, create_date, diameter_no ,is_use) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9,$10);\\\",\\\"chekUpdatereWire\\\":\\\"SELECT diameter,diameter_no FROM wire_finished WHERE id != $1 and (diameter_no=$2 or diameter =$3) and oem_id = $4 and is_use = true;\\\",\\\"chekUpdatereWire_add\\\":\\\"SELECT diameter,diameter_no FROM wire_finished WHERE (diameter_no=$1 or diameter =$2) and oem_id = $3 and is_use = true;\\\",\\\"UpdatereWire\\\":\\\"UPDATE wire_finished SET diameter=$2, user_id=$3, amount=$4, weight=$5, diameter_no=$6 WHERE id = $1;\\\",\\\"filbyIDWire\\\":\\\"SELECT id, diameter, company_id, user_id, oem_id, amount, weight, create_date, diameter_no , is_use FROM wire_finished where id = $1 and is_use = true;\\\",\\\"delwire\\\":\\\"UPDATE wire_finished SET is_use= false WHERE id = $1;\\\"}\");\n\n//# sourceURL=webpack:///./app/query/querywire_ready_toUse.json?");

/***/ }),

/***/ "./app/routes/DefluxWipInOut.js":
/*!**************************************!*\
  !*** ./app/routes/DefluxWipInOut.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst DefluxWipInOutService = __webpack_require__(/*! ../service/DefluxWipInOutService */ \"./app/service/DefluxWipInOutService.js\");\r\nconst _DefluxWipInOutService = new DefluxWipInOutService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.filterWireFinish(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getAllLotMat', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.getAllLotMat(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/amountInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.updateWIPAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/gethistory', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.getHistory(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getHistoryWIP', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.getHistoryWIP(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/genLotNo_WIP', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.genLotNo_WIP(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n\r\nrouter.get('/getTrackLot', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _DefluxWipInOutService.getTrackLot(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/DefluxWipInOut.js?");

/***/ }),

/***/ "./app/routes/FGInOutCTS.js":
/*!**********************************!*\
  !*** ./app/routes/FGInOutCTS.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst FGInOutCTSService = __webpack_require__(/*! ../service/FGInOutCTSService */ \"./app/service/FGInOutCTSService.js\");\r\nconst _FGInOutCTSService = new FGInOutCTSService();\r\n// const _QueryWipshupOutInCTS = require('../query/queryWipshupOutInCTS.json');\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a resource material\");\r\n});\r\n\r\nrouter.post(\"/filter_product\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .filterProduct(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/get_Product_Model\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .getProductModel(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/filter_Lot_FG\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .filterLotFG()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/get_History_FG\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .getHistoryFG(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/get_Lot_FG\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .getLotFG(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/get_Lot_No\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .getLotNo(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/save_In_Out_FG\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .saveInOutFG(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/get_Product\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .getProduct(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.post(\"/filter_project\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _FGInOutCTSService\r\n    .filterProject(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/FGInOutCTS.js?");

/***/ }),

/***/ "./app/routes/FG_STP_InOut.js":
/*!************************************!*\
  !*** ./app/routes/FG_STP_InOut.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst FG_STP_InOutService = __webpack_require__(/*! ../service/FG_STP_InOutService */ \"./app/service/FG_STP_InOutService.js\");\r\nconst _FG_STP_InOutService = new FG_STP_InOutService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.post('/filterProduct', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.filterProduct(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getAllLotWIP', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.getAllLotWIP(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n router.post('/amountFGInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.updateFGAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountFGInOut_NoFIFO', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.updateProductFGAmountInOut_NOFIFO(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getlog_detailFG', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.getHistory(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getHistoryFG', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.getHistoryFG(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/genLotNo_FG', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.genLotNo_FG(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n\r\nrouter.get('/getTrackLot', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.getTrackLot(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n \r\nrouter.post('/summaryReport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _FG_STP_InOutService.filterSummaryReport(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/FG_STP_InOut.js?");

/***/ }),

/***/ "./app/routes/MatInOutSTP.js":
/*!***********************************!*\
  !*** ./app/routes/MatInOutSTP.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst MatInOutSTP_Service = __webpack_require__(/*! ../service/MatInOutSTP_Service */ \"./app/service/MatInOutSTP_Service.js\");\r\nconst _MatInOutSTP_Service = new MatInOutSTP_Service();\r\nconst _QueryMaterial = __webpack_require__(/*! ../query/queryMaterial.json */ \"./app/query/queryMaterial.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _MatInOutSTP_Service.filterMaterial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/amountInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _MatInOutSTP_Service.updateMaterialAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/gethistory', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _MatInOutSTP_Service.getHistory(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getHistoryMAT', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _MatInOutSTP_Service.getHistoryMAT(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/genLotNo_material', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _MatInOutSTP_Service.genLotNo_material(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/MatInOutSTP.js?");

/***/ }),

/***/ "./app/routes/academy.js":
/*!*******************************!*\
  !*** ./app/routes/academy.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst academyService = __webpack_require__(/*! ../service/academyService */ \"./app/service/academyService.js\");\r\nconst _academyService = new academyService();\r\n\r\n\r\nrouter.get('/category', async (req, res, next) => {\r\n    try {\r\n        _academyService.category().then(_res => {\r\n          \r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        })\r\n     //   res.status(200).json({test:\"11\"});\r\n    } catch (e) {\r\n        console.log(e)\r\n        next(e);\r\n    }\r\n    \r\n    \r\n});\r\n\r\n\r\nrouter.post('/categoryFilter', async (req, res, next) => {\r\n    try {\r\n        _academyService.categoryFilter(req.body).then(_res => {\r\n          \r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        })\r\n     //   res.status(200).json({test:\"11\"});\r\n    } catch (e) {\r\n        console.log(e)\r\n        next(e);\r\n    }\r\n    \r\n    \r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/academy.js?");

/***/ }),

/***/ "./app/routes/auth.js":
/*!****************************!*\
  !*** ./app/routes/auth.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nvar userService = __webpack_require__(/*! ../service/userService */ \"./app/service/userService.js\");\r\nvar _userService = new userService();\r\nconst _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\");\r\nvar _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\r\nvar companyService = __webpack_require__(/*! ../service/companyService */ \"./app/service/companyService.js\");\r\nvar _companyService = new companyService();\r\n\r\nconst jwt = __webpack_require__(/*! jwt-simple */ \"jwt-simple\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar JwtSetting = __webpack_require__(/*! ../jwtSetting */ \"./app/jwtSetting.js\");\r\nconst passport = __webpack_require__(/*! passport */ \"passport\");\r\npassport.use(JwtSetting.jwtAuth);\r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nconst permissionService = __webpack_require__(/*! ../service/permissionService */ \"./app/service/permissionService.js\");\r\nconst TokenEncode = (payload) => {\r\n    return jwt.encode(payload, JwtSetting.SECRET);\r\n};\r\nconst TokenDecode = (token) => {\r\n    return jwt.decode(token, JwtSetting.SECRET);\r\n}\r\nconst getUserIDByToken = (token) => {\r\n    let payload = TokenDecode(token);\r\n    if (payload.fup && payload.sys == \"c\") {\r\n        return payload.fup;\r\n    }\r\n    return null;\r\n}\r\nconst getAdminIDByToken = (token) => {\r\n    let payload = TokenDecode(token);\r\n    if (payload.fup && payload.sys == \"s\") {\r\n        return payload.fup;\r\n    }\r\n    return null;\r\n}\r\nconst getCompanyIdByToken = (token) => {\r\n    let payload = TokenDecode(token);\r\n    if (payload.com && payload.sys == \"c\") {\r\n        return payload.com;\r\n    }\r\n    return null;\r\n} \r\nconst getPayload = (token) => {\r\n    return TokenDecode(token);\r\n}\r\nconst requireJWTAuth = passport.authenticate(\"jwt\", {\r\n    session: false\r\n});\r\n\r\nrouter.post('/login', async (req, res, next) => {\r\n    if (req.body.user && req.body.password) {\r\n        _baseService.baseQueryWithParameter(_QueryLogin.checkUserPassword, [req.body.user]).then(_res => {\r\n            if (_res.rows.length > 0) {\r\n                if (req.body.password == cryptoOption.decrypt(_res.rows[0].password)) {\r\n                    _companyService.findByIdCompany(_res.rows[0].company_id).then(_res2 => {\r\n                    \r\n                   console.log(cryptoOption.decrypt(_res.rows[0].password));\r\n                        \r\n                        var iat = moment(_res2.now);\r\n                        var exp = moment(new Date()).add(7, 'days'); // exp:moment(new Date()).add(7,'days').unix()//days,hours,minutes\r\n                        var expire_date = _res2.expire_date;\r\n                        var exp2 = moment(moment(expire_date).unix() - iat.unix());\r\n                       // console.log(\"now: \",moment(iat).format('DD-MM-yyyy ::: HH:mm:ss'))\r\n                       // console.log(\"exp: \",moment(expire_date).format('DD-MM-yyyy ::: HH:mm:ss'))\r\n                        //console.log(moment(exp2 * 1000).format('HH'))\r\n                        var total_day = (Math.round((expire_date - iat) / (1000 * 60 * 60 * 24)));\r\n                        var total_hours = (Math.round((expire_date - iat) / (1000 * 60 * 60 )));\r\n                        var total_minute = (Math.round((expire_date - iat) / (1000 * 60 )));\r\n                        var balance_day = exp2 / 3600 / 24;\r\n                   \r\n                        let unix_timestamp = moment(expire_date).unix() - iat.unix();\r\n                        // Create a new JavaScript Date object based on the timestamp\r\n                        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n                        var date = new Date((unix_timestamp * 1000));\r\n                        // Hours part from the timestamp\r\n                        var hours = date.getHours();\r\n                        // Minutes part from the timestamp\r\n                        var minutes = \"0\" + date.getMinutes();\r\n                        // Seconds part from the timestamp\r\n                        var seconds = \"0\" + date.getSeconds();\r\n                        \r\n                        // Will display time in 10:30:23 format\r\n                        var formattedTime = total_day+\" วัน \"+hours + ' ชั่วโมง ' + minutes.substr(-2) + ' นาที' /* + seconds.substr(-2) */;\r\n                        \r\n                        console.log(\"คงเหลือ : \" +formattedTime +  \" \" + seconds.substr(-2) + \" วินาที\");\r\n                    \r\n                        //console.log(\"day: \",total_day,\"\\nhour: \",total_hours, \"\\nminute: \",total_minute)\r\n                       \r\n                        if(exp2 > 0){\r\n                           // console.log(\"ยังไม่หมดอายุการใช้งาน\", balance_day)\r\n                             //console.log(\"มีอายุการใช้งาน\" , \"อีกจำนวน \",moment(exp2).format('HH')+ \" ชม. \" + moment(exp2).format('mm')+\" นาที\")\r\n                            \r\n                             //อายุการใช้งานต่ำกว่า 30 วัน\r\n                             if(balance_day <= 30 && balance_day > 29){\r\n                                console.log(\"อายุการใช้งานใกล้จะหมด 30  =>\", balance_day)\r\n                            }\r\n                            //อายุการใช้งานต่ำกว่า 7 วัน\r\n                            if(balance_day <= 7){\r\n                                console.log(\"อายุการใช้งานใกล้จะหมด < 7  =>\", balance_day)\r\n                            }\r\n                           /*   if(balance_day <= 24){\r\n                                 console.log(\"อายุการใช้งานคงเหลือน่อยกว่า 1 วัน\", balance_day)\r\n                             } */\r\n                        }else{\r\n                             \r\n                             console.log(\"หมดอายุการใช้งาน\", exp2)\r\n                        }\r\n                        const payload = {\r\n                            sub: req.body.user,\r\n                            fup: _res.rows[0].id,\r\n                            com: _res.rows[0].company_id,\r\n                            sys: \"c\",\r\n                            iat: iat.unix(),\r\n                            exp: exp.unix(), \r\n                            exp_date: moment(expire_date).format('วันที่ DD-MM-yyyy เวลา HH:mm:ss'), \r\n                            balance_time:balance_day,\r\n                            balance_day:formattedTime,\r\n                            inform:_res2.config.inform,\r\n                            status_inform:_res2.config.status_inform,\r\n                         \r\n                        };\r\n                    \r\n    \r\n                        var token = TokenEncode(payload);\r\n                        _userService.updateUserToken(token, iat, exp, req.body.user).then(__res => {\r\n                            res.status(200).json({\r\n                                message: 'login sucess',\r\n                                iat: iat,\r\n                                exp: exp,\r\n                                token: token,\r\n                           \r\n                            })\r\n                           \r\n                        }).catch(e => {\r\n                            res.status(500).send({\r\n                                message: 'login fail : Try again'\r\n                            })\r\n                        })\r\n\r\n                \r\n                    })\r\n                   \r\n                }\r\n                else{\r\n                    res.status(200).json({\r\n                        message: 'login fail : Wrong username or password',\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                res.status(200).json({\r\n                    message: 'login fail : Wrong username or password',\r\n                })\r\n            }\r\n\r\n        }).catch(_error => {\r\n            res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        })\r\n    } else {\r\n        res.status(200).send({\r\n            message: 'login fail : Wrong username or password'\r\n        })\r\n    }\r\n});\r\n\r\nrouter.post('/login/admin', async (req, res, next) => {\r\n    if (req.body.user && req.body.password) {\r\n        _baseService.baseQueryWithParameter(_QueryLogin.checkAdminPassword, [req.body.user, req.body.password]).then(_res => {\r\n            if (_res.rows.length > 0) {\r\n                var iat = moment(new Date());\r\n                var exp = moment(new Date()).add(7, 'days'); // exp:moment(new Date()).add(7,'days').unix()//days,hours,minutes\r\n                const payload = {\r\n                    sub: req.body.user,\r\n                    fup: _res.rows[0].id,\r\n                    sys: \"s\",\r\n                    iat: iat.unix(),\r\n                    exp: exp.unix()\r\n                };\r\n                var token = TokenEncode(payload);\r\n                _userService.updateAdminToken(token, iat, exp, req.body.user).then(__res => {\r\n                    res.status(200).json({\r\n                        message: 'login sucess',\r\n                        iat: iat,\r\n                        exp: exp,\r\n                        token: token\r\n                    })\r\n                }).catch(e => {\r\n                    res.status(500).send({\r\n                        message: 'login fail : Try again'\r\n                    })\r\n                })\r\n\r\n            } else {\r\n                res.status(200).json({\r\n                    message: 'login fail : Wrong username or password',\r\n                })\r\n            }\r\n\r\n        }).catch(_error => {\r\n            res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        })\r\n    } else {\r\n        res.status(200).send({\r\n            message: 'login fail : Wrong username or password'\r\n        })\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/test', requireJWTAuth, (req, res) => {\r\n    res.status(200).json({\r\n        message: \"You Are Authorize\"\r\n    })\r\n})\r\n\r\nmodule.exports = {\r\n    router: router,\r\n    requireJWTAuth: requireJWTAuth,\r\n    getUserIDByToken: getUserIDByToken,\r\n    getAdminIDByToken: getAdminIDByToken,\r\n    getPayload: getPayload,\r\n    getCompanyIdByToken:getCompanyIdByToken\r\n};\n\n//# sourceURL=webpack:///./app/routes/auth.js?");

/***/ }),

/***/ "./app/routes/bill.js":
/*!****************************!*\
  !*** ./app/routes/bill.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst billService = __webpack_require__(/*! ../service/billService */ \"./app/service/billService.js\");\r\nconst _billService = new billService();\r\nconst _QueryBill = __webpack_require__(/*! ../query/queryBill.json */ \"./app/query/queryBill.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.filterBill(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.addBill(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.findById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.updateBill(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.delBill(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/findByIdBil', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _billService.findByIdBil(req.query.bilid).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/bill.js?");

/***/ }),

/***/ "./app/routes/company.js":
/*!*******************************!*\
  !*** ./app/routes/company.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nvar authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _service = new baseService();\r\nvar _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\r\nvar companyService = __webpack_require__(/*! ../service/companyService */ \"./app/service/companyService.js\");\r\nvar _companyService = new companyService();\r\nvar logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _getCompanyIdByToken = authRouter.getCompanyIdByToken;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource company');\r\n});\r\n\r\nrouter.get('/all', function (req, res, next) {\r\n    _service.baseQuery(_QueryCompany.getAll).then(_res => {\r\n        if (_res.rows.length > 0) {\r\n            let temp = _res.rows;\r\n            var para = _res.rows.map(m => m.id)\r\n            _service.baseQueryWithParameter(_QueryCompany.getAllOEM, [para]).then(__res => {\r\n                if (__res.rows.length > 0) {\r\n                    temp = temp.map(m => {\r\n                        m.oem = __res.rows.filter(f => f.company_id == m.id);\r\n                        return m;\r\n                    })\r\n                }\r\n                return res.status(200).json(temp)\r\n            }).catch(e => {\r\n                return res.status(400).send({\r\n                    message: e.message\r\n                })\r\n            })\r\n\r\n        } else {\r\n            return res.status(200).json({})\r\n        }\r\n\r\n    }).catch(e => {\r\n        return res.status(400).send({\r\n            message: e.message\r\n        })\r\n    })\r\n});\r\n\r\nrouter.get('/findOEMByCompanyId', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _service.baseQueryWithParameter(_QueryCompany.getOEMbyCompanyId,[req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _companyService.addNewCompany(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.UpdateNewCompany(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/setup', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.SetupCompany(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\nrouter.get('/findSetupById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.findSetupById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    var myCompanyId = _getCompanyIdByToken(token)\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id && myCompanyId != req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.findByIdCompany(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.delCompanyById(req.query.id,admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getMasterCompany', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _service.baseQuery(_QueryCompany.getMasterCompany).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/addUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _companyService.addUser(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\nrouter.post('/updateUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.updateUser(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/findUserById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    \r\n    if (!admin_id &&req.query.id!=user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.findUserById(req.query.id,admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\nrouter.get('/delUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(404).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _companyService.delUser(req.query.id,admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getAllUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _companyService.getAllUser().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/filterUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _companyService.filterUser(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/checkNameCompany', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.name) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _service.baseQueryWithParameter(_QueryCompany.checkNameCompany, [req.query.name]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).send({\r\n            message: (_res.rows.length > 0) ? true : false\r\n        })\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/checkUserName', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.name) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _service.baseQueryWithParameter(_QueryCompany.checkUsername, [req.query.name]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).send((_res.rows.length > 0) ? true : false)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\nrouter.get('/checkEmail', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.name) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _service.baseQueryWithParameter(_QueryCompany.checkEmail, [req.query.name]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).send((_res.rows.length > 0) ? true : false)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getCapacityFactory', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _service.baseQueryWithParameter(_QueryCompany.getCapacityFactory, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        var factory_capacity= ((_res.rows.length > 0) ? _res.rows[0].factory_capacity : 0)||0;\r\n        return res.send(\"\"+factory_capacity)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\nrouter.get('/viewOemByUserId', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _companyService.getviewOemByUserId(user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\n\r\nrouter.get('/findOEMByCompanyIdAndUser', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n        _companyService.findOEMByCompanyIdAndUser(req.query.user,user_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/company.js?");

/***/ }),

/***/ "./app/routes/customer.js":
/*!********************************!*\
  !*** ./app/routes/customer.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst customerService = __webpack_require__(/*! ../service/customerService */ \"./app/service/customerService.js\");\r\nconst _customerService = new customerService();\r\n//const _QueryCustomer = require('../query/queryCustomer.json');\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource customer');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _customerService.addCustomer(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/get_relate_product', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _customerService.getRelateProduct(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _customerService.updateCustomer(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _customerService.delCustomer(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _customerService.findByIdCustomer(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n router.get('/GetMenu', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _customerService.GetMenu().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n router.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _customerService.filterCustomer(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n\r\n\r\nrouter.post('/filterOEM', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _customerService.filterCustomerOEM(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/customer.js?");

/***/ }),

/***/ "./app/routes/dashboard.js":
/*!*********************************!*\
  !*** ./app/routes/dashboard.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst dashboardService = __webpack_require__(/*! ../service/dashboardService */ \"./app/service/dashboardService.js\");\r\nconst _dashboardService = new dashboardService();\r\nconst _Querydashboard = __webpack_require__(/*! ../query/querydashboard.json */ \"./app/query/querydashboard.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/GetData_forDasboard', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _dashboardService.GetData_forDasboard(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/dashboard.js?");

/***/ }),

/***/ "./app/routes/data.js":
/*!****************************!*\
  !*** ./app/routes/data.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar dataService = __webpack_require__(/*! ../service/dataDetailService */ \"./app/service/dataDetailService.js\");\r\nvar authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _service = new dataService();\r\n\r\nvar _auth = authRouter.requireJWTAuth;\r\nrouter.get('/', function(req, res, next) {\r\n    res.send('respond with a resource data');\r\n  });\r\n\r\nrouter.post('/add',_auth,async(req,res,next)=>{\r\n//   var _res=  await _service.addData(req.body);\r\n//   res.status(200).json(_res)\r\n    _service.addData(req.body).then(_res=>{\r\n        res.status(200).json(_res)\r\n    }).catch(_error=>{\r\n        res.status(400).send({ message: _error.message })\r\n    })\r\n \r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/data.js?");

/***/ }),

/***/ "./app/routes/delivery_time_record.js":
/*!********************************************!*\
  !*** ./app/routes/delivery_time_record.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst delivery_time_recordService = __webpack_require__(/*! ../service/delivery_time_recordService */ \"./app/service/delivery_time_recordService.js\");\r\nconst _delivery_time_recordService = new delivery_time_recordService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _delivery_time_recordService.filter(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/delivery_time_record.js?");

/***/ }),

/***/ "./app/routes/driver.js":
/*!******************************!*\
  !*** ./app/routes/driver.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst driverService = __webpack_require__(/*! ../service/driverService */ \"./app/service/driverService.js\");\r\nconst _driverService = new driverService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.filter(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/getDriver_person', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.getDriver_person(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/saveDriver_person', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.saveDriver_person(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getStarType', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.getStarType(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/saveStar', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.saveStar(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n//เวลาออกจากบริษัท\r\nrouter.post('/saveTime_Out', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.saveTime_Out(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n//เวลาเข้าบริษัท\r\nrouter.post('/saveTime_In', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.saveTime_In(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/cancleBillDriver', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.cancleBillDriver(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter_bill', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.filter_bill(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/save_remarkbill', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _driverService.save_remarkbill(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/driver.js?");

/***/ }),

/***/ "./app/routes/end_user.js":
/*!********************************!*\
  !*** ./app/routes/end_user.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst end_userService = __webpack_require__(/*! ../service/end_userService */ \"./app/service/end_userService.js\");\r\nconst _end_userService = new end_userService();\r\n/* const _QueryEnd_user = require('../query/queryEnd_user.json'); */\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _end_userService.addEnd_user(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _end_userService.updateEnd_user(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _end_userService.delEnd_user(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _end_userService.findByIdEnd_user(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n/* router.get('/GetMenu', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _projectService.GetMenu().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n */\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _end_userService.filterEnd_user(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/getBill_end_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _end_userService.getBill_end_user(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/end_user.js?");

/***/ }),

/***/ "./app/routes/express.js":
/*!*******************************!*\
  !*** ./app/routes/express.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst expressService = __webpack_require__(/*! ../service/expressService */ \"./app/service/expressService.js\");\r\nconst _expressService = new expressService();\r\n/* const _QueryEnd_user = require('../query/queryEnd_user.json'); */\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\n\r\n  //sales\r\nrouter.post('/add_sales', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.add_sales(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n//oil\r\nrouter.post('/add_oil', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.add_oil(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n//montiy\r\n\r\nrouter.post('/add_montiy', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.add_montiy(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filtersales', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.filterSales(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filteroil', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.filterOil(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filtermontiy', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.filterMontiy(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/editSales', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.editSales(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/editoils', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.editoils(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/editmontiy', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _expressService.editmontiy(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/express.js?");

/***/ }),

/***/ "./app/routes/externalData.js":
/*!************************************!*\
  !*** ./app/routes/externalData.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst externalDataService = __webpack_require__(/*! ../service/externalDataService */ \"./app/service/externalDataService.js\");\r\nconst _externalDataService = new externalDataService();\r\nqueryexternalData = __webpack_require__(/*! ../query/queryexternalData.json */ \"./app/query/queryexternalData.json\");\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\nrouter.post('/externaldata', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _externalDataService.externaldata(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getexterDate', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _externalDataService.getexterDate(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/importExcel_Driver_detail', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    // console.log(mimeTypeExcel);\r\n    // console.log(req.body.file_name);\r\n    // console.log(\"template\",req.body.template);\r\n    try {\r\n        console.log(\"เช็คตัวไฟล์\", req.body.file_name);\r\n\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n        //    if (req.body.file_name === req.body.template){\r\n        //         console.log(\"รูปแบบถูกต้อง\");\r\n        //    }\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {   \r\n                // console.log(workbook.Sheets[ws]);     \r\n                workbook.Sheets[ws]['A1'].w = \"no\";\r\n                workbook.Sheets[ws]['B1'].w = \"id_person\";\r\n                workbook.Sheets[ws]['C1'].w = \"driver_name_th\";\r\n                workbook.Sheets[ws]['D1'].w = \"driver_name_eg\";\r\n                workbook.Sheets[ws]['E1'].w = \"car_name\";\r\n                workbook.Sheets[ws]['F1'].w = \"person_code\";\r\n                workbook.Sheets[ws]['G1'].w = \"card_name\";\r\n                workbook.Sheets[ws]['H1'].w = \"citizen_id\";\r\n                workbook.Sheets[ws]['I1'].w = \"driver_tel\";\r\n                workbook.Sheets[ws]['J1'].w = \"exp_driving_licence\";\r\n                workbook.Sheets[ws]['K1'].w = \"nickname\";\r\n                workbook.Sheets[ws]['L1'].w = \"oem_name_text\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n                // console.log(\"shhhh\",tempJson);\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n           \r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            _externalDataService.importExcel_Driver_detail(JsonList, user_id, req.body.oem_id,req.body.file_name,req.body.company_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n//  -----------------------------------------------------------------------------------------//\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------//\r\nrouter.post('/importExcel_Logistic_cars_detail', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    // console.log(mimeTypeExcel);\r\n    // console.log(req.body.file_name);\r\n    // console.log(\"template\",req.body.template);\r\n    try {\r\n        // console.log(\"เช็คตัวไฟล์\", req.body.file_name);\r\n\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n        //    if (req.body.file_name === req.body.template){\r\n        //         console.log(\"รูปแบบถูกต้อง\");\r\n        //    }\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {   \r\n                console.log(workbook.Sheets[ws]);     \r\n                workbook.Sheets[ws]['A1'].w = \"no\";\r\n                workbook.Sheets[ws]['B1'].w = \"code1\";\r\n                workbook.Sheets[ws]['C1'].w = \"code2\";\r\n                workbook.Sheets[ws]['D1'].w = \"code3\";\r\n                workbook.Sheets[ws]['E1'].w = \"E\";\r\n                workbook.Sheets[ws]['F1'].w = \"car_type_id\";\r\n                workbook.Sheets[ws]['G1'].w = \"band_car\";\r\n                workbook.Sheets[ws]['H1'].w = \"model_car\";\r\n                workbook.Sheets[ws]['I1'].w = \"oem_id\";\r\n                workbook.Sheets[ws]['J1'].w = \"tax\";\r\n                workbook.Sheets[ws]['K1'].w = \"chassis_number\";\r\n                workbook.Sheets[ws]['L1'].w = \"vin_number\";\r\n                workbook.Sheets[ws]['M1'].w = \"car_year\";\r\n                workbook.Sheets[ws]['N1'].w = \"gps\";\r\n                workbook.Sheets[ws]['O1'].w = \"sim_number\";\r\n                workbook.Sheets[ws]['P1'].w = \"P\";\r\n                workbook.Sheets[ws]['Q1'].w = \"personal_name\";\r\n                workbook.Sheets[ws]['R1'].w = \"R\";\r\n                workbook.Sheets[ws]['S1'].w = \"S\";\r\n                workbook.Sheets[ws]['T1'].w = \"T\";\r\n                workbook.Sheets[ws]['U1'].w = \"person_tel_car\";\r\n                workbook.Sheets[ws]['V1'].w = \"V\";\r\n                workbook.Sheets[ws]['W1'].w = \"capacity\";\r\n                workbook.Sheets[ws]['X1'].w = \"is_truck\";\r\n                workbook.Sheets[ws]['Y1'].w = \"plate_number\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n                // console.log(\"shhhh\",tempJson);\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n           \r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            _externalDataService.importExcel_Logistic_cars_detail(JsonList, user_id, req.body.oem_id,req.body.file_name,req.body.company_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/updateRepairValues', _auth , async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _externalDataService.updateRepairValues(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/externalData.js?");

/***/ }),

/***/ "./app/routes/externalDataCTS.js":
/*!***************************************!*\
  !*** ./app/routes/externalDataCTS.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ./auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst externalDataCTSService = __webpack_require__(/*! ../service/externalDataCTSService */ \"./app/service/externalDataCTSService.js\");\r\nconst _externalDataCTSService = new externalDataCTSService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource external');\r\n});\r\n\r\n\r\nrouter.post('/importForecastFiles', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    \r\n    try {\r\n        /* console.log(\"เช็คตัวไฟล์\", req.body);\r\n        console.log(\"เช็คตัวไฟล์1\", req.files); */\r\n        var format_data = {\r\n            oem_id: req.body.oem_id,\r\n            company_id: req.body.company_id,\r\n            type_select: req.body.type_select,\r\n            file_target: {file_name:req.body.file_name,file:req.files,}\r\n        }\r\n\r\n   /*      console.log(\"format_data\",format_data) */\r\n      /*   if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n     \r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {   \r\n                // console.log(workbook.Sheets[ws]);     \r\n                workbook.Sheets[ws]['A1'].w = \"no\";\r\n                workbook.Sheets[ws]['B1'].w = \"id_person\";\r\n                workbook.Sheets[ws]['C1'].w = \"driver_name_th\";\r\n                workbook.Sheets[ws]['D1'].w = \"driver_name_eg\";\r\n                workbook.Sheets[ws]['E1'].w = \"car_name\";\r\n                workbook.Sheets[ws]['F1'].w = \"person_code\";\r\n                workbook.Sheets[ws]['G1'].w = \"card_name\";\r\n                workbook.Sheets[ws]['H1'].w = \"citizen_id\";\r\n                workbook.Sheets[ws]['I1'].w = \"driver_tel\";\r\n                workbook.Sheets[ws]['J1'].w = \"exp_driving_licence\";\r\n                workbook.Sheets[ws]['K1'].w = \"nickname\";\r\n                workbook.Sheets[ws]['L1'].w = \"oem_name_text\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n                // console.log(\"shhhh\",tempJson);\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n           \r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n        } */\r\n            _externalDataCTSService.importForecastFiles(format_data,user_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n   /*      } */\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/getExternalDataLog', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    if (!req.body.company_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    try {\r\n        _externalDataCTSService.getExternalDataLog(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/externalDataCTS.js?");

/***/ }),

/***/ "./app/routes/factoryChoup.js":
/*!************************************!*\
  !*** ./app/routes/factoryChoup.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst factoryChoupService = __webpack_require__(/*! ../service/factoryChoupService */ \"./app/service/factoryChoupService.js\");\r\nconst _factoryChoupService = new factoryChoupService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filterFactoryChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryChoupService.filterFactoryChoup(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delFactoryChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryChoupService.delFactoryChoup(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/addFactoryChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryChoupService.addFactoryChoup(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getFactoryChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryChoupService.getFactoryChoup(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/updateFactoryChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryChoupService.updateFactoryChoup(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/factoryChoup.js?");

/***/ }),

/***/ "./app/routes/factoryParameter.js":
/*!****************************************!*\
  !*** ./app/routes/factoryParameter.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nvar authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _service = new baseService();\r\nvar factoryParameterService = __webpack_require__(/*! ../service/factoryParameterService */ \"./app/service/factoryParameterService.js\");\r\nvar _factoryParameterService = new factoryParameterService();\r\nvar logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _getCompanyIdByToken = authRouter.getCompanyIdByToken;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource company');\r\n});\r\n\r\n\r\n/////////////////section//////////////////////\r\n\r\nrouter.post('/section/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.addSection(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n/* \r\nrouter.post('/section/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.addSection(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\nrouter.post('/section/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.editSection(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/section/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.delSection(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/section/findByOem', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.findSectionByOem(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/section/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.filterSectionByOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n//////////////////////process/////////////////////////////\r\nrouter.post('/process/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.section_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.addProcess(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/process/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.section_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.editProcess(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/process/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.delProcess(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/process/findProcessByOEM', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.findProcessByOem(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/process/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   /*  if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } */\r\n    /* if (!req.body.section_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } */\r\n    _factoryParameterService.filterProcessByOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n//////////////////////line/////////////////////////////\r\n\r\nrouter.post('/line/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!req.body.line_name) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.addLine(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/line/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!req.body.machine_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.editLine(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/line/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.delLine(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/line/findLineById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.findLineById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/line/findLineMachineById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n     if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } \r\n    _factoryParameterService.findLineMachineById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/line/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.filterLineByOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/line_machine/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.filterLineMachine(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n//////////////////////////////////////////////Machine\r\n\r\nrouter.post('/machine/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.filterMachineByOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/machine_process/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.filterMachineProcess(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/machine/findMachineProcessById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n     if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } \r\n    _factoryParameterService.findMachineProcessById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/machine/findMachineById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.findMachineById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/machine/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.machine_name) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _factoryParameterService.addMachine(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/machine/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!req.body.machine_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.editMachine(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/machine/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryParameterService.delMachine(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n//------------------------------------------------------------\r\nrouter.post('/addMachineProduct', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _factoryParameterService.addMachineProduct(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getProductByMachine', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _factoryParameterService.getProductByMachine(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getMachineProduct', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _factoryParameterService.getMachineProduct(user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n////////////////////////// Tooling ///////////////////////////////////\r\n\r\nrouter.get('/tooling/getRatio', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _factoryParameterService.getToolingRatio().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/tooling/updateRatio', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _factoryParameterService.updateRatio(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/factoryParameter.js?");

/***/ }),

/***/ "./app/routes/factoryWorkHours.js":
/*!****************************************!*\
  !*** ./app/routes/factoryWorkHours.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst factoryWorkHoursService = __webpack_require__(/*! ../service/factoryWorkHoursService */ \"./app/service/factoryWorkHoursService.js\");\r\nconst _factoryWorkHoursService = new factoryWorkHoursService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource Factory Work Hours');\r\n});\r\n\r\n\r\n\r\n//////////////////////////////// With Company ////////////////////////////\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.filter_hours(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/save', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.SaveWorkHours(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/save_calendar', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.SaveCalendar(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/GetCalendarByCompany', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.GetCalendarByCompany(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetWorkHour', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.GetWorkHour(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n//////////////////////////////// With Company ////////////////////////////\r\n\r\n\r\n\r\n//////////////////////////////// With OEM //////////////////////////////\r\nrouter.post('/filterWithOem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.filter_hoursWithOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/saveWithOem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.SaveWorkHoursWithOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/save_calendarWithOem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.SaveCalendarWithOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/GetCalendarByCompanyWithOem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.GetCalendarByCompanyWithOem(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetWorkHourWithOem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _factoryWorkHoursService.GetWorkHourWithOem(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filterForHr', /* _auth, */ async (req, res, next) => {\r\n\r\n    _factoryWorkHoursService.GetCalendarByCompany(req.body.company_id).then(_res => {\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n     \r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    })\r\n});\r\n//////////////////////////////// With OEM /////////////////////////////\r\n\r\nmodule.exports = router\n\n//# sourceURL=webpack:///./app/routes/factoryWorkHours.js?");

/***/ }),

/***/ "./app/routes/fuelConsumtion.js":
/*!**************************************!*\
  !*** ./app/routes/fuelConsumtion.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst fuelConsumtionService = __webpack_require__(/*! ../service/fuelConsumtionService */ \"./app/service/fuelConsumtionService.js\");\r\nconst _fuelConsumtionService = new fuelConsumtionService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a resource project\");\r\n});\r\n\r\n\r\n\r\nrouter.post('/get_fuel_consumtion', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _fuelConsumtionService.get_fuel_consumtion(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n  });\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/fuelConsumtion.js?");

/***/ }),

/***/ "./app/routes/handheld.js":
/*!********************************!*\
  !*** ./app/routes/handheld.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst handheldService = __webpack_require__(/*! ../service/handheldService */ \"./app/service/handheldService.js\");\r\nconst _handheldService = new handheldService();\r\nconst _QueryHandheld = __webpack_require__(/*! ../query/queryHandheld.json */ \"./app/query/queryHandheld.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource loop');\r\n});\r\n\r\nrouter.post('/save_form_handheld', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldService.saveHandheld(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/findTrackNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldService.findTrackNo(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/genLotNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldService.genLotNo(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/genLotNo_material', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldService.genLotNo_material(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/handheld.js?");

/***/ }),

/***/ "./app/routes/handheldCTS.js":
/*!***********************************!*\
  !*** ./app/routes/handheldCTS.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst handheldCTSService = __webpack_require__(/*! ../service/handheldCTSService */ \"./app/service/handheldCTSService.js\");\r\nconst _handheldCTSService = new handheldCTSService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.get('/checkAndGetDetailByTag', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.checkAndGetDetailByTag(req.query.tag_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/checkAndGetDetailByTagWipProd', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.checkAndGetDetailByTagWipProd(req.query.tag_id,req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/checkAndGetDetailByTagPack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.checkAndGetDetailByTagPack(req.query.tag_id,req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/checkAndGetDetailByProductNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.checkAndGetDetailByProductNo(req.query.tag_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/checkAndGetDetailByTagWipChoup', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.checkAndGetDetailByTagWipChoup(req.query.tag_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getProductionOrderCTS', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.getProductionOrderCTS(req.query.id,req.query.key).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getProductionOrderCTS_AfterDel', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.getProductionOrderCTS_AfterDel(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getProjectList', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.getProjectList(req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/SaveProcessHandheld', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _handheldCTSService.SaveProcessHandheld(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/handheldCTS.js?");

/***/ }),

/***/ "./app/routes/history.js":
/*!*******************************!*\
  !*** ./app/routes/history.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst historyService = __webpack_require__(/*! ../service/historyService */ \"./app/service/historyService.js\");\r\nconst _historyService = new historyService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource History');\r\n});\r\n\r\n\r\nrouter.post('/getDeliveryHistory', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.getDelivery(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/cutting/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_cutting(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/material/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_maerial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/materialSTP/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_maerialSTP(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/deflux/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_deflux(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/product_fg/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_product_fg(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/product_fg_project/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_product_fg_project(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/productStp_fg_project/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_productStp_fg_project(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/product_wip/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _historyService.filter_product_wip(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router\n\n//# sourceURL=webpack:///./app/routes/history.js?");

/***/ }),

/***/ "./app/routes/index.js":
/*!*****************************!*\
  !*** ./app/routes/index.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst {\r\n    route\r\n} = __webpack_require__(/*! ./users */ \"./app/routes/users.js\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst { log } = __webpack_require__(/*! util */ \"util\");\r\nvar _baseService = new baseService();\r\n/* GET home page. */\r\nrouter.get('/', function (req, res, next) {\r\n    res.render('index', {\r\n        title: 'TTT Brother for line'\r\n    });\r\n});\r\n\r\nrouter.get('/TestConnect2', function (req, res, next) {\r\n\r\n    _baseService.TestConnnect2().then(_res => {\r\n        res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    })\r\n\r\n});\r\n\r\n// a middleware function with no mount path. This code is executed for every request to the router\r\nrouter.use(function (req, res, next) {\r\n    if (req.headers[\"x-ttt\"] == _config.customHeaderKey) {\r\n        next();\r\n    } else if ((req.baseUrl + req.path).indexOf(\"static\") > -1) {\r\n        next();\r\n    } else if((req.baseUrl + req.path).indexOf(\"logAccess\") > -1) {\r\n        next();\r\n    }\r\n    else {\r\n        return res.status(404).send(\"i see you \\n (⊙.⊙(☉̃ₒ☉)⊙.⊙)\")\r\n    }\r\n})\r\n\r\nrouter.get('/static/:code', async (req, res, next) =>{\r\n    try {\r\n        if (req.params.code) {\r\n            var f = Buffer.from(req.params.code, 'base64').toString('utf8');\r\n            if (f.indexOf(\"./uploads\") == 0) {\r\n                if(f.indexOf(\"/logs/\") == 9){\r\n                    return res.status(404).send(\"The file does not exist\");\r\n                }\r\n                var temp = path.resolve(f);\r\n                fs.access(temp, error => {\r\n                    if (!error) {\r\n                        res.setHeader('Content-Disposition', `attachment; filename=${encodeURIComponent(path.basename(temp))}`);\r\n                        res.setHeader('Content-Transfer-Encoding', 'binary');\r\n                        res.setHeader('Content-Type', 'application/octet-stream');\r\n                        res.sendFile(temp,{},(err)=>{\r\n                            if (err) {\r\n                                next(err)\r\n                            }\r\n                        });\r\n                    } else {\r\n                        return res.status(404).send(\"The file does not exist\");\r\n                    }\r\n                });\r\n                // if (fs.existsSync(temp)) {\r\n                //     res.setHeader('Content-Disposition', 'attachment; filename=' + path.basename(temp));\r\n                //     res.setHeader('Content-Transfer-Encoding', 'binary');\r\n                //     res.setHeader('Content-Type', 'application/octet-stream');\r\n                //     res.sendFile(temp);\r\n                //     console.log(\"The file exists.\");\r\n                // } else {\r\n                //     return res.status(404).send(\"The file does not exist\");\r\n                // }\r\n            }else{\r\n                return res.status(404).send(\"The file does not exist\");\r\n            }\r\n\r\n        } else {\r\n            return res.status(404).send(\"The file does not exist\");\r\n        }\r\n\r\n    } catch (ex) {\r\n        return res.status(500).json(ex.message);\r\n    }\r\n    //    Buffer.from(fullPath).toString('base64')\r\n\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/index.js?");

/***/ }),

/***/ "./app/routes/load_Status.js":
/*!***********************************!*\
  !*** ./app/routes/load_Status.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst load_statusService = __webpack_require__(/*! ../service/load_statusService */ \"./app/service/load_statusService.js\");\r\nconst _load_statusService = new load_statusService();\r\nconst _QueryLoad_status = __webpack_require__(/*! ../query/queryLoad_status.json */ \"./app/query/queryLoad_status.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource loop');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _load_statusService.addLoad_status(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _load_statusService.filterLoad_status(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _load_statusService.findByIdLoad_status(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _load_statusService.updateLoad_status(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _load_statusService.delLoad_status(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/load_Status.js?");

/***/ }),

/***/ "./app/routes/logistic.js":
/*!********************************!*\
  !*** ./app/routes/logistic.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst logisticService = __webpack_require__(/*! ../service/logisticService */ \"./app/service/logisticService.js\");\r\nconst _logisticService = new logisticService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a resource project\");\r\n});\r\n\r\nrouter.post(\"/add\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .addLogistic(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/logistic_car/add\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .addLogisticCar(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\nrouter.post(\"/update\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .updateLogistic(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/del\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .delLogistic(req.query.id, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.get(\"/logistic_car_del\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .logistic_car_del(req.query.id, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.get(\"/logistic_type\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .filterlogistic_type(req.query.id, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/findById\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .findByIdLogistic(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/GetMenu\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .GetMenu()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/filter\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .filterlogistic(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/GetCarType\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .GetCarType()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/addTowTruck\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .addTowTruck(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/findTowTruckById\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .findTowTruckById(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/filter_towTruck\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .filter_towTruck(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/editTowTruck\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .editTowTruck(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/delTowTruck\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .delTowTruck(req.query.id, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/allOemByCompany\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .allOemByCompany(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/upDateFromDTC_Type\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* console.log(\"test\"); */\r\n  _logisticService\r\n    .upDateFromDTC_Type(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/UpdateFromDTC_Car\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* console.log(\"test\"); */\r\n  _logisticService\r\n    .UpdateFromDTC_Car(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/fineLogisticById\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* console.log(\"test\"); */\r\n  _logisticService\r\n    .fineLogisticById(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.post(\"/getplate_number\", _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  \r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  // console.log(req.body);\r\n\r\n  _logisticService\r\n    .getplate_number(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.post(\"/getgas_station\", _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  \r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n//  console.log(\"อันนี้คือืาราย\",req.body);\r\n\r\n  _logisticService\r\n    .getgas_station(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n // แอดหน้าน้ำมัน\r\n\r\nrouter.post(\"/addrecordOil\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _logisticService\r\n    .addrecordOil(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.post('/all_record_oil', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.all_record_oil(req.body).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n// update record_oill\r\n\r\nrouter.post(\"/UpdateRecordOil\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* console.log(\"test\"); */\r\n  _logisticService\r\n    .UpdateRecordOil(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.get(\"/findById_oil\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _logisticService\r\n    .findById_oil(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.get(\"/delrecord\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* console.log(\"test\"); */\r\n  _logisticService\r\n    .delrecord(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get('/GetBill', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.getBill(req.query.id,req.query.logis_id).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\nrouter.post('/SaveLogisticInOut', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.SaveLogisticInOut(req.body,user_id).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getLogisticInOut', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.getLogisticInOut(req.query.id).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/filterLogisticInOut', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.filterLogisticInOut(req.body).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\nrouter.post('/filterLogisticInOutReport', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.filterLogisticInOutReport(req.body).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\nrouter.get('/fineMaintenaceHistoryByCarID', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n      \"body\": req.body,\r\n      \"query\": req.query,\r\n      \"header\": req.headers,\r\n      \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n      return res.status(400).send({\r\n          message: \"need correct level\"\r\n      })\r\n  }\r\n  _logisticService.fineMaintenaceHistoryByCarID(req.query.id).then(_res => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n      _log.activity.error = _error.message\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n          message: _error.message\r\n      })\r\n  }).finally(() => {\r\n      _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/logistic.js?");

/***/ }),

/***/ "./app/routes/loop.js":
/*!****************************!*\
  !*** ./app/routes/loop.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst loopService = __webpack_require__(/*! ../service/loopService */ \"./app/service/loopService.js\");\r\nconst _loopService = new loopService();\r\nconst _QueryLoop = __webpack_require__(/*! ../query/queryLoop.json */ \"./app/query/queryLoop.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource loop');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _loopService.addLoop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _loopService.filterLoop(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _loopService.findByIdLoop(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _loopService.updateLoop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _loopService.delLoop(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/loop.js?");

/***/ }),

/***/ "./app/routes/matInOutCTS.js":
/*!***********************************!*\
  !*** ./app/routes/matInOutCTS.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst matInOutCTSCTSService = __webpack_require__(/*! ../service/matInOutCTSService */ \"./app/service/matInOutCTSService.js\");\r\nconst _matInOutCTSCTSService = new matInOutCTSCTSService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.get('/getMaterialLotStockById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    if (!req.query.material_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n\r\n    try {\r\n  \r\n        _matInOutCTSCTSService.getMaterialLotStock(req.query.material_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/getHistoryLotById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    if (!req.query.material_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.getMaterialLotHistory(req.query.material_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/getMaterialMGTById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    if (!req.query.material_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.getMaterialMGT(req.query.material_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/qcApproved', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.qcApproved(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/saveHaveCer', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.saveHaveCer(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/checkRefCoil', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.checkRefCoil(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _matInOutCTSCTSService.filterRawMatInOut(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/getMaterail', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _matInOutCTSCTSService.getRawMatInOut(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.get('/getlotNo', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _matInOutCTSCTSService.getlotNo(req.query.material_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/getLocation', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.getLocation(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/getSupplier', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.getSupplier(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/saveEditAmountMaterialInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    if (!req.body.material_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.saveEditAmountMaterialInOut(req.body, user_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/saveEditLogMaterialInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    // if (!req.body.material_id) {\r\n    //     return res.status(400).send({\r\n    //         message: \"need parameter\"\r\n    //     })\r\n    // }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.saveEditLogMaterialInOut(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.get('/genCoilNo', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _matInOutCTSCTSService.genCoilNo().then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/matInOutCTS.js?");

/***/ }),

/***/ "./app/routes/materailConCts.js":
/*!**************************************!*\
  !*** ./app/routes/materailConCts.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\r\nconst express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst materailConCtsService = __webpack_require__(/*! ../service/materailConCtsService */ \"./app/service/materailConCtsService.js\");\r\nconst _materailConCtsService = new materailConCtsService();\r\nconst _QueryMaterial = __webpack_require__(/*! ../query/queryMaterial.json */ \"./app/query/queryMaterial.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\nrouter.post('/filterMaterial', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"เเข้า\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materailConCtsService.filterMaterialView(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/materailConCts.js?");

/***/ }),

/***/ "./app/routes/material.js":
/*!********************************!*\
  !*** ./app/routes/material.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst materialService = __webpack_require__(/*! ../service/materialService */ \"./app/service/materialService.js\");\r\nconst _materialService = new materialService();\r\nconst _QueryMaterial = __webpack_require__(/*! ../query/queryMaterial.json */ \"./app/query/queryMaterial.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addMaterial(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterial(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.delMaterial(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByIdMaterial(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findByNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.no || !req.query.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByNoMaterial(req.query.no,req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: \"Not found!\"\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update_material/desktop', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterial_desktop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/insert_log_material_edit_amount/desktop', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addLogMaterialAmount_desktop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/checkName', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.name) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.checkNameMaterial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.filterMaterial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/importExcel', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if(!req.body.oem_id){\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w=\"no\";\r\n                workbook.Sheets[ws]['B1'].w=\"name\";\r\n                workbook.Sheets[ws]['C1'].w=\"material_type_name\";\r\n                workbook.Sheets[ws]['D1'].w=\"material_spec_name\";\r\n                workbook.Sheets[ws]['E1'].w=\"material_size_name\";\r\n                workbook.Sheets[ws]['F1'].w=\"buy_price\";\r\n                workbook.Sheets[ws]['G1'].w=\"material_supplier_name\";\r\n                workbook.Sheets[ws]['H1'].w=\"material_unit_by_weight\";\r\n                workbook.Sheets[ws]['I1'].w=\"material_unit_by_piece\";\r\n                workbook.Sheets[ws]['J1'].w=\"weight_piece\";\r\n                workbook.Sheets[ws]['K1'].w=\"supplier_lead_time\";\r\n                workbook.Sheets[ws]['L1'].w=\"minimum_lot\";\r\n                workbook.Sheets[ws]['M1'].w=\"minimum_order_supplier\";\r\n                workbook.Sheets[ws]['N1'].w=\"description\";\r\n                workbook.Sheets[ws]['O1'].w=\"remark\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if(tempJson.length>0)JsonList.push(tempJson);\r\n            })\r\n            if(JsonList.length==0){\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            _materialService.importExcelMaterial(JsonList,user_id,req.body.oem_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err.message);\r\n       /*  return res.status(400).send({\r\n            message: _error.message\r\n        }) */\r\n    }\r\n});\r\n\r\nrouter.get('/getMaterialType', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryMaterial.getMaterialType,[req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getMaterialSpec', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryMaterial.getMaterialSpec,[req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getMaterialSize', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryMaterial.getMaterialSize,[req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getMaterialSupplier', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryMaterial.getMaterialSupplier,[req.query.id]).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterialAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/gethistory', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.getHistory(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getHistoryMAT', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.getHistoryMAT(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filtermatsize', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.filtermatsize2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/addmatsize', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addMaterialsize(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/updatematsize', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterialsize(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/findByIdmatsize', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByIdMaterialsize(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/matsizedel', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.delMaterialsize(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filtermatspec', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.filtermatspec2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/findByIdmatspec', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByIdMaterialspec(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/addmatspec', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addMaterialspec(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/updatematspec', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterialspec(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/matspecdel', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.delMaterialspec(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filtermattype', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.filtermattype2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findByIdmattype', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByIdMaterialtype(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/addmattype', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addMaterialtype(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/updatemattype', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMaterialtype(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/mattypedel', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.delMaterialtype(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filtermodel_category', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.filtermodel_category2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/Mcdel', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.delmc(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findByIdmc', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _materialService.findByIdMc2(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/addmatmodel_category', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.addmatmodel(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/updatemc', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialService.updateMc2(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/material.js?");

/***/ }),

/***/ "./app/routes/materialPlaning.js":
/*!***************************************!*\
  !*** ./app/routes/materialPlaning.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst materialPlaningService = __webpack_require__(/*! ../service/materialPlaningService */ \"./app/service/materialPlaningService.js\");\r\nconst _materialPlaningService = new materialPlaningService();\r\nconst _QuerymaterialPlaning = __webpack_require__(/*! ../query/queryMaterialPlaning.json */ \"./app/query/queryMaterialPlaning.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource product planing');\r\n});\r\n\r\n\r\nrouter.post('/updateMaterialForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    // if (!req.body.year) {\r\n    //     return res.status(400).send({\r\n    //         message: \"need parameter year\"\r\n    //     })\r\n    // }\r\n    // if (!req.body.month) {\r\n    //     return res.status(400).send({\r\n    //         message: \"need parameter month (0-11)\"\r\n    //     })\r\n    // }\r\n    _materialPlaningService.updateMaterialForcast(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/FilterOrderForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n    _materialPlaningService.filterMaterialForcast(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/FilterMaterialConsumption', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    _materialPlaningService.filterMaterialConsumption(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////////////////////////order raw material///////////////////////////////////////////\r\nrouter.post('/orderMaterial/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialPlaningService.filterOrderMaterial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/orderMaterial/updateListMaterial', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _materialPlaningService.updateListMaterial(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/orderMaterial/cancle', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialPlaningService.cancleOrder_material(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/orderMaterial/filtermaterial2', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _materialPlaningService.filterordermaterial2(req.query.id,user_id,req.query.company_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/approveMaterial/getMaterialByOSL', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _materialPlaningService.getMaterialByOSL(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/approveRawMatPO/get_listMAterialPO', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _materialPlaningService.get_listMAterialPO(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/approveRawMatPO/sentMailToPO', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _materialPlaningService.sentMailToPO(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router\n\n//# sourceURL=webpack:///./app/routes/materialPlaning.js?");

/***/ }),

/***/ "./app/routes/materialSTC.js":
/*!***********************************!*\
  !*** ./app/routes/materialSTC.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst materialSTCService = __webpack_require__(/*! ../service/materialSTCService */ \"./app/service/materialSTCService.js\");\r\nconst _materialSTCService = new materialSTCService();\r\nconst _querymaterialSTC = __webpack_require__(/*! ../query/querymaterialSTC.json */ \"./app/query/querymaterialSTC.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a resource material\");\r\n});\r\n\r\nrouter.post(\"/addmaterialSTC\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _materialSTCService\r\n    .addmaterialSTC(req.body, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/getMat_Stc_Month_year\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _materialSTCService\r\n    .getMat_Stc_Month_year(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getAllMaterialValue\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need id paras\",\r\n    });\r\n  }\r\n  _materialSTCService\r\n    .getAllMaterialValue(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post(\"/updateAllStcMaterail\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n/*   if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need id paras\",\r\n    });\r\n  } */\r\n  _materialSTCService\r\n    .updateAllStcMaterail(req.body,user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.post(\"/UpateSSM\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _materialSTCService\r\n    .UpateSSM(req.body,user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    \r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.post(\"/UpdateTiger\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    \r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  console.log(\"tiger\");\r\n  _materialSTCService\r\n    .UpdateTiger(req.body,user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    \r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/UpdateDaily\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _materialSTCService\r\n    .UpdateDaily(req.body,user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    \r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\n\r\nrouter.post(\"/getAllMaterialValueByYearMonth\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n\r\n  _materialSTCService\r\n    .getAllMaterialValueByYearMonth(req.body,user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    \r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n\r\n    \r\n\r\n\r\n});\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/materialSTC.js?");

/***/ }),

/***/ "./app/routes/orderSummary.js":
/*!************************************!*\
  !*** ./app/routes/orderSummary.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nvar authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _service = new baseService();\r\nconst _QueryOrderSummary = __webpack_require__(/*! ../query/queryOrderSummary.json */ \"./app/query/queryOrderSummary.json\");\r\n\r\nvar orderSummary = __webpack_require__(/*! ../service/orderSummaryService */ \"./app/service/orderSummaryService.js\");\r\nvar _orderSummary = new orderSummary();\r\nvar logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _getCompanyIdByToken = authRouter.getCompanyIdByToken;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nrouter.get('/', function(req, res, next) {\r\n    return res.send('respond with a resource company');\r\n});\r\n\r\nrouter.post('/filter', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.filterOSLByNo(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetSection', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetSection(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetProcess', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetProcessBySectionId(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetMachine', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetMachineByProcessId(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/GetLastOrder', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetLastOrder(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/viewOrderOSL', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetViewOrderOSL_ByProcress_id(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getDay_off', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetDay_off(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getDay_off_detail', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetDay_off_detail(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/GetOSL_table', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.GetOSL_table(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Add_Log_OSL', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.addLog_OSL(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/Edit_Log_OSL', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.editLog_OSL(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _orderSummary.find_OSLById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/GetMachineProcess', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.findMachineByMultipleProcess(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/Addtagno', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.addtagno(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/SetActualTimeByOSL', _auth, async(req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _orderSummary.SetActualTimeByOSL(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/orderSummary.js?");

/***/ }),

/***/ "./app/routes/packInOutCTS.js":
/*!************************************!*\
  !*** ./app/routes/packInOutCTS.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst packInOutCTSService = __webpack_require__(/*! ../service/packInOutCTSService */ \"./app/service/packInOutCTSService.js\");\r\nconst _packInOutCTSService = new packInOutCTSService();\r\nconst _QueryWipshupOutInCTS = __webpack_require__(/*! ../query/queryWipshupOutInCTS.json */ \"./app/query/queryWipshupOutInCTS.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.post('/filterPackInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _packInOutCTSService.filterPackInOut(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nrouter.get('/getlotNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _packInOutCTSService.getlotNo(req.query.product_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/saveInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"save\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _packInOutCTSService.saveInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/getLotInStock', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _packInOutCTSService.getLotInStock(req.query.product_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.get('/GetLotPackHistory', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _packInOutCTSService.GetLotPackHistory(req.query.product_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/genBoxNo', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _packInOutCTSService.genBoxNo().then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/checkRefBox', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _packInOutCTSService.checkRefBox(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/getWiplogPackinreport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _packInOutCTSService.getWiplogPackinreport(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/getPackloginreport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _packInOutCTSService.getPackloginreport(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/packInOutCTS.js?");

/***/ }),

/***/ "./app/routes/permission.js":
/*!**********************************!*\
  !*** ./app/routes/permission.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst permissionService = __webpack_require__(/*! ../service/permissionService */ \"./app/service/permissionService.js\");\r\nconst _permissionService = new permissionService();\r\nconst _QueryPermission= __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource Permission');\r\n});\r\n\r\n/* \r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.addPermission(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\n\r\nrouter.get('/findByUserId', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findByUserIdPermission(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAll_ICON', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAll_ICON().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllUser', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllUser().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllFeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllFeature().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filterFeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.filterFeature(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllFeatureUser', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getAllFeatureUser().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getAllMenu', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.getAllMenu().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/mgt/getAll_Level', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_all().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_1', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_2', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/mgt/get_Level_3', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n    _permissionService.get_Level_3(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findLevelById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findLevelById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findFeatureById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findFeatureById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findFeatureUserById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.findFeatureUserById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/add/feature_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addFeatureUser(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/add/feature', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addFeature(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/add/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.addMenu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.updateMenu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/feature', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n  \r\n    _permissionService.updateFeature(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/update/feature_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n  \r\n    _permissionService.updateFeature_user(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delMenu(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delfeature', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delfeature(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delfeature_user', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _permissionService.delfeature_user(req.query.id, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter/menu/lv1', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n  \r\n    _permissionService.filterMenuLv1(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.post('/filter/menu/lv2', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   \r\n  \r\n    _permissionService.filterMenuLv2(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\n\r\nrouter.get('/findMenuPermissionByUserId', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.findMenuPermissionByUserId(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getMenuByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getMenuByUserID(req.query.user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nrouter.get('/getFeatureByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getFeatureByUserID(req.query.user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n/* \r\nrouter.get('/getLevel2ByLv1', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel2ByLv1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}) */\r\n\r\n\r\nrouter.post('/getLevel2ByLv1', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel2ByLv1(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getLevel3ByLv2', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    console.log(req.body);\r\n    _permissionService.getLevel3ByLv2(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/addMenuPermission', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n /*    console.log(req.body); */\r\n    _permissionService.addMenuPermission(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n/* router.post('/update/menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _permissionService.update_menu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n */\r\n\r\n\r\nrouter.post('/sorting_menu', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n   /*  if (!req.body.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    } */\r\n    _permissionService.sorting_menu(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\nrouter.get('/getOEMByUserID', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.getOEMByUserID(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\nrouter.get('/findOemUserById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _permissionService.findOemUserById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\n\r\n\r\nrouter.post('/update/oem_user', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var admin_id = _getAdminIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!admin_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _permissionService.updateOem_user(req.body, admin_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n})\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/permission.js?");

/***/ }),

/***/ "./app/routes/planningCTS.js":
/*!***********************************!*\
  !*** ./app/routes/planningCTS.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst planningCTSService = __webpack_require__(/*! ../service/planningCTSService */ \"./app/service/planningCTSService.js\");\r\nconst _planningCTSService = new planningCTSService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/filterPlanning', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _planningCTSService.filterPlanning(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/dailyPlan', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _planningCTSService.dailyPlan(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/planningCTS.js?");

/***/ }),

/***/ "./app/routes/product.js":
/*!*******************************!*\
  !*** ./app/routes/product.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst productService = __webpack_require__(/*! ../service/productService */ \"./app/service/productService.js\");\r\nconst _productService = new productService();\r\nconst _QueryProduct = __webpack_require__(/*! ../query/queryProduct.json */ \"./app/query/queryProduct.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nrouter.get('/', function (req, res, next) {\r\n    res.render('index', {\r\n        title: 'Express'\r\n    });\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.addProduct(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProduct(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _productService.findByIdProduct(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findByNo', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.no || !req.query.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _productService.findByNoProduct(req.query.no,req.query.oem_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: \"Not found!\"\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update_product/desktop', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProduct_desktop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/insert_log_product_edit_amount/desktop', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.addLogProduct_desktop(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.filterProduct(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter_allItem', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.filterProductAll(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/summaryReport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.filterSummaryReport(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.delProduct(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/importExcel', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"no\";\r\n                workbook.Sheets[ws]['B1'].w = \"name\";\r\n                workbook.Sheets[ws]['C1'].w = \"product_model_name\";\r\n                workbook.Sheets[ws]['D1'].w = \"qty_unit\";\r\n                workbook.Sheets[ws]['E1'].w = \"description\";\r\n                workbook.Sheets[ws]['F1'].w = \"sell_price\";\r\n                workbook.Sheets[ws]['G1'].w = \"sku_user\";\r\n                workbook.Sheets[ws]['H1'].w = \"product_route_name\";\r\n                workbook.Sheets[ws]['I1'].w = \"product_size_name\";\r\n                workbook.Sheets[ws]['J1'].w = \"product_color_name\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            _productService.importExcelProduct(JsonList, user_id, req.body.oem_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/importExcel_Bomlist', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"product_no\";\r\n                workbook.Sheets[ws]['B1'].w = \"material_no\";\r\n                workbook.Sheets[ws]['C1'].w = \"wt_mtr\";\r\n                workbook.Sheets[ws]['D1'].w = \"c_leng\";\r\n                workbook.Sheets[ws]['E1'].w = \"cos_pc\";\r\n                workbook.Sheets[ws]['F1'].w = \"remark\";\r\n\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            //console.log(JsonList)\r\n            _productService.importExcelBomlist(JsonList, user_id, req.body.oem_id,req.body.part_no).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/importExcel_Bomlist_Assy', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"product_no\";\r\n                workbook.Sheets[ws]['B1'].w = \"product_no_sub_assy\";\r\n                workbook.Sheets[ws]['C1'].w = \"amount\";\r\n                workbook.Sheets[ws]['D1'].w = \"remark\";\r\n\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            //console.log(JsonList)\r\n            _productService.importExcelBomlist_Assy(JsonList, user_id, req.body.oem_id,req.body.part_no).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/getProductModel', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryProduct.getProductModel, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res.rows;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getProductRoute', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryProduct.getProductRoute, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res.rows;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getProductSize', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryProduct.getProductSize, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res.rows;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/getProductColor', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameter(_QueryProduct.getProductColor, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res.rows;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountWIPInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductWIPAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountEnd_userInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductEnd_userAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n \r\nrouter.post('/amountLogisticInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductLogsticAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getlog_detailFG', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n\r\n    //console.log(req.query.id);\r\n    _productService.getlog_detailFG(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountFGInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductFGAmountInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/amountFGInOut_NoFIFO', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductFGAmountInOut_NOFIFO(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/amountInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductCuttingInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/cuttingInOut', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductCuttingInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////ชุบ///////////////////////\r\n\r\nrouter.post('/choup/filternormel', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.filterProductchoupnormel(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/choup/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.filterProductchoup(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getProductModel_Osl', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _baseService.baseQueryWithParameterOsl(_QueryProduct.getProductModelOsl, [req.query.id]).then(_res => {\r\n        _log.activity.response = _res.rows;\r\n        return res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/amountDIPInOutOsl', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.updateProductDIPAmountInOutOls(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/getHistoryFG', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.getHistoryFG(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getproductreport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productService.getproductreport(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/product.js?");

/***/ }),

/***/ "./app/routes/productPlaning.js":
/*!**************************************!*\
  !*** ./app/routes/productPlaning.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst productPlaningService = __webpack_require__(/*! ../service/productPlaningService */ \"./app/service/productPlaningService.js\");\r\nconst _productPlaningService = new productPlaningService();\r\nconst _QueryProductPlaning = __webpack_require__(/*! ../query/queryProductPlaning.json */ \"./app/query/queryProductPlaning.json\");\r\nconst PromiseFtp = __webpack_require__(/*! promise-ftp */ \"promise-ftp\");\r\nconst ftp = new PromiseFtp();\r\nconst _Config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource product planing');\r\n});\r\n\r\n\r\nrouter.post('/updateRealOrder', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _productPlaningService.updateRealOrder(req.body,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/FilterOrderForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n    _productPlaningService.FilterOrderForcast(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/importReadOrderForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"index\";\r\n                workbook.Sheets[ws]['B1'].w = \"no\";\r\n                workbook.Sheets[ws]['C1'].w = \"n1\";\r\n                workbook.Sheets[ws]['D1'].w = \"n2\";\r\n                workbook.Sheets[ws]['E1'].w = \"n3\";\r\n                workbook.Sheets[ws]['F1'].w = \"n4\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n\r\n            console.log(JsonList);\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n          \r\n             if (req.body.save) {\r\n                _productPlaningService.importSaveOrderForcast(req.body.year, req.body.month, req.body.oem_id, JsonList,user_id).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            } else {\r\n                _productPlaningService.importReadOrderForcast(req.body.year, req.body.month, req.body.oem_id, JsonList).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            } \r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/importAddOrderForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"index\";\r\n                workbook.Sheets[ws]['B1'].w = \"no\";\r\n                workbook.Sheets[ws]['C1'].w = \"n1\";\r\n                workbook.Sheets[ws]['D1'].w = \"n2\";\r\n                workbook.Sheets[ws]['E1'].w = \"n3\";\r\n                workbook.Sheets[ws]['F1'].w = \"n4\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n\r\n            //console.log(JsonList);\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n          \r\n             if (req.body.save) {\r\n                _productPlaningService.importAddOrderForcast(req.body.year, req.body.month, req.body.oem_id, JsonList,user_id).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            } \r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/importUpdateOrderForcast', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"index\";\r\n                workbook.Sheets[ws]['B1'].w = \"no\";\r\n                workbook.Sheets[ws]['C1'].w = \"n1\";\r\n                workbook.Sheets[ws]['D1'].w = \"n2\";\r\n                workbook.Sheets[ws]['E1'].w = \"n3\";\r\n                workbook.Sheets[ws]['F1'].w = \"n4\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n\r\n            //console.log(JsonList);\r\n            if (JsonList.length === 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n          \r\n                _productPlaningService.importUpdateOrderForcast(req.body.year, req.body.month, req.body.oem_id, JsonList).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n         \r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/productMonitoring', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    _productPlaningService.productMonitoring(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/importReadOrderForcastByKTC', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]);\r\n            let ok = tempJson[0][\"Delivery Direction Notice ( Production Month )\"].replace(/-/g, \"\");\r\n            let oder = ok.split(\" \");\r\n            let index = oder.indexOf(\"date\") + 1;\r\n            let fanil = \"\";\r\n            for(let i = index; i < oder.length; i++){\r\n                if(oder[i] !== ':' && oder[i] !== ''){\r\n                    \r\n                    fanil = oder[i].split(\"\\r\\n\");\r\n                    break;\r\n                }else{\r\n                    /* console.log(\"else 1\",oder[i]); */\r\n                }\r\n            }\r\n            \r\n            /* console.log(\"fanil\",fanil); */\r\n            for(var r = 0; r < tempJson.length; r++){\r\n                let temp ={\r\n                    issue_date:fanil[0],\r\n                    no:tempJson[r][\"Delivery Direction Notice ( Production Month )\"].replace(/-/g, \"\"),\r\n                    n1:tempJson[r].__EMPTY_30 || 0,\r\n                    n2:tempJson[r].__EMPTY_31 || 0,\r\n                    n3:tempJson[r].__EMPTY_32 || 0,\r\n                    n4:tempJson[r].__EMPTY_33 || 0,\r\n\r\n                }\r\n                if(r > 0 && temp.no !== \"Item Number\"&&temp.no !== \"Month\"&&temp.no.trim() !== \"\"){\r\n                 //console.log(r)\r\n                 JsonList.push(temp);\r\n                }\r\n         \r\n            }\r\n        \r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            if (String(req.body.save) == \"true\") {\r\n                  //console.log(JsonList);\r\n                _productPlaningService.importSaveOrderForcastKubota(req.body.year, req.body.month, req.body.oem_id, JsonList,user_id).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            } else {\r\n                _productPlaningService.importReadOrderForcastKubota(req.body.year, req.body.month, req.body.oem_id, JsonList).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            }\r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/importReadOrderForcastByKMS', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.year) {\r\n        return res.status(400).send({\r\n            message: \"need parameter year\"\r\n        })\r\n    }\r\n    if (!req.body.month) {\r\n        return res.status(400).send({\r\n            message: \"need parameter month (0-11)\"\r\n        })\r\n    }\r\n    if (!req.body.oem_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter oem\"\r\n        })\r\n    }\r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n  \r\n            sheet_name_list.forEach(ws => {\r\n             \r\n                workbook.Sheets[ws]['A2'].w = \"index\";\r\n                /* workbook.Sheets[ws]['B1'].w = \"issuedate\"; */\r\n                workbook.Sheets[ws]['B2'].w = \"no\";\r\n                workbook.Sheets[ws]['D2'].w = \"n1\";\r\n                workbook.Sheets[ws]['E2'].w = \"n2\";\r\n                workbook.Sheets[ws]['F2'].w = \"n3\";\r\n                workbook.Sheets[ws]['G2'].w = \"n4\";\r\n                \r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws],{range:1})\r\n                  for(let i of tempJson){\r\n                    i.issue_date = workbook.Sheets[ws]['B1'].w;\r\n                    tempJson.push(i)\r\n                    break;\r\n                  }\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n\r\n       /*      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]]); */\r\n\r\n            \r\n     \r\n         var JsonList_temp = JsonList[0];\r\n         var JsonList2 = [];\r\n            for(var r = 0; r < JsonList_temp.length; r++){\r\n                    var arr = JsonList_temp[r][\"no\"].split(\"'\");\r\n                    var no = \"\";\r\n                    var issuedate = JsonList_temp[0][\"issue_date\"];\r\n                        if(arr.length >1){\r\n                           no = arr[1].replace(\"&#39;\",\"\");\r\n                        }else{\r\n                           no = arr[0].replace(\"&#39;\",\"\");\r\n                        }\r\n     \r\n                       \r\n              /* \r\n                    var arr = JsonList_temp[r][\"no\"].split(\"&#39;\");\r\n                 \r\n                     */\r\n                  \r\n                let temp ={\r\n\r\n                    \r\n                    no:no,\r\n                    n1:JsonList_temp[r][\"n1\"] != undefined  || JsonList_temp[r][\"n1\"] != null ? JsonList_temp[r][\"n1\"] : 0,\r\n                    n2:JsonList_temp[r][\"n2\"] != undefined  || JsonList_temp[r][\"n2\"] != null ? JsonList_temp[r][\"n2\"] : 0,\r\n                    n3:JsonList_temp[r][\"n3\"] != undefined  || JsonList_temp[r][\"n3\"] != null ? JsonList_temp[r][\"n3\"] : 0,\r\n                    n4:JsonList_temp[r][\"n4\"] != undefined  || JsonList_temp[r][\"n4\"] != null ? JsonList_temp[r][\"n4\"] : 0,\r\n                    issuedate:issuedate,\r\n                }\r\n                JsonList2.push(temp);\r\n            }\r\n                /* for(let item of JsonList2){\r\n                    (item.no).substr(0, 1);\r\n                } */\r\n             //console.log(JsonList2);\r\n            /* console.log(JsonList2); */\r\n            if (JsonList2.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n     /*        console.log(JsonList2); */\r\n            if (String(req.body.save) == \"true\") {\r\n                  /* console.log(\"save\",JsonList2); */\r\n                 _productPlaningService.importSaveOrderForcastKomatsu(req.body.year, req.body.month, req.body.oem_id, JsonList2, user_id).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n            } else {\r\n                /* console.log(\"read\",JsonList2); */\r\n\r\n                _productPlaningService.importReadOrderForcastKomatsu(req.body.year, req.body.month, req.body.oem_id, JsonList2).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                })\r\n                \r\n            }\r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/orderProduction/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productPlaningService.filterOrderProduction(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/orderProduction/viewOrder', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productPlaningService.filterViewOrderProduction(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/orderProduction/findOrder', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _productPlaningService.filterViewOrderProduction(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/orderProduction/add', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productPlaningService.addOrderProduction(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/orderProduction/cancle', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productPlaningService.cancleOrder_product(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/orderProduction/updateListProduct', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _productPlaningService.updateListProduct(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post(\"/importReadOrderForcastByBKC_FTP\",  _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n      body: req.body,\r\n      query: req.query,\r\n      header: req.headers,\r\n      payload: _getPayload(token),\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n      return res.status(400).send({\r\n        message: \"need correct level\",\r\n      });\r\n    }\r\n    if (!req.body.year) {\r\n      return res.status(400).send({\r\n        message: \"need parameter year\",\r\n      });\r\n    }\r\n    if (!req.body.month) {\r\n      return res.status(400).send({\r\n        message: \"need parameter month (0-11)\",\r\n      });\r\n    }\r\n    if (!req.body.oem_id) {\r\n      return res.status(400).send({\r\n        message: \"need parameter oem\",\r\n      });\r\n    }\r\n\r\n    try {\r\n      ftp\r\n        .connect({\r\n          host: _Config.FTPConnect.host,\r\n          user: _Config.FTPConnect.user,\r\n          password: _Config.FTPConnect.password,\r\n        })\r\n        .then(function (serverMessage) {\r\n          return ftp.get(_Config.FTPConnect.remotePath);\r\n        })\r\n        .then(function (stream) {\r\n          return new Promise(function (resolve, reject) {\r\n            stream.once(\"close\", resolve);\r\n            stream.once(\"error\", reject);\r\n\r\n            stream.pipe(fs.createWriteStream(_Config.FTPConnect.localPath));\r\n          });\r\n        })\r\n        .then(function (data) {\r\n          return ftp.end();\r\n        });\r\nconsole.log(_Config.FTPConnect.localPath);\r\n\r\n      var workbook =await XLSX.readFile(_Config.FTPConnect.localPath);\r\n     console.log(workbook);\r\n     var mod_date = workbook.Props.ModifiedDate;\r\n     console.log(mod_date);\r\n      var sheet_name_list = workbook.SheetNames;\r\n      var JsonList = [];\r\n      \r\n      sheet_name_list.forEach((ws) => {\r\n        workbook.Sheets[ws][\"A1\"].w = \"no\";\r\n        workbook.Sheets[ws][\"C1\"].w = \"n1\";\r\n        workbook.Sheets[ws][\"D1\"].w = \"n2\";\r\n        workbook.Sheets[ws][\"E1\"].w = \"n3\";\r\n        workbook.Sheets[ws][\"F1\"].w = \"n4\";\r\n        let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n        if (tempJson.length > 0) JsonList.push(tempJson);\r\n      });\r\n\r\n      if (JsonList.length == 0) {\r\n        return res.status(400).send({\r\n          message: \"need parameter\",\r\n        });\r\n      }\r\n      //console.log(JsonList);\r\n      if (req.body.save) {\r\n                        \r\n                      _productPlaningService.importSaveOrderForcastBKC_FTP(req.body.year, req.body.month, req.body.oem_id, JsonList,user_id).then(_res => {\r\n                          _log.activity.response = _res;\r\n                          return res.status(200).json(_res)\r\n                      }).catch(_error => {\r\n                          _log.activity.error = _error.message\r\n                          _log.activity.status = false;\r\n                          return res.status(400).send({\r\n                              message: _error.message\r\n                          })\r\n                      }).finally(() => {\r\n                          _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                      })\r\n                  } else {\r\n\r\n                      _productPlaningService.importReadOrderForcastBKC_FTP(req.body.year, req.body.month, req.body.oem_id, JsonList,mod_date).then(_res => {\r\n                          _log.activity.response = _res;\r\n                          return res.status(200).json(_res)\r\n                      }).catch(_error => {\r\n      \r\n                          _log.activity.error = _error.message\r\n                          _log.activity.status = false;\r\n                          return res.status(400).send({\r\n                              message: _error.message\r\n                          })\r\n                      }).finally(() => {\r\n      \r\n                          _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                      })\r\n                  }\r\n      //return res.status(200).send(\"test\");\r\n    } catch (err) {\r\n      res.status(500).send(err);\r\n    }\r\n  }\r\n  \r\n\r\n);\r\n\r\n\r\n\r\nrouter.post('/testimportTemplate', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"doc\";\r\n                workbook.Sheets[ws]['B1'].w = \"date\";\r\n                workbook.Sheets[ws]['C1'].w = \"remark\";\r\n                workbook.Sheets[ws]['D1'].w = \"num\";\r\n                workbook.Sheets[ws]['E1'].w = \"no\";\r\n                workbook.Sheets[ws]['F1'].w = \"detail\";\r\n                workbook.Sheets[ws]['G1'].w = \"amount\";\r\n                workbook.Sheets[ws]['H1'].w = \"unit\";\r\n                workbook.Sheets[ws]['I1'].w = \"price\";\r\n                workbook.Sheets[ws]['J1'].w = \"total\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n\r\n            console.log(JsonList);\r\n            var array_test = [];\r\n            let doc = \"\";\r\n            let remark = \"\";\r\n            let date = \"\";\r\n            for(let item of JsonList[0]){\r\n                if(item.doc){\r\n                    doc = item.doc;\r\n                    date = item.date;\r\n                    remark = item.remark;\r\n                }else if(!item.doc){\r\n                    item.doc = doc;\r\n                    item.date = date;\r\n                    item.remark = remark;\r\n                }\r\n                let temp = {\r\n                    \"doc\": item.doc,\r\n                    \"date\":item.date,\r\n                    \"remark\":item.remark,\r\n                    \"num\":item.num,\r\n                    \"no\":item.no,\r\n                    \"detail\":item.detail,\r\n                    \"amount\":item.amount,\r\n                    \"unit\":item.unit,\r\n                    \"price\":item.price,\r\n                    \"total\":item.total,\r\n                }\r\n                array_test.push(temp);\r\n            }\r\n            console.log(array_test);\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n          \r\n         \r\n           /*      _productPlaningService.importReadOrderForcast(req.body.year, req.body.month, req.body.oem_id, JsonList).then(_res => {\r\n                    _log.activity.response = _res;\r\n                    return res.status(200).json(_res)\r\n                }).catch(_error => {\r\n\r\n                    _log.activity.error = _error.message\r\n                    _log.activity.status = false;\r\n                    return res.status(400).send({\r\n                        message: _error.message\r\n                    })\r\n                }).finally(() => {\r\n\r\n                    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n                }) */\r\n         \r\n\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router\n\n//# sourceURL=webpack:///./app/routes/productPlaning.js?");

/***/ }),

/***/ "./app/routes/productionLine.js":
/*!**************************************!*\
  !*** ./app/routes/productionLine.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst productionLineService = __webpack_require__(/*! ../service/productionLineService */ \"./app/service/productionLineService.js\");\r\nconst _productionLineService = new productionLineService();\r\nconst _QueryProductionLine = __webpack_require__(/*! ../query/queryProductionLine.json */ \"./app/query/queryProductionLine.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a resource ProductionLine\");\r\n});\r\n\r\nrouter.get(\"/productionLineByOEM\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .productionLineAll(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getLines\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .lineAll()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getCycleTime\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .cycleTimeByProductId(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getProcess\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .processAll(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getSection\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .sectionAll(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/addCycleTime\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .addCycleTime(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/updateCycleTime\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .updateProduct(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getProcessByID\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _productionLineService\r\n    .fineCycleTineByProdId(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.get(\"/getSectionByCom\", _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n      body: req.body,\r\n      query: req.query,\r\n      header: req.headers,\r\n      payload: _getPayload(token),\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n      return res.status(400).send({\r\n        message: \"need correct level\",\r\n      });\r\n    }\r\n    _productionLineService\r\n      .getSectionByCom(req.query.id)\r\n      .then((_res) => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n      })\r\n      .catch((_error) => {\r\n        _log.activity.error = _error.message;\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n          message: _error.message,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        _logService\r\n          .log(_log)\r\n          .then((res) => console.log(\"save log\"))\r\n          .catch((e) => console.log(e.message));\r\n      });\r\n  });\r\n\r\n  \r\n  \r\nrouter.get(\"/getProcessBySection\", _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n      body: req.body,\r\n      query: req.query,\r\n      header: req.headers,\r\n      payload: _getPayload(token),\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n      return res.status(400).send({\r\n        message: \"need correct level\",\r\n      });\r\n    }\r\n    _productionLineService\r\n      .getProcessBySection(req.query.id)\r\n      .then((_res) => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n      })\r\n      .catch((_error) => {\r\n        _log.activity.error = _error.message;\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n          message: _error.message,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        _logService\r\n          .log(_log)\r\n          .then((res) => console.log(\"save log\"))\r\n          .catch((e) => console.log(e.message));\r\n      });\r\n  });\r\n\r\n  \r\n  \r\nrouter.get(\"/getMachineByProcess\", _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n      body: req.body,\r\n      query: req.query,\r\n      header: req.headers,\r\n      payload: _getPayload(token),\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n      return res.status(400).send({\r\n        message: \"need correct level\",\r\n      });\r\n    }\r\n    _productionLineService\r\n      .getMachineByProcess(req.query.id)\r\n      .then((_res) => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n      })\r\n      .catch((_error) => {\r\n        _log.activity.error = _error.message;\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n          message: _error.message,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        _logService\r\n          .log(_log)\r\n          .then((res) => console.log(\"save log\"))\r\n          .catch((e) => console.log(e.message));\r\n      });\r\n  });\r\n  \r\n\r\n  router.get(\"/getMachine\", _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n      body: req.body,\r\n      query: req.query,\r\n      header: req.headers,\r\n      payload: _getPayload(token),\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n      return res.status(400).send({\r\n        message: \"need correct level\",\r\n      });\r\n    }\r\n    _productionLineService\r\n      .machineAll()\r\n      .then((_res) => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n      })\r\n      .catch((_error) => {\r\n        _log.activity.error = _error.message;\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n          message: _error.message,\r\n        });\r\n      })\r\n      .finally(() => {\r\n        _logService\r\n          .log(_log)\r\n          .then((res) => console.log(\"save log\"))\r\n          .catch((e) => console.log(e.message));\r\n      });\r\n  });\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/productionLine.js?");

/***/ }),

/***/ "./app/routes/production_order_cts.js":
/*!********************************************!*\
  !*** ./app/routes/production_order_cts.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst productionOrderCtsService  = __webpack_require__(/*! ../service/productionOrderCtsService */ \"./app/service/productionOrderCtsService.js\");\r\nconst _productionOrderCtsService = new productionOrderCtsService();\r\n//const _QueryCustomer = require('../query/queryCustomer.json');\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource customer');\r\n});\r\n\r\n\r\nrouter.post('/productionCTSadd', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.addProductionCTS(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/genProductionNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.genProductionNo(req.query.order_number, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/getProductionByID', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.getProductionByID(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/updateProductionOrder', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.updateProductionOrder(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filterProductionCTS', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.filterProductionCTS(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/delProductionCTS', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.delProductionCTS(req.query.id ,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/getProduction_in_reportByID', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.getProduction_in_reportByID(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/updateSatatus', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.updateSatatus(req.query.id,user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/filterProductByCustomer', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _productionOrderCtsService.filterProductByCustomer(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/production_order_cts.js?");

/***/ }),

/***/ "./app/routes/project.js":
/*!*******************************!*\
  !*** ./app/routes/project.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst projectService = __webpack_require__(/*! ../service/projectService */ \"./app/service/projectService.js\");\r\nconst _projectService = new projectService();\r\nconst _QueryProject = __webpack_require__(/*! ../query/queryProject.json */ \"./app/query/queryProject.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _projectService.addProject(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _projectService.updateProject(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _projectService.delProject(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _projectService.findByIdProject(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/GetMenu', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _projectService.GetMenu().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _projectService.filterProject(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/project.js?");

/***/ }),

/***/ "./app/routes/promotion.js":
/*!*********************************!*\
  !*** ./app/routes/promotion.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst promotionService = __webpack_require__(/*! ../service/promotionService */ \"./app/service/promotionService.js\");\r\nconst _prommotionService = new promotionService();\r\nconst _QueryPromotion = __webpack_require__(/*! ../query/queryPromotion.json */ \"./app/query/queryPromotion.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _prommotionService.addPromotion(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _prommotionService.filterPromotion(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _prommotionService.findPromotionById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _prommotionService.updatePromotion(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _prommotionService.delPromotionById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/promotion.js?");

/***/ }),

/***/ "./app/routes/readLogAccess.js":
/*!*************************************!*\
  !*** ./app/routes/readLogAccess.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst fs = __webpack_require__(/*! fs */ \"fs\");\r\nconst path = __webpack_require__(/*! path */ \"path\");\r\n\r\nrouter.get('/list', async (req, res, next) => {\r\n    try {\r\n        var dir = _config.logAccessPath;\r\n        var files = fs.readdirSync(dir);\r\n        files.sort(function (a, b) {\r\n            return fs.statSync(dir + b).mtime.getTime() - fs.statSync(dir + a).mtime.getTime();\r\n        });\r\n        res.render('listLog', {\r\n            list: files\r\n        });\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n        next(e);\r\n    }\r\n});\r\n\r\nrouter.get('/:file', async (req, res, next) => {\r\n    try {\r\n        if (req.params.file) {\r\n            var dir = _config.logAccessPath;\r\n            var fileName = path.resolve(dir, req.params.file);\r\n            fs.access(fileName,async(error)  => {\r\n                if (!error) {\r\n                    res.sendFile(path.resolve(dir, req.params.file),{},(err)=>{\r\n                        if (err) {\r\n                            next(err)\r\n                        }\r\n                    });\r\n                    \r\n                } else {\r\n                    return res.status(404).send(\"The file does not exist\");\r\n                }\r\n            });\r\n        } else {\r\n            return res.status(404).send(\"\");\r\n        }\r\n\r\n\r\n    } catch (e) {\r\n        console.log(e)\r\n        next(e);\r\n    }\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/readLogAccess.js?");

/***/ }),

/***/ "./app/routes/report.js":
/*!******************************!*\
  !*** ./app/routes/report.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst reportService = __webpack_require__(/*! ../service/reportService */ \"./app/service/reportService.js\");\r\nconst _reportService = new reportService();\r\nconst _QueryReport= __webpack_require__(/*! ../query/queryReport.json */ \"./app/query/queryReport.json\");\r\nvar _getAdminIDByToken = authRouter.getAdminIDByToken;\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource Permission');\r\n});\r\n\r\n\r\n\r\nrouter.post('/DOReport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _reportService.DOReport(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/report.js?");

/***/ }),

/***/ "./app/routes/report_pdf.js":
/*!**********************************!*\
  !*** ./app/routes/report_pdf.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst report_pdfService = __webpack_require__(/*! ../service/report_pdfService */ \"./app/service/report_pdfService.js\");\r\nconst _report_pdfService= new report_pdfService();\r\n/* const _QueryEnd_user = require('../query/queryEnd_user.json'); */\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource project');\r\n});\r\n\r\nrouter.post('/FilterReportDD', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.FilterReportDD(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/FilterReportDR', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.FilterReportDR(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/GetDaily_outstanding_bill', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.GetDaily_outstanding_bill(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/GetMonth_travel_reportData', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.GetMonth_travel_reportData(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetDaily_sale', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.GetDaily_sale(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n// ค่าซ่อมรีพอต ========================================\r\n\r\nrouter.post('/fileter_Rpair_Cost_Report', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    // console.log(\"body\",req.body);\r\n    _report_pdfService.fileter_Rpair_Cost_Report(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Getmonthly_fuel_consumption_summary', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.Getmonthly_fuel_consumption_summary(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/GetWire_mace_STP', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.GetWire_mace_STP(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Self_Pickup_report', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _report_pdfService.Self_Pickup_report(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/report_pdf.js?");

/***/ }),

/***/ "./app/routes/snManagement.js":
/*!************************************!*\
  !*** ./app/routes/snManagement.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ./auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst snManagementService = __webpack_require__(/*! ../service/snManagementService */ \"./app/service/snManagementService.js\");\r\nconst _snManagementService = new snManagementService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource external');\r\n});\r\n\r\n\r\n\r\nrouter.post('/snAdd', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    // console.log(\"Grtry\",req.body);\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _snManagementService.snAdd(req.body,user_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/hydroAdd', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n/*      console.log(\"Grtry\",req.body); */\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _snManagementService.hydroAdd(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/airLeakAdd', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n     //console.log(\"Grtry\",req.body);\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _snManagementService.airLeakAdd(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n     //console.log(\"Grtry\",req.body);\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _snManagementService.filter(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/snManagement.js?");

/***/ }),

/***/ "./app/routes/sparePart.js":
/*!*********************************!*\
  !*** ./app/routes/sparePart.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst sparePartService = __webpack_require__(/*! ../service/sparePartService */ \"./app/service/sparePartService.js\");\r\nconst _sparePartServiceService = new sparePartService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource Spare Part');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _sparePartServiceService.addSparePart(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n \r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _sparePartServiceService.updateSparePart(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _sparePartServiceService.delSparePart(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _sparePartServiceService.findByIdSparePart(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _sparePartServiceService.filterSparePart(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/amountSparePartInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _sparePartServiceService.updateSparePartInOut(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/importExcel', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.body.company_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    if (!req.body.product_id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                workbook.Sheets[ws]['A1'].w = \"no\";\r\n                workbook.Sheets[ws]['B1'].w = \"spare_part_no\";\r\n                workbook.Sheets[ws]['C1'].w = \"spare_part_name\";\r\n                workbook.Sheets[ws]['D1'].w = \"amount\";\r\n                workbook.Sheets[ws]['E1'].w = \"description\";\r\n                let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws])\r\n                if (tempJson.length > 0) JsonList.push(tempJson);\r\n            })\r\n            if (JsonList.length == 0) {\r\n                return res.status(400).send({\r\n                    message: \"need parameter\"\r\n                })\r\n            }\r\n            _sparePartServiceService.importExcelSparePart(JsonList, req.body.company_id, req.body.product_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n        }\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/sparePart.js?");

/***/ }),

/***/ "./app/routes/supplier.js":
/*!********************************!*\
  !*** ./app/routes/supplier.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst supplierService = __webpack_require__(/*! ../service/supplierService */ \"./app/service/supplierService.js\");\r\nconst _supplierService = new supplierService();\r\nconst _QuerySupplier = __webpack_require__(/*! ../query/querySupplier.json */ \"./app/query/querySupplier.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource supplier');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.addSupplier(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.updateSupplier(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.delSupplier(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _supplierService.findByIdSupplier(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.filterSupplier(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/supplier.js?");

/***/ }),

/***/ "./app/routes/toolingRouter.js":
/*!*************************************!*\
  !*** ./app/routes/toolingRouter.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst toolingService = __webpack_require__(/*! ../service/toolingService */ \"./app/service/toolingService.js\");\r\nconst _toolingService = new toolingService();\r\nconst _QueryTooling = __webpack_require__(/*! ../query/queryTooling.json */ \"./app/query/queryTooling.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nrouter.get(\"/\", function (req, res, next) {\r\n  res.render(\"index\", {\r\n    title: \"Express\",\r\n  });\r\n});\r\n\r\nrouter.post('/updateToolingApi', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.updateToolingM(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/updateToolingInquiryApi', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.updateToolingInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/addToolingApi', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.addToolingM(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/addToolingInquiryApi', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.addToolingInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.get(\"/getToolingDataByIdApi\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingDataById(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getToolingInquiryByIdApi\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingInquiryById(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/generateIQToolingApi\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  } */\r\n  _toolingService\r\n    .generateIQTooling()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/loadSuggestionOfTooling\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  /* if (!req.body) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  } */\r\n  _toolingService\r\n    .loadSuggestionOfTooling()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/getToolingInquiry\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.body) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingInquiry(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/getToolingPO\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.body) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingPO(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n// router.post('/add', _auth, async (req, res, next) => {\r\n//     var token = req.headers.authorization;\r\n//     var user_id = _getUserIDByToken(token);\r\n//     let _logService = new logService();\r\n//     let _log = _logService.model;\r\n//     _log.activity.parameter = {\r\n//         \"body\": req.body,\r\n//         \"query\": req.query,\r\n//         \"header\": req.headers,\r\n//         \"payload\": _getPayload(token)\r\n//     };\r\n//     _log.activity.path = req.baseUrl + req.path;\r\n//     if (!user_id) {\r\n//         return res.status(400).send({\r\n//             message: \"need correct level\"\r\n//         })\r\n//     }\r\n//     _productService.addProduct(req.body, user_id).then(_res => {\r\n//         _log.activity.response = _res;\r\n//         return res.status(200).json(_res)\r\n//     }).catch(_error => {\r\n//         _log.activity.error = _error.message\r\n//         _log.activity.status = false;\r\n//         return res.status(400).send({\r\n//             message: _error.message\r\n//         })\r\n//     }).finally(() => {\r\n//         _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n//     })\r\n// });\r\n\r\n// router.get('/findById', _auth, async (req, res, next) => {\r\n//     var token = req.headers.authorization;\r\n//     var user_id = _getUserIDByToken(token);\r\n//     let _logService = new logService();\r\n//     let _log = _logService.model;\r\n//     _log.activity.parameter = {\r\n//         \"body\": req.body,\r\n//         \"query\": req.query,\r\n//         \"header\": req.headers,\r\n//         \"payload\": _getPayload(token)\r\n//     };\r\n//     _log.activity.path = req.baseUrl + req.path;\r\n//     if (!user_id) {\r\n//         return res.status(400).send({\r\n//             message: \"need correct level\"\r\n//         })\r\n//     }\r\n//     if (!req.query.id) {\r\n//         return res.status(400).send({\r\n//             message: \"need parameter\"\r\n//         })\r\n//     }\r\n//     _productService.findByIdProduct(req.query.id).then(_res => {\r\n//         _log.activity.response = _res;\r\n//         return res.status(200).json(_res)\r\n//     }).catch(_error => {\r\n//         _log.activity.error = _error.message\r\n//         _log.activity.status = false;\r\n//         return res.status(400).send({\r\n//             message: _error.message\r\n//         })\r\n//     }).finally(() => {\r\n//         _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n//     })\r\n// });\r\n\r\nrouter.get(\"/getToolingSupplier\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingSupplier(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/getToolingBrand\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingBrand(req.query.id, req.query.id2)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/filterToolingM\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .filterToolingM(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/filterToolingInquirySelect\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .filterToolingInquirySelect(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/deleteTooling\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .deleteTooling(req.query.id, user_id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/importExcel\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  if (!req.body.oem_id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\",\r\n    });\r\n  }\r\n  let mimeTypeExcel = [mime.getType(\"xlsx\"), mime.getType(\"xls\")];\r\n  try {\r\n    if (!req.files) {\r\n      res.send({\r\n        status: false,\r\n        message: \"No file uploaded\",\r\n      });\r\n    } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n      res.send({\r\n        status: false,\r\n        message: \"No file XLSX\",\r\n      });\r\n    } else {\r\n      var workbook = XLSX.read(req.files.file.data, {\r\n        type: \"buffer\",\r\n      });\r\n      var sheet_name_list = workbook.SheetNames;\r\n      var JsonList = [];\r\n      sheet_name_list.forEach((ws) => {\r\n        // workbook.Sheets[ws][\"A1\"].w = \"no\";\r\n        workbook.Sheets[ws][\"B1\"].w = \"tooling_code\";\r\n        workbook.Sheets[ws][\"C1\"].w = \"tooling_name\";\r\n        workbook.Sheets[ws][\"D1\"].w = \"brand\";\r\n        workbook.Sheets[ws][\"E1\"].w = \"max_stock\";\r\n        workbook.Sheets[ws][\"F1\"].w = \"min_stock\";\r\n        workbook.Sheets[ws][\"G1\"].w = \"consumption\";\r\n        workbook.Sheets[ws][\"H1\"].w = \"ratio\";\r\n        let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n        if (tempJson.length > 0) JsonList.push(tempJson);\r\n      });\r\n      if (JsonList.length == 0) {\r\n        return res.status(400).send({\r\n          message: \"No Information Availble\",\r\n        });\r\n      }\r\n      _toolingService\r\n        .importExcelTooling(\r\n          JsonList,\r\n          user_id,\r\n          req.body.company_id,\r\n          req.body.oem_id\r\n        )\r\n        .then((_res) => {\r\n          _log.activity.response = _res;\r\n          return res.status(200).json(_res);\r\n        })\r\n        .catch((_error) => {\r\n          _log.activity.error = _error.message;\r\n          _log.activity.status = false;\r\n          return res.status(400).send({\r\n            message: _error.message,\r\n          });\r\n        })\r\n        .finally(() => {\r\n          _logService\r\n            .log(_log)\r\n            .then((res) => console.log(\"save log\"))\r\n            .catch((e) => console.log(e.message));\r\n        });\r\n    }\r\n  } catch (err) {\r\n    res.status(500).send(err);\r\n  }\r\n});\r\nrouter.post('/getfilterTooling', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.getfilterTooling(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.get('/genLotNo', _auth, async (req, res, next) => {\r\n\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.genLotNo(req.query.oem_id).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/SaveLotInBound', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.SaveLotInBound(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/addAmountOfToolingApi', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.addAmountOfTooling(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/getLotInStock', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.getLotInStock(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/getLotHistory', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.getLotHistory(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/SaveLotOutBound', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.SaveLotOutBound(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.get('/getlog_detailTooling', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\"\r\n    })\r\n  }\r\n\r\n  //console.log(req.query.id);\r\n  _toolingService.getlog_detailTooling(req.query.id).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\nrouter.post('/SaveLotOutBound_FIFO', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.SaveLotOutBound_FIFO(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\nrouter.get('/delToolingPOById', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\"\r\n    })\r\n  }\r\n\r\n  //console.log(req.query.id);\r\n  _toolingService.delToolingPOById(req.query.id).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/getToolingBySupplierId', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  /* if (!req.query.id) {\r\n    return res.status(400).send({\r\n      message: \"need parameter\"\r\n    })\r\n  } */\r\n\r\n  //console.log(req.query.id);\r\n  _toolingService.getToolingBySupplierId(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.get(\"/getToolingReceiveStatus\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _toolingService\r\n    .getToolingReceiveOption()\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.get(\"/GetAmountTooling\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _toolingService.GetAmountTooling(req.query.id)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post('/sendEmailToolingInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.sendEmailToolingInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/filterInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.filterInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\nrouter.post('/GetPOByInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.GetPOByInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/saveDrafPOByInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.saveDrafPOByInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/genPOToolingInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.genPOToolingInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nrouter.post('/updatePOToolingInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.updatePOToolingInquiry(req.body).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\n\r\n\r\nrouter.get('/finePOToolingInquiry', _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    \"body\": req.body,\r\n    \"query\": req.query,\r\n    \"header\": req.headers,\r\n    \"payload\": _getPayload(token)\r\n  };\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\"\r\n    })\r\n  }\r\n  _toolingService.finePOToolingInquiry(req.query.id).then(_res => {\r\n    _log.activity.response = _res;\r\n    return res.status(200).json(_res)\r\n  }).catch(_error => {\r\n    _log.activity.error = _error.message\r\n    _log.activity.status = false;\r\n    return res.status(400).send({\r\n      message: _error.message\r\n    })\r\n  }).finally(() => {\r\n    _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n  })\r\n});\r\n\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/toolingRouter.js?");

/***/ }),

/***/ "./app/routes/trackingTag.js":
/*!***********************************!*\
  !*** ./app/routes/trackingTag.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst trackingTagService = __webpack_require__(/*! ../service/trackingTagService */ \"./app/service/trackingTagService.js\");\r\nconst _trackingTagService = new trackingTagService();\r\nconst _QueryTrackingTag = __webpack_require__(/*! ../query/queryTrackingTag.json */ \"./app/query/queryTrackingTag.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource trackingTag');\r\n});\r\n\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _trackingTagService.addTrackingTag(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n/* \r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.updateSupplier(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\n\r\n/* router.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.delSupplier(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\n/* router.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _supplierService.findByIdSupplier(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n\r\n/* router.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _supplierService.filterSupplier(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); */\r\n/* \r\nrouter.get('/All', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _trackingTagService.trackingTagAll(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n */\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/trackingTag.js?");

/***/ }),

/***/ "./app/routes/upload.js":
/*!******************************!*\
  !*** ./app/routes/upload.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n// mime.getType('txt');                    // ⇨ 'text/plain'\r\n// mime.getExtension('text/plain');        // ⇨ 'txt'\r\nvar router = express.Router();\r\nrouter.post('/', async (req, res) => {\r\n    res.send({\r\n        message: 'file uploaded'\r\n    });\r\n});\r\nrouter.post('/profile', _auth, async (req, res,next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    var token = req.headers.authorization;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else {\r\n         \r\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\r\n            //console.log(req.files.Profile); \r\n          \r\n            let profile = req.files.Profile; \r\n            \r\n            let _genName = uuidv4() + \"_\" + Buffer.from(profile.name, 'latin1').toString('utf8') //profile.name.toString(\"utf-8\"));\r\n            let path = req.body.typeFile;\r\n            let rootPath = \"./uploads/\"\r\n            let fullPath = rootPath + path + \"/\" + _genName\r\n            //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\r\n            profile.mv(fullPath);\r\n            let temp = {\r\n                status: true,\r\n                message: 'File is uploaded',\r\n                data: {\r\n                    orgin_name: Buffer.from(profile.name, 'latin1').toString('utf8'), // profile.name,\r\n                    name: _genName,\r\n                    path: Buffer.from(fullPath).toString('base64'),\r\n                    mimetype: profile.mimetype,\r\n                    size: profile.size\r\n                }\r\n            }\r\n            _log.activity.response = temp;\r\n            //send response\r\n            console.log(temp);\r\n            res.send(temp);\r\n        }\r\n    } catch (err) {\r\n      \r\n        _log.activity.error = err.message\r\n        _log.activity.status = false;\r\n        res.status(500).send(err);\r\n       \r\n    } finally {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    }\r\n});\r\nrouter.post('/document',_auth, async (req, res,next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    var token = req.headers.authorization;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else {\r\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\r\n         \r\n         \r\n                let profile =Array.isArray(req.files.Profile)? req.files.Profile:[req.files.Profile];\r\n                let data = [];\r\n                profile.forEach(p => {\r\n                    let _genName = uuidv4() + \"_\" + Buffer.from( p.name , 'latin1').toString('utf8');\r\n                    let path = req.body.typeFile;\r\n                    let rootPath = \"./uploads/\"\r\n                    let fullPath = rootPath + path + \"/\" + _genName\r\n                    //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\r\n                    p.mv(fullPath);\r\n                    data.push({\r\n                        orgin_name: Buffer.from( p.name , 'latin1').toString('utf8'),\r\n                        name: _genName,\r\n                        path: Buffer.from(fullPath).toString('base64'),\r\n                        mimetype: p.mimetype,\r\n                        size: p.size\r\n                    })\r\n                })\r\n                _log.activity.response = data;\r\n                //send response\r\n                res.send({\r\n                    status: true,\r\n                    message: 'File is uploaded',\r\n                    data: data\r\n                });\r\n            \r\n        }\r\n    } catch (err) {\r\n        _log.activity.error = err.message\r\n        _log.activity.status = false;\r\n        res.status(500).send(err);\r\n    } finally {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    }\r\n});\r\n\r\nrouter.post('/excel', async (req, res,next) => {\r\n    console.log(mime.getType('xlsx') + \"<---->\" + req.files.file.mimetype)\r\n    let mimeTypeExcel = [mime.getType('xlsx'), mime.getType('xls')];\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else if (mimeTypeExcel.indexOf(req.files.file.mimetype) == -1) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file XLSX'\r\n            });\r\n        } else {\r\n            var workbook = XLSX.read(req.files.file.data, {\r\n                type: 'buffer'\r\n            });\r\n            var sheet_name_list = workbook.SheetNames;\r\n            var JsonList = [];\r\n            sheet_name_list.forEach(ws => {\r\n                JsonList.push(XLSX.utils.sheet_to_json(workbook.Sheets[ws]));\r\n            })\r\n            res.status(200).json(JsonList);\r\n        }\r\n    } catch (err) { \r\n        res.status(500).send(err);\r\n    } \r\n})\r\n\r\nrouter.post('/profileUnAuth', /* _auth, */ async (req, res,next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    // var token = req.headers.authorization;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        // \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    try {\r\n        if (!req.files) {\r\n            res.send({\r\n                status: false,\r\n                message: 'No file uploaded'\r\n            });\r\n        } else {\r\n         \r\n            //Use the name of the input field (i.e. \"avatar\") to retrieve the uploaded file\r\n            //console.log(req.files.Profile); \r\n          \r\n            let profile = req.files.Profile; \r\n            \r\n            let _genName = uuidv4() + \"_\" + Buffer.from(profile.name, 'latin1').toString('utf8') //profile.name.toString(\"utf-8\"));\r\n            let path = req.body.typeFile;\r\n            let rootPath = \"./uploads/\"\r\n            let fullPath = rootPath + path + \"/\" + _genName\r\n            //Use the mv() method to place the file in upload directory (i.e. \"uploads\")\r\n            profile.mv(fullPath);\r\n            let temp = {\r\n                status: true,\r\n                message: 'File is uploaded',\r\n                data: {\r\n                    orgin_name: Buffer.from(profile.name, 'latin1').toString('utf8'), // profile.name,\r\n                    name: _genName,\r\n                    path: Buffer.from(fullPath).toString('base64'),\r\n                    mimetype: profile.mimetype,\r\n                    size: profile.size\r\n                }\r\n            }\r\n            _log.activity.response = temp;\r\n            //send response\r\n            console.log(temp);\r\n            res.send(temp);\r\n        }\r\n    } catch (err) {\r\n      \r\n        _log.activity.error = err.message\r\n        _log.activity.status = false;\r\n        res.status(500).send(err);\r\n       \r\n    } finally {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    }\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/upload.js?");

/***/ }),

/***/ "./app/routes/users.js":
/*!*****************************!*\
  !*** ./app/routes/users.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\");\r\n\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst userService = __webpack_require__(/*! ../service/userService */ \"./app/service/userService.js\");\r\nconst _userService = new userService();\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    res.send('respond with a resource');\r\n});\r\n\r\nrouter.get('/q', function (req, res, next) {\r\n    res.send({ \"aa\": \"a\", \"b\": \"bbbbbbcc\" });\r\n});\r\n\r\nrouter.get('/getuser', function (req, res, next) {\r\n    _baseService.selectAll('login').then(_res => {\r\n        res.status(200).json(_res.rows)\r\n    }).catch(_error => {\r\n        res.status(400).send({ message: _error.message })\r\n    })\r\n\r\n});\r\nrouter.get('/getuser2', function (req, res, next) {\r\n    _baseService.baseQueryWithParameter(_QueryLogin.getById, [1]).then(_res => {\r\n        res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        res.status(400).send({ message: _error.message })\r\n    })\r\n\r\n});\r\n\r\n\r\nrouter.get('/getUserById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.getUserById(user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.update(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/changePS', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.changePS(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/checkGenerateAccount', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.checkGenerateAccount(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Generate_Account', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.Generate_Account(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/checkInfoEmpLineApi', async (req, res, next) => {\r\n\r\n    // var token = req.headers.authorization;\r\n    // var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    console.log('req.body', req.body);\r\n\r\n    // _log.activity.parameter = {\r\n    //     \"body\": req.body,\r\n    //     \"query\": req.query,\r\n    //     \"header\": req.headers,\r\n    //     \"payload\": _getPayload(token)\r\n    // };\r\n    // _log.activity.path = req.baseUrl + req.path;\r\n    // if (!user_id) {\r\n    //     return res.status(400).send({\r\n    //         message: \"need correct level\"\r\n    //     })\r\n    // }\r\n\r\n    _userService.checkInfoEmpLineByIdLine(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res);\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/saveLineApi', async (req, res, next) => {\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": \"\"\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n\r\n    _userService.saveLineApi(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/checkGenerateAccountHR', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.checkGenerateAccountHR(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/resetPassword', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _userService.resetPassword(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/updateStatusUsingOfUser', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    console.log('check kkkkkkkkkkkk');\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    } // updateStatusUsingOfUser\r\n    _userService.updateStatusUsingOfUser(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/users.js?");

/***/ }),

/***/ "./app/routes/warehouse.js":
/*!*********************************!*\
  !*** ./app/routes/warehouse.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst warehouseService = __webpack_require__(/*! ../service/warehouseService */ \"./app/service/warehouseService.js\");\r\nconst _warehouseService = new warehouseService();\r\nconst _QueryWarehouse = __webpack_require__(/*! ../query/queryWarehouse.json */ \"./app/query/queryWarehouse.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource warehouse');\r\n});\r\n\r\nrouter.post('/add_warehouse', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.addWarehouse_warehouse(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n  router.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.updateWarehouse(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _warehouseService.delWarehouse(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _warehouseService.findByIdWarehouse(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterWarehouse(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.post('/filter/warehouse', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterWarehouse(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\nrouter.post('/filter/rack', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterRack(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.post('/filter/product_on_rack', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterProductOnRack(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\nrouter.get('/findItemWarehouseById', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.findItemWarehouseById(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n/* router.get('/warehouse_type', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n});  */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n////////////////////// ของ rack //////////////////////////////\r\n\r\nrouter.post('/filter_rack', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterWarehouse_type_rack(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n\r\n\r\n});\r\n\r\nrouter.get('/filter_rack_dp', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterWarehouse_type_rack_dp(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n\r\n\r\n});\r\n\r\n\r\nrouter.get('/getwarehouse', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _warehouseService.getWarehouse().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/add_rack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.addWarehouse_rack(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/findById_rack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _warehouseService.findByIdWarehouse_rack(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update_rack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.updateWarehouse_rack(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del_rack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _warehouseService.delWarehouse_rack(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.post('/add_rack_floor', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.addWarehouse_rack_floor(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter_rack_floor', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.filterWarehouse_type_rack_floor(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n\r\n\r\n});\r\n\r\nrouter.get('/findById_rack_floor', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _warehouseService.findByIdWarehouse_rack_floor(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getWarehoueProduct', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n  \r\n    _warehouseService.getWarehoueProduct().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update_rack_floor', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseService.updateWarehouse_rack_floor(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/del_rack_floor', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _warehouseService.delWarehouse_rack_floor(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\nrouter.get('/getwarehouse_rack', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    \r\n    _warehouseService.getWarehouse_rack().then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/warehouse.js?");

/***/ }),

/***/ "./app/routes/warehouseCTS.js":
/*!************************************!*\
  !*** ./app/routes/warehouseCTS.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst warehouseCTSService = __webpack_require__(/*! ../service/warehouseCTSService */ \"./app/service/warehouseCTSService.js\");\r\nconst _warehouseCTSService = new warehouseCTSService();\r\nconst _QueryWareHouseCTS = __webpack_require__(/*! ../query/querywareHouseCTS.json */ \"./app/query/querywareHouseCTS.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\nrouter.post('/filterMaterial', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    console.log(\"เเข้า\");\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.filterMaterialView(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n}); \r\n\r\n\r\n\r\nrouter.post('/productMatCTSfilter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.productMatCTSfilter(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Wipprodfilter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.Wipprodfilter(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.post('/filterChuplog', _auth, async (req, res, next) => {\r\n    /* filter ชุบ Edit Amount */\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.filterChuplog(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filterlogFgEditCts', _auth, async (req, res, next) => {\r\n     /* filter Fg Edit Amount ปรับใหม่*/\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.filterlogFgEditCts(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/filterlogPackCts', _auth, async (req, res, next) => {\r\n    /* filter Pack Edit Amount */\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouseCTSService.filterlogPackCts(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/warehouseCTS.js?");

/***/ }),

/***/ "./app/routes/warehouse_type.js":
/*!**************************************!*\
  !*** ./app/routes/warehouse_type.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst warehouse_typeService = __webpack_require__(/*! ../service/warehouse_typeService */ \"./app/service/warehouse_typeService.js\");\r\nconst _warehouse_typeService = new warehouse_typeService();\r\nconst _QueryWarehouse_type = __webpack_require__(/*! ../query/queryWarehouse_type.json */ \"./app/query/queryWarehouse_type.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource warehouse_type');\r\n});\r\n\r\nrouter.post('/add', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouse_typeService.addWarehouse_type(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouse_typeService.filterWarehouse_type(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _warehouse_typeService.findByIdWarehouse_type(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/update', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _warehouse_typeService.updateWarehouse_type(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _warehouse_typeService.delWarehouse_type(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/warehouse_type.js?");

/***/ }),

/***/ "./app/routes/winSpeed.js":
/*!********************************!*\
  !*** ./app/routes/winSpeed.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst winSpeedService = __webpack_require__(/*! ../service/winSpeedService */ \"./app/service/winSpeedService.js\");\r\nconst _winSpeedService = new winSpeedService();\r\nconst _QuerywinSpeed = __webpack_require__(/*! ../query/querywinSpeed.json */ \"./app/query/querywinSpeed.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n  return res.send(\"respond with a winSpeed\");\r\n});\r\n\r\nrouter.post(\"/filterPO\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n  console.log(\"เข้า\");\r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _winSpeedService\r\n    .filterPO(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/getHistoryStock\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n \r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _winSpeedService\r\n    .getHistoryStock(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nrouter.post(\"/checkTag\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n \r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _winSpeedService\r\n    .checkTag(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\n\r\nrouter.post(\"/saveHandheld\", _auth, async (req, res, next) => {\r\n  var token = req.headers.authorization;\r\n  var user_id = _getUserIDByToken(token);\r\n  let _logService = new logService();\r\n  let _log = _logService.model;\r\n  _log.activity.parameter = {\r\n    body: req.body,\r\n    query: req.query,\r\n    header: req.headers,\r\n    payload: _getPayload(token),\r\n  };\r\n \r\n  _log.activity.path = req.baseUrl + req.path;\r\n  if (!user_id) {\r\n    return res.status(400).send({\r\n      message: \"need correct level\",\r\n    });\r\n  }\r\n  _winSpeedService\r\n    .saveHandheld(req.body)\r\n    .then((_res) => {\r\n      _log.activity.response = _res;\r\n      return res.status(200).json(_res);\r\n    })\r\n    .catch((_error) => {\r\n      _log.activity.error = _error.message;\r\n      _log.activity.status = false;\r\n      return res.status(400).send({\r\n        message: _error.message,\r\n      });\r\n    })\r\n    .finally(() => {\r\n      _logService\r\n        .log(_log)\r\n        .then((res) => console.log(\"save log\"))\r\n        .catch((e) => console.log(e.message));\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n\n\n//# sourceURL=webpack:///./app/routes/winSpeed.js?");

/***/ }),

/***/ "./app/routes/wipProdInOutCTS.js":
/*!***************************************!*\
  !*** ./app/routes/wipProdInOutCTS.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\n\r\nconst WipProdInOutCTSService = __webpack_require__(/*! ../service/WipProdInOutCTSService */ \"./app/service/WipProdInOutCTSService.js\");\r\nconst _WipProdInOutCTSService = new WipProdInOutCTSService();\r\n\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\n\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.filterWipProdInOut(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/getWipProdMGT', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.getWipProdMGT(req.query.product_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.get('/genBoxNo', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.genBoxNo().then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/checkRefBox', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _WipProdInOutCTSService.checkRefBox(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/saveInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.saveInOut(req.body,user_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.post('/checkLotNoOrderCts', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.checkLotNoOrderCts(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/getWipProdinreport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.getWipProdinreport(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.get('/GetLotWipProdInStock', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.GetLotWipProdInStock(req.query.product_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\nrouter.get('/GetLotWipProdHistory', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.GetLotWipProdHistory(req.query.product_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/getProductionOrder', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.getProductionOrder(req.query.product_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/getWiplogProdinreport', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _WipProdInOutCTSService.getWiplogProdinreport(req.body).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/wipProdInOutCTS.js?");

/***/ }),

/***/ "./app/routes/wipshupOutInCTS.js":
/*!***************************************!*\
  !*** ./app/routes/wipshupOutInCTS.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst wipshupOutInCTSService = __webpack_require__(/*! ../service/wipshupOutInCTSService */ \"./app/service/wipshupOutInCTSService.js\");\r\nconst _wipshupOutInCTSService = new wipshupOutInCTSService();\r\nconst _QueryWipshupOutInCTS = __webpack_require__(/*! ../query/queryWipshupOutInCTS.json */ \"./app/query/queryWipshupOutInCTS.json\");\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nvar mime = __webpack_require__(/*! mime */ \"mime\");\r\nvar multiparty = __webpack_require__(/*! multiparty */ \"multiparty\");\r\n\r\nrouter.get('/', function (req, res, next) {\r\n    return res.send('respond with a resource material');\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/filterWipCTS', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.filterWipshup(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getMasterplating_plant', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getMasterplating_plant(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.get('/getMasterplating_plantByProductId', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getMasterplating_plantByProductId(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/getLotNo', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getCoilNo(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\n\r\nrouter.get('/getProductBy', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getProductByID(req.query.product_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/getLotInStock', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getLotInStock(req.query.product_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nrouter.post('/saveInOut', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    try {\r\n        _wipshupOutInCTSService.saveInOut(req.body,user_id).then(_res => {\r\n            _log.activity.response = _res;\r\n            return res.status(200).json(_res)\r\n        }).catch(_error => {\r\n            _log.activity.error = _error.message\r\n            _log.activity.status = false;\r\n            return res.status(400).send({\r\n                message: _error.message\r\n            })\r\n        }).finally(() => {\r\n            _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n        })\r\n\r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\nrouter.post('/qcApproved', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _wipshupOutInCTSService.qcApproved(req.body).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nrouter.get('/GetLotWipChupHistory', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n\r\n    try {\r\n        _wipshupOutInCTSService.GetLotWipChupHistory(req.query.product_id).then(_res => {\r\n                _log.activity.response = _res;\r\n                return res.status(200).json(_res)\r\n            }).catch(_error => {\r\n                _log.activity.error = _error.message\r\n                _log.activity.status = false;\r\n                return res.status(400).send({\r\n                    message: _error.message\r\n                })\r\n            }).finally(() => {\r\n                _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n            })\r\n  \r\n    } catch (err) {\r\n        res.status(500).send(err);\r\n    }\r\n});\r\n\r\nrouter.post('/getWipShupinreport', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getWipShupinreport(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getWipShuploginreport', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getWipShuploginreport(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.post('/genOrderChupIN', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.genOrderChup(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/getWipShupplatingbillingreport', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wipshupOutInCTSService.getWipShupplatingbillingreport(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/wipshupOutInCTS.js?");

/***/ }),

/***/ "./app/routes/wire_Ready_toUse.js":
/*!****************************************!*\
  !*** ./app/routes/wire_Ready_toUse.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const express = __webpack_require__(/*! express */ \"express\");\r\nconst router = express.Router();\r\nconst baseService = __webpack_require__(/*! ../service/baseService */ \"./app/service/baseService.js\");\r\nconst _baseService = new baseService();\r\nconst authRouter = __webpack_require__(/*! ../routes/auth */ \"./app/routes/auth.js\");\r\nconst logService = __webpack_require__(/*! ../service/logservice */ \"./app/service/logservice.js\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst wire_ready_toUseService = __webpack_require__(/*! ../service/wire_ready_toUseService */ \"./app/service/wire_ready_toUseService.js\");\r\nconst _wire_ready_toUseService = new wire_ready_toUseService();\r\n\r\nvar _getUserIDByToken = authRouter.getUserIDByToken;\r\nvar _getPayload = authRouter.getPayload;\r\nvar _auth = authRouter.requireJWTAuth;\r\n\r\nrouter.get(\"/\", function (req, res, next) {\r\n    return res.send(\"respond with a resource project\");\r\n  });\r\n\r\n  \r\nrouter.post('/filter', _auth, async (req, res, next) => {\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wire_ready_toUseService.filter(req.body).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n// ADD Wrie Stel\r\n\r\n\r\nrouter.post('/addwire', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wire_ready_toUseService.addwire(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\nrouter.post('/Updatewire', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    _wire_ready_toUseService.Updatewire(req.body, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\nrouter.get('/findById', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n    if (!req.query.id) {\r\n        return res.status(400).send({\r\n            message: \"need parameter\"\r\n        })\r\n    }\r\n    _wire_ready_toUseService.findByIdwire(req.query.id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\nrouter.get('/del', _auth, async (req, res, next) => {\r\n\r\n    var token = req.headers.authorization;\r\n    var user_id = _getUserIDByToken(token);\r\n    let _logService = new logService();\r\n    let _log = _logService.model;\r\n    _log.activity.parameter = {\r\n        \"body\": req.body,\r\n        \"query\": req.query,\r\n        \"header\": req.headers,\r\n        \"payload\": _getPayload(token)\r\n    };\r\n    _log.activity.path = req.baseUrl + req.path;\r\n    if (!user_id) {\r\n        return res.status(400).send({\r\n            message: \"need correct level\"\r\n        })\r\n    }\r\n \r\n    _wire_ready_toUseService.delwire(req.query.id, user_id).then(_res => {\r\n        _log.activity.response = _res;\r\n        return res.status(200).json(_res)\r\n    }).catch(_error => {\r\n        _log.activity.error = _error.message\r\n        _log.activity.status = false;\r\n        return res.status(400).send({\r\n            message: _error.message\r\n        })\r\n    }).finally(() => {\r\n        _logService.log(_log).then(res => console.log(\"save log\")).catch(e => console.log(e.message))\r\n    })\r\n});\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\n\n//# sourceURL=webpack:///./app/routes/wire_Ready_toUse.js?");

/***/ }),

/***/ "./app/service/DefluxWipInOutService.js":
/*!**********************************************!*\
  !*** ./app/service/DefluxWipInOutService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryDefluxWipInOut = __webpack_require__(/*! ../query/queryDefluxWipInOut.json */ \"./app/query/queryDefluxWipInOut.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\n\r\n\r\nclass DefluxWipInOutService {\r\n\r\n  \r\n\r\n \r\n\r\n\r\n  \r\n\r\n  \r\n  async filterWireFinish(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n    \r\n              var temp = await client.query(_QueryDefluxWipInOut.filterWireFinish, [\r\n                model.diameter_no || null,\r\n                model.diameter || null,\r\n                model.oem_id,\r\n              ]);\r\n              resolve(temp.rows);\r\n             \r\n        \r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getAllLotMat(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n    \r\n              var temp = await client.query(_QueryDefluxWipInOut.getAllLotMatOut, [\r\n                model.oem_id,\r\n               /*  model.diameter_no || null,\r\n                model.diameter || null, */\r\n     /*            model.oem_id, */\r\n              ]);\r\n              resolve(temp.rows);\r\n             \r\n        \r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async updateWIPAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            let id_log = uuidv4();\r\n            console.log(model)\r\n            var oldAmount = await client.query(_QueryDefluxWipInOut.getOldAmount,[model.id]);\r\n            var current_amount = oldAmount.rows[0].amount || 0;\r\n            var current_weight = oldAmount.rows[0].weight || 0;\r\n            if(model.edit_type === true){\r\n              let is_reserved = model.status_sst === \"customer\" || model.status_sst === \"end_user\" ? true : false;\r\n              let customer_id = model.status_sst === \"customer\" ? model.customer : null;\r\n              let enduser_id = model.status_sst === \"end_user\" ? model.end_user : null;\r\n                current_amount = parseInt(current_amount) + parseInt(model.amount);\r\n             await client.query(_QueryDefluxWipInOut.WipAmountInOut,[model.amount,model.weight_ready_toUse,model.id]);   \r\n             await client.query(_QueryDefluxWipInOut.addLogWipAmount,[\r\n                id_log,\r\n                model.amount,\r\n                model.lot_no,//mat_lot_no\r\n                JSON.stringify(model.lot_rawMat),\r\n                is_reserved,\r\n                enduser_id,\r\n                customer_id,\r\n                model.weight_ready_toUse,\r\n                model.id,\r\n                user_id,\r\n                model.company_id,\r\n                model.oem_id,\r\n                model.remark || null,\r\n                new Date(),\r\n                true,\r\n                true // is_active\r\n             ]);\r\n             if(model.outLot_rawMat.length > 0){\r\n              for(let lotOut of model.outLot_rawMat){\r\n                await client.query(_QueryDefluxWipInOut.updateOutMatLot,[lotOut.mat_lot_no]);\r\n              }\r\n             }\r\n              //console.log(\"IN\");\r\n              //hrow Error(\"break\");\r\n\r\n                \r\n          } else if(model.edit_type === false){\r\n            console.log(model.lot_no_target);\r\n /*            current_amount = parseInt(current_amount) +( model.lot_no_target.length * (-1)); */\r\n         \r\n       \r\n            for(let lot of model.lot_no_target){\r\n              var findDetailLot = await client.query(_QueryDefluxWipInOut.getDetailLogLot,[lot.deflux_lot_no]);\r\n              var amount = findDetailLot.rows[0].amount* (-1);\r\n              var weight = findDetailLot.rows[0].weight* (-1);\r\n        \r\n              await client.query(_QueryDefluxWipInOut.WipAmountInOut,[amount,weight,model.id]); \r\n              let id_log = uuidv4();\r\n              \r\n              await client.query(_QueryDefluxWipInOut.addLogWipAmount,[\r\n                id_log,\r\n                model.amount,\r\n                lot.deflux_lot_no,//mat_lot_no\r\n                JSON.stringify(findDetailLot.rows[0].mat_lot_list),\r\n                findDetailLot.rows[0].is_reserve,\r\n                findDetailLot.rows[0].enduser_id,\r\n                findDetailLot.rows[0].customer_id,\r\n                findDetailLot.rows[0].weight,\r\n                model.id,\r\n                user_id,\r\n                model.company_id,\r\n                model.oem_id,\r\n                model.remark || null,\r\n                new Date(),\r\n                false,\r\n                true // is_active\r\n             ]);\r\n          \r\n            }\r\n          \r\n          }\r\n            \r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getHistory(wire_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            let temp_sum = await client.query(_QueryDefluxWipInOut.getsumHistory, [\r\n              wire_id,\r\n            ]);\r\n            const temp_new = [];\r\n            for(var i = 0; i < temp_sum.rows.length; i++){\r\n              if(temp_sum.rows[i].amount > 0){\r\n                var detail = await client.query(_QueryDefluxWipInOut.getDetailHsitory,[temp_sum.rows[i].deflux_lot_no]);\r\n\r\n                let customer = await client.query(_QueryDefluxWipInOut.getcusNameById, [\r\n                  detail.rows[0].customer_id\r\n                ]);\r\n                let end_user = await client.query(_QueryDefluxWipInOut.getendNameById, [\r\n                  detail.rows[0].end_user_id\r\n                ]);\r\n                let cus_and_end = \"\";\r\n                if (customer.rows.length > 0) {\r\n                  cus_and_end = customer.rows[0].name + \" [CUS]\";\r\n                }\r\n                if (end_user.rows.length > 0) {\r\n                  cus_and_end = end_user.rows[0].name + \" [END]\";;\r\n                }\r\n\r\n                const data = {\r\n                  amount: temp_sum.rows[i].amount,\r\n                  create_date: temp_sum.rows[i].create_date,\r\n                  deflux_lot_no: temp_sum.rows[i].deflux_lot_no,\r\n                  weight: detail.rows[0].weight,\r\n                  end_user_id:detail.rows[0].end_user_id,\r\n                  customer_id: detail.rows[0].customer_id,\r\n                  mat_lot_list: detail.rows[0].mat_lot_list || [],\r\n                  is_reserved: detail.rows[0].is_reserve,\r\n                  cus_and_end:cus_and_end,\r\n          \r\n                }\r\n\r\n                temp_new.push(data);\r\n              }\r\n            }\r\n            temp_new.sort((a, b) => a.create_date - b.create_date);\r\n         \r\n              resolve(temp_new);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  async getHistoryWIP(wire_id,user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n        try {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n\r\n                     var temp = await client.query(_QueryDefluxWipInOut.getHistoryWIP, [wire_id]);\r\n                        //console.log(temp);\r\n                        for(var i = 0; i < temp.rows.length; i++){ \r\n                        if(temp.rows[i].amount > 0){\r\n                          var detail = await client.query(_QueryDefluxWipInOut.getDetailHsitory,[temp.rows[i].deflux_lot_no]);\r\n                          \r\n                          let customer = await client.query(_QueryDefluxWipInOut.getcusNameById, [\r\n                            detail.rows[0].customer_id\r\n                          ]);\r\n                          let end_user = await client.query(_QueryDefluxWipInOut.getendNameById, [\r\n                            detail.rows[0].end_user_id\r\n                          ]);\r\n                          let cus_and_end = \"\";\r\n                          if (customer.rows.length > 0) {\r\n                            cus_and_end = customer.rows[0].name + \" [CUS]\";\r\n                          }\r\n                          if (end_user.rows.length > 0) {\r\n                            cus_and_end = end_user.rows[0].name + \" [END]\";;\r\n                          }\r\n\r\n                          temp.rows[i].cus_and_end = cus_and_end;\r\n                        }\r\n                        }\r\n                        resolve(temp.rows);\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                throw Error(e)\r\n            })\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    }))\r\n}\r\n\r\n\r\n\r\nasync genLotNo_WIP(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(model)\r\n            let lotNo = \"W\"+moment(new Date()).format('YYYYMMDD');\r\n            var getLotNo = await client.query(_QueryDefluxWipInOut.getLotNo_Wip, [lotNo,oem_id]);\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].deflux_lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 10);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              var count = parseFloat(key_lot) + 1;\r\n              //var count = getLotNo.rows.length + 1;\r\n              lotNo = lotNo + '-' + pad(count);\r\n            } else {\r\n              lotNo = lotNo + '-' + pad(1);\r\n            }\r\n\r\n\r\n\r\n\r\n            console.log(lotNo)\r\n            resolve(lotNo);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  async getTrackLot(wire_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_ = await client.query(_QueryDefluxWipInOut.getsumHistory,[wire_id]);\r\n            let temp = await client.query(_QueryDefluxWipInOut.getTrackLot, [\r\n              wire_id,\r\n            ]);\r\n\r\n            let tempData = [];\r\n            for(let item of temp_.rows){\r\n              if(item.amount > 0){\r\n                let newData = temp.rows.filter((e)=>{return e.deflux_lot_no === item.deflux_lot_no});\r\n                if(newData.length > 0){\r\n                  tempData.push(newData[0]);\r\n                }\r\n              }\r\n             \r\n            }\r\n          \r\n            resolve(tempData);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\nmodule.exports = DefluxWipInOutService;\r\n\n\n//# sourceURL=webpack:///./app/service/DefluxWipInOutService.js?");

/***/ }),

/***/ "./app/service/FGInOutCTSService.js":
/*!******************************************!*\
  !*** ./app/service/FGInOutCTSService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryFGInOutCTS = __webpack_require__(/*! ../query/queryFGInOutCTS.json */ \"./app/query/queryFGInOutCTS.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass FGInOutCTSService {\r\n  async filterProduct (model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.filterProduct, [\r\n              model.id || null,\r\n              model.no || null,\r\n              model.name || null,\r\n              model.product_model_id || null,\r\n              model.oem_id || null,\r\n              model.under_min_lot || false,\r\n            ]);\r\n\r\n            for (let index = 0; index < temp.rows.length; index++) {\r\n              var temp_sum = await client.query(_QueryFGInOutCTS.getSumFGLot, [\r\n                temp.rows[index].id\r\n              ]);\r\n              \r\n              const temp_new = [];\r\n              for (var i = 0; i < temp_sum.rows.length; i++) {\r\n                var temp_data = await client.query(_QueryFGInOutCTS.getLotFG, [\r\n                  temp_sum.rows[i].lot_no, temp.rows[index].id\r\n                ]);\r\n                \r\n                const data = {\r\n                  id: temp_data.rows[0].id,\r\n                  lot_no: temp_sum.rows[i].lot_no,\r\n                  amount: temp_sum.rows[i].amount,\r\n                  packing_standart: temp_data.rows[0].packing_standart,\r\n                  exp_date: temp_sum.rows[i].exp_date,\r\n                };\r\n                \r\n                if (data.amount > 0) {\r\n                  temp_new.push(data);\r\n                }\r\n              }\r\n\r\n              temp.rows[index][\"lot_no\"] = temp_new;\r\n            }\r\n\r\n            console.log(temp.rows)\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProductModel (oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.getProductModel, [\r\n              oem_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterLotFG () {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.filterLotFG, []);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getHistoryFG(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.getHistoryFG, [\r\n              product_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotFG(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp_sum = await client.query(_QueryFGInOutCTS.getSumFGDateExp, [\r\n              product_id\r\n            ]);\r\n            console.log(temp_sum.rows)\r\n            const temp_new = [];\r\n            for (var i = 0; i < temp_sum.rows.length; i++) {\r\n              var temp_data = await client.query(_QueryFGInOutCTS.getLotFG, [\r\n                temp_sum.rows[i].lot_no, product_id\r\n              ]);\r\n              \r\n              const data = {\r\n                id: temp_data.rows[0].id,\r\n                lot_no: temp_sum.rows[i].lot_no,\r\n                amount: temp_sum.rows[i].amount,\r\n                packing_standart: temp_data.rows[0].packing_standart,\r\n                exp_date: temp_sum.rows[i].exp_date,\r\n              };\r\n              \r\n              if (data.amount > 0) {\r\n                temp_new.push(data);\r\n              }\r\n            }\r\n\r\n            const lot_stock2 = [];\r\n            for (let i of temp_new) {\r\n              if (i.amount > 0) {\r\n                lot_stock2.push(i)\r\n              }\r\n            }\r\n\r\n            const lot_noArr = lot_stock2.sort(\r\n              (a, b) => moment(a.exp_date) - moment(b.exp_date)\r\n            );\r\n            \r\n            resolve(lot_noArr);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotNo(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.getLotNo, [\r\n              product_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveInOutFG(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n           /*  console.log( model,'ss'); */\r\n            var last_month_stock = await client.query(\r\n              _QueryFGInOutCTS.getLastStock,\r\n              [\r\n                model.product_id,\r\n              ]\r\n            );\r\n            if (model.edit_type === true) {\r\n              var temp = await client.query(_QueryFGInOutCTS.filterProduct, [\r\n                model.product_id || null,\r\n                null,\r\n                null,\r\n                null,\r\n                null,\r\n                false,\r\n              ]);\r\n\r\n              let log_FG_id = uuidv4();\r\n\r\n              var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n              var tracking_no = \"F\"+year[2]+year[3]+\"-\";\r\n              var checkLastTag = await client.query(_QueryFGInOutCTS.getLastTag,[tracking_no]);\r\n              tracking_no = \"F\"+year[2]+year[3]+\"-\"+ pad_fnc(checkLastTag.rows.length+1);\r\n\r\n              var pack_amount = Math.ceil(model.amount / parseInt(temp.rows[0].packing_standart || 1));\r\n\r\n              var newAmount = parseInt(temp.rows[0].fg_amount || 0) + parseInt(model.amount || 0);\r\n     \r\n              await client.query(_QueryFGInOutCTS.saveInOutFG, [\r\n                log_FG_id,\r\n                model.product_id,\r\n                model.edit_type || null,\r\n                model.amount || null,\r\n                model.project_id || null,\r\n                tracking_no,\r\n                null,\r\n                model.lot_no || null,\r\n                model.production_order_cts_id || null,\r\n                pack_amount || null,\r\n                model.exp_date || null,\r\n                model.remark || null,\r\n                new Date(),\r\n                user_id,\r\n                new Date(),\r\n                user_id,\r\n                newAmount\r\n               /*  last_month_stock.rows.length === 0 ? 0:Number( last_month_stock.rows[0].current_amount) + (last_month_stock.rows[0].edit_type ?Number( last_month_stock.rows[0].amount):Number( last_month_stock.rows[0].amount)*-1) */\r\n              ]); \r\n            }\r\n\r\n            if (model.edit_type === false) {\r\n              var lot_stock = await client.query(_QueryFGInOutCTS.getSumFGDateExp, [\r\n                model.product_id\r\n              ]);\r\n\r\n              const lot_stock2 = [];\r\n      \r\n              for (let i of lot_stock.rows) {\r\n               /*  var am = parseInt(i.amount || 0); */\r\n                if (i.amount > 0) {\r\n                  lot_stock2.push(i);\r\n                }\r\n              }\r\n              /* console.log( lot_stock2); */\r\n              const lot_noArr = lot_stock2.sort(\r\n                (a, b) => moment(a.exp_date) - moment(b.exp_date)\r\n              );\r\n\r\n              if (model.lot_no === null) {\r\n               \r\n                var b_amount = model.amount;\r\n                var temp = await client.query(_QueryFGInOutCTS.filterProduct, [\r\n                  model.product_id || null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  false,\r\n                ]);\r\n                var oldAmount = parseInt(temp.rows[0].fg_amount || 0);\r\n                for (let lot of lot_noArr) {\r\n               \r\n  \r\n                  let log_FG_id = uuidv4();\r\n                  \r\n                  if (b_amount > 0) {\r\n                    var cut = 0;\r\n                    \r\n                    var balance = lot.amount - b_amount;\r\n                    if (balance < 0) {\r\n                      b_amount = balance * -1;\r\n                      cut = lot.amount;\r\n                    } else {\r\n                      cut = b_amount;\r\n                      b_amount = 0;\r\n                    }\r\n  \r\n                    var pack_amount = Math.ceil(cut / parseInt(temp.rows[0].packing_standart || 1));\r\n                    \r\n                    var newAmount = parseInt(oldAmount) - parseInt(cut);\r\n                    oldAmount =  parseInt(oldAmount) - parseInt(cut);\r\n                    await client.query(_QueryFGInOutCTS.saveInOutFG, [\r\n                      log_FG_id,\r\n                      model.product_id,\r\n                      model.edit_type || false,\r\n                      cut || null,\r\n                      model.project_id || null,\r\n                      lot.tracking_no || null,\r\n                      null,\r\n                      lot.lot_no || null,\r\n                      lot.production_order_cts_id || null,\r\n                      pack_amount,\r\n                      lot.exp_date || null,\r\n                      model.remark || null,\r\n                      new Date(),\r\n                      user_id,\r\n                      new Date(),\r\n                      user_id,\r\n                      newAmount\r\n                      //last_month_stock.rows.length === 0 ? 0:Number( last_month_stock.rows[0].current_amount) + (last_month_stock.rows[0].edit_type ? Number( last_month_stock.rows[0].amount):Number( last_month_stock.rows[0].amount)*-1)\r\n                    ]);\r\n                  }\r\n                }\r\n                \r\n                if (b_amount !== 0) {\r\n                  throw Error(\"Over Stock amount \" + b_amount);\r\n                }\r\n              } else {\r\n                var amountsumone =  parseInt(model.amountselerL) - parseInt(model.amount)\r\n              /*   console.log(amountsumone); */\r\n                if (amountsumone < 0) {\r\n                  throw Error(\"Over Stock amount \" + amountsumone *-1);\r\n                } else {\r\n                  let log_FG_id = uuidv4();\r\n\r\n                   await client.query(_QueryFGInOutCTS.saveInOutFG, [\r\n                     log_FG_id,\r\n                     model.product_id,\r\n                     model.edit_type || false,\r\n                     model.amount || null,\r\n                     model.project_id || null,\r\n                     lot_noArr[model.num].tracking_no || null,\r\n                     null,\r\n                     lot_noArr[model.num].lot_no || null,\r\n                     lot_noArr[model.num].production_order_cts_id || null,\r\n                     pack_amount,\r\n                     lot_noArr[model.num].exp_date || null,\r\n                     model.remark || null,\r\n                     new Date(),\r\n                     user_id,\r\n                     new Date(),\r\n                     user_id,\r\n                     amountsumone\r\n                     //last_month_stock.rows.length === 0 ? 0:Number( last_month_stock.rows[0].current_amount) + (last_month_stock.rows[0].edit_type ? Number( last_month_stock.rows[0].amount):Number( last_month_stock.rows[0].amount)*-1)\r\n                   ]);\r\n                }\r\n               \r\n              }\r\n           \r\n            }\r\n\r\n            var temp_sum = await client.query(_QueryFGInOutCTS.getSumFGDateExp, [\r\n              model.product_id\r\n            ]);\r\n\r\n            let sumAmount = 0;\r\n            for (let index = 0; index < temp_sum.rows.length; index++) {\r\n              sumAmount += Number(temp_sum.rows[index].amount);\r\n            }\r\n\r\n            await client.query(_QueryFGInOutCTS.saveInOutFGProduct, [\r\n              model.product_id,\r\n              sumAmount,\r\n            ]);\r\n\r\n            // id,\r\n            // product_id,\r\n            // edit_type, \r\n            // amount,\r\n            // project_id,\r\n            // tracking_no, \r\n            // customer_id, \r\n            // lot_no, \r\n            // production_order_cts_id, \r\n            // pack_amount, \r\n            // exp_date, \r\n            // remark, \r\n            // update_date,\r\n            // update_by\r\n\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProduct(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFGInOutCTS.getProduct, [\r\n              product_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProject(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let company_id = model.company_id ? model.company_id : null;\r\n            \r\n            var temp = await client.query(_QueryFGInOutCTS.filterProject, [\r\n              model.oem_id,\r\n              company_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  \r\n  if (d.toString().length == 5 ) {\r\n    return '0' + d.toString();\r\n  } else  if (d.toString().length == 4) {\r\n    return '00'+ d.toString();\r\n  } else  if (d.toString().length== 3) {\r\n    return '000'+ d.toString();\r\n  } else  if (d.toString().length == 2) {\r\n    return '0000'+ d.toString();\r\n  } else  {\r\n    return '00000'+ d.toString();\r\n  } \r\n\r\n}\r\n\r\nmodule.exports = FGInOutCTSService;\r\n\r\n\n\n//# sourceURL=webpack:///./app/service/FGInOutCTSService.js?");

/***/ }),

/***/ "./app/service/FG_STP_InOutService.js":
/*!********************************************!*\
  !*** ./app/service/FG_STP_InOutService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryFG_STP_InOut = __webpack_require__(/*! ../query/queryFG_STP_InOut.json */ \"./app/query/queryFG_STP_InOut.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\n\r\n\r\nclass FG_STP_InOutService {\r\n\r\n  \r\n\r\n \r\n\r\n\r\n  \r\n\r\n  \r\n  async filterProduct(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n            \r\n        \r\n              var temp = await client.query(_QueryFG_STP_InOut.filterProduct, [\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.oem_id || null,\r\n                model.inventory || false,\r\n                model.virtual_product || false,\r\n                model.under_min_lot || false,\r\n              ]);\r\n              resolve(temp.rows);\r\n             \r\n        \r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getAllLotWIP(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n    \r\n              var temp = await client.query(_QueryFG_STP_InOut.getAllLotWIPOut, [\r\n                model.oem_id,\r\n               /*  model.diameter_no || null,\r\n                model.diameter || null, */\r\n     /*            model.oem_id, */\r\n              ]);\r\n              resolve(temp.rows);\r\n             \r\n        \r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async updateFGAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            let id_log = uuidv4();\r\n            //console.log(model)\r\n            var oldAmount = await client.query(_QueryFG_STP_InOut.getOldAmount,[model.id]);\r\n            var current_amount = oldAmount.rows[0].fg_amount || 0;\r\n    \r\n            if(model.edit_type === true){\r\n              let is_reserved = model.status_sst === \"customer\" || model.status_sst === \"end_user\" ? true : false;\r\n              let customer_id = model.status_sst === \"customer\" ? model.customer : null;\r\n              let enduser_id = model.status_sst === \"end_user\" ? model.end_user : null;\r\n                current_amount = parseFloat(current_amount) + parseFloat(model.amount);\r\n             await client.query(_QueryFG_STP_InOut.FGAmountInOut,[model.amount,model.id]);   \r\n             await client.query(_QueryFG_STP_InOut.AddLogFGAmount,[\r\n                id_log,\r\n                model.id,\r\n                model.ref_lot_no || null,\r\n                model.lot_no,\r\n                JSON.stringify(model.wip_lot),\r\n                true,\r\n                model.amount,\r\n                model.project_id || null,\r\n                model.exp_date,\r\n                model.remark || null,\r\n                is_reserved,\r\n                customer_id,\r\n                enduser_id,\r\n                model.stp_machine || null,\r\n                current_amount,\r\n                new Date(),\r\n                user_id\r\n             ]);\r\n             if(model.outLot_wip.length > 0){\r\n              for(let lotOut of model.outLot_wip){\r\n                await client.query(_QueryFG_STP_InOut.updateOutWipLot,[lotOut.deflux_lot_no,lotOut.wire_finished_id]);\r\n              }\r\n             }\r\n          \r\n\r\n                \r\n          } else if(model.edit_type === false){\r\n            var amount = await client.query(_QueryFG_STP_InOut.getOldAmount,[model.id]);\r\n              var new_amount =\r\n              parseFloat(amount.rows[0].fg_amount || 0) - parseFloat(model.amount);\r\n              //console.log(new_amount)\r\n              var lot_stock = await client.query(_QueryFG_STP_InOut.getSumLotNoReserved, [\r\n                model.id,\r\n              ]);\r\n                 console.log(lot_stock.rows)\r\n              const lot_stock2 = [];\r\n              for (let i of lot_stock.rows) {\r\n                if (i.amount > 0) {\r\n                  lot_stock2.push(i);\r\n                }\r\n              }\r\n              //console.log(lot_stock.rows)\r\n              const lot_noArr = lot_stock2.sort(\r\n                (a, b) => moment(a.exprire_date) - moment(b.exprire_date)\r\n              );\r\n  \r\n              //console.log(lot_noArr)\r\n              var b_amount = model.amount;\r\n  \r\n              if (cut > 0) {\r\n              }\r\n              for (let lot of lot_noArr) {\r\n                if (b_amount > 0) {\r\n                  var cut = 0;\r\n                  //console.log(b_amount);\r\n                  var balance = lot.amount - b_amount;\r\n                  if (balance < 0) {\r\n                    b_amount = balance * -1;\r\n                    cut = lot.amount;\r\n                  } else {\r\n                    cut = b_amount;\r\n                    b_amount = 0;\r\n                  }\r\n                  //console.log(\"ตัด: \", cut, \"จาก lot \", lot.fg_lot_no);\r\n                  current_amount = parseFloat(current_amount) - parseFloat(cut);\r\n                  let id_logFG = uuidv4();\r\n                  var detail = await client.query(_QueryFG_STP_InOut.getDetailHsitory,[lot.fg_lot_no,model.id]);\r\n                  await client.query(_QueryFG_STP_InOut.AddLogFGAmount,[\r\n                    id_logFG,\r\n                    model.id,\r\n                    detail.rows[0].ref_lot_no || null,\r\n                    lot.fg_lot_no,\r\n                    JSON.stringify(detail.rows[0].wip_lot_list),\r\n                    false,\r\n                    cut,\r\n                    model.project_id || null,\r\n                    detail.rows[0].exprire_date,\r\n                    model.remark || null,\r\n                    detail.rows[0].is_reserved,\r\n                    detail.rows[0].customer_id,\r\n                    detail.rows[0].end_user_id,\r\n                    detail.rows[0].stp_machine || null,\r\n                    current_amount,\r\n                    new Date(),\r\n                    user_id\r\n                 ]);\r\n     \r\n                }\r\n              }\r\n              if (b_amount !== 0) {\r\n                //console.log(\"ไม่มี lot ตัดแล้ว เกินมา \", b_amount);\r\n                model.new_amount = b_amount * -1;\r\n  \r\n                throw Error(\"Over Stock amount -\" + b_amount);\r\n                //data_negative.push(listData);\r\n              }\r\n              var amount_ = parseFloat(model.amount * (-1));\r\n              await client.query(_QueryFG_STP_InOut.FGAmountInOut,[amount_,model.id]);   \r\n         /*      await client.query(_QueryFG_STP_InOut.updateFG, [\r\n                model.id,\r\n                parseFloat(new_amount),\r\n                moment(new Date()),\r\n              ]); */\r\n   \r\n          \r\n          }\r\n            \r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async updateProductFGAmountInOut_NOFIFO(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!(typeof model.amount === \"number\")) {\r\n          reject(\"amount need type number\");\r\n        }\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        //console.log(model)\r\n\r\n        try {\r\n          await client.query(\"BEGIN\");\r\n          console.log(model);\r\n          var amount = await client.query(_QueryFG_STP_InOut.getOldAmount, [\r\n            model.id,\r\n          ]);\r\n          var lot_stock = await client.query(_QueryFG_STP_InOut.getsumHistory, [\r\n            model.id,\r\n          ]);\r\n\r\n          let lot_target = lot_stock.rows.filter((e) => {\r\n            return e.fg_lot_no === model.lot_no_select;\r\n          })\r\n          var new_amount = lot_target[0].amount - model.amount;\r\n          if (new_amount < 0) {\r\n            throw Error(\"Over Stock \" + new_amount);\r\n          } else {\r\n            var new_FGamount = amount.rows[0].fg_amount - model.amount;\r\n            let temp_sum_detail = await client.query(_QueryFG_STP_InOut.getDetailHsitory, [\r\n              model.lot_no_select, model.id\r\n            ]);\r\n       \r\n          \r\n            let id_logFG = uuidv4();\r\n            await client.query(_QueryFG_STP_InOut.AddLogFGAmount,[\r\n                id_logFG,\r\n                model.id,\r\n                temp_sum_detail.rows[0].ref_lot_no || null,\r\n                model.lot_no_select,\r\n                JSON.stringify(temp_sum_detail.rows[0].wip_lot_list),\r\n                false,\r\n                model.amount,\r\n                model.project_id || null,\r\n                temp_sum_detail.rows[0].exprire_date || null,\r\n                model.remark || null,\r\n                temp_sum_detail.rows[0].is_reserved || null,\r\n                temp_sum_detail.rows[0].customer_id || null,\r\n                temp_sum_detail.rows[0].end_user_id || null,\r\n                temp_sum_detail.rows[0].stp_machine || null,\r\n                new_FGamount,\r\n                new Date(),\r\n                user_id\r\n             ]);\r\n             var amount_ = parseFloat(model.amount * (-1));\r\n             await client.query(_QueryFG_STP_InOut.FGAmountInOut,[amount_,model.id]);   \r\n            \r\n\r\n          }\r\n\r\n\r\n          \r\n\r\n          await client.query(\"COMMIT\");\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n \r\n  async getHistory(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            let temp_sum = await client.query(_QueryFG_STP_InOut.getsumHistory, [\r\n                product_id,\r\n            ]);\r\n            const temp_new = [];\r\n            for(var i = 0; i < temp_sum.rows.length; i++){\r\n              if(temp_sum.rows[i].amount > 0){\r\n                var detail = await client.query(_QueryFG_STP_InOut.getDetailHsitory,[temp_sum.rows[i].fg_lot_no,product_id]);\r\n\r\n                let customer = await client.query(_QueryFG_STP_InOut.getcusNameById, [\r\n                  detail.rows[0].customer_id\r\n                ]);\r\n                let end_user = await client.query(_QueryFG_STP_InOut.getendNameById, [\r\n                  detail.rows[0].end_user_id\r\n                ]);\r\n                let cus_and_end = \"\";\r\n                if (customer.rows.length > 0) {\r\n                  cus_and_end = customer.rows[0].name + \" [CUS]\";\r\n                }\r\n                if (end_user.rows.length > 0) {\r\n                  cus_and_end = end_user.rows[0].name + \" [END]\";;\r\n                }\r\n\r\n                const data = {\r\n                  amount: temp_sum.rows[i].amount,\r\n                  delivery_date: temp_sum.rows[i].exprire_date,\r\n                  fg_lot_no: temp_sum.rows[i].fg_lot_no,\r\n                  ref_lot_no: detail.rows[0].ref_lot_no,\r\n                  end_user_id:detail.rows[0].end_user_id,\r\n                  customer_id: detail.rows[0].customer_id,\r\n                  wip_lot_list: detail.rows[0].wip_lot_list || [],\r\n                  is_reserved: detail.rows[0].is_reserved,\r\n                  cus_and_end:cus_and_end,\r\n                  stp_machine:detail.rows[0].stp_machine || null,\r\n                }\r\n\r\n                temp_new.push(data);\r\n              }\r\n            }\r\n            temp_new.sort((a, b) => a.delivery_date - b.delivery_date);\r\n         \r\n              resolve(temp_new);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  async getHistoryFG(product_id,user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n        try {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n\r\n                     var temp = await client.query(_QueryFG_STP_InOut.getHistoryFG, [product_id]);\r\n                        //console.log(temp);\r\n                        for(var i = 0; i < temp.rows.length; i++){ \r\n                        if(temp.rows[i].amount > 0){\r\n                          var detail = await client.query(_QueryFG_STP_InOut.getDetailHsitory,[temp.rows[i].fg_lot_no,product_id]);\r\n                          \r\n                          let customer = await client.query(_QueryFG_STP_InOut.getcusNameById, [\r\n                            detail.rows[0].customer_id\r\n                          ]);\r\n                          let end_user = await client.query(_QueryFG_STP_InOut.getendNameById, [\r\n                            detail.rows[0].end_user_id\r\n                          ]);\r\n                          let cus_and_end = \"\";\r\n                          if (customer.rows.length > 0) {\r\n                            cus_and_end = customer.rows[0].name + \" [CUS]\";\r\n                          }\r\n                          if (end_user.rows.length > 0) {\r\n                            cus_and_end = end_user.rows[0].name + \" [END]\";;\r\n                          }\r\n\r\n                          temp.rows[i].cus_and_end = cus_and_end;\r\n                        }\r\n                        }\r\n                        resolve(temp.rows);\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                throw Error(e)\r\n            })\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    }))\r\n}\r\n\r\n\r\n\r\nasync genLotNo_FG(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(model)\r\n            let lotNo = \"F\"+moment(new Date()).format('YYYYMMDD');\r\n            var getLotNo = await client.query(_QueryFG_STP_InOut.getLotNo_FG, [lotNo,oem_id]);\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].fg_lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 10);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              var count = parseFloat(key_lot) + 1;\r\n              //var count = getLotNo.rows.length + 1;\r\n              lotNo = lotNo + '-' + pad(count);\r\n            } else {\r\n              lotNo = lotNo + '-' + pad(1);\r\n            }\r\n\r\n\r\n\r\n\r\n        \r\n            resolve(lotNo);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  async getTrackLot(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_ = await client.query(_QueryFG_STP_InOut.getsumHistory,[product_id]);\r\n            let temp = await client.query(_QueryFG_STP_InOut.getTrackLot, [\r\n                product_id,\r\n            ]);\r\n\r\n            let tempData = [];\r\n            for(let item of temp_.rows){\r\n              if(item.amount > 0){\r\n                let newData = temp.rows.filter((e)=>{return e.fg_lot_no === item.fg_lot_no});\r\n                if(newData.length > 0){\r\n                    for(let i = 0; i  < newData[0].wip_lot_list.length; i++){\r\n                        let temp2 = await client.query(_QueryFG_STP_InOut.getTrackLot2, [\r\n                            newData[0].wip_lot_list[i].value,\r\n                        ]);\r\n                        console.log(temp2.rows)\r\n                        console.log(\"HERE\",i,newData[0].wip_lot_list[i].label,newData[0].wip_lot_list[i].value)\r\n                  \r\n                    let newData2 = temp2.rows.filter((e)=>{return e.deflux_lot_no ===  newData[0].wip_lot_list[i].label});\r\n                    if(newData2.length > 0){\r\n                        console.log(\"HERE\")\r\n                        newData[0].wip_lot_list[i].mat_lot_list = newData2[0].mat_lot_list;\r\n                    }\r\n                    }\r\n                  \r\n                  tempData.push(newData[0]);\r\n                }\r\n              }\r\n             \r\n            }\r\n          \r\n            resolve(tempData);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n\r\n\r\n  async filterSummaryReport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFG_STP_InOut.summary_report, [\r\n              false,\r\n              model.product_name || null,\r\n              model.oem_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\nmodule.exports = FG_STP_InOutService;\r\n\n\n//# sourceURL=webpack:///./app/service/FG_STP_InOutService.js?");

/***/ }),

/***/ "./app/service/MatInOutSTP_Service.js":
/*!********************************************!*\
  !*** ./app/service/MatInOutSTP_Service.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryMatInOutSTP = __webpack_require__(/*! ../query/queryMatInOutSTP.json */ \"./app/query/queryMatInOutSTP.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass MatInOutSTP_Service {\r\n\r\n  \r\n\r\n \r\n\r\n\r\n  \r\n\r\n  \r\n  async filterMaterial(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let no = model.no ? model.no : null,\r\n              name = model.name ? model.name : null,\r\n              material_type_id = model.material_type_id\r\n                ? model.material_type_id\r\n                : null,\r\n              material_spec_id = model.material_spec_id\r\n                ? model.material_spec_id\r\n                : null,\r\n              material_size_id = model.material_size_id\r\n                ? model.material_size_id\r\n                : null,\r\n              material_supplier_id = model.material_supplier_id\r\n                ? model.material_supplier_id\r\n                : null;\r\n\r\n    \r\n              var temp = await client.query(_QueryMatInOutSTP.filter, [\r\n                no,\r\n                name,\r\n                material_type_id,\r\n                material_spec_id,\r\n                material_size_id,\r\n                material_supplier_id,\r\n                model.oem_id || null,\r\n              ]);\r\n              resolve(temp.rows);\r\n             \r\n        \r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async updateMaterialAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            let id_log = uuidv4();\r\n            console.log(model)\r\n            var oldAmount = await client.query(_QueryMatInOutSTP.getOldAmount,[model.id]);\r\n            var current_amount = oldAmount.rows[0].amount || 0;\r\n            if(model.edit_type === true){\r\n                current_amount = parseInt(current_amount) + parseInt(model.amount);\r\n             await client.query(_QueryMatInOutSTP.materialAmountInOut,[model.amount,model.id]);   \r\n             await client.query(_QueryMatInOutSTP.addLogMaterialAmount,[\r\n                id_log,\r\n                model.id,//material_id\r\n                model.lot_no,//mat_lot_no\r\n                true,//edit_type in\r\n                model.amount,//amount\r\n                user_id,//user_id\r\n                current_amount,//current_amount\r\n                new Date(),//create_date\r\n                model.weight_by_tag,//model.weight_by_tag\r\n                model.actual_weight,//actual_weight\r\n                model.ref_lot_no || null,//ref_lot_no\r\n                true//is_active\r\n             ]);\r\n              //console.log(\"IN\");\r\n              //hrow Error(\"break\");\r\n\r\n                \r\n          } else if(model.edit_type === false){\r\n            current_amount = parseInt(current_amount) +( model.amount * (-1));\r\n            var amount = model.amount * (-1);\r\n      /*       console.log(amount)\r\n            console.log(current_amount) */\r\n            await client.query(_QueryMatInOutSTP.materialAmountInOut,[amount,model.id]);   \r\n            var findDetailLot = await client.query(_QueryMatInOutSTP.getDetailLogLot,[model.lot_target]);\r\n            await client.query(_QueryMatInOutSTP.addLogMaterialAmount,[\r\n               id_log,\r\n               model.id,//material_id\r\n               model.lot_target,//mat_lot_no\r\n               false,//edit_type in\r\n               model.amount,//amount\r\n               user_id,//user_id\r\n               current_amount,//current_amount\r\n               new Date(),//create_date\r\n               findDetailLot.rows[0].weight_by_tag || null,//model.weight_by_tag\r\n               findDetailLot.rows[0].actual_weight || null,//actual_weight\r\n               findDetailLot.rows[0].ref_lot_no || null,//ref_lot_no\r\n               true//is_active\r\n            ]);\r\n          }\r\n            \r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async getHistory(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            let temp_sum = await client.query(_QueryMatInOutSTP.getsumHistory, [\r\n              material_id,\r\n            ]);\r\n            const temp_new = [];\r\n            for(var i = 0; i < temp_sum.rows.length; i++){\r\n              if(temp_sum.rows[i].amount > 0){\r\n                var detail = await client.query(_QueryMatInOutSTP.getDetailHsitory,[temp_sum.rows[i].mat_lot_no]);\r\n                const data = {\r\n                  amount: temp_sum.rows[i].amount,\r\n                  create_date: temp_sum.rows[i].create_date,\r\n                  ref_lot_no: detail.rows[0].ref_lot_no,\r\n                  mat_lot_no: temp_sum.rows[i].mat_lot_no,\r\n                  weight_by_tag: detail.rows[0].weight_by_tag,\r\n                  actual_weight: detail.rows[0].actual_weight,\r\n                }\r\n\r\n                temp_new.push(data);\r\n              }\r\n            }\r\n            temp_new.sort((a, b) => a.create_date - b.create_date);\r\n         \r\n              resolve(temp_new);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getHistoryMAT(material_id,user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n        try {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n\r\n                     var temp = await client.query(_QueryMatInOutSTP.getHistoryMAT, [material_id]);\r\n                        //console.log(temp);\r\n                        resolve(temp.rows);\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                throw Error(e)\r\n            })\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    }))\r\n}\r\n\r\n\r\n\r\nasync genLotNo_material(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(model)\r\n            let lotNo = \"M\"+moment(new Date()).format('YYYYMMDD');\r\n            var getLotNo = await client.query(_QueryMatInOutSTP.getLotNo_material, [lotNo,oem_id]);\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].mat_lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 10);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              var count = parseFloat(key_lot) + 1;\r\n              //var count = getLotNo.rows.length + 1;\r\n              lotNo = lotNo + '-' + pad(count);\r\n            } else {\r\n              lotNo = lotNo + '-' + pad(1);\r\n            }\r\n\r\n\r\n\r\n\r\n            console.log(lotNo)\r\n            resolve(lotNo);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\nmodule.exports = MatInOutSTP_Service;\r\n\n\n//# sourceURL=webpack:///./app/service/MatInOutSTP_Service.js?");

/***/ }),

/***/ "./app/service/WipProdInOutCTSService.js":
/*!***********************************************!*\
  !*** ./app/service/WipProdInOutCTSService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWipProdInOutCTS = __webpack_require__(/*! ../query/queryWipProdInOutCTS.json */ \"./app/query/queryWipProdInOutCTS.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst { count, Console } = __webpack_require__(/*! console */ \"console\");\r\n\r\nclass WipProdInOutCTS {\r\n  \r\n  async filterWipProdInOut(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n              var productList = await client.query(_QueryWipProdInOutCTS.filterProduct,[\r\n                model.product_no || null,\r\n                model.product_name || null,\r\n       \r\n                model.oem_id,\r\n            \r\n              ]);\r\n           \r\n              for(let item of productList.rows){\r\n                var tempStock = await client.query(_QueryWipProdInOutCTS.GetLotWipProdInStock,[\r\n                  item.id,\r\n                  \r\n                ]);\r\n                for(let lot of tempStock.rows){\r\n                  var tempLot = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail,[\r\n                    item.id,\r\n                    lot.box_no,\r\n                  ]);\r\n                  lot.lot_no = tempLot.rows[0].lot_no;\r\n                }\r\n              /*   var in_stock = tempStock.rows.filter((e)=>{return e.amount > 0});\r\n                if(item.no === '05515-5080-0'){\r\n                  console.log(in_stock)\r\n                } */\r\n  \r\n                item.lot_in_stock = tempStock.rows || [];\r\n              }\r\n             /*  var tempData = [];\r\n            \r\n              for(let item of materialList.rows){\r\n                var logList = await client.query(_QueryWipProdInOutCTS.GetLotWipProdInStock,[\r\n                  item.id\r\n                ])\r\n                \r\n\r\n                var tempStock = logList.rows.filter((e)=>{return e.amount > 0});\r\n\r\n  \r\n\r\n                \r\n              \r\n                for(let i = 0; i < tempStock.length; i++ ){\r\n                   var detailLot = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail,[ item.id,tempStock[i].coli_no]);\r\n            \r\n                tempStock[i].order_no = \"\";\r\n                  if(detailLot.rows.length > 0){\r\n                    tempStock[i].order_no  = detailLot.rows[0].order_no;\r\n                  }\r\n                   \r\n                }\r\n\r\n     \r\n                var tempLot_detail = [];\r\n                for(let item of tempStock){\r\n                  var check = tempLot_detail.filter((e)=>{return e.order_no === item.order_no});\r\n                  let temp ={\r\n                    order_no:item.order_no,\r\n                    coil_no_list:[]\r\n                  }\r\n                if(check.length===0){\r\n                  tempLot_detail.push(temp);\r\n                }\r\n\r\n\r\n                }\r\n                for(let item of tempStock){\r\n                  var check = tempLot_detail.filter((e)=>{return e.order_no === item.order_no});\r\n                  if(check.length > 0){\r\n                    var index = tempLot_detail.findIndex((e)=>e.order_no === item.order_no);\r\n                    tempLot_detail[index].coil_no_list.push(item);\r\n                  }\r\n                \r\n               \r\n                \r\n\r\n                }\r\n                let temp = {\r\n                  material_id: item.id,\r\n                  material_no:item.no,\r\n                  material_name:item.name,\r\n                  material_min_stock:item.minimum_lot,\r\n                  material_amount:item.amount,\r\n                  material_col:tempLot_detail,\r\n                  material_image_name:item.image_name,\r\n                  material_image_path:item.imaget_path,\r\n                }\r\n                tempData.push(temp);\r\n              } */\r\n\r\n              resolve(productList.rows)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n   \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWipProdMGT(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var product_mgt_data = await client.query(\r\n              _QueryWipProdInOutCTS.getproduct_mgt_data,\r\n              [product_id]\r\n            );\r\n     \r\n     \r\n  \r\n            resolve(product_mgt_data.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async checkLotNoOrderCts(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model);\r\n          \r\n            var check_Lot_no = await client.query(_QueryWipProdInOutCTS.checkLotWipProd ,[model.lot_no]);\r\n            if(check_Lot_no.rows.length > 0) {\r\n              resolve(true);\r\n            }else{\r\n              resolve(false);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n \r\n\r\n  async saveInOut(model,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n          \r\n            if(model.edit_type === true){\r\n              var check_Lot_no = await client.query(_QueryWipProdInOutCTS.checkLotWipProd ,[model.lot_no]);\r\n              var product_order_id =\"\";\r\n              if(check_Lot_no.rows.length > 0) {\r\n                product_order_id = check_Lot_no.rows[0].id;\r\n              }\r\n\r\n\r\n              for(let item of model.box_no_list){\r\n                var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n                var tag = \"W\"+year[2]+year[3]+\"-\";\r\n                var checkLastTag = await client.query(_QueryWipProdInOutCTS.getLastTag,[tag]);\r\n                \r\n                tag = \"W\"+year[2]+year[3]+\"-\"+ pad_fnc(checkLastTag.rows.length+1);\r\n                \r\n                let id_wipProd_inOut = uuidv4();\r\n                \r\n                await client.query(_QueryWipProdInOutCTS.addLogWipProdAmount,[\r\n                  id_wipProd_inOut,// id log\r\n                  product_order_id,//id lot no\r\n                  tag,//tracking\r\n                  true,//edit type\r\n                  true, // is use\r\n                  new Date(), //create date\r\n                  user_id, // create by\r\n                  new Date(), //update date\r\n                  user_id, // update by\r\n                  model.lot_no,//lot_no\r\n                  item.weight_by_tag,// นำหนัก\r\n                  item.box_no, //box no\r\n                  model.product_id,//prouct id\r\n                  new Date(), //box date\r\n                  null, //loss\r\n                  item.old_box_no || null, // ref box\r\n                  null, // log mat id อาจจะไม่ได้ใช้\r\n                ]);\r\n              }\r\n              \r\n            }else if (model.edit_type === false){\r\n                ////\r\n                  //คำนวณการเกล่ยย loss\r\n                  //console.log(model)\r\n                  if(model.loss > 0){\r\n\r\n                 \r\n                  var sum_amount =0;\r\n                  for(let item of model.box_no_out){\r\n                    ///console.log(item.amount)\r\n                    sum_amount += parseFloat(item.amount);\r\n                  }\r\n\r\n                  if(model.loss > sum_amount){\r\n                    throw Error(\"จำนวนสูญสายเกินความเป็นจริง\");\r\n                  }\r\n               /* s */\r\n\r\n                 // console.log(sum_amount)\r\n                  var per_loss =  model.loss / sum_amount * 100;\r\n                 // console.log(per_loss)\r\n                  for(let item of model.box_no_out){\r\n                    //console.log(item.amount,(per_loss * item.amount / 100).toFixed(0) )\r\n                    item.loss_target = (per_loss * item.amount / 100).toFixed(2);\r\n                  }\r\n\r\n                }\r\n                  //console.log(model.box_no_out);\r\n                \r\n                \r\n                for(let item of model.box_no_out){\r\n                  var LotDetail = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail, [model.product_id,item.box_no]);\r\n                  var id_wipProd_inOut = uuidv4();\r\n                  await client.query(_QueryWipProdInOutCTS.addLogWipProdAmount,[\r\n                    id_wipProd_inOut,      \r\n                    LotDetail.rows[0].product_order_cts_id,\r\n                    LotDetail.rows[0].tracking_no,\r\n                    false,\r\n                    true,\r\n                    new Date(),\r\n                    user_id,\r\n                    new Date(),\r\n                    user_id,\r\n                    LotDetail.rows[0].lot_no,\r\n                    LotDetail.rows[0].amount,\r\n                    item.box_no,\r\n                    model.product_id,\r\n                    LotDetail.rows[0].box_date,\r\n                    item.loss_target || null,// รอคำนวณ\r\n                    LotDetail.rows[0].ref_box_no,\r\n                    null\r\n                  ]);\r\n                }\r\n              \r\n\r\n\r\n\r\n\r\n            }\r\n           \r\n            resolve(true)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  async GetLotWipProdInStock(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            \r\n          \r\n            var lot_in_stock = await client.query(_QueryWipProdInOutCTS.GetLotWipProdInStock ,[product_id]);\r\n             \r\n            var tempDate  =[] ;\r\n            var tempStock = lot_in_stock.rows.filter((e)=>{return e.amount > 0});\r\n            for(let item of tempStock){\r\n               var LotDetail = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail, [product_id,item.box_no]);\r\n               let temp = {\r\n                box_no: item.box_no,\r\n                lot_no:LotDetail.rows[0].lot_no,\r\n                amount: item.amount,\r\n                ref_box_no:LotDetail.rows[0].ref_box_no,\r\n                create_date:LotDetail.rows[0].create_date,\r\n                tracking_no:LotDetail.rows[0].tracking_no,\r\n              };\r\n\r\n              if(item.amount > 0 ){\r\n                tempDate.push(temp) ;\r\n              }\r\n               };\r\n            \r\n            resolve(tempDate);\r\n  \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  \r\n  \r\n\r\n  \r\n  async GetLotWipProdHistory(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            \r\n            var temp = await client.query(_QueryWipProdInOutCTS.GetLotWipProdHistory,[\r\n              product_id,\r\n             \r\n            ]);\r\n            \r\n            resolve(temp.rows)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  async getWipProdinreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /* console.log(model) */\r\n      \r\n       \r\n            var ProductList = await client.query(_QueryWipProdInOutCTS.filterProduct,[\r\n              model.Product_no || null,\r\n              model.Product_name || null,\r\n              model.oem_id,\r\n            ])\r\n           \r\n      \r\n     /*   console.log(\"a\",ProductList.rows) */\r\n        \r\n            var tempData = [];\r\n            for(let item of ProductList.rows){\r\n              var logList = await client.query(_QueryWipProdInOutCTS.GetLotWipProdInStock,[\r\n                item.id\r\n              ])\r\n              /* console.log(\"d\",logList.rows) */\r\n               \r\n           \r\n\r\n  var tempStock = logList.rows.filter((e)=>{return e.amount > 0});\r\n\r\n              \r\n     /*     console.log(\"c\",tempStock) */\r\nif (tempStock.length > 0) {\r\n\r\n  for(let i = 0; i < tempStock.length; i++ ){\r\n    var detailLot = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail,[ item.id,tempStock[i].box_no]);\r\n   /*  console.log(\"x\",detailLot.rows) */\r\n   if(detailLot.rows.length > 0){\r\n /*  var order_no = detailLot.rows[0].order_no; */\r\n  var box_no = detailLot.rows[0].ref_box_no === null ? detailLot.rows[0].box_no : detailLot.rows[0].ref_box_no;\r\n  var tracking_no = detailLot.rows[0].tracking_no;\r\n  var create_date = detailLot.rows[0].create_date;\r\n  var chackPO_cts = detailLot.rows[0].product_order_cts_id\r\n   }\r\n   var detailproLot = await client.query(_QueryWipProdInOutCTS.getProductionOrderDetail,[chackPO_cts]);\r\n   /* console.log(\"xx\",detailproLot.rows) */\r\n    let as = {\r\n      order_no: detailproLot.rows[0].order_no,\r\n      amount: tempStock[i].amount,\r\n    /*   coli_no: tempStock[i].coli_no, */\r\n      box_no: box_no,\r\n      tracking_no: tracking_no,\r\n      product_no: detailproLot.rows[0].product_no,\r\n      product_name: detailproLot.rows[0].product_name,\r\n      customer_name: detailproLot.rows[0].customer_name,\r\n      create_date: create_date,\r\n      plated: detailproLot.rows[0].plated\r\n    }\r\n    tempData.push(as)\r\n }\r\n  \r\n} }\r\n/* console.log(\"xxx\",tempData) */\r\ntempData.sort(function (a, b) {\r\n  return ('' + a.box_no).localeCompare(b.box_no);\r\n})\r\n    \r\n            resolve(tempData)\r\n        } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getProductionOrder(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            \r\n            var temp = await client.query(_QueryWipProdInOutCTS.getProductionOrder,[   \r\n              product_id\r\n            ]);\r\n              console.log()\r\n            resolve(temp.rows)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWiplogProdinreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n         console.log(\"ddd\",model)\r\n\r\n           \r\n            var tempStock = {rows:[]}\r\n\r\n            for (let index = 0; index < model.tracking.length; index++) {\r\n              const getdata = await client.query(_QueryWipProdInOutCTS.getWiplogProdinreport,[ model.tracking[index]]);\r\n              tempStock.rows.push(getdata.rows[0]) \r\n            }\r\n          /*   var tempStock = await client.query(_QueryWipProdInOutCTS.getWiplogProdinreport,[ model.tracking]); */\r\n\r\n            console.log(\"x\",tempStock.rows)\r\n\r\n\r\n            var tempData = []\r\n            if (tempStock.rows.length > 0) {\r\n              \r\n              for(let i = 0; i < tempStock.rows.length; i++ ){\r\n                var detailLot = await client.query(_QueryWipProdInOutCTS.GetLotWipProdDetail,[ model.product_id,tempStock.rows[i].box_no]);\r\n                console.log(\"xz\",detailLot.rows)\r\n               if(detailLot.rows.length > 0){\r\n             /*  var order_no = detailLot.rows[0].order_no; */\r\n              var box_no = detailLot.rows[0].ref_box_no === null ? detailLot.rows[0].box_no : detailLot.rows[0].ref_box_no;\r\n              var tracking_no = detailLot.rows[0].tracking_no;\r\n              var create_date = detailLot.rows[0].create_date;\r\n              var chackPO_cts = detailLot.rows[0].product_order_cts_id\r\n               }\r\n               console.log(\"z\",chackPO_cts)\r\n               var detailproLot = await client.query(_QueryWipProdInOutCTS.getProductionOrderDetail,[chackPO_cts]);\r\n               console.log(\"xx\",detailproLot.rows)\r\n                let as = {\r\n                  order_no: detailproLot.rows[0].order_no,\r\n                  amount: tempStock.rows[i].amount,\r\n                /*   coli_no: tempStock[i].coli_no, */\r\n                  box_no: box_no,\r\n                  plated: detailproLot.rows[0].plated,\r\n                  tracking_no: tracking_no,\r\n                  product_no: detailproLot.rows[0].product_no,\r\n                  product_name: detailproLot.rows[0].product_name,\r\n                  customer_name: detailproLot.rows[0].customer_name,\r\n                  create_date: create_date\r\n                }\r\n                tempData.push(as)\r\n             }\r\n              \r\n              \r\n            } \r\n         \r\n            resolve(tempData)\r\n        } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  async genBoxNo() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n         \r\n            let box_no = moment(new Date()).add(543, 'year').format('LLLL');\r\n            box_no = \"BOX\"+moment(new Date(box_no)).format('YYMMDD');\r\n            var check_box = await client.query(_QueryWipProdInOutCTS.checkBoxToGen,[box_no]);\r\n            var count = 1;\r\n            if(check_box.rows.length > 0){\r\n              count = check_box.rows.length +1;\r\n            }\r\n            box_no = box_no + pad_fncGen(count);\r\n        \r\n\r\n            resolve(box_no);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async checkRefBox(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n      \r\n          await client.connect();\r\n          try {\r\n            var tempCheck = await client.query(_QueryWipProdInOutCTS.check_product_ref_box, [\r\n              model.product_id,\r\n              model.product_ref_box_no,\r\n            ]);\r\n             if(tempCheck.rows.length > 0){\r\n               let temp = {\r\n                status: true,\r\n                message:\"Correct\"\r\n               }\r\n               resolve(temp);\r\n             }else{\r\n              let temp = {\r\n                status: false,\r\n                message:\"Incorrect\"\r\n               }\r\n               resolve(temp);\r\n             }\r\n\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\nfunction pad_fnc(d) {\r\n  \r\n  if (d.toString().length == 5 ) {\r\n    return '0' + d.toString();\r\n  } else  if (d.toString().length == 4) {\r\n    return '00'+ d.toString();\r\n  } else  if (d.toString().length== 3) {\r\n    return '000'+ d.toString();\r\n  } else  if (d.toString().length == 2) {\r\n    return '0000'+ d.toString();\r\n  } else  {\r\n    return '00000'+ d.toString();\r\n  } \r\n\r\n}\r\n\r\nfunction pad_fncGen(d) {\r\n  if (d < 10) {\r\n   return '0' + d.toString();\r\n } else {\r\n   return d.toString();\r\n }\r\n\r\n}\r\n\r\nmodule.exports = WipProdInOutCTS;\r\n\n\n//# sourceURL=webpack:///./app/service/WipProdInOutCTSService.js?");

/***/ }),

/***/ "./app/service/academyService.js":
/*!***************************************!*\
  !*** ./app/service/academyService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst _QueryPermission = __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\n\r\nclass academyService {\r\n  async category() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let cat_l1 = await client.query(\r\n              _QueryPermission.academy_getCategoryAll\r\n            );\r\n\r\n            let _category = [];\r\n\r\n            for (const category1 of cat_l1.rows) {\r\n              let temp = {};\r\n              temp[\"id\"] = category1.id;\r\n              temp[\"name\"] = category1.name;\r\n              temp[\"academy\"] = category1.academy;\r\n              temp[\"cover_name\"] = category1.cover_name;\r\n              temp[\"cover_path\"] = category1.cover_path;\r\n              temp[\"cover\"] = category1.cover;\r\n              temp[\"detail\"] = [];\r\n\r\n              _category.push(temp);\r\n            }\r\n\r\n            //console.log(_category);\r\n\r\n            resolve(_category);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {  \r\n          console.log(e);\r\n          throw Error(e);\r\n          \r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  async categoryFilter(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let academyFromFilter = [];\r\n         \r\n            if (model.length != 0) {\r\n              for (let index = 0; index < model.length; index++) {\r\n                let cat_1by1 = await client.query(\r\n                  _QueryPermission.academy_getCategory,\r\n                  [model[index]]\r\n                );\r\n                academyFromFilter.push(cat_1by1.rows[0]);\r\n               \r\n              }\r\n            } else {\r\n              let cat_l1 = await client.query(\r\n                _QueryPermission.academy_getCategoryAll\r\n              );\r\n              academyFromFilter = cat_l1.rows;\r\n            }\r\n\r\n        \r\n\r\n            let cat_l2 = await client.query(\r\n              _QueryPermission.academy_getCategory2\r\n            );\r\n\r\n           \r\n            let _category = [];\r\n\r\n            for (const category1 of academyFromFilter) {\r\n              let temp = {};\r\n              temp[\"id\"] = category1.id;\r\n              temp[\"name\"] = category1.name;\r\n              temp[\"academy\"] = category1.academy;\r\n              temp[\"cover_name\"] = category1.cover_name;\r\n              temp[\"cover_path\"] = category1.cover_path;\r\n              temp[\"cover\"] = category1.cover;\r\n              let _category2 = [];\r\n\r\n              for (const category2 of cat_l2.rows) {\r\n                let _temp = {};\r\n                _temp[\"id\"] = category2.id;\r\n                _temp[\"name\"] = category2.name;\r\n                _temp[\"academy\"] = category2.academy;\r\n                _temp[\"cover_name\"] = category2.cover_name;\r\n                _temp[\"cover_path\"] = category2.cover_path;\r\n                _temp[\"cover\"] = category2.cover;\r\n\r\n                if (category2.parent_id === category1.id) {\r\n                  _category2.push(_temp);\r\n                }\r\n              }\r\n\r\n              if (_category2.length != 0) {\r\n                temp[\"detail\"] = _category2;\r\n              } else {\r\n                temp[\"detail\"] = \"\";\r\n              }\r\n\r\n              _category.push(temp);\r\n            }\r\n\r\n            resolve(_category);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = academyService;\r\n\n\n//# sourceURL=webpack:///./app/service/academyService.js?");

/***/ }),

/***/ "./app/service/baseService.js":
/*!************************************!*\
  !*** ./app/service/baseService.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\n\r\nclass baseService {\r\n    TestConnnect() {\r\n        return new Promise(((resolve, reject) => {\r\n            connectionPool.connect((err, db) => {\r\n                if (err) reject(err);\r\n                db.query('SELECT NOW()', (err, result) => {\r\n                    if (err) reject(err);\r\n                    resolve(result);\r\n                })\r\n            });\r\n        }));\r\n    }\r\n    selectAll(table) {\r\n        return new Promise(((resolve, reject) => {\r\n            connectionPool.connect((err, db) => {\r\n                if (err) reject(err);\r\n                db.query('SELECT * FROM ' + table, (err, result) => {\r\n                    if (err) reject(err);\r\n                    resolve(result);\r\n                })\r\n            });\r\n        }));\r\n    }\r\n    TestConnnect2() {\r\n        return new Promise(((resolve, reject) => {\r\n            var client = new Client(connectionConfig)\r\n            client.connect((err, db) => {\r\n                if (err) reject(err);\r\n                db.query('SELECT NOW()').then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\r\n            })\r\n\r\n        }))\r\n    }\r\n    baseQuery(stringQuery) {\r\n        return new Promise(((resolve, reject) => {\r\n            var client = new Client(connectionConfig)\r\n            client.connect((err, db) => {\r\n                if (err) reject(err);\r\n                db.query(stringQuery).then(result => resolve(result)).catch(err => reject(err)).then(() => client.end());\r\n            })\r\n\r\n        }))\r\n    }\r\n    baseQueryWithParameter(stringQuery, Parameter) {\r\n        return new Promise(((resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try {\r\n                    var query = await client.query(stringQuery, Parameter);\r\n                    resolve(query);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n\r\n        }))\r\n    }\r\n    baseQueryWithParameterOsl(stringQuery, Parameter) {\r\n        return new Promise(((resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try {\r\n                    var query = await client.query(stringQuery, Parameter);\r\n                    resolve(query);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n\r\n        }))\r\n    }\r\n\r\n}\r\nmodule.exports = baseService;\n\n//# sourceURL=webpack:///./app/service/baseService.js?");

/***/ }),

/***/ "./app/service/billService.js":
/*!************************************!*\
  !*** ./app/service/billService.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryBill = __webpack_require__(/*! ../query/queryBill.json */ \"./app/query/queryBill.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass billService {\r\n\r\n  \r\n  async filterBill(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            console.log(model);\r\n          /*   let project_name = model.project_name ? model.project_name : null,\r\n                company_id = model.company_id ? model.company_id : null; */\r\n                if((model.date_end === \"\" || model.date_end === null) && model.date_start !== \"\" && model.date_start !== null){\r\n              /*     console.log(\"here\") */\r\n                  model.date_end =  moment(model.date_start).endOf('day');\r\n                } \r\n                if(model.date_end !== \"\" && model.date_end !== null){\r\n                  model.date_end =  moment(model.date_end).endOf('day');\r\n                }\r\n                console.log(moment(model.date_start).format('DD/MM/yyyy'))\r\n                console.log(moment(model.date_end).format('DD/MM/yyyy'))\r\n                console.log(model.is_pack === false || model.is_pack === \"\" ? null : true)\r\n\r\n                if ( model.is_pack === true && (model.is_receive === ''|| model.is_receive === false)) {\r\n                  var temp = await client.query(_QueryBill.filternoonsi, [\r\n                    model.bill_no || null,\r\n                    model.oem_target || null,\r\n                    model.date_start || null,\r\n                    model.date_end  || null,\r\n                    model.is_pack === false || model.is_pack === \"\" ? null : true,\r\n                    model.is_receive === false || model.is_receive === \"\" ? null : true,\r\n                    \r\n      \r\n                    \r\n                  ]);\r\n                  console.log(temp.rows,\"xxx\");\r\n                } else {\r\n                  var temp = await client.query(_QueryBill.filter, [\r\n                    model.bill_no || null,\r\n                    model.oem_target || null,\r\n                    model.date_start || null,\r\n                    model.date_end  || null,\r\n                    model.is_pack === false || model.is_pack === \"\" ? null : true,\r\n                    model.is_receive === false || model.is_receive === \"\" ? null : true,\r\n                    \r\n      \r\n                    \r\n                  ]);\r\n                  console.log(temp.rows,\"sss\");\r\n                }\r\n          \r\n     \r\n            var tempRated = [];\r\n            var tempNrated = [];\r\n            var tempis_remark = [];\r\n            var is_remark = \"\";\r\n        /*     if(model.is_rated === true){ */\r\n              for(let item of temp.rows){ \r\n                \r\n                var check = await client.query(_QueryBill.CheckBillRated,[item.id]);\r\n                if(check.rows.length > 0){\r\n             \r\n                    item.is_rated = true;\r\n                    tempRated.push(item);\r\n             \r\n                  \r\n                }else{\r\n                \r\n                  if (item.is_remark !== null ) {\r\n                    item.is_rated = false;\r\n                    tempis_remark.push(item);\r\n                    is_remark = \"do\"\r\n                  } else {\r\n                    item.is_rated = false;\r\n                    tempNrated.push(item);\r\n                \r\n                  }\r\n                  \r\n                \r\n\r\n                }\r\n              }\r\n              if(model.is_rated === true){ \r\n                console.log(tempRated,\"1\");\r\n               resolve(tempRated);\r\n              }else\r\n              if(model.is_receive === true){ \r\n                console.log(tempis_remark,\"3\");\r\n               resolve(tempis_remark);\r\n              }else{\r\n                console.log(tempNrated,\"2\");\r\n                resolve(tempNrated);\r\n              }\r\n      \r\n\r\n     /*        }else{ */\r\n          /*     console.log(\"not rate\")\r\n              resolve(temp.rows); */\r\n          /*   }\r\n            */\r\n     \r\n          \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async addBill(model,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"bill\",model);\r\n            let check_bill_no = await client.query(_QueryBill.check_bill_no,[model.bill_no,model.oem_id])\r\n                if(check_bill_no.rows.length > 0){\r\n                  throw Error(\"System : เลขบิลนี้มีอยู่ในระบบแล้ว โปรดตรวจสอบอีกครั้ง !!!\");\r\n                }\r\n                let bill_id = uuidv4();\r\n                await client.query(_QueryBill.add,[\r\n                  bill_id, //id\r\n                  model.bill_no, //bill_no\r\n                  model.customer_name, // customer_name\r\n                  model.bill_destination, // bill_destination\r\n                  model.bill_values, // bill_values\r\n                  model.weight, //weight\r\n                  model.is_pack || false, //is_pack\r\n                  model.remark || null, //remark\r\n                  model.create_bill, //create_bill\r\n                  model.delivery_bill, //delivery_bill\r\n                  model.delivery_bill_time, //delivery_time\r\n                  true, //is_use\r\n                  true, //is_active\r\n                  moment(new Date()), //create_date\r\n                  user_id, // create_by\r\n                  moment(new Date()), //update_date\r\n                  user_id, // update_by\r\n                  model.oem_id, //oem_id\r\n                  model.company_id, //company_id\r\n                  model.oem_target, //bill_oem_id\r\n                  false, //is_delivery\r\n                  model.create_bill_time || \"00.00\", //create_time\r\n                  JSON.stringify(model.model_category) || null, //product_model \r\n                  model.latitude || null,//latitude\r\n                  model.longitude || null,//longitude\r\n                  model.compressive || null,//compressive\r\n                  model.meter_weight || null, // meter_weight\r\n                  //moment(new Date()), //update_meter_weight\r\n                  model.is_receive || false, //is_receive\r\n                  model.person_sent || null,\r\n                  /* model.person_receive || null, */\r\n                ])\r\n               \r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async findById(bill_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n     \r\n             \r\n               \r\n            var temp = await client.query(_QueryBill.findBillById, [\r\n            bill_id \r\n              \r\n            ]);\r\n           \r\n        /*     console.log(temp); */\r\n            resolve(temp.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async updateBill(model,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model);\r\n            let check_bill_no = await client.query(_QueryBill.check_bill_no_edit,[model.bill_no,model.oem_id,model.id])\r\n                if(check_bill_no.rows.length > 0){\r\n                  throw Error(\"System : เลขบิลนี้มีอยู่ในระบบแล้ว โปรดตรวจสอบอีกครั้ง !!!\");\r\n                }\r\n   \r\n                await client.query(_QueryBill.update,[\r\n                  model.id, //id\r\n                  model.bill_no, //bill_no\r\n                  model.customer_name || null, // customer_name\r\n                  model.bill_destination || null, // bill_destination\r\n                  model.bill_values || null, // bill_values\r\n                  model.weight || null, //weight\r\n                  model.is_pack || false, //is_pack\r\n                  model.remark || null, //remark\r\n                  model.create_bill  || null, //create_bill\r\n                  model.delivery_bill  || null, //delivery_bill\r\n                  model.delivery_bill_time, //delivery_time\r\n                  moment(new Date()), //update_date\r\n                  user_id, // update_by\r\n                  model.oem_target, //bill_oem_id\r\n                  model.create_bill_time || \"00.00\", //create_time\r\n                  JSON.stringify(model.model_category) || null, //product_model \r\n                  model.latitude || null, //latitude\r\n                  model.longitude || null,//longitude\r\n                  model.compressive || null,//compressive\r\n                  model.meter_weight || null, // meter_weight\r\n                  moment(new Date()), //update_meter_weight\r\n                  model.is_receive || false, //is_receive\r\n                  model.person_sent || null,\r\n                 /*  model.person_receive || null, */\r\n                  /* model.time_receive || null, */\r\n\r\n                ])\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delBill(bill_id,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n     \r\n             \r\n               \r\n             await client.query(_QueryBill.delBill, [\r\n            bill_id, //id\r\n            user_id, //update_by\r\n            moment(new Date()) // update_date\r\n              \r\n            ]);\r\n           \r\n        /*     console.log(temp); */\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async findByIdBil(bilid) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"bilID: \",bilid);\r\n            if(!bilid){throw Error(\"กรุณากรอกเลขบิล\");}\r\n\r\n            var tempss1 = await client.query(_QueryBill.checkByBil,[bilid]);\r\n            \r\n           \r\n            \r\n          var temp = await client.query(_QueryBill.findByBil_weigh_compressive, [\r\n            bilid \r\n            ]);\r\n           \r\n\r\n            let arry = [];\r\n            arry = temp.rows[0];\r\n            // for (let I of arry){\r\n              if(arry === undefined){\r\n                console.log(\"undeee\");\r\n                throw Error(\"เลขบิลนี้ไม่มีข้อมูล น้ำหนัก เเละ เเรงดันในระบบ\")\r\n              }else{\r\n                if (arry.weight_meter === null || arry.weight_meter === undefined){\r\n                  arry.weight_meter = \"\";\r\n                  arry.weight_meter_updated = \"ไม่มีข้อมูล\";\r\n                  throw Error(\"เลขบิลนี้ไม่มีข้อมูล น้ำหนัก เเละ เเรงดันในระบบ\")\r\n                }\r\n                if (arry.compressive_strength === null || arry.compressive_strength === undefined){\r\n                  arry.compressive_strength = \"\";\r\n                  arry.weight_meter_updated = \"ไม่มีข้อมูล\";\r\n                  throw Error(\"เลขบิลนี้ไม่มีข้อมูล น้ำหนัก เเละ เเรงดันในระบบ\")\r\n                }\r\n                \r\n              }\r\n              \r\n            resolve(arry);\r\n            // resolve(temp.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n\r\nmodule.exports = billService;\r\n\n\n//# sourceURL=webpack:///./app/service/billService.js?");

/***/ }),

/***/ "./app/service/companyService.js":
/*!***************************************!*\
  !*** ./app/service/companyService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryCompany = __webpack_require__(/*! ../query/queryCompany.json */ \"./app/query/queryCompany.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret; \r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nconst { config } = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nclass companyService {\r\n    async addNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let company_id = uuidv4();\r\n                        const config_data = {\"status_inform\":null,\"po_sign\":null,\"com_name\":null,\"inform\":null,\"remark\":[{\"key\":\"status_inform\",\"remark\":\"สำหรับเปิด/ปิดประกาศตอนที่ลูกค้าเข้าสู้ระบบ\"},{\"key\":\"po_sign\",\"remark\":\"ชื่อผู็อนุมัติใบสั่งซื้อ\"},{\"key\":\"com_name\",\"remark\":\"ชื่อบริษัทลูกค้า\"},{\"key\":\"inform\",\"remark\":\"ข้อความที่จะประกาศให้ทางลูกค้าทราบ\"}]};\r\n                        await client.query(_QueryCompany.addNewCompany, [company_id, admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null,model.abbr||null, config_data, moment(new Date()), true]);\r\n                        if (model.oem && model.oem.length > 0) {\r\n                            for (const o of model.oem) {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, company_id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, true]);\r\n                            }\r\n                        }\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, company_id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async UpdateNewCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    await client.query('BEGIN');\r\n                   \r\n                    await client.query(_QueryCompany.updateCompany, [admin_id, model.company_name|| null, model.company_detail|| null, model.apply_date|| null, model.start_date|| null, model.expire_date|| null, model.is_factory_active|| null, model.logo_company|| null, model.logo_company_path|| null, model.logo_company_name|| null, model.abbr ||null, model.id]);\r\n                    if (model.oem && model.oem.length > 0) {\r\n                        for (const o of model.oem) {\r\n                            if (o.id) {\r\n                                await client.query(_QueryCompany.updateOEMByCompany, [admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, o.is_use, o.is_active|| null, o.id]);\r\n\r\n                            } else {\r\n                                let oem_id = uuidv4();\r\n                                await client.query(_QueryCompany.addOEMByCompany, [oem_id, model.id, admin_id, o.name|| null, o.logo|| null, o.logo_path|| null, o.logo_name|| null, moment(new Date()), true, o.is_active|| null]);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (model.document && model.document.length > 0) {\r\n                        for (const d of model.document) {\r\n                            if (!d.id) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addDocCompany, [doc_id, model.id, d.document|| null, d.document_path|| null, d.document_name|| null, moment(new Date()), true]);\r\n                            }\r\n                            if (d.id && (d.is_use == false)) {\r\n                                await client.query(_QueryCompany.updateDocCompany, [d.is_use, d.id]);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    await client.query('COMMIT')\r\n                    console.log(\"COMMIT\")\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async delCompanyById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delCompany, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async SetupCompany(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    var config_remark = [];\r\n                    //console.log(model.config);\r\n                    for(var r = 0; r < model.config.length; r++){\r\n                        let temp_remark ={\r\n                            key:model.config[r].key,\r\n                            remark:model.config[r].remark,\r\n                        }\r\n                        config_remark.push(temp_remark);\r\n                    }\r\n                    \r\n                    var obj_config = {};\r\n                    \r\n                    for(let i = 0;i < model.config.length;i++){\r\n                      if(model.config[i].is_use === true){\r\n                        var key = `${model.config[i].key}`;\r\n                   \r\n                        var value = model.config[i].value;\r\n                        obj_config[key] = value;\r\n                      }\r\n                       \r\n                   \r\n                        \r\n                         \r\n        \r\n                    }\r\n                    obj_config['remark'] = config_remark;\r\n                   // console.log(obj_config)\r\n                   // console.log(config_remark)\r\n                    //throw Error(\"break\");\r\n                \r\n          \r\n                    await client.query(_QueryCompany.setupCompany, [model.fg_min|| null, model.fg_max|| null, model.raw_min|| null, model.raw_max|| null, model.rank_a|| null, model.rank_b|| null, model.rank_c|| null, model.rank_d|| null, model.factory_capacity|| null, model.id , obj_config || null]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findSetupById(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    var company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                    if (company.rows.length > 0) {\r\n                        resolve(company.rows[0]);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findByIdCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n     \r\n                    let company = await client.query(_QueryCompany.findCompanyById, [id]);\r\n                    let companyOEM = await client.query(_QueryCompany.findOEMByCompany, [id]);\r\n                    let companyDoc = await client.query(_QueryCompany.findDocByCompany, [id]);\r\n                    console.log(company.rows[0].config);\r\n                    if(company.rows[0].config !== null){\r\n                        var count = Object.keys(company.rows[0].config).length;\r\n                       \r\n                        var config = [];\r\n                        if(count > 0){\r\n                            for(let i = 0; i < Object.keys(company.rows[0].config).length; i++){\r\n                                let temp = {\r\n                                    key: Object.keys(company.rows[0].config)[i],\r\n                                    value: Object.values(company.rows[0].config)[i],\r\n                                    \r\n                                }\r\n                                config.push(temp) \r\n          \r\n                              }\r\n                        }\r\n                        \r\n                    }\r\n                 \r\n\r\n                    if (company.rows.length > 0) {\r\n                        \r\n                        let temp = company.rows[0];\r\n                        if (temp) {\r\n                            temp.config = company.rows[0].config;\r\n                            temp.document = companyDoc.rows;\r\n                            temp.oem = companyOEM.rows;\r\n                        }\r\n                        resolve(temp);\r\n                    } else {\r\n                        reject(\"not found\");\r\n                    }\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async getMasterCompany(id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect()\r\n                try {\r\n                var company = await client.query(_QueryCompany.getMasterCompany);\r\n                resolve(company.rows);\r\n            } catch (e) {\r\n                reject(e);\r\n            } finally {\r\n                await client.end();\r\n            }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n\r\n    //---------------------user-----------------------\r\n    async addUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                        await client.query('BEGIN');\r\n                        let user_id = uuidv4();\r\n                        model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        var _check =  await client.query(_QueryCompany.checkUsernameEmail,[model.username|| null,model.email|| null])\r\n                        if(_check.rows.length>0){\r\n                            throw Error(\"already username or email\");\r\n                        }\r\n                        await client.query(_QueryCompany.addUser, [user_id, model.company_id, admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, moment(new Date()), true]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                let doc_id = uuidv4();\r\n                                await client.query(_QueryCompany.addUserDoc, [doc_id, user_id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async updateUser(model, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n                       model.password = (model.password)? cryptoOption.encrypt(model.password):null;\r\n                        await client.query('BEGIN');\r\n                        await client.query(_QueryCompany.updateUser, [admin_id, model.name|| null, model.sirname|| null, model.username|| null, model.email|| null, model.password|| null, model.mobile1|| null, model.mobile2|| null, model.detail|| null, model.is_active|| null, model.user_profile|| null, model.user_profile_name|| null, model.user_profile_path|| null, model.id]);\r\n\r\n                        if (model.document && model.document.length > 0) {\r\n                            for (const d of model.document) {\r\n                                if (!d.id) {\r\n                                    let doc_id = uuidv4();\r\n                                    await client.query(_QueryCompany.addUserDoc, [doc_id, model.id, d.document|| null, d.document_name|| null, d.document_path|| null, moment(new Date()), true]);\r\n\r\n                                }\r\n                                if (d.id && (d.is_use == false)) {\r\n                                    await client.query(_QueryCompany.delUserDoc, [d.id]);\r\n                                }\r\n\r\n                            }\r\n                        }\r\n\r\n                        await client.query('COMMIT')\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n\r\n    }\r\n    async delUser(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                    await client.query(_QueryCompany.delUser, [id]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async findUserById(id, admin_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n\r\n                await client.connect()\r\n                try {\r\n                   var query = await client.query(_QueryCompany.findUserById, [id]);\r\n                   let temp = query.rows.length>0?query.rows[0]:{};\r\n                    if(query.rows.length>0){\r\n                        temp.password = (temp.password)? cryptoOption.decrypt(temp.password):null;\r\n                        let doc = await client.query(_QueryCompany.findDocByUser, [id]);\r\n                        temp.document=doc.rows;\r\n                    }\r\n                    resolve(temp);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n\r\n    }\r\n    async getAllUser() {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.getAllUser);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async filterUser(model) {\r\n        return new Promise((async (resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n                    let query = await client.query(_QueryCompany.filterUser,[\r\n                        model.name || null,\r\n                        model.username || null,\r\n                        model.email || null,\r\n                        model.company_id || null,\r\n                    ]);\r\n                    resolve(query.rows);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n\r\n    async getviewOemByUserId(user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try {\r\n                var query = await client.query(_QueryCompany.getviewOemByUserId, [user_id]);\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(query.rows)\r\n            } catch (e) {\r\n                reject(e);\r\n            } finally {\r\n                await client.end();\r\n            }\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    async findOEMByCompanyIdAndUser(user,user_id){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {    \r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try {\r\n                var query = await client.query(_QueryCompany.getUserDetailByUser, [user_id]);\r\n                \r\n                var oem = await client.query(_QueryCompany.getOEMbyCompanyId,[query.rows[0].company_id]);\r\n                var temp = {\r\n                    user_detail:query.rows[0],\r\n                    oem_list:oem.rows,\r\n                }\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(temp)\r\n            } catch (e) {\r\n                reject(e);\r\n            } finally {\r\n                await client.end();\r\n            }\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    \r\n\r\n}\r\nmodule.exports = companyService\n\n//# sourceURL=webpack:///./app/service/companyService.js?");

/***/ }),

/***/ "./app/service/customerService.js":
/*!****************************************!*\
  !*** ./app/service/customerService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryCustomer = __webpack_require__(/*! ../query/queryCustomer.json */ \"./app/query/queryCustomer.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass customerService {\r\n\r\n  async addCustomer(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n          \r\n            var query = await client.query(_QueryCustomer.checkNameCustomer, [\r\n              model.name,\r\n              model.company_id,\r\n\r\n            ]);\r\n\r\n         /*    throw Error(model.oem_id); */\r\n            if (query.rows.length > 0) {\r\n              throw Error(\"System : Customer Abbreviation has already \");\r\n            /*   reject({\r\n                message: \"System : already Customer name\",\r\n              }); */\r\n            }\r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id cannot be null\");\r\n             /*  reject({\r\n                message: \"System : company_id cannot be null\",\r\n              }); */\r\n            }\r\n            let customer_id = uuidv4();\r\n            let temp_sort = await client.query(_QueryCustomer.CheckSort);\r\n           if (temp_sort.rows[0].max === undefined) {\r\n            reject({\r\n              message: \"System : cannot fine sort\",\r\n            });\r\n           }\r\n           let sort = temp_sort.rows[0].max; \r\n            await client.query(_QueryCustomer.add, [\r\n              customer_id,\r\n              model.company_id,\r\n              model.name ,\r\n              true,\r\n              sort+1 ,\r\n              model.contact_name ,\r\n              model.contact_tel ,\r\n              model.contact_fax ,\r\n              model.customer_email ,\r\n              model.customer_email_personermail || null,\r\n              model.remark ,\r\n              model.detail ,\r\n              model.full_name ,\r\n              model.customer_email_person2 || null,\r\n              null,\r\n              updatedate,\r\n              user_id,\r\n              model.oem_id,\r\n              model.line_id || null,\r\n            ]);\r\n\r\n              //console.log(model.relate_product[0].id)\r\n              for(let r = 0; r < model.relate_product.length;r++){\r\n               // console.log(model.relate_product[r]);\r\n                let product_cus_id = uuidv4();\r\n                await client.query(_QueryCustomer.addProductCustomer,[product_cus_id, model.relate_product[r].id, customer_id ]);\r\n              }\r\n            \r\n           \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdCustomer(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let cusid = 'aba158b8-4a38-47e3-b97d-ba4f33de4355';\r\n            console.log(id)\r\n            let temp = await client.query(_QueryCustomer.findById, [id]);\r\n            let temp_relate = await client.query(_QueryCustomer.findRelateByCustomerId, [id])\r\n     \r\n            // console.log(temp_relate.rows)\r\n            temp.rows[0].relate_product = temp_relate.rows;\r\n            //console.log(temp.rows)\r\n            //throw Error(\"break\")\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async updateCustomer(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(model)\r\n            //throw Error(\"break\")\r\n            let updatedate = moment(new Date()).format();\r\n            let check_cus = await client.query(_QueryCustomer.findById,[model.id]);\r\n\r\n            if(check_cus.rows.length < 0){\r\n              throw Error(\"System : No Custommer\");\r\n            }\r\n            await client.query(_QueryCustomer.update, [          \r\n              model.id,\r\n              model.name,\r\n              model.detail ,\r\n              model.contact_tel ,\r\n              model.contact_fax ,\r\n              model.customer_email ,\r\n              model.remark ,\r\n              model.contact_name ,\r\n              model.full_name ,\r\n              updatedate,\r\n              user_id ,\r\n              model.line_id,\r\n            ]);\r\n            let check = await client.query(_QueryCustomer.checkProductCustomer,[model.id]);\r\n            if(check.rows.length > 0){\r\n              \r\n                await client.query(_QueryCustomer.delProductCusomer,[model.id]);\r\n           \r\n              for(let index = 0; index < model.relate_product.length;index++){\r\n                let product_cus_id = uuidv4();\r\n                await client.query(_QueryCustomer.addProductCustomer,[product_cus_id, model.relate_product[index].id, model.id]);\r\n              }\r\n            }else{\r\n              for(let index = 0; index < model.relate_product.length;index++){\r\n                let product_cus_id = uuidv4();\r\n                await client.query(_QueryCustomer.addProductCustomer,[product_cus_id, model.relate_product[index].id, model.id]);\r\n              }\r\n            }\r\n           \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async delCustomer(customer_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryCustomer.del, [customer_id,updatedate,user_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n\r\n  async getRelateProduct() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryCustomer.getRelateProduct, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryCustomer.GetMenu, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterCustomer(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            if(model.companyGroup_id ===\"\"){\r\n              var temp = await client.query(_QueryCustomer.filter, [\r\n                model.name || null,\r\n                model.company_id,\r\n              ]);\r\n            }else{\r\n              var temp = await client.query(_QueryCustomer.filterSST, [\r\n                model.name || null,\r\n                model.company_id,\r\n                model.companyGroup_id,\r\n              ]);\r\n            }\r\n           \r\n   \r\n\r\n          /*   console.log(temp.rows);\r\n            console.log(relate_product.rows); */\r\n\r\n           \r\n           \r\n             //console.log(temp.rows); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterCustomerOEM(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            \r\n              var temp = await client.query(_QueryCustomer.filterOEM, [\r\n                model.name || null,\r\n                model.company_id,\r\n                model.oem_id,\r\n              ]);\r\n          \r\n           \r\n   \r\n\r\n          /*   console.log(temp.rows);\r\n            console.log(relate_product.rows); */\r\n\r\n           \r\n           \r\n             //console.log(temp.rows); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nmodule.exports = customerService;\r\n\n\n//# sourceURL=webpack:///./app/service/customerService.js?");

/***/ }),

/***/ "./app/service/dashboardService.js":
/*!*****************************************!*\
  !*** ./app/service/dashboardService.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _Querydashboard = __webpack_require__(/*! ../query/querydashboard.json */ \"./app/query/querydashboard.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass dashboardService {\r\n\r\n  async GetData_forDasboard(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var fg_inData = [];\r\n            var fg_outData = [];\r\n            var product = await client.query(_Querydashboard.product,[model.oem_id || null]);\r\n            console.log(product.rows)\r\n            for(let p = 0;p < product.rows.length; p++){\r\n              if(model.year == \"\" && model.month == \"\"){\r\n                var fg_in = await client.query(_Querydashboard.fg_in2,[product.rows[p].id]);\r\n              }else{\r\n                var fg_in = await client.query(_Querydashboard.fg_in,[product.rows[p].id,model.year || null,model.month || null]);\r\n              }\r\n                \r\n              \r\n              if(fg_in.rows.length > 0){  \r\n                    let temp_in = {\r\n                        product_id:product.rows[p].id,\r\n                        product_no:product.rows[p].no,\r\n                        product_name:product.rows[p].name,\r\n                        year:fg_in.rows[0].year || null,\r\n                        month:fg_in.rows[0].month || null,\r\n                        amount:fg_in.rows[0].amount || 0,\r\n                    }\r\n                    fg_inData.push(temp_in);\r\n                \r\n              }\r\n              if(model.year == \"\" && model.month == \"\"){\r\n                var fg_out = await client.query(_Querydashboard.fg_out2,[product.rows[p].id]);\r\n              }else{\r\n              var fg_out = await client.query(_Querydashboard.fg_out,[product.rows[p].id,model.year || null,model.month || null]);\r\n              }\r\n              if(fg_out.rows.length > 0){  \r\n                let temp_out = {\r\n                    product_id:product.rows[p].id,\r\n                    product_no:product.rows[p].no,\r\n                    product_name:product.rows[p].name,\r\n                    year:fg_out.rows[0].year,\r\n                    month:fg_out.rows[0].month,\r\n                    amount:fg_out.rows[0].amount || 0,\r\n                }\r\n                fg_outData.push(temp_out);\r\n            \r\n          }\r\n                \r\n            }\r\n\r\n            var data_in = await client.query(_Querydashboard.data_in,[model.oem_id || null,model.year || null,model.month || null]);\r\n            var data_out = await client.query(_Querydashboard.data_out,[model.oem_id || null,model.year || null,model.month || null]);\r\n  \r\n            const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n            const sorter = (a, b) => {\r\n                if(a.year !== b.year){\r\n                   return a.year - b.year;\r\n                }else{\r\n                   return months.indexOf(a.month) - months.indexOf(b.month);\r\n                };\r\n             };\r\n\r\n\r\n\r\n            var short_stock = await client.query(_Querydashboard.short_stock,[model.oem_id || null]);\r\n            var order_on_out = []\r\n            for(let i of fg_inData){\r\n              for(let o of fg_outData){\r\n                if(i.product_id === o.product_id){\r\n                  let temp = {\r\n                    product_id:i.product_id,\r\n                    product_no:i.product_no,\r\n                    product_name:i.product_name,\r\n                    amount_in:i.amount,\r\n                    amount_out:o.amount,\r\n                  }\r\n                  order_on_out.push(temp);\r\n                }\r\n              }\r\n            }\r\n            var temp_dashboard = {\r\n                Gproduct_in:data_in.rows.sort(sorter),\r\n                Gproduct_out:data_out.rows.sort(sorter),\r\n                top10_in:fg_inData.sort(function(a, b){return b.amount - a.amount}).slice(0, 10),\r\n                top10_out:fg_outData.sort(function(a, b){return b.amount - a.amount}).slice(0, 10),\r\n                short_stock:short_stock.rows,\r\n                order_in_out:order_on_out,\r\n       \r\n            }\r\n            console.log(temp_dashboard)\r\n            resolve(temp_dashboard);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  \r\n}\r\n\r\n\r\nmodule.exports = dashboardService;\r\n\n\n//# sourceURL=webpack:///./app/service/dashboardService.js?");

/***/ }),

/***/ "./app/service/dataDetailService.js":
/*!******************************************!*\
  !*** ./app/service/dataDetailService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const { Client,Pool } = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool =connectionSetting.connectionPool;\r\nconst connectionConfig= connectionSetting.config;\r\nconst _QueryDataDetail = __webpack_require__(/*! ../query/queryDataDetail.json */ \"./app/query/queryDataDetail.json\");\r\n\r\nclass dataDetail{\r\n\r\n    async addData(model){\r\n      return new Promise((async(resolve, reject) => {\r\n        try{\r\n          (async () => {\r\n            var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n                    await client.query('BEGIN');\r\n                    const res = await client.query(_QueryDataDetail.insertData, [model.title,model.sort]);\r\n                    await client.query(_QueryDataDetail.insertDataDetail, [model.detail,model.remark,res.rows[0].id]);\r\n                    await client.query('COMMIT')\r\n                    console.log(\"COMMIT\")\r\n                    resolve(true);\r\n                  } catch (e) {\r\n                    await client.query('ROLLBACK')\r\n                  } finally {\r\n                    await  client.end()\r\n                  }\r\n          })().catch(e=>{console.log(e);throw Error(e)})\r\n        }catch(e){\r\n          reject(e);\r\n        }\r\n      }))\r\n     \r\n      \r\n      \r\n      \r\n        \r\n        // return new Promise((async(resolve, reject) => {\r\n        //   var client = new Client(connectionConfig)\r\n        //   await client.connect()\r\n        //   try{\r\n        //     await client.query('BEGIN');\r\n        //     const res = await client.query(_QueryDataDetail.insertData, [model.title,model.sort]);\r\n        //     await client.query(_QueryDataDetail.insertDataDetail, [model.detail,model.remark,res.rows[0].id]);\r\n        //     await client.query('COMMIT')\r\n        //     resolve(true);\r\n        //   }catch(e){\r\n        //     await client.query('ROLLBACK')\r\n        //     reject(e);\r\n        //   }finally{\r\n        //     await  client.end()\r\n        //   }\r\n           \r\n\r\n        // }))\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = dataDetail;\r\n\n\n//# sourceURL=webpack:///./app/service/dataDetailService.js?");

/***/ }),

/***/ "./app/service/delivery_time_recordService.js":
/*!****************************************************!*\
  !*** ./app/service/delivery_time_recordService.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryDelivery_time_record = __webpack_require__(/*! ../query/queryDelivery_time_record.json */ \"./app/query/queryDelivery_time_record.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { all } = __webpack_require__(/*! ../routes/material */ \"./app/routes/material.js\");\r\n\r\n\r\nclass delivery_time_recordService {\r\n\r\n  // async filter(model, user_id) {\r\n  //   return new Promise(async (resolve, reject) => {\r\n  //     try {\r\n  //       (async () => {\r\n  //         var client = new Client(connectionConfig);\r\n  //         await client.connect();\r\n  //         try {\r\n  //             console.log(\"โมเดล ฟิลเตอร์\",model)\r\n  //             let date =  null;\r\n  //             let date2 = null;\r\n  //             if(model.start_date !== \"\"){\r\n  //               date = moment(model.start_date).startOf('day').format();\r\n  //             }\r\n  //           if(model.end_date !== \"\"){\r\n  //               date2 = moment(model.end_date).endOf('day').format();\r\n  //           }\r\n            \r\n  //           if(model.end_date === \"\" && model.start_date !==\"\"){\r\n  //               date2 = moment(model.start_date).endOf('day').format();\r\n  //           }\r\n  //           var temp = await client.query(_QueryDelivery_time_record.filter,[\r\n  //               model.oem_id || null,\r\n  //               date,\r\n  //               date2,\r\n  //               model.plate_number || null,\r\n  //               model.bill_no || null,\r\n  //               model.company_id\r\n  //           ]);\r\n  //           console.log(\"temp Filter\",temp.rows)\r\n  //           let tempData = [];\r\n  //           for(let item of temp.rows){\r\n  //             var check_star = await client.query(_QueryDelivery_time_record.getStarBillByBillId,[item.bill_id]);\r\n  //             if(check_star.rows.length > 0){\r\n  //                 item.delivery_time_actual = check_star.rows[0].create_date;\r\n  //                 tempData.push(item);\r\n  //             }\r\n  //           }\r\n  //          tempData.sort((a,b)=> moment(b.delivery_time_actual) - moment(a.delivery_time_actual));\r\n  //           resolve(tempData);\r\n  //           console.log(\"tempData\",tempData);\r\n  //         } catch (e) {\r\n  //           reject(e);\r\n  //         } finally {\r\n  //           await client.end();\r\n  //         }\r\n  //       })().catch((e) => {\r\n  //         console.log(e);\r\n  //         throw Error(e);\r\n  //       });\r\n  //     } catch (e) {\r\n  //       reject(e);\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n\r\n// View -----------==============================\r\n\r\n\r\n\r\nasync filter(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n            console.log(\"โมเดล ฟิลเตอร์\",model)\r\n            let date =  null;\r\n            let date2 = null;\r\n            if(model.start_date !== \"\"){\r\n              date = moment(model.start_date).startOf('day').format();\r\n            }\r\n          if(model.end_date !== \"\"){\r\n              date2 = moment(model.end_date).endOf('day').format();\r\n          }\r\n          \r\n          if(model.end_date === \"\" && model.start_date !==\"\"){\r\n              date2 = moment(model.start_date).endOf('day').format();\r\n          }\r\n          var temp = await client.query(_QueryDelivery_time_record.filterByView,[\r\n              model.oem_id || null,\r\n              date,\r\n              date2,\r\n              model.plate_number || null,\r\n              model.bill_no || null,\r\n              model.company_id\r\n          ]);\r\n         \r\n        \r\n          var tempData = [];\r\n          var sum_al;\r\n         sum_al = temp.rows;\r\n         var i = 0;\r\n         console.log(\"xxxxz\",temp.rows);\r\n         for (let bl of temp.rows){\r\n          var bill_detail = await client.query(_QueryDelivery_time_record.getBillDetailByNo,[bl.bill_no,bl.oem_bill_id])\r\n             bl.bill_detail = bill_detail.rows[0] || [];\r\n          // console.log(\"ตำแหน่ง\",i++,bl);\r\n          var check = tempData.filter((e)=>{ return e.bill_no === bl.bill_no});\r\n          if(check.length > 0){\r\n            var index = tempData.findIndex((e2)=> e2.bill_no === bl.bill_no);\r\n            if(bl.is_dummy === false){\r\n              tempData[index].bi_list.push({all_a: bl.nickname_driver}) ;\r\n            }else{\r\n              tempData[index].bi_list.push({all_a: bl.assistant_driver}) ;\r\n            }\r\n            console.log(\"indexss\",tempData[index].bi_list[0].all_a,bl.nickname_driver,i++ );\r\n            //console.log(\"indexss\",bl.nickname_driver,i++ );\r\n          }else{\r\n            if(bl.is_dummy === false){\r\n              bl.bi_list = [{\r\n                all_a: bl.nickname_driver,\r\n              }];\r\n               tempData.push(bl);\r\n            }else{\r\n            bl.bi_list = [{\r\n              all_a: bl.assistant_driver,\r\n              \r\n            }];\r\n             tempData.push(bl);\r\n             //tempData.bi_list.push(bl);\r\n          }\r\n        }\r\n         }\r\n         //console.log(\"sum_al\",tempData );\r\n          //console.log(\"bl\",tempData[0].bi_list);\r\n        //  for( let l of temp.rows){\r\n        //   tempData.bi_list.push(l);\r\n        //   //console.log(\"LL\",i++,l);\r\n        //   var checks = sum_al.filter((e3)=>{ return e3.bill_no === l.bill_no});\r\n        //   var index1 = sum_al.findIndex((e6)=> e6.bill_no === l.bill_no);\r\n        //   console.log(\"llok\",index1,checks);\r\n        //   //console.log(\"llok\",i++,checks);\r\n        //  }\r\n       \r\n          // let tempData = [];\r\n          // for(let item of temp.rows){\r\n          //   var check_star = await client.query(_QueryDelivery_time_record.getStarBillByBillId,[item.bill_id]);\r\n          //   if(check_star.rows.length > 0){\r\n          //       item.delivery_time_actual = check_star.rows[0].create_date;\r\n          //       tempData.push(item);\r\n          //   }\r\n          // }\r\n         tempData.sort((a,b)=> moment(b.delivery_time_actual) - moment(a.delivery_time_actual));\r\n          // resolve(temp.rows);\r\n          resolve(tempData);\r\n         console.log(\"tempData\",tempData);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n \r\n  \r\n}\r\n\r\n\r\nmodule.exports = delivery_time_recordService;\r\n\n\n//# sourceURL=webpack:///./app/service/delivery_time_recordService.js?");

/***/ }),

/***/ "./app/service/driverService.js":
/*!**************************************!*\
  !*** ./app/service/driverService.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryDriver = __webpack_require__(/*! ../query/queryDriver.json */ \"./app/query/queryDriver.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass driverService {\r\n\r\n  async filter(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var today = moment().startOf('day');\r\n            var today2 = moment().endOf('day');\r\n            console.log(today)\r\n            console.log(today2)\r\n            var temp =  await client.query(_QueryDriver.filter,[\r\n                model.oem_id,\r\n                today,\r\n                today2\r\n            ])\r\n           console.log(temp.rows)\r\n           var tempData = [];\r\n           var start_toDay = parseInt(moment(new Date()).startOf('day').format('yyyyMMDDHHmm'));\r\n           var end_toDay = parseInt(moment(new Date()).endOf('day').format('yyyyMMDDHHmm'));\r\n           console.log(start_toDay);\r\n           console.log(end_toDay);\r\n          for(let index = 0; index < temp.rows.length;index++){\r\n            var logisticDate = parseInt(moment(temp.rows[index].logistic_date).startOf('day').format('yyyyMMDDHHmm'));\r\n          if(start_toDay <= logisticDate && logisticDate <= end_toDay   || temp.rows[index].start_time !== null &&temp.rows[index].finish_time === null && temp.rows[index].remark === null){\r\n            console.log(\"here\")\r\n         \r\n            var driver =  await client.query(_QueryDriver.getDriverBillById,[\r\n              temp.rows[index].id,\r\n          ])\r\n          var star =  await client.query(_QueryDriver.getStarByBillId,[\r\n            temp.rows[index].bill_id,\r\n        ])\r\n        var end_user =  await client.query(_QueryDriver.getEnd_userByBillId,[\r\n          temp.rows[index].bill_id,\r\n      ])\r\n      var bill_detail =  await client.query(_QueryDriver.getBillDetailByBillId,[\r\n        temp.rows[index].bill_id,\r\n    ])\r\n     var end_user_id = \"\";\r\n     if(end_user.rows.length > 0){\r\n       end_user_id = end_user.rows[0].end_user_id;\r\n      }\r\n          temp.rows[index].driver_person_data = driver.rows || [];\r\n          temp.rows[index].star_data = star.rows || [];\r\n          temp.rows[index].end_user = end_user_id;\r\n          temp.rows[index].bill_detail = bill_detail.rows[0] || null;\r\n          tempData.push(temp.rows[index]);\r\n          }\r\n\r\n        }\r\n            //console.log(temp.rows);\r\n            resolve(tempData);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async getDriver_person(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp =  await client.query(_QueryDriver.getDriver_person,[\r\n                model.company_id\r\n            ])\r\n            //console.log(temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveDriver_person(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n              let date1 =  moment().startOf(\"day\");\r\n              let date2 = moment().endOf(\"day\");\r\n            var checkSort = await client.query(_QueryDriver.checkSort,[\r\n              model.driver.delivery_sort,\r\n              date1,\r\n              date2,\r\n              model.driver.logistic_car_id\r\n            ])\r\n            console.log(checkSort.rows)\r\n            var tempData = [];\r\n            for(let sort of checkSort.rows){\r\n\r\n          \r\n            for(let item of model.driver_person){\r\n              if(item.id_person !== \"\" || item.person_name !== \"\"){\r\n                if(item.id_person === \"\"){\r\n                  let temp ={\r\n                  driver_id:sort.id,\r\n                  driver_person_id:\"\",\r\n                  remark:item.person_name,\r\n                  }\r\n                  tempData.push(temp);\r\n                }else{\r\n                  let temp ={\r\n                    driver_id:sort.id,\r\n                    driver_person_id:item.id_person,\r\n                    remark:\"\",\r\n                    }\r\n                    tempData.push(temp);\r\n                  }\r\n              }\r\n             \r\n              }\r\n              await client.query(_QueryDriver.DelDP,[\r\n                sort.id,\r\n               ])\r\n            }\r\n               console.log(tempData)\r\n              for(let item2 of tempData){\r\n                let id = uuidv4();\r\n                await client.query(_QueryDriver.addDriver_person,[\r\n                  id,\r\n                  item2.driver_id,\r\n                  item2.driver_person_id || null,\r\n                  item2.remark || null,\r\n                ]);\r\n              }\r\n          \r\n            resolve(true); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getStarType(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryDriver.getStarType,[]);\r\n          \r\n            resolve(temp.rows); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  \r\n  async saveStar(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n            var bill_id  = model.driver.bill_id;\r\n            for(let item of model.star_Value){\r\n              let star_bill_id = uuidv4();\r\n              await client.query(_QueryDriver.saveStar,[\r\n                star_bill_id,\r\n                item.id_star,\r\n                bill_id,\r\n                item.values || 0,\r\n                model.oem_id,\r\n                model.company_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                model.remark || null,\r\n                true,\r\n                true\r\n              ]);\r\n            }\r\n            if(model.end_user !== \"\"){\r\n              let end_user_logis_id= uuidv4();\r\n              await client.query(_QueryDriver.addEnd_user_logistic,[\r\n                end_user_logis_id,\r\n                bill_id,\r\n                model.end_user,\r\n                true,\r\n                user_id,\r\n                user_id,\r\n                moment(new Date()),\r\n                moment(new Date()),\r\n                model.oem_id,\r\n                model.company_id,\r\n              ]);\r\n            }\r\n           \r\n       \r\n          console.log(model)\r\n            resolve(true); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async saveTime_Out(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           //console.log(model)\r\n           for(let item of model.data){\r\n            await client.query(_QueryDriver.setStartTime,[\r\n              item.id,\r\n              moment(new Date()),\r\n              moment(new Date()),\r\n              user_id,\r\n              model.approve_person\r\n            ])\r\n            await client.query(_QueryDriver.updateDeliveryBill,[\r\n              item.bill_id,\r\n             true,\r\n            ]);\r\n           }\r\n           \r\n           resolve(true);\r\n        \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async saveTime_In(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            for(let item of model){\r\n            await client.query(_QueryDriver.setFinishTime,[\r\n              item.id,\r\n              moment(new Date()),\r\n              moment(new Date()),\r\n              user_id\r\n            ])\r\n          }\r\n            resolve(true);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async cancleBillDriver(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           \r\n            console.log(model)\r\n            await client.query(_QueryDriver.AddremarkToCancle,[\r\n              model.driver.id,\r\n              model.remark,\r\n              moment(new Date()),\r\n              user_id\r\n            ])\r\n            await client.query(_QueryDriver.updateDeliveryBill,[\r\n              model.driver.bill_id,\r\n              false,\r\n             ]);\r\n            resolve(true);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n  async filter_bill(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryDriver.filter_bill,[\r\n              model.oem_id,\r\n             \r\n            ])\r\n\r\n            var all = []\r\n            for (let i of temp.rows) {\r\n              if (i.is_remark === true) {\r\n                var n = 1\r\n              }  else \r\n              if (i.is_remark === false) {\r\n                var n = 2\r\n              }   else {\r\n                var n = 0\r\n              }\r\n\r\n               /*  var nameuse = await client.query(_QueryDriver.chackuse,[\r\n                  i.update_by,\r\n                 \r\n                ]) */\r\n                 \r\n         let  as ={\r\n            id:i.id,\r\n            bill_oem_id:i.bill_oem_id,\r\n            bill_no:i.bill_no,\r\n            create_bill:i.create_bill,\r\n            delivery_bill:i.delivery_bill,\r\n            customer_name:i.customer_name,\r\n            is_pack:i.is_pack,\r\n            is_remark:i.is_remark,\r\n            remark_receive:i.remark_receive,\r\n            chack_n:n,\r\n            approve_bill:i.approve_bill,\r\n            allbill:i\r\n           \r\n          }\r\n          all.push(as)\r\n        }\r\n            \r\n         \r\n\r\n            resolve(all);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async save_remarkbill(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n             await client.query(_QueryDriver.save_remarkbill,[\r\n              model.id,\r\n              model.remark_receive,\r\n              model.is_remark,\r\n              moment(new Date()),\r\n              model.approve_bill\r\n\r\n             \r\n            ])\r\n            \r\n          \r\n            resolve(true);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\nmodule.exports = driverService;\r\n\n\n//# sourceURL=webpack:///./app/service/driverService.js?");

/***/ }),

/***/ "./app/service/end_userService.js":
/*!****************************************!*\
  !*** ./app/service/end_userService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryEnd_user = __webpack_require__(/*! ../query/queryEnd_user.json */ \"./app/query/queryEnd_user.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass end_userService {\r\n  async addEnd_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var check_name = await client.query(_QueryEnd_user.checkName_add, [\r\n              model.name,\r\n              model.oem_id,\r\n            ]);\r\n            if (check_name.rows.length > 0) {\r\n              throw Error(\"System : No. End user has already\");\r\n            }\r\n            var check_fullname = await client.query(\r\n              _QueryEnd_user.checkFullname_add,\r\n              [model.full_name, model.oem_id]\r\n            );\r\n            if (check_fullname.rows.length > 0) {\r\n              throw Error(\"System : Full Name has already\");\r\n            }\r\n            let end_user_id = uuidv4();\r\n\r\n            await client.query(_QueryEnd_user.add, [\r\n              end_user_id,\r\n              model.name || null,\r\n              model.full_name || null,\r\n              model.contact || null,\r\n              model.address || null,\r\n              model.latitude || null,\r\n              model.longitude || null,\r\n              true,\r\n              true,\r\n              model.oem_id,\r\n\r\n              model.line_id || null,\r\n              model.tel || null,\r\n              updatedate,\r\n              user_id,\r\n              model.email || null,\r\n            ]);\r\n            //console.log(model.relate_product[0].id)\r\n            for (let r = 0; r < model.relate_product.length; r++) {\r\n              // console.log(model.relate_product[r]);\r\n              let product_end_id = uuidv4();\r\n              await client.query(_QueryEnd_user.addProductEnd_user, [\r\n                product_end_id,\r\n                model.relate_product[r].id,\r\n                end_user_id,\r\n              ]);\r\n            }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateEnd_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            //console.log(model.end_user_id)\r\n            var check_name_edit = await client.query(\r\n              _QueryEnd_user.checkName_edit,\r\n              [model.name, model.end_user_id, model.oem_id]\r\n            );\r\n            if (check_name_edit.rows.length > 0) {\r\n              throw Error(\"System : Addreviation has already\");\r\n            }\r\n            var check_fullname_edit = await client.query(\r\n              _QueryEnd_user.checkFullname_edit,\r\n              [model.full_name, model.end_user_id, model.oem_id]\r\n            );\r\n            if (check_fullname_edit.rows.length > 0) {\r\n              throw Error(\"System : Full Name has already\");\r\n            }\r\n            await client.query(_QueryEnd_user.update, [\r\n              model.end_user_id,\r\n              model.name,\r\n              model.full_name,\r\n              model.contact,\r\n              model.address,\r\n              model.latitude || null,\r\n              model.longitude || null,\r\n              updatedate,\r\n              user_id,\r\n              model.line_id || null,\r\n              model.tel || null,\r\n              model.email || null,\r\n            ]);\r\n            console.log(\"end\", model.relate_product);\r\n            let check = await client.query(\r\n              _QueryEnd_user.checkProductEnd_user,\r\n              [model.end_user_id]\r\n            );\r\n            if (check.rows.length > 0) {\r\n              await client.query(_QueryEnd_user.delProductEnd_user, [\r\n                model.end_user_id,\r\n              ]);\r\n\r\n              for (\r\n                let index = 0;\r\n                index < model.relate_product.length;\r\n                index++\r\n              ) {\r\n                let product_end_id = uuidv4();\r\n                await client.query(_QueryEnd_user.addProductEnd_user, [\r\n                  product_end_id,\r\n                  model.relate_product[index].id,\r\n                  model.end_user_id,\r\n                ]);\r\n              }\r\n            } else {\r\n              for (\r\n                let index = 0;\r\n                index < model.relate_product.length;\r\n                index++\r\n              ) {\r\n                let product_end_id = uuidv4();\r\n                await client.query(_QueryEnd_user.addProductEnd_user, [\r\n                  product_end_id,\r\n                  model.relate_product[index].id,\r\n                  model.end_user_id,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delEnd_user(end_user_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryEnd_user.del, [\r\n              end_user_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdEnd_user(end_user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryEnd_user.findById, [\r\n              end_user_id,\r\n            ]);\r\n            let temp_relate = await client.query(\r\n              _QueryEnd_user.findRelateByEnd_userId,\r\n              [end_user_id]\r\n            );\r\n\r\n            // console.log(temp_relate.rows)\r\n            temp.rows[0].relate_product = temp_relate.rows;\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /* async GetMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryProject.GetMenu, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } */\r\n\r\n  async filterEnd_user(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /*  console.log(model); */\r\n            let Name = model.name ? model.name : null,\r\n              Full_name = model.full_name ? model.full_name : null;\r\n\r\n            var temp = await client.query(_QueryEnd_user.filter, [\r\n              Name,\r\n              Full_name,\r\n              model.oem_id,\r\n            ]);\r\n            /*     console.log(temp); */\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n\r\n  async getBill_end_user(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let Name = model.name ? model.name : null,\r\n            Full_name = model.fullname ? model.fullname : null;\r\n            \r\n        var temp = await client.query(_QueryEnd_user.filter, [\r\n          Name,\r\n          Full_name,\r\n          model.oem_id\r\n        ]);\r\n        console.log(\"temp\",temp.rows);\r\n                for(let item of temp.rows){\r\n                  var temp_bill = await client.query(_QueryEnd_user.getBill_ByEndID, [\r\n                    item.id,\r\n                  ]);\r\n                  item.bill = temp_bill.rows || [];\r\n                }\r\n          \r\n            \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nmodule.exports = end_userService;\r\n\n\n//# sourceURL=webpack:///./app/service/end_userService.js?");

/***/ }),

/***/ "./app/service/expressService.js":
/*!***************************************!*\
  !*** ./app/service/expressService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryExpress = __webpack_require__(/*! ../query/queryExpress.json */ \"./app/query/queryExpress.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nclass expressService {\r\n\r\n\r\n  //////ยอดขาย//////\r\n  async add_sales(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let sales_id = uuidv4();\r\n   console.log(model) \r\n             await client.query(_QueryExpress.Add_sales, [\r\n                 sales_id,\r\n                 true,\r\n                 model.oem_id,\r\n                 model.company_id,\r\n                 moment(new Date()),//\r\n                 moment(new Date()),//\r\n                 user_id,\r\n                 user_id,\r\n                 moment(new Date()),\r\n                 model.sale_value,\r\n            ]); \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async add_oil(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"modelOill\",model);\r\n            // if(model.oil_value === '' || model.oil_value === \"\"){\r\n            //   throw Error(\"กรอกตัวเลข\");  \r\n            // }\r\n            // let oil_id = uuidv4();\r\n            //  await client.query(_QueryExpress.Add_oil, [\r\n            //      oil_id,\r\n            //      true,\r\n            //      model.oem_id,\r\n            //      model.company_id,\r\n            //      moment(new Date()),//\r\n            //      moment(new Date()),//\r\n            //      user_id,\r\n            //      user_id,\r\n            //      moment(new Date()),\r\n            //      model.oil_value  || \"0\",\r\n            // ]); \r\n  \r\n            let a_oil_value = 0;\r\n            let sum_oil_value = 0;\r\n            var chekliter1 = await client.query(_QueryExpress.checkliter, []);\r\n            a_oil_value = chekliter1.rows[0].oil_value;\r\n            sum_oil_value = parseFloat(a_oil_value) + parseFloat(model.oil_value);\r\n            \r\n            let id_fuel = uuidv4();\r\n                await client.query(_QueryExpress.addFuel_oil2, [\r\n                  id_fuel,\r\n                  model.oem_id,\r\n                  model.oil_value,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  true,\r\n                  parseFloat(sum_oil_value),\r\n                ]);\r\n                await client.query(_QueryExpress.updateExpreesOil, [\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  sum_oil_value\r\n                ]);\r\n  \r\n            \r\n  \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\nasync add_montiy(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n\r\n          \r\n         var chack = await client.query(_QueryExpress.chack, [\r\n          model.company_id,\r\n          model.oem_id,\r\n          model.input_year, \r\n          model.input_month,\r\n         \r\n         ])\r\n\r\n         if (chack.rows.length > 0 ){\r\n          // console.log(\"cheakTimefdf\",check);\r\n          throw Error(\"มีปีและเดือนซ้ำในระบบกรุณากรอกใหม่อีกครั้ง\");  \r\n        }\r\n\r\n          let montiy_id = uuidv4();\r\n          console.log(model) \r\n           await client.query(_QueryExpress.Add_montiy, [\r\n               montiy_id,\r\n               moment(new Date()),//\r\n               user_id,\r\n               moment(new Date()),//\r\n               user_id,\r\n               true,\r\n               model.oem_id,\r\n               model.company_id,\r\n               model.category_item || \"ไม่มีสินค้า\",\r\n               model.steel_bar || \"0\",\r\n               model.wiremesh || \"0\",\r\n               model.black_character || \"0\",\r\n               model.gi_character || \"0\",\r\n               model.color || \"0\",\r\n               model.steel_binding_wire || \"0\",\r\n               model.nail || \"0\",\r\n               model.other || \"0\",\r\n               model.kpi || \"0\",\r\n               model.deformed_bar || \"0\",  \r\n               model.input_month,    \r\n               model.input_year,              \r\n          ]); \r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync filterSales(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let dateFrom = model.dateFrom ? model.dateFrom : null;\r\n            let dateTo = model.dateTo ? model.dateTo : null;\r\n            // console.log(order_no,start_date,end_date)\r\n            if (dateFrom === null && dateTo === null) {\r\n              var temp = await client.query(_QueryExpress.Filter_sales, [\r\n                model.company_id,\r\n                model.oem_id\r\n              \r\n                ]);\r\n               /*  console.log(\"มาใหมไม่มีวันที่\",temp);  */\r\n                resolve(temp.rows);\r\n            } \r\n            else {\r\n              if (dateTo === null) {\r\n                dateTo = moment(dateFrom)\r\n                  .add(23, \"hours\")\r\n                  .add(59, \"minute\")\r\n                  .add(59, \"seconds\")\r\n                  .format();\r\n              } \r\n              else {\r\n                dateTo = moment(dateTo)\r\n                  .add(23, \"hours\")\r\n                  .add(59, \"minute\")\r\n                  .add(59, \"seconds\")\r\n                  .format();\r\n             \r\n                }\r\n\r\n                var temp = await client.query(_QueryExpress.filter_date_sales, [\r\n                model.company_id,\r\n                model.dateFrom,\r\n                dateTo,\r\n                model.oem_id,\r\n                ]);\r\n      \r\n             /*  console.log(\"มาใหมมีวันที่\",temp);  */\r\n                resolve(temp.rows);\r\n\r\n            }\r\n              \r\n        \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n       /*  console.log(e); */\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync filterOil(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let dateFrom = model.dateFrom ? model.dateFrom : null;\r\n            let dateTo = model.dateTo ? model.dateTo : null;\r\n            // console.log(order_no,start_date,end_date)\r\n            if (dateFrom === null && dateTo === null) {\r\n              var temp = await client.query(_QueryExpress.Filter_oil, [\r\n                model.company_id,\r\n                //model.oem_id\r\n              \r\n                ]);\r\n                console.log(\"มาใหมไม่มีวันที่\",temp); \r\n                resolve(temp.rows);\r\n            } \r\n            else {\r\n              if (dateTo === null) {\r\n                 dateTo = moment(dateFrom)\r\n                  .add(23, \"hours\")\r\n                  .add(59, \"minute\")\r\n                  .add(59, \"seconds\")\r\n                  .format(); \r\n              } \r\n              else {\r\n                dateTo = moment(dateTo)\r\n                  .add(23, \"hours\")\r\n                  .add(59, \"minute\")\r\n                  .add(59, \"seconds\")\r\n                  .format();\r\n                \r\n                }\r\n\r\n                var temp = await client.query(_QueryExpress.filter_date_oil, [\r\n                model.company_id,\r\n                model.dateFrom,\r\n                dateTo,\r\n                model.oem_id,\r\n                ]);\r\n      \r\n             /*  console.log(\"มาใหมมีวันที่\",temp);  */\r\n                resolve(temp.rows);\r\n\r\n            }\r\n              \r\n        \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n       /*  console.log(e); */\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync filterMontiy(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query(_QueryExpress.Filter_montiy, [\r\n            model.company_id,\r\n            model.oem_id,\r\n            model.input_year || null,\r\n            model.input_month || null,\r\n            \r\n          \r\n            ]);\r\n           \r\n            resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync editSales(model,user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(model)\r\n          var temp = await client.query(_QueryExpress.Sale_Edit, [\r\n            model.sale_value ||  \"0\",\r\n            moment(new Date()),\r\n            user_id,\r\n            model.id,\r\n           \r\n\r\n            ]);\r\n             \r\n            resolve(temp.rows); \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync editoils(model,user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(model)\r\n          var temp = await client.query(_QueryExpress.oil_Edit, [\r\n            model.oil_value ||  \"0\",\r\n            moment(new Date()),\r\n            user_id,\r\n            model.id,\r\n           \r\n\r\n            ]);\r\n             \r\n            resolve(temp.rows); \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync editmontiy(model,user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var chack2 = await client.query(_QueryExpress.chack2, [\r\n          model.oem_id,\r\n          model.input_year, \r\n          model.input_month,\r\n          model.id,\r\n         ])\r\n\r\n         if (chack2.rows.length > 0 ){\r\n       \r\n          throw Error(\"มีปีและเดือนซ้ำในระบบกรุณากรอกใหม่อีกครั้ง\");  \r\n        }\r\n          console.log(model) \r\n          var temp = await client.query(_QueryExpress.montiy_Edit, [\r\n            moment(new Date()),\r\n            user_id,\r\n            model.category_item || \"ไม่มีสินค้า\",\r\n            model.steel_bar || \"0\",\r\n            model.wiremesh || \"0\",\r\n            model.black_character || \"0\",\r\n            model.gi_character || \"0\",\r\n            model.color || \"0\",\r\n            model.steel_binding_wire || \"0\",\r\n            model.nail || \"0\",\r\n            model.other || \"0\",\r\n            model.kpi || \"0\",\r\n            model.deformed_bar || \"0\",\r\n            model.input_month,\r\n            model.input_year,\r\n            model.id,\r\n            ]);\r\n             \r\n            resolve(temp.rows); \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n}\r\n\r\n\r\n\r\nmodule.exports = expressService;\r\n\n\n//# sourceURL=webpack:///./app/service/expressService.js?");

/***/ }),

/***/ "./app/service/externalDataCTSService.js":
/*!***********************************************!*\
  !*** ./app/service/externalDataCTSService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryqueryExternalDataCTS = __webpack_require__(/*! ../query/queryExternalDataCTS.json */ \"./app/query/queryExternalDataCTS.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst XLSX = __webpack_require__(/*! xlsx */ \"xlsx\");\r\nconst { throws } = __webpack_require__(/*! assert */ \"assert\");\r\nconst { _extend } = __webpack_require__(/*! util */ \"util\");\r\nconst { error } = __webpack_require__(/*! console */ \"console\");\r\n\r\nclass externalDataCTS {\r\n  async importForecastFiles(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        (async () => {\r\n          try {\r\n            console.log('test Model', model)\r\n            var result_check = check_template(model.file_target);\r\n            var result_check_distinct = [];\r\n            /* throw Error('RRT'); */\r\n            \r\n            /*   const result_check_temp_filter = result_check_temp.filter((el)=>{ return el.product_no === element.product_no}); */\r\n\r\n            /*    const arrayUniqueByKey = [...new Map(result_check_temp.data.map(item =>\r\n                [item[product_no], item])).values()]; */\r\n            /* const unique = [\r\n              ...new Set(result_check.data.map((item) => item)),\r\n            ]; */\r\n \r\n\r\n            if (result_check.template_name === \"DDN template\") { \r\n              \r\n            \r\n           \r\n\r\n\r\n              const arrayUniqueByKey = [...new Map(result_check.data.map(item =>\r\n                [item[\"product_no\"], item])).values()];\r\n\r\n              for (const element of arrayUniqueByKey) {\r\n                const result_check_temp_filter = result_check.data.filter(\r\n                  (el) => {\r\n                    return el.product_no === element.product_no;\r\n                  }\r\n                );\r\n\r\n                var year = moment(new Date()).format(\"YYYY\");\r\n                var month =\r\n                  parseInt(\r\n                    moment(new Date(year + \"-\" + element.d25.month)).format(\"MM\")\r\n                  );\r\n                const current_month = \"0\" + month;\r\n                console.log(\"month\", month);\r\n                let all_forcast = 0;\r\n                for (const data of result_check_temp_filter) {\r\n                  for (var index = 0; index < 25; index++) {\r\n                   if (data[`d${index + 1}`].month === current_month) {\r\n                  /*   if (element.product_no === \"TC402-3434-1\") {\r\n                      console.log(\"current_month\",current_month,\"forcast_month\",data[`d${index + 1}`].month,\"forecast\",data[`d${index + 1}`].forecast,\"day\",data[`d${index + 1}`].day);\r\n                    } */\r\n                 \r\n                    all_forcast += data[`d${index + 1}`].forecast;\r\n                   }  \r\n                  }\r\n                }\r\n\r\n               /*  if (element.product_no === \"TC402-3434-1\") {\r\n                  console.log(result_check_temp_filter);\r\n                  console.log(\"all_forcast\",all_forcast);\r\n                } */\r\n               \r\n            \r\n              \r\n               \r\n                element[\"d1\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d1\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d2\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d2\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d3\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d3\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d4\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d4\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d5\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d5\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d6\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d6\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d7\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d7\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d8\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d8\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d9\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d9\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d10\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d10\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d11\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d11\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d12\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d12\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d13\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d13\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d14\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d14\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d15\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d15\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d16\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d16\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d17\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d17\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d18\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d18\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d19\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d19\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d20\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d20\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d21\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d21\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d22\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d22\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d23\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d23\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d24\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d24\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                element[\"d25\"].forecast = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"d25\"].forecast;\r\n                  },\r\n                  0\r\n                );\r\n                const test = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"n1\"];\r\n                  },\r\n                  0\r\n                ) + all_forcast;\r\n\r\n                  console.log(\"test\",test);\r\n\r\n                element.n1 = test;\r\n\r\n                element.n2 = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"n2\"];\r\n                  },\r\n                  0\r\n                );\r\n\r\n                element.n3 = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"n3\"];\r\n                  },\r\n                  0\r\n                );\r\n\r\n                element.n4 = result_check_temp_filter.reduce(\r\n                  (accumulator, object) => {\r\n                    return accumulator + object[\"n4\"];\r\n                  },\r\n                  0\r\n                );\r\n\r\n                result_check_distinct.push(element);\r\n                /* else {\r\n                 result_check_distinct.push(element);\r\n               } */\r\n              }\r\n            } else {\r\n              result_check_distinct = result_check.data;\r\n            }\r\n            result_check.data = result_check_distinct;\r\n            /*    if(result_check_temp_filter.length > 1){\r\n\r\n              }else{\r\n                result_check.push(element);\r\n              } */\r\n\r\n            /* console.log(result_check); */\r\n    /*         throw Error(\"break\"); */\r\n            if (result_check.template_status === false) {\r\n              var log_external_data_id = uuidv4();\r\n              await client.query(\r\n                _QueryqueryExternalDataCTS.add_log_external_data,\r\n                [\r\n                  log_external_data_id,\r\n                  model.file_target.file_name,\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                  \"อัพโหลดไม่สำเร็จ\",\r\n                  JSON.stringify(result_check.data) || null,\r\n                ]\r\n              );\r\n              throw Error(\"ไม่ตรงตาม template\");\r\n            }\r\n            var result_add_data_forecast;\r\n             \r\n            if(model.type_select == \"New Forecast\"){\r\n              console.log(\"NEW\");\r\n              await add_date_forecast(\r\n                result_check,\r\n                model.oem_id,\r\n                result_check.template_name,\r\n                user_id,\r\n                model.company_id,\r\n                model.type_select,\r\n              ).then((res) => {\r\n                result_add_data_forecast = res;\r\n              });\r\n            }else if(model.type_select == \"Update Forecast\"){\r\n              console.log(\"Update\");\r\n              await update_date_forecast(\r\n                result_check,\r\n                model.oem_id,\r\n                result_check.template_name,\r\n                user_id,\r\n                model.company_id,\r\n                model.type_select,\r\n              ).then((res) => {\r\n                result_add_data_forecast = res;\r\n              });\r\n            }\r\n           \r\n    \r\n            \r\n\r\n            var temp_data = {\r\n              data: result_add_data_forecast,\r\n              template_result: result_check.template_name,\r\n              template_status: result_check.template_status,\r\n              template_file_name: model.file_target.file_name,\r\n            };\r\n            //resolve(result_add_data_forecast);\r\n            resolve(temp_data);\r\n            /*  resolve(true) */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n\r\n          //resolve(result_add_data_forecast);\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getExternalDataLog(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var get_external_log_data = await client.query(\r\n              _QueryqueryExternalDataCTS.get_log_external_data,\r\n              [model.oem_id, model.company_id]\r\n            );\r\n            resolve(get_external_log_data.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction check_template(model) {\r\n  //console.log(\"fncModel\",model)\r\n  var data_format = [];\r\n  var template_status = false;\r\n  var template_name = \"\";\r\n  var template_sort = \"\";\r\n  var workbook = XLSX.read(model.file.file.data, {\r\n    type: \"buffer\",\r\n  });\r\n  var sheet_name_list = workbook.SheetNames;\r\n  var JsonList = [];\r\n  sheet_name_list.forEach((ws) => {\r\n    //console.log(workbook.Sheets[ws]['A1'])\r\n    workbook.Sheets[ws][\"A1\"].w = \"key\";\r\n\r\n    /*     let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]); */\r\n    let tmp = {\r\n      key: workbook.Sheets[ws][\"A1\"].v,\r\n     /*  key_1:workbook.Sheets[ws][\"B1\"].v, */\r\n    };\r\n    JsonList.push(tmp);\r\n  });\r\n\r\n  /*  console.log('JsonList',JsonList); */\r\n  var checkDDN = JsonList.filter((e) => {\r\n    return e.key === \"Delivery Direction Notice ( Production Month )\";\r\n  });\r\n\r\n  if (checkDDN.length > 0) {\r\n    template_status = true;\r\n    template_name = \"DDN template\";\r\n    template_sort = 1;\r\n    var data = [];\r\n    var sheet_name_list = workbook.SheetNames;\r\n    var JsonList = [];\r\n    let tempJson = XLSX.utils.sheet_to_json(\r\n      workbook.Sheets[sheet_name_list[0]]\r\n    );\r\n    // console.log(tempJson);\r\n    for (var r = 0; r < tempJson.length; r++) {\r\n      let temp = {\r\n        product_no: tempJson[r].key,\r\n        d1: tempJson[r].__EMPTY_4 || 0,\r\n        d2: tempJson[r].__EMPTY_5 || 0,\r\n        d3: tempJson[r].__EMPTY_6 || 0,\r\n        d4: tempJson[r].__EMPTY_7 || 0,\r\n        d5: tempJson[r].__EMPTY_8 || 0,\r\n        d6: tempJson[r].__EMPTY_9 || 0,\r\n        d7: tempJson[r].__EMPTY_10 || 0,\r\n        d8: tempJson[r].__EMPTY_11 || 0,\r\n        d9: tempJson[r].__EMPTY_12 || 0,\r\n        d10: tempJson[r].__EMPTY_13 || 0,\r\n        d11: tempJson[r].__EMPTY_14 || 0,\r\n        d12: tempJson[r].__EMPTY_15 || 0,\r\n        d13: tempJson[r].__EMPTY_16 || 0,\r\n        d14: tempJson[r].__EMPTY_17 || 0,\r\n        d15: tempJson[r].__EMPTY_18 || 0,\r\n        d16: tempJson[r].__EMPTY_19 || 0,\r\n        d17: tempJson[r].__EMPTY_20 || 0,\r\n        d18: tempJson[r].__EMPTY_21 || 0,\r\n        d19: tempJson[r].__EMPTY_22 || 0,\r\n        d20: tempJson[r].__EMPTY_23 || 0,\r\n        d21: tempJson[r].__EMPTY_24 || 0,\r\n        d22: tempJson[r].__EMPTY_25 || 0,\r\n        d23: tempJson[r].__EMPTY_26 || 0,\r\n        d24: tempJson[r].__EMPTY_27 || 0,\r\n        d25: tempJson[r].__EMPTY_28 || 0,\r\n       /*  n0: tempJson[r].__EMPTY_29 || 0, */\r\n        n1: tempJson[r].__EMPTY_29 || 0,\r\n        n2: tempJson[r].__EMPTY_30 || 0,\r\n        n3: tempJson[r].__EMPTY_31 || 0,\r\n        n4: tempJson[r].__EMPTY_32 || 0,\r\n      };\r\n      /*     console.log(temp) */\r\n      if (\r\n        r > 0 /*  && tempJson[r].key !== \"Item Number\" */ &&\r\n        tempJson[r].key !== \"Month\" &&\r\n        tempJson[r].key.trim() !== \"\"\r\n      ) {\r\n        JsonList.push(temp);\r\n      }\r\n    }\r\n    data_format = JsonList;\r\n    var MMDD_arr = [];\r\n    for (var index = 0; index < 25; index++) {\r\n      MMDD_arr[index] = data_format[0][`d${index + 1}`].split(\"/\");\r\n    }\r\n\r\n    for (var index0 = 0; index0 < data_format.length; index0++) {\r\n      for (var index = 0; index < 25; index++) {\r\n        let temp = {\r\n          day: MMDD_arr[index][0],\r\n          month: MMDD_arr[index][1],\r\n          forecast: data_format[index0][`d${index + 1}`],\r\n        };\r\n\r\n        data_format[index0][`d${index + 1}`] = temp;\r\n      }\r\n    }\r\n  }\r\n\r\n  var checkK_plannet = JsonList.filter((e) => {\r\n    return e.key === \"Data NO\";\r\n  });\r\n\r\n  if (checkK_plannet.length > 0) {\r\n    template_status = true;\r\n    template_name = \"KPMT template\";\r\n    template_sort = 10;\r\n    var data = [];\r\n    sheet_name_list.forEach((ws) => {\r\n      workbook.Sheets[ws][\"H1\"].w = \"product_no\";\r\n      workbook.Sheets[ws][\"AU1\"].w = \"d1\";\r\n      workbook.Sheets[ws][\"AV1\"].w = \"d2\";\r\n      workbook.Sheets[ws][\"AW1\"].w = \"d3\";\r\n      workbook.Sheets[ws][\"AX1\"].w = \"d4\";\r\n      workbook.Sheets[ws][\"AY1\"].w = \"d5\";\r\n      workbook.Sheets[ws][\"AZ1\"].w = \"d6\";\r\n      workbook.Sheets[ws][\"BA1\"].w = \"d7\";\r\n      workbook.Sheets[ws][\"BB1\"].w = \"d8\";\r\n      workbook.Sheets[ws][\"BC1\"].w = \"d9\";\r\n      workbook.Sheets[ws][\"BD1\"].w = \"d10\";\r\n      workbook.Sheets[ws][\"BE1\"].w = \"d11\";\r\n      workbook.Sheets[ws][\"BF1\"].w = \"d12\";\r\n      workbook.Sheets[ws][\"BG1\"].w = \"d13\";\r\n      workbook.Sheets[ws][\"BH1\"].w = \"d14\";\r\n      workbook.Sheets[ws][\"BI1\"].w = \"d15\";\r\n      workbook.Sheets[ws][\"BJ1\"].w = \"d16\";\r\n      workbook.Sheets[ws][\"BK1\"].w = \"d17\";\r\n      workbook.Sheets[ws][\"BL1\"].w = \"d18\";\r\n      workbook.Sheets[ws][\"BM1\"].w = \"d19\";\r\n      workbook.Sheets[ws][\"BN1\"].w = \"d20\";\r\n      workbook.Sheets[ws][\"BO1\"].w = \"d21\";\r\n      workbook.Sheets[ws][\"BP1\"].w = \"d22\";\r\n      workbook.Sheets[ws][\"BQ1\"].w = \"d23\";\r\n      workbook.Sheets[ws][\"BR1\"].w = \"d24\";\r\n      workbook.Sheets[ws][\"BS1\"].w = \"d25\";\r\n\r\n      workbook.Sheets[ws][\"BT1\"].w = \"date1\";\r\n      workbook.Sheets[ws][\"BU1\"].w = \"date2\";\r\n      workbook.Sheets[ws][\"BV1\"].w = \"date3\";\r\n      workbook.Sheets[ws][\"BW1\"].w = \"date4\";\r\n      workbook.Sheets[ws][\"BX1\"].w = \"date5\";\r\n      workbook.Sheets[ws][\"BY1\"].w = \"date6\";\r\n      workbook.Sheets[ws][\"BZ1\"].w = \"date7\";\r\n      workbook.Sheets[ws][\"CA1\"].w = \"date8\";\r\n      workbook.Sheets[ws][\"CB1\"].w = \"date9\";\r\n      workbook.Sheets[ws][\"CC1\"].w = \"date10\";\r\n      workbook.Sheets[ws][\"CD1\"].w = \"date11\";\r\n      workbook.Sheets[ws][\"CE1\"].w = \"date12\";\r\n      workbook.Sheets[ws][\"CF1\"].w = \"date13\";\r\n      workbook.Sheets[ws][\"CG1\"].w = \"date14\";\r\n      workbook.Sheets[ws][\"CH1\"].w = \"date15\";\r\n      workbook.Sheets[ws][\"CI1\"].w = \"date16\";\r\n      workbook.Sheets[ws][\"CJ1\"].w = \"date17\";\r\n      workbook.Sheets[ws][\"CK1\"].w = \"date18\";\r\n      workbook.Sheets[ws][\"CL1\"].w = \"date19\";\r\n      workbook.Sheets[ws][\"CM1\"].w = \"date20\";\r\n      workbook.Sheets[ws][\"CN1\"].w = \"date21\";\r\n      workbook.Sheets[ws][\"CO1\"].w = \"date22\";\r\n      workbook.Sheets[ws][\"CP1\"].w = \"date23\";\r\n      workbook.Sheets[ws][\"CQ1\"].w = \"date24\";\r\n      workbook.Sheets[ws][\"CR1\"].w = \"date25\";\r\n\r\n      workbook.Sheets[ws][\"CV1\"].w = \"n\";\r\n      workbook.Sheets[ws][\"CZ1\"].w = \"n1\";\r\n      workbook.Sheets[ws][\"DA1\"].w = \"n2\";\r\n      workbook.Sheets[ws][\"DB1\"].w = \"n3\";\r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n\r\n      data = tempJson;\r\n    });\r\n    let tempDate = {\r\n      date1: data[0].date1,\r\n      date2: data[0].date2,\r\n      date3: data[0].date3,\r\n      date4: data[0].date4,\r\n      date5: data[0].date5,\r\n      date6: data[0].date6,\r\n      date7: data[0].date7,\r\n      date8: data[0].date8,\r\n      date9: data[0].date9,\r\n      date10: data[0].date10,\r\n      date11: data[0].date11,\r\n      date12: data[0].date12,\r\n      date13: data[0].date13,\r\n      date14: data[0].date14,\r\n      date15: data[0].date15,\r\n      date16: data[0].date16,\r\n      date17: data[0].date17,\r\n      date18: data[0].date18,\r\n      date19: data[0].date19,\r\n      date20: data[0].date20,\r\n      date21: data[0].date21,\r\n      date22: data[0].date22,\r\n      date23: data[0].date23,\r\n      date24: data[0].date24,\r\n      date25: data[0].date25,\r\n    };\r\n   /*  console.log(data); */\r\n    for (let item of data) {\r\n      if (item.product_no) {\r\n        var item_number = pad_fnc(item.product_no.toString());\r\n        /*   console.log(item_number) */\r\n        var new_item_number = \"\";\r\n        /*      console.log(item_number.length) */\r\n        for (var i = 0; i < item_number.length; i++) {\r\n          new_item_number += item_number[i];\r\n          if (i === 4) {\r\n            new_item_number += \"-\";\r\n          }\r\n          if (i === 8) {\r\n            new_item_number += \"-\";\r\n          }\r\n        }\r\n\r\n       /*  for(let ind = 1; ind <= 25; ind++){\r\n          item[`d${ind}`] \r\n        } */\r\n        \r\n\r\n\r\n        let temp = {\r\n          product_no: new_item_number,\r\n\r\n          d1: Number(item.d1),\r\n          d2: Number(item.d2),\r\n          d3: Number(item.d3),\r\n          d4: Number(item.d4),\r\n          d5: Number(item.d5),\r\n          d6: Number(item.d6),\r\n          d7: Number(item.d7),\r\n          d8: Number(item.d8),\r\n          d9: Number(item.d9),\r\n          d10: Number(item.d10),\r\n          d11: Number(item.d11),\r\n          d12: Number(item.d12),\r\n          d13: Number(item.d13),\r\n          d14: Number(item.d14),\r\n          d15: Number(item.d15),\r\n          d16: Number(item.d16),\r\n          d17: Number(item.d17),\r\n          d18: Number(item.d18),\r\n          d19: Number(item.d19),\r\n          d20: Number(item.d20),\r\n          d21: Number(item.d21),\r\n          d22: Number(item.d22),\r\n          d23: Number(item.d23),\r\n          d24: Number(item.d24),\r\n          d25: Number(item.d25),\r\n          n: item.n,\r\n          n1: item.n1,\r\n          n2: item.n2,\r\n          n3: item.n3,\r\n          n4: 0,\r\n        };\r\n        data_format.push(temp);\r\n      }\r\n    }\r\n\r\n    var MMDD_arr = [];\r\n    /*  for(var index =0; index < 25; index++){\r\n     MMDD_arr[index] = data_format[0][`d${index+1}`].split(\"/\");\r\n     } */\r\n  \r\n    for (var index0 = 0; index0 < data_format.length; index0++) {\r\n      let key = 0;\r\n      for (var index = 0; index < 25; index++) {\r\n\r\n        let temp = {\r\n          day: /* MMDD_arr[index][0] */ moment(\r\n            data[index0][`date${index + 1}`],\r\n            \"YYYYMMDD\"\r\n          ).format(\"DD\"),\r\n          month: moment(data[index0][`date${index + 1}`], \"YYYYMMDD\").format(\"MM\"),\r\n          forecast: data_format[index0][`d${index + 1}`],\r\n        };\r\n\r\n        if(moment(data[index0][`date${1}`], \"YYYYMMDD\").format(\"MM\") !== moment(data[index0][`date${index + 2}`], \"YYYYMMDD\").format(\"MM\") && key== 0\r\n        \r\n\r\n        \r\n        ){\r\n        \r\n        // console.log(moment(tempDate[`date${1}`], \"YYYYMMDD\").endOf('months').format(\"DD\"), \"==\" ,moment(tempDate[`date${index + 1}`], \"YYYYMMDD\").format(\"DD\"))\r\n          if(moment(data[index0][`date${1}`], \"YYYYMMDD\").endOf('months').format(\"DD\") == moment(data[index0][`date${index + 1}`], \"YYYYMMDD\").format(\"DD\")){\r\n           console.log(\"new Monthhhhh last Day\",data_format[index0].product_no);\r\n            temp.forecast = parseFloat(temp.forecast) + parseFloat(data_format[index0].n || 0);\r\n/*             console.log(temp.forecast) */\r\n          }else {\r\n            console.log(\"HERE\",moment(data[index0][`date${index + 1}`], \"YYYYMMDD\").add(1,'days').format(\"ddd\"))\r\n            if(moment(data[index0][`date${index + 1}`], \"YYYYMMDD\").add(1,'days').format(\"ddd\") == 'Sun'){\r\n              temp.forecast = parseFloat(temp.forecast) + parseFloat(data_format[index0].n || 0);\r\n            }else{\r\n              console.log(\"HERE\",data_format[index0].product_no)\r\n              let temp2 = {\r\n                day: moment(\r\n                  data[index0][`date${index + 1}`],\r\n                  \"YYYYMMDD\"\r\n                ).add(1,'days').format(\"DD\"),\r\n                month: moment(data[index0][`date${index + 1}`], \"YYYYMMDD\").format(\"MM\"),\r\n                forecast: parseFloat(data_format[index0][`d${index + 1}`]) + parseFloat(data_format[index0].n || 0),\r\n              };\r\n              data_format[index0][`d${26}`] = temp2;\r\n            }\r\n          }\r\n          key++;\r\n        }\r\n       \r\n\r\n        data_format[index0][`d${index + 1}`] = temp;\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(\"data_format\",data_format)\r\n\r\n  var check_pmrp_standart = JsonList.filter((e) => {\r\n    return e.key === \"item\";\r\n  });\r\n\r\n  if (check_pmrp_standart.length > 0) {\r\n    template_status = true;\r\n    template_name = \"PMRP-Standart template\";\r\n    template_sort = 4;\r\n    var data = [];\r\n    sheet_name_list.forEach((ws) => {\r\n      workbook.Sheets[ws][\"B1\"].w = \"product_no\";\r\n      workbook.Sheets[ws][\"C1\"].w = \"n1\";\r\n      workbook.Sheets[ws][\"D1\"].w = \"n2\";\r\n      workbook.Sheets[ws][\"E1\"].w = \"n3\";\r\n      workbook.Sheets[ws][\"F1\"].w = \"n4\";\r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]); \r\n\r\n      data = tempJson;\r\n    });\r\n    for (let item of data) {\r\n      let temp = {\r\n        product_no: item.product_no,\r\n        n1: item.n1,\r\n        n2: item.n2,\r\n        n3: item.n3,\r\n        n4: item.n4,\r\n      };\r\n      data_format.push(temp);\r\n    }\r\n  }\r\n\r\n  var check_po_skt = JsonList.filter((e) => {\r\n    return e.key === \"No\";\r\n  });\r\n\r\n  if (check_po_skt.length > 0) {\r\n    template_status = true;\r\n    template_name = \"PO-SKT template\";\r\n    var data = [];\r\n    sheet_name_list.forEach((ws) => {\r\n      workbook.Sheets[ws][\"D1\"].w = \"po_number\";\r\n      workbook.Sheets[ws][\"F1\"].w = \"item_number\";\r\n      workbook.Sheets[ws][\"J1\"].w = \"qty_order\";\r\n      workbook.Sheets[ws][\"K1\"].w = \"item_description\";\r\n      workbook.Sheets[ws][\"T1\"].w = \"unit_price\";\r\n      workbook.Sheets[ws][\"V1\"].w = \"delivery_date\";\r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n\r\n      data = tempJson;\r\n    });\r\n    for (let item of data) {\r\n      let temp = {\r\n        item_number: item.item_number.toString().trim(),\r\n        po_number: item.po_number,\r\n        qty_order: item.qty_order,\r\n        item_description: item.item_description.trim(),\r\n        unit_price: item.unit_price,\r\n        delivery_date: item.delivery_date,\r\n      };\r\n      data_format.push(temp);\r\n    }\r\n  }\r\n\r\n\r\n  var check_col_A_Supplier_21 = JsonList.filter((e) => {\r\n    return e.key === \"Supplier\";\r\n  });\r\n\r\n  if (check_col_A_Supplier_21.length > 0) {\r\n    /* console.log('ชีสครับ',sheet_name_list); */\r\n    template_status = true;\r\n    template_name = \"Japan Plant 21 template\";\r\n    template_sort = 7;\r\n    var data = [];\r\n    let currentMonth;\r\n    sheet_name_list.forEach((ws) => {\r\n      currentMonth = workbook.Sheets[ws][\"P1\"].w;\r\n\r\n      console.log('Cruu',currentMonth);\r\n\r\n      workbook.Sheets[ws][\"E1\"].w = \"product_no\";\r\n      workbook.Sheets[ws][\"B1\"].w = \"type_template\";\r\n      workbook.Sheets[ws][\"Q1\"].w = \"n1\";\r\n      workbook.Sheets[ws][\"R1\"].w = \"n2\";\r\n      workbook.Sheets[ws][\"S1\"].w = \"n3\";\r\n      workbook.Sheets[ws][\"T1\"].w = \"n4\";\r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n      data = tempJson;\r\n    });\r\n\r\n   /*  let checkTemp28 = data.filter((t) => { return t.type_template === '28:SAKAI' })\r\n    if (checkTemp28.length > 0) {\r\n      template_name = 'Japan Plant 28 template';\r\n    } */\r\n\r\n  \r\n    let month = [\r\n      { key: 'Jan', value: '01' },\r\n      { key: 'Feb', value: '02' },\r\n      { key: 'Mar', value: '03' },\r\n      { key: 'Apr', value: '04' },\r\n      { key: 'May', value: '05' },\r\n      { key: 'Jun', value: '06' },\r\n      { key: 'Jul', value: '07' },\r\n      { key: 'Aug', value: '08' },\r\n      { key: 'Sep', value: '09' },\r\n      { key: 'Oct', value: '10' },\r\n      { key: 'Nov', value: '11' },\r\n      { key: 'Dec', value: '12' },\r\n    ]\r\n    let _ToMonth = month.filter((mt) => {return mt.key === currentMonth}) \r\n    let _M1 = moment(_ToMonth[0].value).add(1,'M').format('MM/YYYY');\r\n    let _M2 = moment(_ToMonth[0].value).add(2,'M').format('MM/YYYY');\r\n    let _M3 = moment(_ToMonth[0].value).add(3,'M').format('MM/YYYY');\r\n    let _M4 = moment(_ToMonth[0].value).add(4,'M').format('MM/YYYY');\r\n\r\n\r\n    /* console.log('DDDa',data); */\r\n    data.splice(0,1);\r\n    for (let item of data) {\r\n\r\n    \r\n      var MMDD_arr = [];\r\n\r\n      let temp = {\r\n        product_no: item.product_no,\r\n        n1: (item.n1 !== null && item.n1 !== undefined) ? Number(item.n1.toString().replace(/,/g, \"\")) : 0,\r\n        n2: (item.n1 !== null && item.n1 !== undefined) ? Number(item.n2.toString().replace(/,/g, \"\")) : 0,\r\n        n3: (item.n1 !== null && item.n1 !== undefined) ? Number(item.n3.toString().replace(/,/g, \"\")) : 0,\r\n        n4: (item.n1 !== null && item.n1 !== undefined) ? Number(item.n4.toString().replace(/,/g, \"\")) : 0,\r\n      };\r\n      /* console.log('เข้า',temp); */\r\n      temp.d1 = {\r\n        day: '01',\r\n        month: moment(new Date()).month(_ToMonth[0].value).add(-1,'month').format('MM'),\r\n        forecast: 0,\r\n            }; \r\n        let countD = 2;\r\n\r\n      for(let index_=0; index_ < 4; index_++){\r\n        var MonthTarget = moment(new Date()).month(_ToMonth[0].value);\r\n       /*  console.log('_Y',MonthTarget.format('MMM')); */\r\n        MonthTarget.add(index_,'month');\r\n\r\n     \r\n    \r\n      for(let index=0; index < 4; index++){\r\n        let month_ = MonthTarget.format('MMM');\r\n       /*  console.log('_month_',month_); */\r\n        var monday = MonthTarget.day('Monday');\r\n        if(monday.format('MMM') !==  month_){\r\n          monday.add(7,'day');\r\n        }\r\n  \r\n        if(temp[`n${index_ + 1}`] / 4 > 0){\r\n          \r\n          let tempD = {\r\n            day: monday.format('DD'),\r\n            month: MonthTarget.format('MM'),\r\n            forecast: Math.ceil(temp[`n${index_ + 1}`] / 4),\r\n          }; \r\n          console.log('_TTR',temp);\r\n          temp[`d${countD}`] = tempD;\r\n          countD++;\r\n        }\r\n   \r\n     monday.add(7,'day');\r\n      }\r\n     \r\n    }\r\n      /* data_format.splice(0,1); */\r\n      data_format.push(temp);\r\n    }\r\n\r\n\r\n   \r\n  }\r\n\r\n\r\n\r\n  var check_KMA_KIE = JsonList.filter((e) => {\r\n    return e.key === \"Co.\";\r\n  });\r\n  if(check_KMA_KIE.length > 0){\r\n    template_status = true;\r\n    template_name = \"KMA template\";\r\n    template_sort = 5;\r\n    var data = [];\r\n    let currentMonth;\r\n    sheet_name_list.forEach((ws) => {\r\n      currentMonth = workbook.Sheets[ws][\"G1\"].w;\r\n      console.log(currentMonth);\r\n      workbook.Sheets[ws][\"A1\"].w = \"co\";\r\n\r\n      workbook.Sheets[ws][\"B1\"].w = \"product_no\";\r\n      workbook.Sheets[ws][\"D1\"].w = \"snp\";\r\n      workbook.Sheets[ws][\"G1\"].w = \"n1\";\r\n      workbook.Sheets[ws][\"H1\"].w = \"n2\";\r\n      workbook.Sheets[ws][\"I1\"].w = \"n3\";\r\n      workbook.Sheets[ws][\"J1\"].w = \"n4\";\r\n      \r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n\r\n      data = tempJson;\r\n    });\r\n    if(data[0].co === 'KIE'){\r\n      template_name = \"KIE template\";\r\n      template_sort = 6;\r\n    }\r\n\r\n     currentMonth = currentMonth.split('-')[0];\r\n \r\n    for (let item of data) {\r\n      let rate1 = Math.ceil(parseInt(item.n1) / parseInt(item.snp));\r\n      let rate2 = Math.ceil(parseInt(item.n2) / parseInt(item.snp));\r\n      let rate3 = Math.ceil(parseInt(item.n3) / parseInt(item.snp));\r\n      let rate4 = Math.ceil(parseInt(item.n4) / parseInt(item.snp));\r\n/*       console.log(item.n1,item.snp,rate1) */\r\nitem.product_no = item.product_no.replaceAll(\"-\", \"\");\r\nif(item.product_no.length == 10){\r\n  let tmpNo =item.product_no;\r\n  item.product_no = tmpNo[0] + tmpNo[1]+ tmpNo[2]+ tmpNo[3]+ tmpNo[4] + \"-\"+tmpNo[5]+tmpNo[6]+tmpNo[7]+tmpNo[8]+\"-\"+tmpNo[9];\r\n}else{\r\n  let zeroTxt = \"\";\r\n  for(let tn=0;tn < 10 - item.product_no.length; tn++){\r\n    zeroTxt += \"0\";\r\n  }\r\n  let tmpNo2 = zeroTxt + item.product_no;\r\n  item.product_no = tmpNo2[0] + tmpNo2[1]+ tmpNo2[2]+ tmpNo2[3]+ tmpNo2[4] + \"-\"+tmpNo2[5]+tmpNo2[6]+tmpNo2[7]+tmpNo2[8]+\"-\"+tmpNo2[9];\r\n\r\n}\r\n      let temp = {\r\n        product_no: item.product_no,\r\n        n1: parseInt(item.snp) * parseInt(rate1),\r\n        n2: parseInt(item.snp) * parseInt(rate2),\r\n        n3: parseInt(item.snp) * parseInt(rate3),\r\n        n4: parseInt(item.snp) * parseInt(rate4),\r\n      };\r\n      temp.d1 = {\r\n        day: '01',\r\n        month: moment(new Date()).month(currentMonth).add(-1,'month').format('MM'),\r\n        forecast: 0,\r\n            }; \r\n        let countD = 2;\r\n       \r\n        for(let index_=0; index_ < 4; index_++){\r\n          var MonthTarget = moment(new Date()).month(currentMonth);\r\n          MonthTarget.add(index_,'month');\r\n       /*    console.log(MonthTarget.format('DD/MM/YYYY')); */\r\n          \r\n      \r\n        for(let index=0; index < 4; index++){\r\n          let month_ = MonthTarget.format('MMM');\r\n        \r\n          var monday = MonthTarget.day('Monday');\r\n       \r\n          if(monday.format('MMM') !==  month_){\r\n            monday.add(7,'day');\r\n          }\r\n    \r\n          console.log(monday.format('ddd,DD/MM    ---  MMM',));\r\n         \r\n          \r\n          \r\n     \r\n\r\n          if(temp[`n${index_ + 1}`] / 4 > 0){\r\n            let tempD = {\r\n              day: monday.format('DD'),\r\n              month: MonthTarget.format('MM'),\r\n              forecast: Math.ceil(temp[`n${index_ + 1}`] / 4),\r\n            }; \r\n            temp[`d${countD}`] = tempD;\r\n          \r\n            countD++;\r\n          }\r\n     \r\n       monday.add(7,'day');\r\n        }\r\n      }\r\n     \r\n        console.log(\"temp\",temp)\r\n       /*  let temp = {\r\n          day: '',\r\n          month: '',\r\n          forecast: item[`d${index + 1}`],\r\n        }; */\r\n\r\n        //data_format[index0][`d${index + 1}`] = temp;\r\n      \r\n      data_format.push(temp);\r\n    }\r\n  /*   console.log(data_format) */\r\n  }\r\n\r\n  var check_Japand_28 = JsonList.filter((e) => {\r\n    return e.key === \"No.\"/*  && e.key_1 === \"Plant\" */;\r\n  });\r\n  if (check_Japand_28.length > 0) {\r\n    template_status = true;\r\n    template_name = \"Japan Plant 28 template\";\r\n    template_sort = 8;\r\n    var data = [];\r\n    let currentMonth;\r\n    sheet_name_list.forEach((ws) => {\r\n      currentMonth = workbook.Sheets[ws][\"P2\"].w;\r\n\r\n\r\n      workbook.Sheets[ws][\"E1\"].w = \"product_no\";\r\n      workbook.Sheets[ws][\"N1\"].w = \"snp\";\r\n      workbook.Sheets[ws][\"P1\"].w = \"M_date\";\r\n      workbook.Sheets[ws][\"Q1\"].w = \"N_Amont\";\r\n\r\n      let tempJson = XLSX.utils.sheet_to_json(workbook.Sheets[ws]);\r\n\r\n      data = tempJson;\r\n    });\r\n    data.sort((a, b) => a.M_date - b.M_date)\r\n    data.sort((c, d) => c.product_no.localeCompare(d.product_no))\r\n\r\n    let final = [];\r\n    let _countD = 2;\r\n    for (let index = 0; index < data.length; index++) {\r\n      let Product_Mor = final.filter((e) => { return e.product_no === data[index].product_no })\r\n      if (Product_Mor.length > 0) {\r\n        let _index = final.findIndex((e) => e.product_no === data[index].product_no)\r\n        if (_index > -1) {\r\n          final[_index][`n${_countD}`] = data[index].N_Amont;\r\n          if (_countD === 4) {\r\n            _countD = 2;\r\n          } else {\r\n            _countD++;\r\n          }\r\n        }\r\n      } else {\r\n        var temp = {\r\n          product_no: data[index].product_no,\r\n          snp: data[index].snp,\r\n          n1: data[index].N_Amont\r\n        }\r\n        final.push(temp);\r\n      }\r\n    }\r\n\r\n    for (let item of final) {\r\n      let rate1 = Math.ceil(parseInt(item.n1) / parseInt(item.snp));\r\n      let rate2 = Math.ceil(parseInt(item.n2) / parseInt(item.snp));\r\n      let rate3 = Math.ceil(parseInt(item.n3) / parseInt(item.snp));\r\n      let rate4 = Math.ceil(parseInt(item.n4) / parseInt(item.snp));\r\n      \r\n      if(item.product_no.length == 10){\r\n        let tmpNo =item.product_no;\r\n        item.product_no = tmpNo[0] + tmpNo[1]+ tmpNo[2]+ tmpNo[3]+ tmpNo[4] + \"-\"+tmpNo[5]+tmpNo[6]+tmpNo[7]+tmpNo[8]+\"-\"+tmpNo[9];\r\n      }else{\r\n        let zeroTxt = \"\";\r\n        for(let tn=0;tn < 10 - item.product_no.length; tn++){\r\n          zeroTxt += \"0\";\r\n        }\r\n        let tmpNo2 = zeroTxt + item.product_no;\r\n        item.product_no = tmpNo2[0] + tmpNo2[1]+ tmpNo2[2]+ tmpNo2[3]+ tmpNo2[4] + \"-\"+tmpNo2[5]+tmpNo2[6]+tmpNo2[7]+tmpNo2[8]+\"-\"+tmpNo2[9];\r\n\r\n      }\r\n      let temp = {\r\n        product_no: item.product_no,\r\n        n1: parseInt(item.snp) * parseInt(rate1),\r\n        n2: parseInt(item.snp) * parseInt(rate2),\r\n        n3: parseInt(item.snp) * parseInt(rate3),\r\n        n4: parseInt(item.snp) * parseInt(rate4),\r\n      };\r\n      let _SetM = moment(currentMonth).format('MM')\r\n      temp.d1 = {\r\n        day: '01',\r\n        month: moment(new Date()).month(_SetM).add(-2, 'month').format('MM'),\r\n        forecast: 0,\r\n      };\r\n      let countD = 2;\r\n\r\n      let crrm = moment(currentMonth).format('MMM')\r\n     /*  console.log('_M_0001',crrm); */\r\n\r\n      for (let index_ = 0; index_ < 4; index_++) {\r\n        var MonthTarget = moment(new Date()).month(crrm);\r\n        \r\n        /* console.log('_M_01',MonthTarget.format('MMM/MM')); */\r\n\r\n        MonthTarget.add(index_, 'month');\r\n\r\n  \r\n\r\n        for (let index = 0; index < 4; index++) {\r\n          let month_ = MonthTarget.format('MMM');\r\n          /* console.log('_Month',month_); */\r\n          var monday = MonthTarget.day('Monday');\r\n          \r\n          if (monday.format('MMM') !== month_) {\r\n            monday.add(7, 'day');\r\n          }\r\n\r\n          if (temp[`n${index_ + 1}`] / 4 > 0) {\r\n            let tempD = {\r\n              day: monday.format('DD'),\r\n              month: MonthTarget.format('MM'),\r\n              forecast: Math.ceil(temp[`n${index_ + 1}`] / 4),\r\n            };\r\n            temp[`d${countD}`] = tempD;\r\n\r\n            countD++;\r\n          }\r\n\r\n          monday.add(7, 'day');\r\n        }\r\n      }\r\n\r\n      data_format.push(temp);\r\n    }\r\n\r\n  }\r\n\r\n  var temp_data = {\r\n    data: data_format,\r\n    template_name: template_name,\r\n    template_status: template_status,\r\n    template_sort: template_sort,\r\n  };\r\n  return temp_data;\r\n}\r\n\r\nasync function add_date_forecast(\r\n  model,\r\n  oem_id,\r\n  source_data,\r\n  user_id,\r\n  company_id,\r\n  type_select\r\n) {\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    /*   console.log(model) */\r\n    var data = [];\r\n\r\n    if (source_data === \"PO-SKT template\") {\r\n      //po express\r\n      for (let item of model.data) {\r\n        var item_number = pad_fnc(item.item_number);\r\n        var new_item_number = \"\";\r\n        var product_id = \"\";\r\n        for (var i = 0; i < item_number.length; i++) {\r\n          new_item_number += item_number[i];\r\n          if (i === 4) {\r\n            new_item_number += \"-\";\r\n          }\r\n          if (i === 8) {\r\n            new_item_number += \"-\";\r\n          }\r\n        }\r\n\r\n        var check = await client.query(_QueryqueryExternalDataCTS.checkTEst, [\r\n          new_item_number,\r\n        ]);\r\n        if (check.rows.length > 0) {\r\n          console.log(\"เจอ\", new_item_number);\r\n          product_id = check.rows[0].id;\r\n          var check_express = await client.query(\r\n            _QueryqueryExternalDataCTS.check_express,\r\n            [\r\n              item.po_number,\r\n              item.item_number,\r\n              /*       item.delivery_date, */\r\n            ]\r\n          );\r\n          if (check_express.rows.length > 0) {\r\n            var express_id = check_express.rows[0].id;\r\n            await client.query(\r\n              _QueryqueryExternalDataCTS.update_purchase_express,\r\n              [\r\n                express_id,\r\n                item.qty_order,\r\n                item.item_description,\r\n                item.unit_price,\r\n                item.delivery_date,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n              ]\r\n            );\r\n\r\n            let temp = {\r\n              po_number: item.po_number,\r\n              item_number: /* item.item_number */ new_item_number,\r\n              item_description: item.item_description,\r\n              qty_order: item.qty_order,\r\n              unit_price: item.unit_price,\r\n              delivery_date: item.delivery_date,\r\n              status: true,\r\n              remark: \"update\",\r\n            };\r\n            data.push(temp);\r\n          } else {\r\n            let po_ex_id = uuidv4();\r\n            await client.query(\r\n              _QueryqueryExternalDataCTS.add_purchase_express,\r\n              [\r\n                po_ex_id,\r\n                item.po_number,\r\n                item.item_number,\r\n                item.qty_order,\r\n                item.item_description,\r\n                item.unit_price,\r\n                item.delivery_date,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n                oem_id,\r\n                company_id,\r\n                product_id,\r\n                new_item_number,\r\n              ]\r\n            );\r\n            let temp = {\r\n              po_number: item.po_number,\r\n              item_number: /* item.item_number */ new_item_number,\r\n              item_description: item.item_description,\r\n              qty_order: item.qty_order,\r\n              unit_price: item.unit_price,\r\n              delivery_date: item.delivery_date,\r\n              status: true,\r\n              remark: \"insert\",\r\n            };\r\n            data.push(temp);\r\n          }\r\n        } else {\r\n          console.log(\"ไม่เจอ\", new_item_number);\r\n          let temp = {\r\n            po_number: item.po_number,\r\n            item_number: /* item.item_number */ new_item_number,\r\n            item_description: item.item_description,\r\n            qty_order: item.qty_order,\r\n            unit_price: item.unit_price,\r\n            delivery_date: item.delivery_date,\r\n            status: false,\r\n            remark: \"this product no not found\",\r\n          };\r\n\r\n          data.push(temp);\r\n        }\r\n        /* */\r\n      }\r\n    } else {\r\n      /*  var MMDD_arr = [];\r\n     for(var index =0; index < 25; index++){\r\n     MMDD_arr[index] = model.data[0][`d${index+1}`].split(\"/\");\r\n     }\r\n\r\n     for(var index0 =0; index0 < model.data.length; index0++){\r\n     for(var index =0; index < 25; index++){\r\n      \r\n \r\n      let temp ={\r\n        day:MMDD_arr[index][0],\r\n        month:MMDD_arr[index][1],\r\n        forecast:model.data[index0][`d${index+1}`],\r\n      }\r\n\r\n model.data[index0][`d${index+1}`] = temp;\r\n      }\r\n    }\r\n    console.log(model.data); */\r\n    console.log(model.data)\r\n    console.log( model.data[0].d1);\r\n      var year = moment(new Date()).format(\"YYYY\");\r\n      var month =\r\n        parseInt(\r\n          moment(new Date(year + \"-\" + model.data[0].d1.month)).format(\"MM\")\r\n        ) - 1;\r\n\r\n      var t1 = moment(new Date(year, month)).add(1, \"M\");\r\n      var t2 = moment(new Date(year, month)).add(2, \"M\");\r\n      var t3 = moment(new Date(year, month)).add(3, \"M\");\r\n      var t4 = moment(new Date(year, month)).add(4, \"M\");\r\n      let listYearMonth = [t1, t2, t3, t4];\r\n      /* console.log(listYearMonth); */\r\n\r\n      for (let item of model.data) {\r\n        var check_product_no = await client.query(\r\n          _QueryqueryExternalDataCTS.check_product_by_no,\r\n          [item.product_no, oem_id]\r\n        );\r\n        //console.log(item.product_no,check_product_no.rows)\r\n        if (check_product_no.rows.length > 0) {\r\n          var product_id = check_product_no.rows[0].id;\r\n          var wip_amount = check_product_no.rows[0].wip_amount;\r\n          var fg_amount = check_product_no.rows[0].fg_amount;\r\n\r\n          for (let [index, ym] of listYearMonth.entries()) {\r\n            var check_forecast = await client.query(\r\n              _QueryqueryExternalDataCTS.find_product_forcast_by_year_month,\r\n              [product_id, ym.format(\"YYYYMM\"), source_data]\r\n            );\r\n            if (check_forecast.rows.length > 0) {\r\n              //update forecast\r\n              var forecast_id_ = check_forecast.rows[0].id;\r\n              await client.query(_QueryqueryExternalDataCTS.update_forecast, [\r\n                forecast_id_,\r\n                parseInt(item[\"n\" + (index + 1)] || 0) || 0, //amount_forecast\r\n                wip_amount || 0, // wip\r\n                fg_amount || 0, //fg_amount\r\n                wip_amount + fg_amount, //in_hand_amount\r\n                user_id, //user_id\r\n                new Date(), //update_date\r\n              ]);\r\n            } else {\r\n              //add forecast\r\n              var forecast_id = uuidv4();\r\n              await client.query(_QueryqueryExternalDataCTS.add_forecast, [\r\n                forecast_id,\r\n                product_id,\r\n                ym.format(\"YYYYMM\"),\r\n                0, //amount\r\n                parseInt(item[\"n\" + (index + 1)] || 0) || 0, //amount_forecast\r\n                wip_amount || 0, // wip\r\n                fg_amount || 0, //fg_amount\r\n                wip_amount + fg_amount, //in_hand_amount\r\n                user_id, //create_by\r\n                new Date(), //create_date\r\n                new Date(), //update date\r\n                source_data, //source data\r\n                model.template_sort || 0, //sort\r\n              ]);\r\n            }\r\n          }\r\n\r\n          for (var index = 0; index < 26; index++) {\r\n            if(item[`d${index + 1}`]){\r\n\r\n           \r\n            var check_forecast_day = await client.query(\r\n              _QueryqueryExternalDataCTS.find_product_forcast_day,\r\n              [\r\n                product_id,\r\n                item[`d${index + 1}`].day,\r\n                item[`d${index + 1}`].month,\r\n                moment(new Date()).format(\"YYYY\"),\r\n                source_data,\r\n              ]\r\n            );\r\n            if (check_forecast_day.rows.length > 0) {\r\n              //update\r\n              await client.query(\r\n                _QueryqueryExternalDataCTS.update_forecast_days,\r\n                [\r\n                  check_forecast_day.rows[0].id,\r\n                  item[`d${index + 1}`].forecast,\r\n                  new Date(),\r\n                ]\r\n              );\r\n            } else {\r\n              //add\r\n              //   console.log(\"in\",item[`d${index+1}`].day,item[`d${index+1}`].month)\r\n              if (item[`d${index + 1}`].forecast > 0) {\r\n                let id_forecast_cts_day = uuidv4();\r\n                await client.query(\r\n                  _QueryqueryExternalDataCTS.add_forecast_days,\r\n                  [\r\n                    id_forecast_cts_day,\r\n                    item[`d${index + 1}`].month,\r\n                    moment(new Date()).format(\"YYYY\"),\r\n                    item[`d${index + 1}`].day,\r\n                    item[`d${index + 1}`].forecast,\r\n                    moment(new Date()).format(\"YYYY\") +\r\n                    item[`d${index + 1}`].month,\r\n                    new Date(),\r\n                    new Date(),\r\n                    product_id,\r\n                    source_data,\r\n                  ]\r\n                );\r\n              }\r\n            }\r\n          }\r\n          }\r\n          let temp = {\r\n            product_no: item.product_no,\r\n            product_name: check_product_no.rows[0].name,\r\n            n1: item.n1,\r\n            n2: item.n2,\r\n            n3: item.n3,\r\n            n4: item.n4,\r\n            status: true,\r\n            remark: \"\",\r\n          };\r\n          if (item.product_no !== \"Item Number\") {\r\n            data.push(temp);\r\n          }\r\n        } else {\r\n          let temp = {\r\n            product_no: item.product_no,\r\n            product_name: \"\",\r\n            n1: item.n1,\r\n            n2: item.n2,\r\n            n3: item.n3,\r\n            n4: item.n4,\r\n            status: false,\r\n            remark: \"this product no not found.\",\r\n          };\r\n          if (item.product_no !== \"Item Number\") {\r\n            data.push(temp);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var log_external_data_id = uuidv4();\r\n    await client.query(_QueryqueryExternalDataCTS.add_log_external_data, [\r\n      log_external_data_id,\r\n      source_data,\r\n      true,\r\n      new Date(),\r\n      user_id,\r\n      new Date(),\r\n      user_id,\r\n      oem_id,\r\n      company_id,\r\n      \"อัพโหลดสำเร็จ\",\r\n      JSON.stringify(data) || null,\r\n      type_select,\r\n    ]);\r\n\r\n    //console.log(data)\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n  } finally {\r\n    await client.end();\r\n  }\r\n}\r\n\r\n\r\nasync function update_date_forecast(\r\n  model,\r\n  oem_id,\r\n  source_data,\r\n  user_id,\r\n  company_id,\r\n  type_select\r\n) {\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    /*   console.log(model) */\r\n    var data = [];\r\n\r\n    if (source_data === \"PO-SKT template\") {\r\n      //po express\r\n      for (let item of model.data) {\r\n        var item_number = pad_fnc(item.item_number);\r\n        var new_item_number = \"\";\r\n        var product_id = \"\";\r\n        for (var i = 0; i < item_number.length; i++) {\r\n          new_item_number += item_number[i];\r\n          if (i === 4) {\r\n            new_item_number += \"-\";\r\n          }\r\n          if (i === 8) {\r\n            new_item_number += \"-\";\r\n          }\r\n        }\r\n\r\n        var check = await client.query(_QueryqueryExternalDataCTS.checkTEst, [\r\n          new_item_number,\r\n        ]);\r\n        if (check.rows.length > 0) {\r\n          console.log(\"เจอ\", new_item_number);\r\n          product_id = check.rows[0].id;\r\n          var check_express = await client.query(\r\n            _QueryqueryExternalDataCTS.check_express,\r\n            [\r\n              item.po_number,\r\n              item.item_number,\r\n              /*       item.delivery_date, */\r\n            ]\r\n          );\r\n          if (check_express.rows.length > 0) {\r\n            var express_id = check_express.rows[0].id;\r\n            await client.query(\r\n              _QueryqueryExternalDataCTS.update_purchase_express,\r\n              [\r\n                express_id,\r\n                item.qty_order,\r\n                item.item_description,\r\n                item.unit_price,\r\n                item.delivery_date,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n              ]\r\n            );\r\n\r\n            let temp = {\r\n              po_number: item.po_number,\r\n              item_number: /* item.item_number */ new_item_number,\r\n              item_description: item.item_description,\r\n              qty_order: item.qty_order,\r\n              unit_price: item.unit_price,\r\n              delivery_date: item.delivery_date,\r\n              status: true,\r\n              remark: \"update\",\r\n            };\r\n            data.push(temp);\r\n          } else {\r\n            let po_ex_id = uuidv4();\r\n            await client.query(\r\n              _QueryqueryExternalDataCTS.add_purchase_express,\r\n              [\r\n                po_ex_id,\r\n                item.po_number,\r\n                item.item_number,\r\n                item.qty_order,\r\n                item.item_description,\r\n                item.unit_price,\r\n                item.delivery_date,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n                oem_id,\r\n                company_id,\r\n                product_id,\r\n                new_item_number,\r\n              ]\r\n            );\r\n            let temp = {\r\n              po_number: item.po_number,\r\n              item_number: /* item.item_number */ new_item_number,\r\n              item_description: item.item_description,\r\n              qty_order: item.qty_order,\r\n              unit_price: item.unit_price,\r\n              delivery_date: item.delivery_date,\r\n              status: true,\r\n              remark: \"insert\",\r\n            };\r\n            data.push(temp);\r\n          }\r\n        } else {\r\n          console.log(\"ไม่เจอ\", new_item_number);\r\n          let temp = {\r\n            po_number: item.po_number,\r\n            item_number: /* item.item_number */ new_item_number,\r\n            item_description: item.item_description,\r\n            qty_order: item.qty_order,\r\n            unit_price: item.unit_price,\r\n            delivery_date: item.delivery_date,\r\n            status: false,\r\n            remark: \"this product no not found\",\r\n          };\r\n\r\n          data.push(temp);\r\n        }\r\n        /* */\r\n      }\r\n    } else {\r\n      /*  var MMDD_arr = [];\r\n     for(var index =0; index < 25; index++){\r\n     MMDD_arr[index] = model.data[0][`d${index+1}`].split(\"/\");\r\n     }\r\n\r\n     for(var index0 =0; index0 < model.data.length; index0++){\r\n     for(var index =0; index < 25; index++){\r\n      \r\n \r\n      let temp ={\r\n        day:MMDD_arr[index][0],\r\n        month:MMDD_arr[index][1],\r\n        forecast:model.data[index0][`d${index+1}`],\r\n      }\r\n\r\n model.data[index0][`d${index+1}`] = temp;\r\n      }\r\n    }\r\n    console.log(model.data); */\r\n\r\n      var year = moment(new Date()).format(\"YYYY\");\r\n      var month =\r\n        parseInt(\r\n          moment(new Date(year + \"-\" + model.data[0].d1.month)).format(\"MM\")\r\n        ) - 1;\r\n\r\n      var t1 = moment(new Date(year, month)).add(1, \"M\");\r\n      var t2 = moment(new Date(year, month)).add(2, \"M\");\r\n      var t3 = moment(new Date(year, month)).add(3, \"M\");\r\n      var t4 = moment(new Date(year, month)).add(4, \"M\");\r\n      let listYearMonth = [t1, t2, t3, t4];\r\n      /* console.log(listYearMonth); */\r\n\r\n      for (let item of model.data) {\r\n        var check_product_no = await client.query(\r\n          _QueryqueryExternalDataCTS.check_product_by_no,\r\n          [item.product_no, oem_id]\r\n        );\r\n        //console.log(item.product_no,check_product_no.rows)\r\n        if (check_product_no.rows.length > 0) {\r\n          var product_id = check_product_no.rows[0].id;\r\n          var wip_amount = check_product_no.rows[0].wip_amount;\r\n          var fg_amount = check_product_no.rows[0].fg_amount;\r\n\r\n          for (let [index, ym] of listYearMonth.entries()) {\r\n            var check_forecast = await client.query(\r\n              _QueryqueryExternalDataCTS.find_product_forcast_by_year_month,\r\n              [product_id, ym.format(\"YYYYMM\"), source_data]\r\n            );\r\n            if (check_forecast.rows.length > 0) {\r\n              //update forecast\r\n              var forecast_id_ = check_forecast.rows[0].id;\r\n              await client.query(_QueryqueryExternalDataCTS.update_forecast, [\r\n                forecast_id_,\r\n                (parseInt(item[\"n\" + (index + 1)] || 0) || 0) + parseInt(check_forecast.rows[0].amount_forcast), //amount_forecast\r\n                wip_amount || 0, // wip\r\n                fg_amount || 0, //fg_amount\r\n                wip_amount + fg_amount, //in_hand_amount\r\n                user_id, //user_id\r\n                new Date(), //update_date\r\n              ]);\r\n            } else {\r\n              //add forecast\r\n              var forecast_id = uuidv4();\r\n              await client.query(_QueryqueryExternalDataCTS.add_forecast, [\r\n                forecast_id,\r\n                product_id,\r\n                ym.format(\"YYYYMM\"),\r\n                0, //amount\r\n                parseInt(item[\"n\" + (index + 1)] || 0) || 0, //amount_forecast\r\n                wip_amount || 0, // wip\r\n                fg_amount || 0, //fg_amount\r\n                wip_amount + fg_amount, //in_hand_amount\r\n                user_id, //create_by\r\n                new Date(), //create_date\r\n                new Date(), //update date\r\n                source_data, //source data\r\n                model.template_sort || 0, //sort\r\n              ]);\r\n            }\r\n          }\r\n\r\n          for (var index = 0; index < 26; index++) {\r\n            if(item[`d${index + 1}`]){\r\n            var check_forecast_day = await client.query(\r\n              _QueryqueryExternalDataCTS.find_product_forcast_day,\r\n              [\r\n                product_id,\r\n                item[`d${index + 1}`].day,\r\n                item[`d${index + 1}`].month,\r\n                moment(new Date()).format(\"YYYY\"),\r\n                source_data,\r\n              ]\r\n            );\r\n            if (check_forecast_day.rows.length > 0) {\r\n              //update\r\n              await client.query(\r\n                _QueryqueryExternalDataCTS.update_forecast_days,\r\n                [\r\n                  check_forecast_day.rows[0].id,\r\n                  item[`d${index + 1}`].forecast + parseInt(check_forecast_day.rows[0].amount_forcast),\r\n                  new Date(),\r\n                ]\r\n              );\r\n            } else {\r\n              //add\r\n              //   console.log(\"in\",item[`d${index+1}`].day,item[`d${index+1}`].month)\r\n              if (item[`d${index + 1}`].forecast > 0) {\r\n                let id_forecast_cts_day = uuidv4();\r\n                await client.query(\r\n                  _QueryqueryExternalDataCTS.add_forecast_days,\r\n                  [\r\n                    id_forecast_cts_day,\r\n                    item[`d${index + 1}`].month,\r\n                    moment(new Date()).format(\"YYYY\"),\r\n                    item[`d${index + 1}`].day,\r\n                    item[`d${index + 1}`].forecast,\r\n                    moment(new Date()).format(\"YYYY\") +\r\n                      item[`d${index + 1}`].month,\r\n                    new Date(),\r\n                    new Date(),\r\n                    product_id,\r\n                    source_data,\r\n                  ]\r\n                );\r\n              }\r\n            }\r\n            }\r\n          }\r\n          let temp = {\r\n            product_no: item.product_no,\r\n            product_name: check_product_no.rows[0].name,\r\n            n1: item.n1,\r\n            n2: item.n2,\r\n            n3: item.n3,\r\n            n4: item.n4,\r\n            status: true,\r\n            remark: \"\",\r\n          };\r\n          if (item.product_no !== \"Item Number\") {\r\n            data.push(temp);\r\n          }\r\n        } else {\r\n          let temp = {\r\n            product_no: item.product_no,\r\n            product_name: \"\",\r\n            n1: item.n1,\r\n            n2: item.n2,\r\n            n3: item.n3,\r\n            n4: item.n4,\r\n            status: false,\r\n            remark: \"this product no not found.\",\r\n          };\r\n          if (item.product_no !== \"Item Number\") {\r\n            data.push(temp);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    var log_external_data_id = uuidv4();\r\n    await client.query(_QueryqueryExternalDataCTS.add_log_external_data, [\r\n      log_external_data_id,\r\n      source_data,\r\n      true,\r\n      new Date(),\r\n      user_id,\r\n      new Date(),\r\n      user_id,\r\n      oem_id,\r\n      company_id,\r\n      \"อัพโหลดสำเร็จ\",\r\n      JSON.stringify(data) || null,\r\n      type_select,\r\n    ]);\r\n\r\n    //console.log(data)\r\n    return data;\r\n  } catch (e) {\r\n    console.log(e);\r\n  } finally {\r\n    await client.end();\r\n  }\r\n}\r\n\r\n\r\nfunction pad_fnc(d) {\r\n  var length = d.length;\r\n  console.log(d, length);\r\n  if (length < 10) {\r\n    return \"0\" + d.toString();\r\n  } else if (length < 9) {\r\n    return \"00\" + d.toString();\r\n  } else if (length < 8) {\r\n    return \"000\" + d.toString();\r\n  } else if (length < 7) {\r\n    return \"0000\" + d.toString();\r\n  } else if (length < 6) {\r\n    return \"00000\" + d.toString();\r\n  } else if (length < 5) {\r\n    return \"000000\" + d.toString();\r\n  } else if (length < 4) {\r\n    return \"0000000\" + d.toString();\r\n  } else if (length < 3) {\r\n    return \"00000000\" + d.toString();\r\n  } else if (length < 2) {\r\n    return \"000000000\" + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n}\r\nmodule.exports = externalDataCTS;\r\n\n\n//# sourceURL=webpack:///./app/service/externalDataCTSService.js?");

/***/ }),

/***/ "./app/service/externalDataService.js":
/*!********************************************!*\
  !*** ./app/service/externalDataService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryexternalData = __webpack_require__(/*! ../query/queryexternalData.json */ \"./app/query/queryexternalData.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\n\r\n\r\n\r\n\r\n\r\nclass externalData {\r\n\r\n  async externaldata(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          var tempDataprocess = [];\r\n          var tempData = [];\r\n          await client.connect();\r\n          try {\r\n            console.log(\"โมเดลssss\",model);\r\n            var temp = {\r\n              status: \"updateFail\",\r\n              data: model,\r\n            }\r\n            // console.log(\"โมเดลของ ตัวเเรก\",model);\r\n            // console.log(\"โมเดลของ\",model.file_names);\r\n            if (model.file_names === model.templates) {\r\n              let id = uuidv4();\r\n              // console.log(model);\r\n              // console.log(model.file_name);\r\n              // console.log(\"exlsx\",model);\r\n              await client.query(_QueryexternalData.externalData, [\r\n                id,\r\n                model.file_names,\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                model.oem_id,\r\n                model.company_id,\r\n                \"อัพโหลดสำเร็จ\",\r\n                JSON.stringify(temp),\r\n                // JSON.stringify(model.upload_detail),\r\n              ]);\r\n\r\n            }else{  let id = uuidv4();\r\n              // console.log(model);\r\n              // console.log(model.file_name);\r\n              // console.log(\"exlsx\",model);\r\n              await client.query(_QueryexternalData.externalData, [\r\n                id,\r\n                model.file_names,\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                model.oem_id,\r\n                model.company_id,\r\n                \"อัพโหลดไม่สำเร็จ\",\r\n                JSON.stringify(temp),\r\n                // JSON.stringify(model.upload_detail),\r\n              ]);\r\n\r\n            }\r\n            resolve(true);\r\n            // console.log(\"COMMIT status=\",status_upload);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getexterDate(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"ตัวใหม่\",model);\r\n            var stats = await client.query(_QueryexternalData.getExterDate, [\r\n              model.company_id,\r\n            ]);\r\n            // console.log(\"COMMIT\",stats);\r\n            resolve(stats.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async importExcel_Driver_detail(modelSheetArr, user_id, oem_id, file_name, company_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n         try{\r\n          var tempDataprocess = [];\r\n          var tempData = [];\r\n          var tempArray = [];\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n\r\n              try {\r\n                // console.log(\"ไฟล์เนมเลด\", file_name);\r\n               //  console.log(\"โมเดล\", model.person_code,model.citizen_id,model.id_person);\r\n             \r\n                tempData.push(model);\r\n                if ( !model.id_person /* === \"\" */) {\r\n                  model.status_import = false;\r\n                  model.err_list = \"ไม่ได้กรอก รหัสผู้ใช้รถ\";\r\n                  tempArray.push(model);\r\n                 // throw Error(\"citizen_id / citizen_id is not negative\");\r\n                } else {\r\n                  // console.log(\"ไม่เข้า\");\r\n                  var check = await client.query(_QueryexternalData.checkDriver_detail, [\r\n                    model.id_person,\r\n                  ])\r\n                  if (check.rows.length > 0) {\r\n                    //console.log(check.rows[0].driver_name_th,\" อัพเดด \",model.driver_name_th)\r\n                    var temp = {\r\n                      status: \"update\",\r\n                      data: model,\r\n                    }\r\n                    tempDataprocess.push(temp);\r\n                    await client.query(_QueryexternalData.UPdateDriverDetil, [\r\n                      model.id_person,\r\n                      model.driver_name_th,\r\n                      model.driver_name_eg,\r\n                      model.person_code,\r\n                      model.card_name || null,\r\n                      model.driver_tel || null,\r\n                      null,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      model.nickname || null,\r\n                      model.citizen_id,\r\n                      model.oem_name_text,\r\n             \r\n                    ])\r\n                    model.status_import = true;\r\n                    model.err_list = \"\";\r\n                    tempArray.push(model);\r\n                  } else {\r\n                    //console.log(\"แอด\", model.driver_name_th);\r\n                    var temp = {\r\n                      status: \"add\",\r\n                      data: model,\r\n                    }\r\n                    tempDataprocess.push(temp);\r\n\r\n                    let Driver_detail_id = uuidv4();\r\n                    await client.query(_QueryexternalData.importDriverDetil, [\r\n                      Driver_detail_id,\r\n                      model.driver_name_th || null,\r\n                      model.driver_name_eg || null,\r\n                      model.person_code || null,\r\n                      model.citizen_id,\r\n                      model.card_name || null,\r\n                      model.driver_tel || null,\r\n                      null,\r\n                      /*            moment(model.exp_driving_licence).format(), */\r\n                      true,\r\n                      true,\r\n                      oem_id,\r\n                      company_id,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      model.nickname || null,\r\n                      model.oem_name_text,\r\n                      model.id_person,\r\n                 \r\n\r\n                    ]);\r\n                    model.status_import = true;\r\n                    model.err_list = \"\";\r\n                    tempArray.push(model);\r\n                  }\r\n               \r\n                }\r\n                \r\n                //console.log(\"COMMITหนนนนน\", model.no)\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n            }\r\n\r\n          }\r\n          var final_temp = {\r\n            allData: tempData,\r\n            processData: tempDataprocess,\r\n            status_import: tempArray,\r\n          }\r\n          let ida = uuidv4();\r\n          await client.query(_QueryexternalData.externalData, [\r\n            ida,\r\n            file_name,\r\n            true,\r\n            moment(new Date()),\r\n            user_id,\r\n            moment(new Date()),\r\n            user_id,\r\n            oem_id,\r\n            company_id,\r\n            \"อัพโหลดสำเร็จ\",\r\n            JSON.stringify(final_temp),\r\n            // JSON.stringify(file_name.upload_detail),\r\n          ]);\r\n\r\n\r\n          //console.log(final_temp);\r\n         /*  await client.query(\"COMMIT\");\r\n          await client.end(); */\r\n          resolve(final_temp);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n          // if (tempRes.filter((x) => !x.status).length > 0) {\r\n          //   await client.query(\"ROLLBACK\");\r\n          //   console.log(\"ROLLBACK\");\r\n          // } else {\r\n          //   await client.query(\"COMMIT\");\r\n          //   console.log(\"COMMIT All\");\r\n          // }\r\n          // await client.end();\r\n          // resolve(tempRes);\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  // ---------------------------------------------------------------------------------------//\r\n\r\n  async importExcel_Logistic_cars_detail(modelSheetArr, user_id, oem_id, file_name, company_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n/*           await client.query(\"BEGIN\"); */\r\n          var tempDataprocess = [];\r\n          var tempData = [];\r\n          var tempOemNall = [];\r\n          var checkOem = [];\r\n          var tempArray = [];\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n\r\n              try {\r\n                // console.log(\"oem ของUser\", oem_id);\r\n                \r\n                tempData.push(model);\r\n                var full_car_name = model.plate_number + \"/\" + model.car_type_id;\r\n                let isa_truck = \"\";\r\n                let logistic_type_id = \"\";\r\n                // let fullname = model.personal_name ;\r\n                let data02 = model.tax; \r\n                let data01 = \"\"; \r\n                let capacity = model.capacity;\r\n                let fullname = model.personal_name;\r\n                let resoveName = \"\";\r\n                let resoveLName = \"\";\r\n            ///dev\r\n            if(model.oem_id === \"SST\"){\r\n              checkOem = model.oem_id;\r\n            }else if( model.oem_id === \"STC\"){\r\n              checkOem = model.oem_id; \r\n            }else if( model.oem_id === \"ST CIVIL\"){\r\n              checkOem =  model.oem_id ;\r\n            }else if( model.oem_id === \"STP\"){\r\n              checkOem = model.oem_id;\r\n            }else if( model.oem_id === \"STS\"){\r\n              checkOem = model.oem_id;\r\n            }else{\r\n              tempOemNall.push(model.oem_id);\r\n            }\r\n                const addressOEM = [\r\n                  { oem_id: \"b717f172-5013-4aa3-a040-65f4f116870b\", oem_name: \"บริษัท สตูลค้าเหล็ก จำกัด\", oem_nick: \"SST\" },\r\n                  { oem_id: \"08721f6f-ee1d-4900-8d67-2c7ce03b601e\", oem_name: \"บริษัท เอสทีสตีล(2001) จำกัด\" , oem_nick: \"STS\" },\r\n                  { oem_id: \"c8de2754-d8f9-4e18-97db-4201efca6e2f\", oem_name: \"บริษัท เอสทีสตีล(2001) ปัตตานี จำกัด\" , oem_nick: \"STP\" },\r\n                  { oem_id: \"d937f81b-9743-4c33-886f-e1c575f4cf21\", oem_name: \"บริษัท เอสที คอนกรีตโปรดักส์ จำกัด\", oem_nick: \"STC\"  },\r\n                  { oem_id: \"360e9f89-6b60-4edd-9f4d-a6e487c97cf3\", oem_name: \"บริษัท เอสทีซีวิล(2001) จำกัด\" , oem_nick: \"ST CIVIL\" }\r\n                ];\r\n            ///dev\r\n              ////production\r\n            /*   const addressOEM =[\r\n                {oem_id:\"95a64745-2908-4194-b27a-254bdb7426ed\",oem_name:\"บริษัท สตูลค้าเหล็ก จำกัด\" , oem_nick: \"SST\" },\r\n                {oem_id:\"94c849f1-1084-4e38-85e7-e8bc4d8a8d22\",oem_name:\"บริษัท เอสทีสตีล(2001) จำกัด\" , oem_nick: \"STS\" },\r\n                {oem_id:\"b59e702b-6b00-4c15-8de7-292c3f528ebe\",oem_name:\"บริษัท เอสทีสตีล(2001) ปัตตานี จำกัด\", oem_nick: \"STP\" },\r\n                {oem_id:\"56d89897-b654-43c9-99a5-8ece3dd676b1\",oem_name:\"บริษัท เอสที คอนกรีตโปรดักส์ จำกัด\", oem_nick: \"STC\" },\r\n                {oem_id:\"e2b57288-576b-4e69-b083-83ab484af480\",oem_name:\"บริษัท เอสทีซีวิล(2001) จำกัด\", oem_nick: \"ST CIVIL\" }\r\n              ]; */\r\n              ///production\r\n              var oemn = \"\";\r\n              var oem_target = addressOEM.filter((e)=>{\r\n                  return e.oem_nick === checkOem;\r\n              })\r\n              oemn = oem_target[0].oem_id;\r\n              // console.log(\"checkOem\",checkOem);\r\n              // console.log(\"oem_target\",oem_target[0].oem_id);\r\n              // console.log(\"oemn\",oemn);\r\n\r\n              \r\n                if(fullname){\r\n                  // console.log(\"อันดีไฟล์\");\r\n                  resoveName = fullname.split(\" \")[0];\r\n                  resoveLName = fullname.split(\" \")[1];\r\n                  // fullname = \"ไม่ระบุ ไม่ระบุ\"\r\n                  // console.log(\"ไม่มีชื่อ\".fullname);\r\n                }else if(fullname === undefined){\r\n                  // console.log(\"ค่าว่าง\");\r\n                  resoveName = \"ไม่ระบุ\";\r\n                  resoveLName =\"ไม่ระบุ\";\r\n                  // fullname = model.personal_name.split(\" \");\r\n                  // console.log(\"มีชื่อ\", fullname[0]);\r\n                }else {\r\n                  resoveName = \"ไม่ระบุ\";\r\n                  resoveLName =\"ไม่ระบุ\";\r\n                }\r\n                if(data02){\r\n                  data01 = model.tax;\r\n                }else if(data02 === 'Invalid date'){\r\n                  // console.log(\"แตกครับพี่น้อง\");\r\n                  data01 = null;\r\n                }\r\n\r\n                // console.log(\"ไม่มีไอดี\",logistic_type_id);\r\n                if (model.is_truck === \"ได้\") {\r\n                  isa_truck = true;\r\n                } else {\r\n                  isa_truck = false;\r\n                }\r\n                if (model.plate_number === \"\") {\r\n                  // console.log(\"ไม่มีป้าายยยยยยยยยยย\");\r\n                  throw Error(\"plate_number is not negative\");\r\n                  \r\n                } else {\r\n                  // console.log(\"ไม่เข้า\");\r\n                if(model.gps === \"DTC GPS\"){\r\n                  // console.log(\"ที่เป็น GPS\",model.gps,model.plate_number)\r\n                  let fineTypeBycartype = await client.query(\r\n                    _QueryexternalData.fineTypeByName,\r\n                    [model.car_type_id]\r\n                  );\r\n                  if (fineTypeBycartype.rows.length > 0) {\r\n                    //เจอกลุ่มไหม เจอหา ไอดี\r\n                     logistic_type_id = fineTypeBycartype.rows[0].id;\r\n                    // console.log(\"มี DTC เก็บคาไทร์ ID\",logistic_type_id); \r\n                  }else{\r\n                    console.log(\"มี DTC แอด ไม่มีคาไทร์ ไอดี\",model.car_type_id);\r\n                    let _logistic_type_id = uuidv4();\r\n                    await client.query(_QueryexternalData.addTypeCar, [\r\n                      _logistic_type_id,\r\n                      model.car_type_id,\r\n                      true,\r\n                    ]);\r\n                    logistic_type_id = _logistic_type_id;\r\n                  }\r\n                  // console.log(\"DTC ไอดีหลังจากแอดไปแล้ว\",logistic_type_id);\r\n                  var check_plate_number = await client.query(\r\n                    _QueryexternalData.finePlateNumber,\r\n                    [model.plate_number]\r\n                  ); \r\n                  let logistic_plate_id = \"\" ;\r\n                  if (check_plate_number.rows.length > 0) {\r\n                    // เอาป้ายทะเบียนไปหา เอาไอดี \r\n                    logistic_plate_id = check_plate_number.rows[0].id;\r\n                    //console.log(\"DTC ไทร์อัพเดด\",model.plate_number,logistic_type_id,\"ID\",logistic_plate_id); \r\n                    await client.query(_QueryexternalData.updateLogisTicForDTC, [\r\n                      logistic_plate_id, //1\r\n                      logistic_type_id,\r\n                      oemn,\r\n                      parseInt(capacity) || null,\r\n                      model.car_year || null,\r\n                      model.band_car || null,\r\n                      isa_truck, // DTC3\r\n                      resoveName || null, // DTC3\r\n                      resoveLName || null,\r\n                      model.person_tel_car || null, // DTC2 \r\n                      user_id, //10\r\n                      \"38dc8839-7424-4465-9ca4-36d136231010\", //12\r\n                      moment(new Date()), //11\r\n                    ]);\r\n                  }else{\r\n                    console.log(\"DTC ไม่มีป้ายทะเบียนนี้\",model.plate_number);\r\n                  }\r\n                } // นอกสุด DTC STC\r\n                else{\r\n                  // console.log(\"ไม่ใช้ GPS DTC\",model.gps,model.plate_number,model.car_type_id);\r\n                  let fineTypeBycartype = await client.query(\r\n                    _QueryexternalData.fineTypeByName,\r\n                    [model.car_type_id]\r\n                  );\r\n                  if (fineTypeBycartype.rows.length > 0) {\r\n                    //เจอกลุ่มไหม เจอหา ไอดี\r\n                     logistic_type_id = fineTypeBycartype.rows[0].id;\r\n                    // console.log(\"คาไทร์ ID\",logistic_type_id); \r\n                  }else{\r\n                    // console.log(\"ไม่มีคาไทร์ ไอดี\",model.car_type_id);\r\n                    let _logistic_type_id = uuidv4();\r\n                    await client.query(_QueryexternalData.addTypeCar, [\r\n                      _logistic_type_id,\r\n                      model.car_type_id,\r\n                      true,\r\n                    ]);\r\n                    logistic_type_id = _logistic_type_id;\r\n                  }\r\n                  // console.log(\"ไอดีหลังจากแอดไปแล้ว\",logistic_type_id);\r\n                  var check_plate_number = await client.query(\r\n                    _QueryexternalData.finePlateNumber,\r\n                    [model.plate_number]\r\n                  ); \r\n                  let logistic_plate_id = \"\" ;\r\n                  if (check_plate_number.rows.length > 0) {\r\n                    // เอาป้ายทะเบียนไปหา เอาไอดี \r\n                    logistic_plate_id = check_plate_number.rows[0].id;\r\n                    // console.log(\"มี ทะเบียน อัพเดดไม่เป็น DTC\",model.plate_number,logistic_type_id,\"ID\",logistic_plate_id); \r\n                    await client.query(_QueryexternalData.update_logistic_car, [\r\n                      logistic_plate_id, // 1 id\r\n                      full_car_name || null, // car_name 2\r\n                      model.sim_number || null, //sim_number 3\r\n                      logistic_type_id, // car_type_id 4\r\n                      model.plate_number, // plate_number 6\r\n                      oemn,\r\n                      parseInt(capacity) || null, // capacity 10\r\n                      data01 ===  \"\" || undefined ?  null : moment(data01 ,'DD/MM/YY').format(), // tax 11\r\n                      data01 ===  \"\" || undefined ?  null : moment(data01 ,'DD/MM/YY').add(1, 'years').format(), // next_tax 12 moment([2010, 0, 31]).add(1, 'months');\r\n                      model.chassis_number || null, // chassis_number 13\r\n                      model.vin_number  || null, // vin_number 14\r\n                      model.car_year  || null, // car_year15\r\n                      model.model_car || null, // model_car16\r\n                      model.band_car  || null, // band_car 17\r\n                      isa_truck, // is_truck21\r\n                      true, // is_use 24\r\n                      true, // is_active 25\r\n                      resoveName || null,  // person_sirname_car 26\r\n                      resoveLName || null,  // person_lastname_car27\r\n                      model.person_tel_car || null, // person_tel_car28\r\n                      user_id, //29\r\n                      moment(new Date()), //30\r\n                      \"6ce7e2b2-42ab-42da-a9f1-5c0eee96bc30\", //31\r\n                      // null, //32\r\n                      moment(new Date()), //update by\r\n                    ]);\r\n                  }else{\r\n                    // console.log(\"ไม่มีป้ายทะเบียนนี้ เอามาแอด\",model.plate_number);\r\n                    // console.log(\"คาไทร์ของแอดไม่มีป้ายทะเบียน\",logistic_type_id);\r\n                    let logistic_id = uuidv4();\r\n                    await client.query(_QueryexternalData.addLogisticCar, [\r\n                      logistic_id, // 1 id\r\n                      full_car_name || null, // car_name 2\r\n                      model.sim_number || null, //sim_number 3\r\n                      logistic_type_id, // car_type_id 4\r\n                      null, //  box_number 5\r\n                      model.plate_number, // plate_number 6\r\n                      null, // mileage 7\r\n                      oemn, // oem_id 8\r\n                      company_id || null,// company_id 9\r\n                      parseInt(capacity) || null, // capacity 10\r\n                       data01 ===  \"\" || undefined ?  null : moment(data01 ,'DD/MM/YY').format(), // tax 11\r\n                       data01 ===  \"\" || undefined ?  null : moment(data01 ,'DD/MM/YY').add(1, 'years').format(), // next_tax 12\r\n                      model.chassis_number || null, // chassis_number 13\r\n                      model.vin_number  || null, // vin_number 14\r\n                      model.car_year || null, // car_year15\r\n                      model.model_car || null, // model_car16\r\n                      model.band_car || null, // band_car 17\r\n                      null, // fuel_efficiency18\r\n                      null, // kpi 19\r\n                      null, // truck_id 20\r\n                      isa_truck, // is_truck21\r\n                      null, // image_person_name 22\r\n                      null, // image_person 24\r\n                      true, // is_use 25\r\n                      true, // is_active 26\r\n                      resoveName || null,  // person_sirname_car 27\r\n                      resoveLName || null,  // person_lastname_car28\r\n                      model.person_tel_car || null, // person_tel_car29\r\n                      user_id, //30\r\n                      moment(new Date()), //31\r\n                      \"6ce7e2b2-42ab-42da-a9f1-5c0eee96bc30\", //32\r\n                      null, // image_person_path 23\r\n                      null, // update date33\r\n                    ]);\r\n                    logistic_type_id = logistic_id;\r\n                    // console.log(\"หลังจากแอดเเล้ว เอาไอดี logiscar\",logistic_type_id);\r\n                  }\r\n                }\r\n                \r\n                }//นอกสุด ของ model.plate_number === \"\"\r\n                \r\n\r\n                //console.log(\"COMMITหนนนนน\", model.no)\r\n              } catch (e) {\r\n                console.log(e);\r\n              }\r\n              model.status_import = true;\r\n              model.err_list = \"\";\r\n              tempArray.push(model);\r\n            }\r\n\r\n          }\r\n          var final_temp = {\r\n            allData: tempData,\r\n            processData: tempDataprocess,\r\n            erornall: tempOemNall,\r\n            status_import: tempArray,\r\n          }\r\n          let ida = uuidv4();\r\n          await client.query(_QueryexternalData.externalData, [\r\n            ida,\r\n            file_name,\r\n            true,\r\n            moment(new Date()),\r\n            user_id,\r\n            moment(new Date()),\r\n            user_id,\r\n            oem_id,\r\n            company_id,\r\n            \"อัพโหลดสำเร็จ\",\r\n            JSON.stringify(final_temp),\r\n            // JSON.stringify(file_name.upload_detail),\r\n          ]);\r\n          console.log(final_temp);\r\n /*          await client.query(\"COMMIT\"); */\r\n       \r\n          resolve(final_temp);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateRepairValues(modeltemp,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n/*             console.log(modeltemp); */\r\n           /*   \r\n             var test = \"23/02/22\";\r\n            \r\n             console.log(moment(test,'DD/MM/YY').format('YY/MM/DD'))\r\n             var tempData = []; */\r\n             var model = modeltemp.repair_data;\r\n             var no;\r\n             var maintenance_number;\r\n             var logistic_car_id;\r\n             var mileage_number;\r\n             var begin_date;\r\n             var detail_order;\r\n             var document_date;\r\n             var finish_date;\r\n             var location_maintenance;\r\n             var logistic_id;\r\n             var type_maintenance;\r\n             var remark;\r\n             var status_maintenance;\r\n             var car_oem;\r\n             var car_company;\r\n             var seq = 1;\r\n             for(let item of model){\r\n               \r\n              if(item.maintenance_number !== ''){\r\n                seq = 1;\r\n                var logistic_detail = await client.query(_QueryexternalData.getIdlogisticByPlateNumber,[item.logistic_car_id]);\r\n                if(logistic_detail.rows.length > 0){\r\n\r\n                 //console.log('here',logistic_id.rows[0].id,logistic_id.rows[0].oem_id,logistic_id.rows[0].company_id)\r\n                  logistic_id = logistic_detail.rows[0].id;\r\n     \r\n                  car_oem = logistic_detail.rows[0].oem_id,\r\n          \r\n                  car_company = logistic_detail.rows[0].company_id,\r\n             \r\n         \r\n                  item.logistic_id = logistic_id;\r\n                  item.car_oem = car_oem;\r\n                  item.car_company = car_company;\r\n                  item.isStatus = true;\r\n                  item.seq = seq;\r\n              \r\n                  \r\n                }else{\r\n                  item.isStatus = false;\r\n                  item.isStatus_txt = \"ทะเบียนรถนี้ไม่มีอยู่ในระบบ !!!\";\r\n                }\r\n      \r\n                no = item.no;\r\n                maintenance_number = item.maintenance_number;\r\n                logistic_car_id = item.logistic_car_id;\r\n                mileage_number  = item.mileage_number;\r\n                begin_date = item.begin_date;\r\n                detail_order = item.detail_order;\r\n                document_date = item.document_date;\r\n                finish_date = item.finish_date;\r\n                location_maintenance = item.location_maintenance;\r\n                type_maintenance = item.type_maintenance;\r\n                remark = item.remark;\r\n                status_maintenance = item.status_maintenance;\r\n\r\n              }else{\r\n                item.logistic_id = logistic_id;\r\n                item.car_oem = car_oem;\r\n                item.car_company = car_company;\r\n                item.no = no;\r\n                item.maintenance_number = maintenance_number;\r\n                item.logistic_car_id = logistic_car_id;\r\n                item.mileage_number = mileage_number;\r\n                item.begin_date = begin_date;\r\n                item.detail_order = detail_order;\r\n                item.document_date = document_date;\r\n                item.finish_date = finish_date;\r\n                item.location_maintenance = location_maintenance;\r\n                item.type_maintenance = type_maintenance;\r\n                item.remark = remark;\r\n                item.status_maintenance = status_maintenance;\r\n                item.car_oem = car_oem;\r\n                item.car_company = car_company;\r\n                item.seq = seq;\r\n                if(logistic_id === \"\"){\r\n                  item.isStatus = false;\r\n                  item.isStatus_txt = \"ทะเบียนรถนี้ไม่มีอยู่ในระบบ !!!\";\r\n                }else{\r\n                  item.isStatus = true;\r\n                }\r\n              }\r\n              seq++;\r\n             }\r\n             console.log(model)\r\n             var data = model.filter((e)=>{return e.isStatus === true});\r\n            // console.log(\"data\",data);\r\n             for(let i of data){\r\n              var Check = await client.query(_QueryexternalData.CheckCarMaintenant,[i.logistic_id,i.maintenance_number,i.seq]);\r\n              if(Check.rows.length > 0){\r\n                //อัพเดต\r\n                await client.query(_QueryexternalData.UpdateMainenace,[\r\n                  Check.rows[0].id,\r\n                  i.detail_order || null,\r\n                  Number((i.mileage_number === \"-\" || i.mileage_number === \"\" ? 0 : i.mileage_number).toString().replace(/,/g, \"\")),\r\n                  Number((i.price === \"-\" || i.price === \"\" ? 0 : i.price).toString().replace(/,/g, \"\")),\r\n                  user_id,\r\n                  i.document_date === \"\" || i.document_date === \"-\" ? null : moment(i.document_date,'DD/MM/YY').format(),\r\n                  i.finish_date === \"\" || i.finish_date === \"-\" ? null : moment(i.finish_date,'DD/MM/YY').format(),\r\n                  i.type_maintenance || null,\r\n                  i.location_maintenance || null,\r\n                  i.status_maintenance || null,\r\n                  i.remark || null,\r\n                  i.begin_date === \"\" || i.begin_date === \"-\" ? null : moment(i.begin_date,'DD/MM/YY').format(),\r\n                  i.spare_part || null,\r\n                  i.spare_part_amount || null,\r\n                  i.spare_part_unit || null,\r\n                  i.apare_part_status || null,\r\n                  Number((i.price_per_unit === \"-\" || i.price_per_unit === \"\" ? 0 : i.price_per_unit).toString().replace(/,/g, \"\")),\r\n                  i.purchase === \"FASLE\" ? false : true, // boolean\r\n                  i.withdraw === \"FALSE\" ? false : true, // boolean\r\n                ]);\r\n                //console.log(\"อัพเดต\",i.logistic_car_id,i.maintenance_number)\r\n              }else{\r\n                //เพิ่ม\r\n                //console.log(\"เพิ่ม\",i.logistic_car_id,i.maintenance_number)\r\n          \r\n                let cm_id = uuidv4();\r\n          \r\n              \r\n                await client.query(_QueryexternalData.AddCarMaintenance,[\r\n                  cm_id,\r\n                  detail_order || null,\r\n                  i.maintenance_number,\r\n                  Number((i.mileage_number === \"-\" || i.mileage_number === \"\" ? 0 : i.mileage_number).toString().replace(/,/g, \"\")),\r\n                  Number((i.price === \"-\" || i.price === \"\" ? 0 : i.price).toString().replace(/,/g, \"\")),\r\n  \r\n                  i.car_oem,\r\n                  i.car_company,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  i.logistic_id,\r\n                 \r\n                  i.document_date === \"\" || i.document_date === \"-\" ? null : moment(i.document_date,'DD/MM/YY').format(),\r\n                  i.finish_date === \"\" || i.finish_date === \"-\" ? null : moment(i.finish_date,'DD/MM/YY').format(),\r\n                  i.type_maintenance || null,\r\n                  i.location_maintenance || null,\r\n                  i.status_maintenance || null,\r\n                  i.remark || null,\r\n                  i.begin_date === \"\" || i.begin_date === \"-\" ? null : moment(i.begin_date,'DD/MM/YY').format(),\r\n                  i.spare_part || null,\r\n                  i.spare_part_amount || null,\r\n                  i.spare_part_unit || null,\r\n                  i.apare_part_status || null,\r\n                  Number((i.price_per_unit === \"-\" || i.price_per_unit === \"\" ? 0 : i.price_per_unit).toString().replace(/,/g, \"\")),\r\n                  i.purchase === \"FASLE\" ? false : true, // boolean\r\n                  i.withdraw === \"FALSE\" ? false : true, // boolean\r\n                  i.seq\r\n                ])\r\n              }\r\n\r\n             }\r\n     \r\n             let id_ex_sort = uuidv4();\r\n              await client.query(_QueryexternalData.externalData,[\r\n                id_ex_sort,\r\n                \"ค่าซ่อม\",\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n\r\n                modeltemp.oem_id,\r\n                modeltemp.company_id,\r\n                \"อัพโหลดสำเร็จ\",\r\n                JSON.stringify(model),\r\n              ]);\r\n             resolve(model);\r\n          /*   var stats = await client.query(_QueryexternalData.getExterDate, [\r\n              model.company_id,\r\n            ]);\r\n            // console.log(\"COMMIT\",stats);\r\n            resolve(stats.rows); */\r\n          } catch (e) {\r\n            console.log(e);\r\n            var error = \"{\"+ e + \"}\";\r\n            let id_ex_sort = uuidv4();\r\n            await client.query(_QueryexternalData.externalData,[\r\n              id_ex_sort,\r\n              \"ค่าซ่อม\",\r\n              true,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              user_id,\r\n\r\n              modeltemp.oem_id,\r\n              modeltemp.company_id,\r\n              \"อัพโหลดไม่สำเร็จ\",\r\n              JSON.stringify(error),\r\n            ]);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nmodule.exports = externalData;\n\n//# sourceURL=webpack:///./app/service/externalDataService.js?");

/***/ }),

/***/ "./app/service/factoryChoupService.js":
/*!********************************************!*\
  !*** ./app/service/factoryChoupService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryFactoryChoup = __webpack_require__(/*! ../query/queryFactoryChoup.json */ \"./app/query/queryFactoryChoup.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass factoryChoupService {\r\n\r\n  async filterFactoryChoup(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFactoryChoup.filterFacChoup,[\r\n              model.fac_choup_no || null,\r\n              model.fac_choup_name || null,\r\n              model.company_id,\r\n            ])\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delFactoryChoup(fac_choup_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           await client.query(_QueryFactoryChoup.delFacChoup,[\r\n              fac_choup_id,\r\n              moment(new Date()),\r\n            \r\n            ])\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFactoryChoup(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var check_no = await client.query(_QueryFactoryChoup.check_no_for_add,[\r\n              model.fac_choup_no,\r\n              model.company_id,\r\n            ]);\r\n            if(check_no.rows.length > 0) {\r\n              throw Error(\"มีชื่อย่อโรงงานชุบนี้ในระบบแล้ว\");\r\n            }\r\n            var check_name = await client.query(_QueryFactoryChoup.check_name_for_add,[\r\n              model.fac_choup_name,\r\n              model.company_id,\r\n            ]);\r\n            if(check_name.rows.length > 0) {\r\n              throw Error(\"มีชื่อโรงงานชุบนี้ในระบบแล้ว\");\r\n            }\r\n            \r\n           var fac_choup_id = uuidv4();\r\n           await client.query(_QueryFactoryChoup.addFacChoup,[\r\n              fac_choup_id,\r\n              model.fac_choup_no,\r\n              model.fac_choup_name,\r\n              model.fac_choup_tel,\r\n              model.company_id,\r\n              true,\r\n              moment(new Date()),\r\n              moment(new Date()),\r\n            \r\n            ])\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async getFactoryChoup(fac_choup_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           var temp = await client.query(_QueryFactoryChoup.getFacChoup,[\r\n              fac_choup_id,\r\n            ]);\r\n            resolve(temp.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async updateFactoryChoup(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var check_no = await client.query(_QueryFactoryChoup.check_no_for_update,[\r\n              model.fac_choup_no,\r\n              model.company_id,\r\n              model.fac_choup_id,\r\n            ]);\r\n            if(check_no.rows.length > 0) {\r\n              throw Error(\"มีชื่อย่อโรงงานชุบนี้ในระบบแล้ว\");\r\n            }\r\n            var check_name = await client.query(_QueryFactoryChoup.check_name_for_update,[\r\n              model.fac_choup_name,\r\n              model.company_id,\r\n              model.fac_choup_id,\r\n            ]);\r\n            if(check_name.rows.length > 0) {\r\n              throw Error(\"มีชื่อโรงงานชุบนี้ในระบบแล้ว\");\r\n            }\r\n            \r\n     \r\n           await client.query(_QueryFactoryChoup.updateFacChoup,[\r\n              model.fac_choup_id,\r\n              model.fac_choup_no,\r\n              model.fac_choup_name,\r\n              model.fac_choup_tel,\r\n              moment(new Date()),\r\n            \r\n            ])\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\nmodule.exports = factoryChoupService;\r\n\n\n//# sourceURL=webpack:///./app/service/factoryChoupService.js?");

/***/ }),

/***/ "./app/service/factoryParameterService.js":
/*!************************************************!*\
  !*** ./app/service/factoryParameterService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryFactoryParameter = __webpack_require__(/*! ../query/queryFactoryParameter.json */ \"./app/query/queryFactoryParameter.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret;\r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\nclass factoryParameterService {\r\n\r\n\r\n  async addSection(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkSectionName_add, [model.section_name]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Section Name has already\");\r\n            }\r\n            var query_sort = await client.query(\r\n              _QueryFactoryParameter.checkSectionSort\r\n            );\r\n            let sort = query_sort.rows[0].max || 0;\r\n            let section_id = uuidv4();\r\n\r\n            await client.query(_QueryFactoryParameter.addSection, [\r\n              section_id,\r\n              model.section_name || null,\r\n              true,\r\n              sort + 1,\r\n              model.oem_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findSectionByOem(section_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getSectionById,\r\n              [section_id]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async editSection(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkSectionName_edit, [model.section_name, model.id]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Section Name has already\");\r\n            }\r\n            await client.query(_QueryFactoryParameter.updateSection, [\r\n              model.section_name,\r\n              model.id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delSection(section_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryFactoryParameter.deleteSection, [\r\n              section_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async filterSectionByOem(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.filterSection,\r\n              [model.oem_id, model.section_name]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addProcess(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkProcessName_add, [model.process_name]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Process Name has already\");\r\n            }\r\n\r\n            var query_sort = await client.query(\r\n              _QueryFactoryParameter.checkProcessSort\r\n            );\r\n            let sort = query_sort.rows[0].max || 0;\r\n            let process_id = uuidv4();\r\n\r\n            await client.query(_QueryFactoryParameter.addProcess, [\r\n              process_id,\r\n              model.section_id,\r\n              model.process_name || null,\r\n              true,\r\n              sort + 1,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findProcessByOem(process_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getProcessById,\r\n              [process_id]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async editProcess(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkProcessName_edit, [model.process_name, model.id]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Process Name has already\");\r\n            }\r\n            await client.query(_QueryFactoryParameter.updateProcess, [\r\n              model.process_name,\r\n              model.section_id,\r\n              model.id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delProcess(process_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryFactoryParameter.deleteProcess, [\r\n              process_id, updatedate, user_id\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async filterProcessByOem(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.filterProcess, [\r\n              model.section_id || null,\r\n              model.process_name || null,\r\n              model.oem_id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addLine(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkLineName_add, [model.line_name, model.oem_id]);\r\n            if (checkName.rows.length) {\r\n              throw Error(\"System : Production Line has already\");\r\n            }\r\n            var query_sort = await client.query(\r\n              _QueryFactoryParameter.checkLineSort\r\n            );\r\n            let sort = query_sort.rows[0].max;\r\n            let line_id = uuidv4();\r\n\r\n            await client.query(_QueryFactoryParameter.addLine, [\r\n              line_id,\r\n              model.line_name || null,\r\n              true,\r\n              sort + 1,\r\n              model.oem_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n\r\n            if (model.machine_id.length > 0) {\r\n              for (const machine of model.machine_id) {\r\n\r\n                let line_machine_id = uuidv4();\r\n\r\n                await client.query(_QueryFactoryParameter.addLineMachine, [\r\n                  line_machine_id,\r\n                  line_id,\r\n                  machine.id,\r\n                  true,\r\n                ]);\r\n              }\r\n            } else {\r\n              await client.query(\"ROLLBACK\");\r\n              reject(e);\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async findLineById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getLineById,\r\n              [id]\r\n\r\n\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findLineMachineById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.fineLineMachineByLine,\r\n              [id]\r\n            );\r\n\r\n            /*  if (temp.rows.length > 0) { */\r\n\r\n            resolve(temp.rows);\r\n            /* } else {\r\n              console.log(\"not have\")\r\n              reject(\"not found\");\r\n            } */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async editLine(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkLineName_edit, [model.line_name, model.line_id, model.oem_id]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Production Line has already\");\r\n            }\r\n            await client.query(_QueryFactoryParameter.updateLine, [\r\n              model.line_name,\r\n              model.line_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n\r\n\r\n\r\n            if (model.machine_id.length > 0) {\r\n              await client.query(_QueryFactoryParameter.delLineMachine, [\r\n                model.line_id\r\n              ]);\r\n              for (const machine of model.machine_id) {\r\n\r\n                let line_machine_id = uuidv4();\r\n\r\n                await client.query(_QueryFactoryParameter.addLineMachine, [\r\n                  line_machine_id,\r\n                  model.line_id,\r\n                  machine.id,\r\n                  true,\r\n                ]);\r\n              }\r\n            } else {\r\n              await client.query(\"ROLLBACK\");\r\n              reject(e);\r\n            }\r\n\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delLine(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryFactoryParameter.deleteLine, [\r\n              id, updatedate, user_id\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /* \r\n  async findLineById(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryFactoryParameter.getProcessByOEM, [\r\n                oem_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n   */\r\n\r\n  async filterLineByOem(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryFactoryParameter.filterLine, [\r\n              model.id || null,\r\n              model.line_name || null,\r\n              model.oem_id\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterLineMachine(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getLineMachine, [\r\n              model.oem_id]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              //console.log(temp.rows);\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMachineByOem(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.filterMachine, [\r\n\r\n              model.machine_name || null, model.oem_id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMachineProcess(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getMachineProcess, [\r\n              model.oem_id]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findMachineById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.getMachineById,\r\n              [id]\r\n            );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findMachineProcessById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryFactoryParameter.fineMachineProcessByMachine,\r\n              [id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addMachine(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkMachineName_add, [model.machine_name]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Machine Name has already\");\r\n            }\r\n            var query_sort = await client.query(\r\n              _QueryFactoryParameter.checkMachineSort\r\n            );\r\n            let sort = query_sort.rows[0].max || 0;\r\n            let machine_id = uuidv4();\r\n\r\n            await client.query(_QueryFactoryParameter.addMachine, [\r\n              machine_id,\r\n              model.machine_name,\r\n              true,\r\n              sort + 1,\r\n              model.oem_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n\r\n            if (model.process_id.length > 0) {\r\n              for (const process of model.process_id) {\r\n\r\n                let machine_process_id = uuidv4();\r\n\r\n                await client.query(_QueryFactoryParameter.addMachineProcess, [\r\n                  machine_process_id,\r\n                  machine_id,\r\n                  process.id,\r\n                  true,\r\n                ]);\r\n              }\r\n            } else {\r\n              await client.query(\"ROLLBACK\");\r\n              reject(e);\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async editMachine(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            //อัพเดตชื่อ\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryFactoryParameter.checkMachineName_edit, [model.machine_name, model.machine_id]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"Sysem : Machine Name has already\");\r\n            }\r\n            await client.query(_QueryFactoryParameter.updateMachine, [\r\n              model.machine_name,\r\n              model.machine_id,\r\n              updatedate,\r\n              user_id,\r\n            ]);\r\n\r\n            if (model.process_id.length > 0) {\r\n              //ลบของเก่า\r\n              await client.query(_QueryFactoryParameter.delMachineProcess, [\r\n                model.machine_id\r\n              ]);\r\n              for (const process of model.process_id) {\r\n\r\n                let machine_process_id = uuidv4();\r\n                //เพิ่มของใหม่\r\n                await client.query(_QueryFactoryParameter.addMachineProcess, [\r\n                  machine_process_id,\r\n                  model.machine_id,\r\n                  process.id,\r\n                  true,\r\n                ]);\r\n              }\r\n            } else {\r\n              await client.query(\"ROLLBACK\");\r\n              reject(e);\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delMachine(machine_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryFactoryParameter.deleteMachine, [\r\n              machine_id, updatedate, user_id\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  //----------------------------------------------------------\r\n  async addMachineProduct(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n\r\n            var check_MP_del = await client.query(_QueryFactoryParameter.check_MP_del, [model.machine_id]);\r\n\r\n            for (var e = 0; e < check_MP_del.rows.length; e++) {\r\n              let check = model.product_select.filter((element) => {\r\n                return (element.product_id === check_MP_del.rows[e].product_id);\r\n              })\r\n              if (check.length > 0) {\r\n                //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n              } else {\r\n                await client.query(_QueryFactoryParameter.DeleteMPforUpdate, [model.machine_id, check_MP_del.rows[e].product_id]);\r\n                //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n              }\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            for (var k = 0; k < model.product_select.length; k++) {\r\n              //console.log(model.multiple_material)\r\n              var check_PM = await client.query(_QueryFactoryParameter.checkMachineProduct, [model.machine_id, model.product_select[k].product_id]);\r\n              //console.log(check_PM.rows) \r\n              if (check_PM.rows.length > 0) {\r\n                // console.log(\"helllo\")\r\n                //await client.query(_QueryFactoryParameter.updateProductMaterials,[model.product_select[k].id, model.product_select[k].wt_mtr, model.product_select[k].c_leng || null, model.multiple_material[k].cos_pc || null]);\r\n              } else {\r\n                let MachineProduct_id = uuidv4();\r\n                console.log(model.product_select)\r\n                await client.query(_QueryFactoryParameter.AddMachineProduct, [\r\n                  MachineProduct_id,\r\n                  model.machine_id,\r\n                  model.product_select[k].product_id,\r\n                  null,\r\n                  moment(new Date()),\r\n                ]);\r\n              }\r\n\r\n            }\r\n\r\n\r\n\r\n            /*    for(let item of model.product_select){\r\n                 let MachineProduct_id = uuidv4();\r\n                 await client.query(_QueryFactoryParameter.AddMachineProduct,[\r\n                   MachineProduct_id,\r\n                   model.machine_id,\r\n                   item.id,\r\n                   null,\r\n                   moment(new Date()),\r\n                 ]);\r\n               } */\r\n\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProductByMachine(machine_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            var temp = await client.query(_QueryFactoryParameter.getProductByMachine, [machine_id]);\r\n            //console.log(temp.rows);\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMachineProduct(user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let temp = await client.query(_QueryFactoryParameter.getMachineProduct, []);\r\n            //console.log(temp.rows);\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getToolingRatio() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFactoryParameter.getToolingRatio, []);\r\n            //console.log(temp.rows);\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateRatio(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryFactoryParameter.updateToolingRatioById, [\r\n              model.tooling.id,\r\n              model.tooling.ratio,\r\n            ]);\r\n            //console.log(temp.rows);\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports = factoryParameterService;\r\n\n\n//# sourceURL=webpack:///./app/service/factoryParameterService.js?");

/***/ }),

/***/ "./app/service/factoryWorkHoursService.js":
/*!************************************************!*\
  !*** ./app/service/factoryWorkHoursService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryFactoryWorkHours = __webpack_require__(/*! ../query/queryFactoryWorkHours.json */ \"./app/query/queryFactoryWorkHours.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret; \r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\n\r\nclass factoryWorkHoursService {\r\n//////////////////////////////// With Company ////////////////////////////\r\n    async filter_hours (model){\r\n      return new Promise(async (resolve, reject) => {\r\n          try {\r\n            var tempRes=[];\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                 let company_id = model.company_id\r\n                  if (company_id === null) {\r\n                      throw Error(\"Can't fine company_id\");\r\n                  } \r\n\r\n                var temp = await client.query(_QueryFactoryWorkHours.filter, \r\n                   [\r\n                     model.company_id,\r\n                   ]\r\n                  );\r\n                  const item = {};\r\n                  if(temp.rows[0].workday == \"day_ship\"){\r\n                    item.id_dayship = temp.rows[0].id;\r\n                    item.day_normal = temp.rows[0].normal;\r\n                    item.day_ot =  temp.rows[0].ot;\r\n                    item.id_nightship = temp.rows[1].id;\r\n                    item.night_normal = temp.rows[1].normal;\r\n                    item.night_ot =  temp.rows[1].ot;\r\n                    tempRes.push(item);\r\n                  }else{\r\n                    item.id_dayship = temp.rows[1].id;\r\n                    item.day_normal = temp.rows[1].normal;\r\n                    item.day_ot =  temp.rows[1].ot;\r\n                    item.id_nightship = temp.rows[0].id;\r\n                    item.night_normal = temp.rows[0].normal;\r\n                    item.night_ot =  temp.rows[0].ot;\r\n                    tempRes.push(item);\r\n                  }\r\n                  //tempRes.push(temp.rows[0])\r\n                resolve(tempRes[0]);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n  }\r\n\r\n  async SaveWorkHours(item, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            for (let model of item){\r\n          \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is not found\");\r\n             \r\n            }\r\n            var query = await client.query(_QueryFactoryWorkHours.checkCompany, [\r\n              model.company_id,\r\n            ]);\r\n            //console.log(query.rows[0]);\r\n            if (query.rows[0].count == 2) {\r\n           \r\n              /// update\r\n               await client.query(_QueryFactoryWorkHours.update_work_hours, [\r\n                model.id,\r\n                model.workday,\r\n                model.normal,\r\n                model.ot,\r\n                model.company_id,\r\n              ]); \r\n\r\n            }else{\r\n              /// insert\r\n              //console.log(\"inset\");\r\n             let id = uuidv4();\r\n              await client.query(_QueryFactoryWorkHours.add_work_hours, [\r\n                id,\r\n                model.workday,\r\n                model.normal,\r\n                model.ot,\r\n                true,\r\n                model.company_id,\r\n              ]); \r\n  \r\n            }\r\n         \r\n          }\r\n             console.log(\"COMMIT\");\r\n            resolve(true); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async SaveCalendar(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n         \r\n          \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is not found\");\r\n             \r\n            }\r\n            const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n            const sorter = (a, b) => {\r\n                if(a.year !== b.year){\r\n                   return a.year - b.year;\r\n                }else{\r\n                   return months.indexOf(a.month) - months.indexOf(b.month);\r\n                };\r\n             };\r\n             var setGroup = model.calendar.sort(sorter);\r\n            //console.log(setGroup)\r\n            //console.log(JSON.stringify(setGroup))\r\n            var calendar = [];\r\n            for(let i = 0; i < setGroup.length; i++){\r\n              calendar.push(setGroup[i]);\r\n              if(i+1 < setGroup.length){\r\n                if(setGroup[i].month !== setGroup[i+1].month || setGroup[i].year !== setGroup[i+1].year){\r\n                  //console.log(calendar);\r\n                  var check_YearMonth = await client.query(_QueryFactoryWorkHours.check_YearMonth, [\r\n                    calendar[0].year,\r\n                    calendar[0].month,\r\n                    model.company_id\r\n                  ]);\r\n                  if(check_YearMonth.rows.length > 0){\r\n                    //update\r\n                    await client.query(_QueryFactoryWorkHours.DelCalendar, [check_YearMonth.rows[0].id]);\r\n                   //console.log(\"update\");\r\n                   //console.log(calendar)\r\n                  }\r\n                    //add\r\n                    //console.log(\"add\");\r\n                    let id = uuidv4();\r\n                    await client.query(_QueryFactoryWorkHours.AddCalendar, [\r\n                      id,\r\n                      calendar[0].month,\r\n                      calendar[0].year,\r\n                      null,\r\n                      model.company_id,\r\n                      JSON.stringify(calendar),\r\n                    ]);\r\n                  \r\n                  calendar= [];\r\n                }}  \r\n                if(i == setGroup.length-1){\r\n                  console.log(calendar);\r\n                  var check_YearMonth = await client.query(_QueryFactoryWorkHours.check_YearMonth, [\r\n                    calendar[0].year,\r\n                    calendar[0].month,\r\n                    model.company_id\r\n                  ]);\r\n                  //console.log(JSON.stringify(calendar));\r\n                  if(check_YearMonth.rows.length > 0){\r\n                    //update\r\n                    //console.log(check_YearMonth.rows);\r\n                    await client.query(_QueryFactoryWorkHours.DelCalendar, [check_YearMonth.rows[0].id]);\r\n                  \r\n                  }\r\n                    //add\r\n                   // console.log(\"add\");\r\n                    let id2 = uuidv4();\r\n                    await client.query(_QueryFactoryWorkHours.AddCalendar, [\r\n                      id2,\r\n                      calendar[0].month,\r\n                      calendar[0].year,\r\n                      null,\r\n                      model.company_id,\r\n                      JSON.stringify(calendar),\r\n                    ]);\r\n                  \r\n                  calendar = [];\r\n                } \r\n              \r\n            }\r\n            console.log(\"COMMIT\"); \r\n            resolve(true);  \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async GetCalendarByCompany (company_id){\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n          var tempRes=[];\r\n          (async () => {\r\n            var client = new Client(connectionConfig);\r\n            await client.connect();\r\n            try {\r\n      \r\n                if (!company_id) {\r\n                    throw Error(\"Can't fine company_id\");\r\n                } \r\n\r\n              var temp = await client.query(_QueryFactoryWorkHours.GetCalendarByCompany, \r\n                 [company_id]\r\n                );\r\n              \r\n                var dataCalendar = [];\r\n               for(let row of temp.rows){\r\n                  for(let data of row.day_detail){\r\n                    /* console.log(data); */\r\n                    dataCalendar.push(data);\r\n                }\r\n               }\r\n                  //console.log(dataCalendar);\r\n                //tempRes.push(temp.rows[0])\r\n              resolve(dataCalendar);\r\n            } catch (e) {\r\n              reject(e);\r\n            } finally {\r\n              await client.end();\r\n            }\r\n          })().catch((e) => {\r\n            console.log(e);\r\n            throw Error(e);\r\n          });\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      });\r\n}\r\n\r\nasync GetWorkHour (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var tempRes=[];\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n    \r\n              if (!model.company_id) {\r\n                  throw Error(\"Can't fine company_id\");\r\n              } \r\n              console.log(model)\r\n            var temp = await client.query(_QueryFactoryWorkHours.GetCalendarByCompany, \r\n               [model.company_id]\r\n              );\r\n             //console.log(temp.rows);\r\n              var dataCalendar = [];\r\n             for(let row of temp.rows){\r\n                for(let data of row.day_detail){\r\n                  /* console.log(data); */\r\n                  dataCalendar.push(data);\r\n              }\r\n             }\r\n             //console.log(dataCalendar);\r\n             ///console.log(\"asdasdsa\",moment.parseZone(new Date('2022-04-03T17:00:00.000Z')));\r\n             var filter_data = dataCalendar.filter(d => {var time = moment(new Date(d.start));\r\n              return (moment(model.start_date) <= time && time <=  moment(model.end_date));\r\n             });\r\n           \r\n              //tempRes.push(temp.rows[0])\r\n              var total_hour = 0;\r\n              var total_day = filter_data.length;\r\n              var date_work = [];\r\n              for(let data of filter_data){\r\n                if(data.title !== \"Day off\"){\r\n                  date_work.push(data);\r\n                }else{\r\n                  total_day = total_day - 1;\r\n                }\r\n                \r\n                total_hour = total_hour + (parseInt(data.day_normal) + parseInt(data.day_ot) + parseInt(data.night_normal) + parseInt(data.night_ot));\r\n              }\r\n              date_work.sort((a,b)=> a.id - b.id);\r\n              var tempFinal = {\r\n                total_hour:total_hour,\r\n                total_day:total_day,\r\n                date_work:date_work,\r\n               \r\n              }\r\n              console.log(tempFinal);\r\n            resolve(tempFinal);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n//////////////////////////////// With Company ////////////////////////////\r\n\r\n//////////////////////////////// With OEM /////////////////////////////\r\nasync filter_hoursWithOem (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var tempRes=[];\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             let company_id = model.company_id\r\n              if (company_id === null) {\r\n                  throw Error(\"Can't fine company_id\");\r\n              } \r\n              let oem_id = model.oem_id\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              } \r\n\r\n            var temp = await client.query(_QueryFactoryWorkHours.filterWithOem, \r\n               [\r\n                 model.company_id,\r\n                 model.oem_id,\r\n               ]\r\n              );\r\n\r\n              const item = {};\r\n              if(temp.rows.length > 0){\r\n                if(temp.rows[0].workday == \"day_ship\"){\r\n                  item.id_dayship = temp.rows[0].id;\r\n                  item.day_normal = temp.rows[0].normal;\r\n                  item.day_ot =  temp.rows[0].ot;\r\n                  item.id_nightship = temp.rows[1].id;\r\n                  item.night_normal = temp.rows[1].normal;\r\n                  item.night_ot =  temp.rows[1].ot;\r\n                  tempRes.push(item);\r\n                }else{\r\n                  item.id_dayship = temp.rows[1].id;\r\n                  item.day_normal = temp.rows[1].normal;\r\n                  item.day_ot =  temp.rows[1].ot;\r\n                  item.id_nightship = temp.rows[0].id;\r\n                  item.night_normal = temp.rows[0].normal;\r\n                  item.night_ot =  temp.rows[0].ot;\r\n                  tempRes.push(item);\r\n                }\r\n              }\r\n            \r\n              //tempRes.push(temp.rows[0])\r\n            resolve(tempRes[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nasync SaveWorkHoursWithOem(item, user_id) {\r\nreturn new Promise(async (resolve, reject) => {\r\n  try {\r\n    (async () => {\r\n      var client = new Client(connectionConfig);\r\n      await client.connect();\r\n      try {\r\n        for (let model of item){\r\n      \r\n        if (model.company_id === null) {\r\n          throw Error(\"System : company_id is not found\");\r\n         \r\n        }\r\n        \r\n        if (model.oem_id === null) {\r\n          throw Error(\"System : oem_id is not found\");\r\n         \r\n        }\r\n        var query = await client.query(_QueryFactoryWorkHours.checkCompanyWithOem, [\r\n          model.company_id,\r\n          model.oem_id,\r\n        ]);\r\n        //console.log(query.rows[0]);\r\n        if (query.rows[0].count == 2) {\r\n          console.log(\"update\");\r\n          /// update\r\n           await client.query(_QueryFactoryWorkHours.update_work_hoursWithOem, [\r\n            model.id,\r\n            model.workday,\r\n            model.normal,\r\n            model.ot,\r\n            model.company_id,\r\n            model.oem_id,\r\n          ]); \r\n\r\n        }else{\r\n          /// insert\r\n          console.log(\"inset\");\r\n         let id = uuidv4();\r\n          await client.query(_QueryFactoryWorkHours.add_work_hoursWithOem, [\r\n            id,\r\n            model.workday,\r\n            model.normal,\r\n            model.ot,\r\n            true,\r\n            model.company_id,\r\n            model.oem_id\r\n          ]); \r\n\r\n        }\r\n     \r\n      }\r\n         console.log(\"COMMIT\");\r\n        resolve(true); \r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n    })().catch((e) => {\r\n      console.log(e);\r\n      throw Error(e);\r\n    });\r\n  } catch (e) {\r\n    reject(e);\r\n  }\r\n});\r\n}\r\n\r\n\r\nasync SaveCalendarWithOem(model) {\r\nreturn new Promise(async (resolve, reject) => {\r\n  try {\r\n    (async () => {\r\n      var client = new Client(connectionConfig);\r\n      await client.connect();\r\n      try {\r\n     \r\n      \r\n        if (model.company_id === null) {\r\n          throw Error(\"System : company_id is not found\");\r\n         \r\n        }\r\n        \r\n        if (model.oem_id === null) {\r\n          throw Error(\"System : oem_id is not found\");\r\n         \r\n        }\r\n        const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\r\n        const sorter = (a, b) => {\r\n            if(a.year !== b.year){\r\n               return a.year - b.year;\r\n            }else{\r\n               return months.indexOf(a.month) - months.indexOf(b.month);\r\n            };\r\n         };\r\n         var setGroup = model.calendar.sort(sorter);\r\n        //console.log(setGroup)\r\n        //console.log(JSON.stringify(setGroup))\r\n        var calendar = [];\r\n        for(let i = 0; i < setGroup.length; i++){\r\n          calendar.push(setGroup[i]);\r\n          if(i+1 < setGroup.length){\r\n            if(setGroup[i].month !== setGroup[i+1].month || setGroup[i].year !== setGroup[i+1].year){\r\n              //console.log(calendar);\r\n              var check_YearMonth = await client.query(_QueryFactoryWorkHours.check_YearMonthWithOem, [\r\n                calendar[0].year,\r\n                calendar[0].month,\r\n                model.company_id,\r\n                model.oem_id\r\n              ]);\r\n              if(check_YearMonth.rows.length > 0){\r\n                //update\r\n                await client.query(_QueryFactoryWorkHours.DelCalendarWithOem, [check_YearMonth.rows[0].id]);\r\n               //console.log(\"update\");\r\n               //console.log(calendar)\r\n              }\r\n                //add\r\n                //console.log(\"add\");\r\n                let id = uuidv4();\r\n                await client.query(_QueryFactoryWorkHours.AddCalendarWithOem, [\r\n                  id,\r\n                  calendar[0].month,\r\n                  calendar[0].year,\r\n                  null,\r\n                  model.company_id,\r\n                  JSON.stringify(calendar),\r\n                  model.oem_id\r\n                ]);\r\n              \r\n              calendar= [];\r\n            }}  \r\n            if(i == setGroup.length-1){\r\n              console.log(calendar);\r\n              var check_YearMonth = await client.query(_QueryFactoryWorkHours.check_YearMonthWithOem, [\r\n                calendar[0].year,\r\n                calendar[0].month,\r\n                model.company_id,\r\n                model.oem_id\r\n              ]);\r\n              //console.log(JSON.stringify(calendar));\r\n              if(check_YearMonth.rows.length > 0){\r\n                //update\r\n                //console.log(check_YearMonth.rows);\r\n                await client.query(_QueryFactoryWorkHours.DelCalendarWithOem, [check_YearMonth.rows[0].id]);\r\n              \r\n              }\r\n                //add\r\n               // console.log(\"add\");\r\n                let id2 = uuidv4();\r\n                await client.query(_QueryFactoryWorkHours.AddCalendarWithOem, [\r\n                  id2,\r\n                  calendar[0].month,\r\n                  calendar[0].year,\r\n                  null,\r\n                  model.company_id,\r\n                  JSON.stringify(calendar),\r\n                  model.oem_id\r\n                ]);\r\n              \r\n              calendar = [];\r\n            } \r\n          \r\n        }\r\n        console.log(\"COMMIT\"); \r\n        resolve(true);  \r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n    })().catch((e) => {\r\n      console.log(e);\r\n      throw Error(e);\r\n    });\r\n  } catch (e) {\r\n    reject(e);\r\n  }\r\n});\r\n}\r\n\r\n\r\n\r\nasync GetCalendarByCompanyWithOem (oem_id){\r\nreturn new Promise(async (resolve, reject) => {\r\n    try {\r\n      var tempRes=[];\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n  \r\n            if (!oem_id) {\r\n                throw Error(\"Can't fine oem_id\");\r\n            } \r\n\r\n          var temp = await client.query(_QueryFactoryWorkHours.GetCalendarByCompanyWithOem, \r\n             [oem_id]\r\n            );\r\n          \r\n            var dataCalendar = [];\r\n           for(let row of temp.rows){\r\n              for(let data of row.day_detail){\r\n                /* console.log(data); */\r\n                dataCalendar.push(data);\r\n            }\r\n           }\r\n              //console.log(dataCalendar);\r\n            //tempRes.push(temp.rows[0])\r\n          resolve(dataCalendar);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync GetWorkHourWithOem (model){\r\nreturn new Promise(async (resolve, reject) => {\r\n  try {\r\n    var tempRes=[];\r\n    (async () => {\r\n      var client = new Client(connectionConfig);\r\n      await client.connect();\r\n      try {\r\n\r\n          if (!model.oem_id) {\r\n              throw Error(\"Can't fine company_id\");\r\n          } \r\n          console.log(model)\r\n        var temp = await client.query(_QueryFactoryWorkHours.GetCalendarByCompanyWithOem, \r\n           [model.oem_id]\r\n          );\r\n         //console.log(temp.rows);\r\n          var dataCalendar = [];\r\n         for(let row of temp.rows){\r\n            for(let data of row.day_detail){\r\n              /* console.log(data); */\r\n              dataCalendar.push(data);\r\n          }\r\n         }\r\n         console.log(dataCalendar);\r\n         ///console.log(\"asdasdsa\",moment.parseZone(new Date('2022-04-03T17:00:00.000Z')));\r\n         var filter_data = dataCalendar.filter(d => {var time = moment(new Date(d.start));\r\n          return (moment(model.start_date) <= time && time <=  moment(model.end_date));\r\n         });\r\n       \r\n          //tempRes.push(temp.rows[0])\r\n          var total_hour = 0;\r\n          var total_day = filter_data.length;\r\n          var date_work = [];\r\n          for(let data of filter_data){\r\n            if(data.title !== \"Day off\"){\r\n              date_work.push(data);\r\n            }else{\r\n              total_day = total_day - 1;\r\n            }\r\n            \r\n            total_hour = total_hour + (parseInt(data.day_normal) + parseInt(data.day_ot) + parseInt(data.night_normal) + parseInt(data.night_ot));\r\n          }\r\n          var tempFinal = {\r\n            total_hour:total_hour,\r\n            total_day:total_day,\r\n            date_work:date_work,\r\n           \r\n          }\r\n          console.log(tempFinal);\r\n        resolve(tempFinal);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n    })().catch((e) => {\r\n      console.log(e);\r\n      throw Error(e);\r\n    });\r\n  } catch (e) {\r\n    reject(e);\r\n  }\r\n});\r\n}\r\n//////////////////////////////// With OEM ////////////////////////////\r\n \r\n\r\n}\r\nmodule.exports = factoryWorkHoursService\n\n//# sourceURL=webpack:///./app/service/factoryWorkHoursService.js?");

/***/ }),

/***/ "./app/service/fuelConsumtionService.js":
/*!**********************************************!*\
  !*** ./app/service/fuelConsumtionService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _queryfuelConsumtion = __webpack_require__(/*! ../query/queryfuelConsumtion.json */ \"./app/query/queryfuelConsumtion.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass fuelConsumtionService {\r\n\r\n    async get_fuel_consumtion(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n\r\n                let date =  null;\r\n                let date2 = null;\r\n                let oem_id = model.oem_id\r\n                console.log(\"filter_maerial\",model);\r\n                if(model.start_date !== \"\"){\r\n                 \r\n                  date = moment(model.start_date).startOf('day').format();\r\n                }\r\n              if(model.end_date !== \"\"){\r\n                  date2 = moment(model.end_date).endOf('day').format();\r\n              }\r\n              \r\n              if(model.end_date === \"\" && model.start_date !==\"\"){\r\n                  date2 = moment(model.start_date).endOf('day').format();\r\n              }\r\n\r\n    \r\n                // let date1 = moment(model.start_date).format(\"DD-MM-yyyy\");\r\n                // let date2 = moment(model.end_date).format(\"DD-MM-yyyy\");\r\n                // // console.log(\"format\",date1)\r\n    \r\n                // if (model.start_date !== \"\" && model.end_date === \"\") {\r\n                //   model.end_date = moment(model.start_date)\r\n                //     .add(23, \"hours\")\r\n                //     .add(59, \"minute\")\r\n                //     .add(59, \"seconds\")\r\n                //     .format();\r\n                // }\r\n                var tepm = \r\n                await client.query(_queryfuelConsumtion.get_fuel_consumtion, [\r\n                    // model.company_id,\r\n                    model.company_id,\r\n                    model.oem_id,\r\n                    model.plate_number || null,\r\n                    date,\r\n                    date2,\r\n                    // model.start_date || null,\r\n                    // model.end_date || null,\r\n                     \r\n                  ]);\r\n                  \r\n            \r\n        \r\n              resolve(tepm.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              /*  console.log(e); */\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n    \r\n\r\n}\r\n\r\nmodule.exports = fuelConsumtionService;\r\n\r\n\n\n//# sourceURL=webpack:///./app/service/fuelConsumtionService.js?");

/***/ }),

/***/ "./app/service/handheldCTSService.js":
/*!*******************************************!*\
  !*** ./app/service/handheldCTSService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryHandheldCTS = __webpack_require__(/*! ../query/queryHandheldCTS.json */ \"./app/query/queryHandheldCTS.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass handheldCTSService {\r\n\r\n  async checkAndGetDetailByTag(tag_no) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(tag_no)\r\n            var checkTagInMatInOut = await client.query(_QueryHandheldCTS.checkTagMat, [tag_no]);\r\n            console.log(checkTagInMatInOut.rows)\r\n            if (checkTagInMatInOut.rows.length == 0) {\r\n              throw Error(\"ไม่พบรายการ Tracking นี้!!!\");\r\n            }\r\n            var checkTagInMatOut = await client.query(_QueryHandheldCTS.checkTagMatOut, [tag_no]);\r\n            if (checkTagInMatOut.rows.length > 0) {\r\n              throw Error(\"Tracking ได้ถูกดำเนินการไปแล้ว\");\r\n            }\r\n\r\n            let temp = {\r\n              tag_no: checkTagInMatInOut.rows[0].tracking_no,\r\n              amount: checkTagInMatInOut.rows[0].tag_weight,\r\n              material_id: checkTagInMatInOut.rows[0].material_id,\r\n              invoice_no:checkTagInMatInOut.rows[0].invoice_no,\r\n              coil_no:checkTagInMatInOut.rows[0].coil_no\r\n\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkAndGetDetailByTagWipProd(tag_no, list_track) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(tag_no)\r\n            var checkTagInWipProdIn = await client.query(_QueryHandheldCTS.checkTagWipProdIn, [tag_no]);\r\n            if (checkTagInWipProdIn.rows.length == 0) {\r\n              throw Error(\"ไม่พบรายการ Tracking นี้!!!\");\r\n            }\r\n            var checkTagInWipProdOut = await client.query(_QueryHandheldCTS.checkTagWipProdOut, [tag_no]);\r\n\r\n            if (checkTagInWipProdOut.rows.length > 0) {\r\n              throw Error(\"Tracking ได้ถูกดำเนินการไปแล้ว\");\r\n            }\r\n\r\n            ///check FIFO\r\n            var tempStock = await client.query(_QueryHandheldCTS.GetLotWipProdInStock, [\r\n              checkTagInWipProdIn.rows[0].product_id,\r\n\r\n            ]);\r\n            var tempInStock = tempStock.rows.filter((e) => { return parseFloat(e.amount) > 0 });\r\n            for (let item of list_track) {\r\n              var Box = await client.query(_QueryHandheldCTS.checkTagWipProdIn, [item.tag_no]);\r\n              var index = tempInStock.findIndex((e) => e.box_no === Box.rows[0].box_no);\r\n              tempInStock.splice(index, 1);\r\n              /*           console.log(Box.rows[0].box_no,index,tempInStock[index]) */\r\n            }\r\n\r\n            var check = list_track.filter((e) => { return e.tag_no === tag_no });\r\n            if (tempInStock.length > 0) {\r\n              if (checkTagInWipProdIn.rows[0].box_no !== tempInStock[tempInStock.length - 1].box_no && check.length == 0) {\r\n                throw Error(\"โปรดยิง Tracking \" + tempInStock[tempInStock.length - 1].box_no + \" อันนี้ก่อน\");\r\n              }\r\n            }\r\n\r\n            let temp = {\r\n              tag_no: checkTagInWipProdIn.rows[0].tracking_no,\r\n              amount: checkTagInWipProdIn.rows[0].amount,\r\n              box_no: checkTagInWipProdIn.rows[0].box_no\r\n\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async checkAndGetDetailByTagPack(tag_no, list_track) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n    \r\n            if(list_track.length == 1){\r\n              throw Error(\"Stage Pack Out สามารถดำเนินการได้คร้ังละ 1 รายการเท่านั้น!!!\");\r\n            }\r\n            var checkTagInPackIn = await client.query(_QueryHandheldCTS.checkTagPackIn, [tag_no]);\r\n            if (checkTagInPackIn.rows.length == 0) {\r\n              throw Error(\"ไม่พบรายการ Tracking นี้!!!\");\r\n            }\r\n            var checkTagInPackOut = await client.query(_QueryHandheldCTS.checkTagPackOut, [tag_no]);\r\n\r\n            if (checkTagInPackOut.rows.length > 0) {\r\n              throw Error(\"Tracking ได้ถูกดำเนินการไปแล้ว\");\r\n            }\r\n\r\n            ///check FIFO\r\n            var tempStock = await client.query(_QueryHandheldCTS.getLotInStockPack, [\r\n              checkTagInPackIn.rows[0].product_id,\r\n\r\n            ]);\r\n            var tempInStock = tempStock.rows.filter((e) => { return parseFloat(e.amount) > 0 });\r\n            for (let item of list_track) {\r\n              var Pack = await client.query(_QueryHandheldCTS.checkTagPackIn, [item.tag_no]);\r\n              var index = tempInStock.findIndex((e) => e.pack_no === Pack.rows[0].pack_no);\r\n              tempInStock.splice(index, 1);\r\n              /*           console.log(Box.rows[0].box_no,index,tempInStock[index]) */\r\n            }\r\n\r\n            var check = list_track.filter((e) => { return e.tag_no === tag_no });\r\n            if (tempInStock.length > 0) {\r\n              if (checkTagInPackIn.rows[0].pack_no !== tempInStock[tempInStock.length - 1].pack_no && check.length == 0) {\r\n                throw Error(\"โปรดยิง Tracking \" + tempInStock[tempInStock.length - 1].pack_no + \" อันนี้ก่อน\");\r\n              }\r\n            }\r\n\r\n            let temp = {\r\n              tag_no: checkTagInPackIn.rows[0].tracking_tag_pack_chup,\r\n              amount: checkTagInPackIn.rows[0].weight_amount,\r\n              pack_no: checkTagInPackIn.rows[0].pack_no\r\n\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async checkAndGetDetailByProductNo(product_no) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n    \r\n\r\n            var checkProductNo = await client.query(_QueryHandheldCTS.checkProductNo, [product_no]);\r\n            if (checkProductNo.rows.length == 0) {\r\n              throw Error(\"ไม่พบรายการ Tracking นี้!!!\");\r\n            }\r\n          \r\n\r\n        \r\n           \r\n\r\n            let temp = {\r\n              tag_no: checkProductNo.rows[0].no,\r\n              product_id:checkProductNo.rows[0].id,\r\n  /*             amount: checkTagInPackIn.rows[0].weight_amount, */\r\n\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  async checkAndGetDetailByTagWipChoup(tag_no) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(tag_no)\r\n            var checkTagInWipChoupIn = await client.query(_QueryHandheldCTS.checkTagWipChoupIn, [tag_no]);\r\n            if (checkTagInWipChoupIn.rows.length == 0) {\r\n              throw Error(\"ไม่พบรายการ Tracking นี้!!!\");\r\n            }\r\n            var checkTagInWipChoupOut = await client.query(_QueryHandheldCTS.checkTagWipChoupOut, [tag_no]);\r\n            console.log(checkTagInWipChoupOut.rows)\r\n            if (checkTagInWipChoupOut.rows.length > 0) {\r\n              throw Error(\"Tracking ได้ถูกดำเนินการไปแล้ว\");\r\n            }\r\n            var amount = 0;\r\n            if (checkTagInWipChoupIn.rows[0].weight_amount !== null && checkTagInWipChoupIn.rows[0].picecs_amount === null) {\r\n              amount = checkTagInWipChoupIn.rows[0].weight_amount;\r\n            } else {\r\n              amount = checkTagInWipChoupIn.rows[0].picecs_amount;\r\n            }\r\n            let temp = {\r\n              tag_no: checkTagInWipChoupIn.rows[0].tracking_tag_wip_chup,\r\n              amount: amount,\r\n              weight_amount: checkTagInWipChoupIn.rows[0].weight_amount,\r\n              picecs_amount: checkTagInWipChoupIn.rows[0].picecs_amount\r\n\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getProductionOrderCTS(id,key) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            var tempDate = [];\r\n            if(key === \"mat\"){\r\n              var temp = await client.query(_QueryHandheldCTS.getProductionOrderCTSByMatId, [\r\n                id\r\n              ]);\r\n  \r\n           \r\n              for(let i of temp.rows){\r\n                var check = tempDate.filter((e)=>{return e.no === i.no});\r\n                if(check.length == 0){\r\n                  tempDate.push(i);\r\n                }\r\n              }\r\n            }else if (key === \"product\"){\r\n              var temp = await client.query(_QueryHandheldCTS.getProductionOrderCTSByProductId, [\r\n                id\r\n              ]);\r\n  \r\n        \r\n              for(let i of temp.rows){\r\n                var check = tempDate.filter((e)=>{return e.no === i.no});\r\n                if(check.length == 0){\r\n                  tempDate.push(i);\r\n                }\r\n              }\r\n            }\r\n            \r\n  \r\n\r\n            resolve(tempDate);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getProductionOrderCTS_AfterDel(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var tempData = [];\r\n\r\n            if(model.key === \"mat\"){\r\n              for(let item of model.inScan){\r\n                var temp = await client.query(_QueryHandheldCTS.getProductionOrderCTSByMatId, [\r\n                  item.material_id\r\n                ]);\r\n                for(let item2 of temp.rows){\r\n                  var check = tempData.filter((e)=>{return e.no === item2.no});\r\n  \r\n                  if(check.length == 0){\r\n                    tempData.push(item2);\r\n                  }\r\n                }\r\n            \r\n              }\r\n            }else if (model.key === \"product\"){\r\n              for(let item of model.inScan){\r\n                var temp = await client.query(_QueryHandheldCTS.getProductionOrderCTSByProductId, [\r\n                  item.product_id\r\n                ]);\r\n                for(let item2 of temp.rows){\r\n                  var check = tempData.filter((e)=>{return e.no === item2.no});\r\n  \r\n                  if(check.length == 0){\r\n                    tempData.push(item2);\r\n                  }\r\n                }\r\n            \r\n              }\r\n            }\r\n           \r\n          \r\n\r\n  \r\n\r\n            resolve(tempData);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getProjectList(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryHandheldCTS.getProjectByOEM, [oem_id]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async SaveProcessHandheld(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            await client.query(\"BEGIN\");\r\n            if (model.type === 'Raw mat Out') {\r\n\r\n              /// mat out to auto prod in\r\n              for (let track of model.list_track) {\r\n\r\n                var checkTagInMatInOut = await client.query(_QueryHandheldCTS.checkTagMat, [track.tag_no]);\r\n                if (checkTagInMatInOut.rows.length == 0) {\r\n                  throw Error(\"ไม่พบรายการ Tracking \" + track.tag_no + \" นี้!!!\");\r\n                }\r\n                var checkTagMatOut = await client.query(_QueryHandheldCTS.checkTagMatOut, [checkTagInMatInOut.rows[0].coil_no]);\r\n                if (checkTagMatOut.rows.length > 0) {\r\n                  throw Error(\"Tracking  \" + track.tag_no + \" ได้ถูกดำเนินการไปแล้ว\");\r\n                }\r\n                ////// RAw MAT OUT\r\n                var DetailByTracking = await client.query(_QueryHandheldCTS.getDetailByTracking, [track.tag_no]);\r\n                var oldAmount = await client.query(_QueryHandheldCTS.getOldAmountMat, [DetailByTracking.rows[0].material_id]);\r\n                var current_amount = oldAmount.rows[0].amount - 1/* track.amount */;\r\n\r\n                var id_log_mat_out = uuidv4();\r\n                await client.query(_QueryHandheldCTS.addLogMatOutCTS, [\r\n                  id_log_mat_out,\r\n                  DetailByTracking.rows[0].material_id,\r\n                  user_id,\r\n                  false,\r\n                  DetailByTracking.rows[0].amount,\r\n                  new Date(),\r\n                  current_amount,/// รอทำ\r\n                  DetailByTracking.rows[0].qc_check,\r\n                  DetailByTracking.rows[0].check_date,\r\n                  DetailByTracking.rows[0].qc_approve_person,\r\n                  DetailByTracking.rows[0].coil_no,\r\n                  DetailByTracking.rows[0].invoice_no,\r\n                  DetailByTracking.rows[0].warehouse_id,\r\n                  DetailByTracking.rows[0].tag_weight,\r\n                  DetailByTracking.rows[0].actual_weight,\r\n                  DetailByTracking.rows[0].grade,\r\n                  DetailByTracking.rows[0].unit,\r\n                  DetailByTracking.rows[0].supplier_id,\r\n                  DetailByTracking.rows[0].ref_coil_no,\r\n                  track.tag_no,\r\n                  DetailByTracking.rows[0].is_certificate,//cer\r\n                  DetailByTracking.rows[0].supplier_coil,//sup coil,\r\n                  track.production_order_no,//lot no \r\n                  track.production_order_id, //id_lot_no\r\n\r\n\r\n                ]);\r\n                await client.query(_QueryHandheldCTS.updateAmountMat, [DetailByTracking.rows[0].material_id, current_amount]);\r\n                /*         console.log(DetailByTracking.rows[0]) */\r\n\r\n\r\n                ////// WIP PROD IN\r\n                /*   var tracking_tag_wip_prod =\"\"; //เดี๋ยวมา gen\r\n\r\n                  var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n            var tracking_tag_wip_prod = \"W\"+year[2]+year[3]+\"-\";\r\n            var checkLastTag = await client.query(_QueryHandheldCTS.getLastTag,[tracking_tag_wip_prod]);\r\n          \r\n            tracking_tag_wip_prod = \"W\"+year[2]+year[3]+\"-\"+ pad_fnc2(checkLastTag.rows.length+1);\r\n                var idLogWipProd = uuidv4();\r\n              await client.query(_QueryHandheldCTS.addLogWipProdIn,[\r\n                idLogWipProd,\r\n                id_log_mat_out,\r\n                model.product_order_id,\r\n                null,\r\n                tracking_tag_wip_prod,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n                new Date(),\r\n                user_id,\r\n                DetailByTracking.rows[0].coil_no,\r\n                model.product_order_no,\r\n                track.amount,\r\n                DetailByTracking.rows[0].material_id\r\n              ]); */\r\n\r\n\r\n              }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            } else if (model.type === 'Wip Prod Out') {\r\n              //คำนวณการเกล่ยย loss\r\n              if (model.loss_amount > 0) {\r\n                var sum_amount = 0;\r\n                for (let item of model.list_track) {\r\n                  ///console.log(item.amount)\r\n                  sum_amount += parseFloat(item.amount);\r\n                }\r\n\r\n                if (model.loss_amount > sum_amount) {\r\n                  throw Error(\"จำนวนสูญสายเกินความเป็นจริง กรุณาตรวบสอบใหม่!!!\");\r\n                }\r\n\r\n\r\n                // console.log(sum_amount)\r\n                var per_loss = model.loss_amount / sum_amount * 100;\r\n                // console.log(per_loss)\r\n\r\n                for (let item of model.list_track) {\r\n                  //console.log(item.amount,(per_loss * item.amount / 100).toFixed(0) )\r\n\r\n\r\n                  item.loss_target = (per_loss * item.amount / 100).toFixed(2);\r\n\r\n\r\n                }\r\n\r\n              }\r\n\r\n\r\n\r\n\r\n              for (let track of model.list_track) {\r\n                var checkTagInWipProdIn = await client.query(_QueryHandheldCTS.checkTagWipProdIn, [track.tag_no]);\r\n                if (checkTagInWipProdIn.rows.length == 0) {\r\n                  throw Error(\"ไม่พบรายการ Tracking \" + track.tag_no + \" นี้!!!\");\r\n                }\r\n                var checkTagInWipProdOut = await client.query(_QueryHandheldCTS.checkTagWipProdOut, [track.tag_no]);\r\n                if (checkTagInWipProdOut.rows.length > 0) {\r\n                  throw Error(\"Tracking  \" + track.tag_no + \" ได้ถูกดำเนินการไปแล้ว\");\r\n                }\r\n\r\n                var idLogWipProd = uuidv4();\r\n                await client.query(_QueryHandheldCTS.addLogWipProdIn, [\r\n                  idLogWipProd,\r\n                  checkTagInWipProdIn.rows[0].product_order_cts_id,\r\n                  track.tag_no,\r\n                  false,\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  checkTagInWipProdIn.rows[0].lot_no,\r\n                  track.amount,\r\n                  checkTagInWipProdIn.rows[0].box_no,\r\n                  checkTagInWipProdIn.rows[0].product_id,\r\n                  checkTagInWipProdIn.rows[0].box_date,\r\n                  track.loss_target,\r\n                  checkTagInWipProdIn.rows[0].ref_box_no,\r\n                  null\r\n                ]);\r\n\r\n              }\r\n\r\n            }/* else if (model.type === 'Wip รับชุบ'){\r\n              for(let track of model.list_track){\r\n                var checkTagWipChoupIn = await client.query(_QueryHandheldCTS.checkTagWipChoupIn,[track.tag_no]);\r\n                 if(checkTagWipChoupIn.rows.length == 0 ){\r\n                   throw Error(\"ไม่พบรายการ Tracking \"+track.tag_no+ \" นี้!!!\");\r\n                 }\r\n                 var checkTagWipChoupOut = await client.query(_QueryHandheldCTS.checkTagWipChoupOut,[track.tag_no]);\r\n                 if(checkTagWipChoupOut.rows.length > 0 ){\r\n                   throw Error(\"Tracking  \"+track.tag_no+ \" ได้ถูกดำเนินการไปแล้ว\");\r\n                 }\r\n                 \r\n                 var idLogWipChoup = uuidv4();\r\n                 var unit_convert;\r\n                 console.log()\r\n                 if(track.type === \"piece\"){\r\n                  unit_convert === track.amount\r\n                 }else if(track.type = \"kg\"){\r\n            \r\n                  unit_convert= Math.floor(parseInt(track.amount) / parseFloat(checkTagWipChoupIn.rows[0].nw));\r\n                  console.log(\"sss\",parseInt(track.amount),parseFloat(checkTagWipChoupIn.rows[0].nw),unit_convert)\r\n                 }\r\n                \r\n                 await client.query(_QueryHandheldCTS.addLogWipChoupOut,[\r\n                  idLogWipChoup,\r\n                  checkTagWipChoupIn.rows[0].log_wip_prod_edit_amount_cts_id,\r\n                  checkTagWipChoupIn.rows[0].tracking_tag_wip_prod,\r\n                  false, //edit type\r\n                  track.tag_no,\r\n                  checkTagWipChoupIn.rows[0].plating_plant_id,\r\n                  checkTagWipChoupIn.rows[0].weight_amount,\r\n                  checkTagWipChoupIn.rows[0].picecs_amount,\r\n                  track.loss,\r\n                  checkTagWipChoupIn.rows[0].product_id,\r\n                  unit_convert,\r\n                  true, //is use\r\n                  new Date(), \r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  checkTagWipChoupIn.rows[0].qc_approve,\r\n                  checkTagWipChoupIn.rows[0].lot_no,\r\n                  checkTagWipChoupIn.rows[0].qc_date,\r\n                 ]);\r\n\r\n\r\n\r\n                 /// auto Pack in\r\n                 var tracking_tag_pack_chup =\"\"; //เดี๋ยวมา gen\r\n\r\n                 var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n           var tracking_tag_pack_chup = \"P\"+year[2]+year[3]+\"-\";\r\n           var checkLastTag = await client.query(_QueryHandheldCTS.getLastTagPack,[tracking_tag_pack_chup]);\r\n         \r\n           tracking_tag_pack_chup = \"P\"+year[2]+year[3]+\"-\"+ pad_fnc2(checkLastTag.rows.length+1);\r\n                 var log_pack_id = uuidv4();\r\n                 await client.query(_QueryHandheldCTS.addLogPackIn,[\r\n                  log_pack_id,\r\n                  true,//false\r\n                  unit_convert, // จำนวนชิ้นที่แปลง จาก น้ำหนัก\r\n                  true,//is_user\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  idLogWipChoup,\r\n                  track.tag_no, // tag wip ชุบ\r\n                  model.pack_name, // ชื่อ pack\r\n                  checkTagWipChoupIn.rows[0].product_id,\r\n                  tracking_tag_pack_chup,\r\n                  checkTagWipChoupIn.rows[0].lot_no,/////เดวมา GEN\r\n                  null,\r\n                  checkTagWipChoupIn.rows[0].weight_amount,\r\n                  checkTagWipChoupIn.rows[0].picecs_amount,\r\n                 ]);\r\n \r\n \r\n               } \r\n            }*/\r\n\r\n            else if (model.type === 'Pack Out') {\r\n              //คำนวณการเกล่ยย loss\r\n              if (model.loss_amount > 0) {\r\n                var sum_amount = 0;\r\n                for (let item of model.list_track) {\r\n                  ///console.log(item.amount)\r\n                  sum_amount += parseFloat(item.amount);\r\n                }\r\n\r\n                if (model.loss_amount > sum_amount) {\r\n                  throw Error(\"จำนวนสูญสายเกินความเป็นจริง กรุณาตรวบสอบใหม่!!!\");\r\n                }\r\n\r\n\r\n                // console.log(sum_amount)\r\n                var per_loss = model.loss_amount / sum_amount * 100;\r\n                // console.log(per_loss)\r\n\r\n                for (let item of model.list_track) {\r\n                  //console.log(item.amount,(per_loss * item.amount / 100).toFixed(0) )\r\n\r\n\r\n                  item.loss_target = (per_loss * item.amount / 100).toFixed(2);\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n              }\r\n              for(let track of model.list_track){\r\n                var checkTagPackIn = await client.query(_QueryHandheldCTS.checkTagPackIn,[track.tag_no]);\r\n                 if(checkTagPackIn.rows.length == 0 ){\r\n                   throw Error(\"ไม่พบรายการ Tracking \"+track.tag_no+ \" นี้!!!\");\r\n                 }\r\n                 var checkTagPackOut = await client.query(_QueryHandheldCTS.checkTagPackOut,[track.tag_no]);\r\n                 if(checkTagPackOut.rows.length > 0 ){\r\n                   throw Error(\"Tracking  \"+track.tag_no+ \" ได้ถูกดำเนินการไปแล้ว\");\r\n                 }\r\n                 \r\n                 var LotDetail = await client.query(_QueryHandheldCTS.GetLotPackDetail, [checkTagPackIn.rows[0].product_id]);\r\n                 var unit_amount = Math.floor(parseFloat(checkTagPackIn.rows[0].weight_amount) / parseFloat(LotDetail.rows[0].nw_number));\r\n                 var idLogPack = uuidv4();\r\n                 await client.query(_QueryHandheldCTS.addLogPackIn,[\r\n                  idLogPack,\r\n                  false,\r\n                  unit_amount,// แปลง กก -> ชิ้น\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  checkTagPackIn.rows[0].log_wip_chup_edit_amount_cts_id,\r\n                  checkTagPackIn.rows[0].tracking_tag_wip_chup,\r\n                  checkTagPackIn.rows[0].pack_no,\r\n                  checkTagPackIn.rows[0].product_id,\r\n                  track.tag_no,\r\n                  checkTagPackIn.rows[0].wip_chup_lot_no,\r\n                  track.loss_target,\r\n                  checkTagPackIn.rows[0].weight_amount,\r\n                  checkTagPackIn.rows[0].piece_amount,\r\n                  checkTagPackIn.rows[0].pack_lot_no,\r\n                 ]);\r\n \r\n               }\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n            else if (model.type === 'F/G In') {\r\n              //คำนวณการเกล่ยย loss\r\n              //console.log(model)\r\n            \r\n              for(let item of model.list_track){\r\n                console.log(item);\r\n                var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n                var tracking_no = \"F\"+year[2]+year[3]+\"-\";\r\n                var checkLastTag = await client.query(_QueryHandheldCTS.getLastTagFG,[tracking_no]);\r\n                \r\n                tracking_no = \"F\"+year[2]+year[3]+\"-\"+ pad_fnc2(checkLastTag.rows.length+1);\r\n\r\n\r\n                \r\n                var getProductDetailByNo = await client.query(_QueryHandheldCTS.checkProductNo,[item.tag_no]);\r\n                var pack_amount = Math.ceil(parseInt(item.amount) / parseInt(getProductDetailByNo.rows[0].packing_standart || 1));\r\n                item.product_id = getProductDetailByNo.rows[0].id;\r\n              \r\n\r\n                let id_log_fg = uuidv4();\r\n                await client.query(_QueryHandheldCTS.addLogFG,[\r\n                  id_log_fg,\r\n                  item.product_id,\r\n                  true,\r\n                  item.amount,\r\n                  null,\r\n                  tracking_no,\r\n                  null,\r\n                  item.production_order_no,\r\n                  item.production_order_id,\r\n                  pack_amount,//เดวมาคำรวณ,\r\n                  item.exp,\r\n                  null,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id\r\n                ]); \r\n\r\n                //update fg_amount\r\n                \r\n                var new_amount  = parseInt(getProductDetailByNo.rows[0].fg_amount || 0) + parseInt(item.amount);\r\n                await client.query(_QueryHandheldCTS.upDateAmountFG,[\r\n                  item.product_id,\r\n                  new_amount\r\n                ])\r\n\r\n           \r\n              }\r\n\r\n            }else if (model.type === 'F/G Out') {\r\n              //คำนวณการเกล่ยย loss\r\n              console.log(model)\r\n              for(var item of model.list_track){\r\n                var getProductDetailByNo = await client.query(_QueryHandheldCTS.checkProductNo,[item.tag_no]);\r\n                /* var tempStock = await client.query(_QueryHandheldCTS.getFGInStockList,[getProductDetailByNo.rows[0].id]); */\r\n                var tempStock = await client.query(_QueryHandheldCTS.getFGInStockListEXP,[getProductDetailByNo.rows[0].id]);\r\n                var lotInStock = tempStock.rows;\r\n               \r\n                const lot_stock2 = [];\r\n              for (let i of lotInStock) {\r\n                if (i.amount > 0) {\r\n                  lot_stock2.push(i);\r\n\r\n                 /*  i.exp_date = moment(i.exp_date).set('hour', 0).set('minute', 0).set('second', 0).format();\r\n                  var check = lot_stock2.filter((e)=> {return e.exp_date === i.exp_date && e.lot_no === i.lot_no});\r\n\r\n                  if(check.length == 0){\r\n                    lot_stock2.push(i);\r\n                  }else{\r\n                    var index = lot_stock2.findIndex((e)=> e.exp_date === i.exp_date && e.lot_no === i.lot_no);\r\n                    lot_stock2[index].amount = parseInt(lot_stock2[index].amount)  + parseInt(i.amount);\r\n                  } */\r\n                \r\n                }\r\n              }\r\n\r\n            \r\n\r\n              const lot_noArr = lot_stock2.sort(\r\n                (a, b) => moment(a.exp_date) - moment(b.exp_date)\r\n              );\r\n                console.log(lot_noArr);\r\n              var b_amount = parseInt(item.amount);\r\n\r\n              for (let lot of lot_noArr) {\r\n                //let log_FG_id = uuidv4();\r\n      \r\n                if (b_amount > 0) {\r\n                  var cut = 0;\r\n                  \r\n                  var balance = lot.amount - b_amount;\r\n                  if (balance < 0) {\r\n                    b_amount = balance * -1;\r\n                    cut = lot.amount;\r\n                  } else {\r\n                    cut = b_amount;\r\n                    b_amount = 0;\r\n                  }\r\n                  var lotFGDetail = await client.query(_QueryHandheldCTS.getLotFGDetail,[\r\n                    getProductDetailByNo.rows[0].id,\r\n                    lot.lot_no,\r\n                    lot.exp_date,\r\n                  ]);   \r\n                  console.log(\"ตัด\",cut,\" จาก \",lot.lot_no,\" ของ \",item.tag_no,\" exp \",lot.exp_date) \r\n                  var pack_amount = parseInt(cut) / parseInt(getProductDetailByNo.rows[0].packing_standart || 1); // รอ confirm ว่าไม่มีต้อง Default 1 หรือไม่\r\n                  console.log(\"pack\",pack_amount)\r\n                  let id_log_fg = uuidv4();\r\n                  await client.query(_QueryHandheldCTS.addLogFG,[\r\n                    id_log_fg,\r\n                    getProductDetailByNo.rows[0].id,\r\n                    false,\r\n                    cut,\r\n                    model.project_id || null,\r\n                    lotFGDetail.rows[0].tracking_no,//tracking_no ไม่รู้ว่าจะเอาอันไหนมา เนื่องจาก lot นึง มีการรวมหลาย track no\r\n                    null,//customer_id\r\n                    lot.lot_no,\r\n                    lot.production_order_cts_id,\r\n                    pack_amount,// calculate amount / packing_standart\r\n                    lot.exp_date,\r\n                    null,//remark\r\n                    new Date(),\r\n                    user_id,\r\n                    new Date(),\r\n                    user_id\r\n                  ])\r\n              }\r\n\r\n          \r\n          \r\n             \r\n            }\r\n            if (b_amount !== 0) {\r\n              console.log(\"ไม่มี lot ตัดแล้ว เกินมา \", b_amount,\" ของ\",item.tag_no);\r\n            /*   model.new_amount = b_amount * -1; */\r\n\r\n              throw Error(\"[\"+item.tag_no+\"] is over stock amount -\" + b_amount);\r\n              //data_negative.push(listData);\r\n            }\r\n            var new_amount  = parseInt(getProductDetailByNo.rows[0].fg_amount || 0) - parseInt(item.amount);\r\n            await client.query(_QueryHandheldCTS.upDateAmountFG,[\r\n              getProductDetailByNo.rows[0].id,\r\n              new_amount\r\n            ])\r\n             \r\n          }\r\n         /*  throw Error(\"break\"); */\r\n            }\r\n\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nfunction pad_fnc2(d) {\r\n\r\n  if (d.toString().length == 5) {\r\n    return '0' + d.toString();\r\n  } else if (d.toString().length == 4) {\r\n    return '00' + d.toString();\r\n  } else if (d.toString().length == 3) {\r\n    return '000' + d.toString();\r\n  } else if (d.toString().length == 2) {\r\n    return '0000' + d.toString();\r\n  } else {\r\n    return '00000' + d.toString();\r\n  }\r\n\r\n}\r\n\r\n\r\nmodule.exports = handheldCTSService;\r\n\n\n//# sourceURL=webpack:///./app/service/handheldCTSService.js?");

/***/ }),

/***/ "./app/service/handheldService.js":
/*!****************************************!*\
  !*** ./app/service/handheldService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryHandheld = __webpack_require__(/*! ../query/queryHandheld.json */ \"./app/query/queryHandheld.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst e = __webpack_require__(/*! express */ \"express\");\r\n\r\n\r\nclass handheldService {\r\n\r\n  async saveHandheld(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          await client.query('BEGIN');\r\n          try {\r\n\r\n            console.log(model);\r\n            const data_negative = [];\r\n            var data_detail = [];\r\n            const tempData = [];\r\n            for (var list_track of model.list_track) {\r\n              var findProductByTagNo = await client.query(_QueryHandheld.check_tag_no, [list_track.tag_no,model.oem_id]);\r\n              if (findProductByTagNo.rows.length > 0) {\r\n                console.log(findProductByTagNo.rows)\r\n                let temp = {\r\n                  product_id: findProductByTagNo.rows[0].track_list.product_id || \"\",\r\n                  product_no: findProductByTagNo.rows[0].track_list.product_no || \"\",\r\n                  product_name: findProductByTagNo.rows[0].track_list.product_name || \"\",\r\n                  tag_no: list_track.tag_no,\r\n                  amount: list_track.amount,\r\n                  lot_no: model.lot_no || null,\r\n                  exp: model.exp || null,\r\n                  project_id: model.project_id || null,\r\n                  remark:model.remark || null,\r\n                }\r\n                tempData.push(temp);\r\n              }\r\n            }\r\n            //console.log(tempData);\r\n            if (model.type === \"Cutting IN\") {\r\n              for (var listData of tempData) {\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].cut_amount || 0) + parseFloat(listData.amount);\r\n                //console.log(new_amount)\r\n                let id_logCutting = uuidv4();\r\n                await client.query(_QueryHandheld.addLogCutting,\r\n                  [\r\n                    id_logCutting,\r\n                    listData.product_id,\r\n                    user_id,\r\n                    true,\r\n                    listData.amount,\r\n                    moment(new Date()),\r\n                    listData.tag_no,\r\n                    listData.remark || null,\r\n                  ]);\r\n                await client.query(_QueryHandheld.updateCutting, [listData.product_id, new_amount, moment(new Date())]);\r\n                let temp = {\r\n                  tag_no: listData.tag_no,\r\n                  lot_no: \"-\",\r\n                  amount:listData.amount,\r\n                  status:true,\r\n                  remark:listData.remark || \"\",\r\n                }\r\n                data_detail.push(temp);\r\n              }\r\n\r\n            } else if (model.type === \"Cutting OUT\") {\r\n\r\n              for (var listData of tempData) {\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].cut_amount || 0) - parseFloat(listData.amount);\r\n                //console.log(new_amount)\r\n                if (new_amount < 0) {\r\n                  listData.new_amount = new_amount;\r\n                  data_negative.push(listData);\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:false,\r\n                    remark:\"ไม่มีให้ out เกินมา \"+new_amount,\r\n                  }\r\n                  data_detail.push(temp);\r\n                }else{\r\n                  let id_logCutting = uuidv4();\r\n                  await client.query(_QueryHandheld.addLogCutting,\r\n                    [\r\n                      id_logCutting,\r\n                      listData.product_id,\r\n                      user_id,\r\n                      false,\r\n                      listData.amount,\r\n                      moment(new Date()),\r\n                      listData.tag_no,\r\n                      listData.remark || null,\r\n                    ]);\r\n                  await client.query(_QueryHandheld.updateCutting, [listData.product_id, parseFloat(new_amount), moment(new Date())]);\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:true,\r\n                    remark:listData.remark || \"\",\r\n                  }\r\n                  data_detail.push(temp);\r\n                }\r\n               //console.log(\"here\");\r\n              }\r\n\r\n            } else if (model.type === \"WIP IN\") {\r\n\r\n              for (var listData of tempData) {\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].wip_amount || 0) + parseFloat(listData.amount);\r\n                //console.log(new_amount)\r\n                let id_logWIP = uuidv4();\r\n                await client.query(_QueryHandheld.addLogWIP,\r\n                  [\r\n                    id_logWIP,\r\n                    listData.product_id,\r\n                    user_id,\r\n                    true,\r\n                    listData.amount,\r\n                    moment(new Date()),\r\n                    listData.tag_no,\r\n                    new_amount,// current amount\r\n                    listData.remark\r\n                  ]);\r\n                await client.query(_QueryHandheld.updateWIP, [listData.product_id, new_amount, moment(new Date())]);\r\n                let temp = {\r\n                  tag_no: listData.tag_no,\r\n                  lot_no: \"-\",\r\n                  amount:listData.amount,\r\n                  status:true,\r\n                  remark:listData.remark || \"\",\r\n                }\r\n                data_detail.push(temp);\r\n              }\r\n\r\n            } else if (model.type === \"WIP OUT\") {\r\n\r\n              for (var listData of tempData) {\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].wip_amount || 0) - parseFloat(listData.amount);\r\n                //console.log(new_amount)\r\n                if (new_amount < 0) {\r\n                  listData.new_amount = new_amount;\r\n                  data_negative.push(listData);\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:false,\r\n                    remark:\"ไม่มีให้ out เกินมา \"+new_amount,\r\n                  }\r\n                  data_detail.push(temp);\r\n                }else{\r\n                  let id_logWIP = uuidv4();\r\n                await client.query(_QueryHandheld.addLogWIP,\r\n                  [\r\n                    id_logWIP,\r\n                    listData.product_id,\r\n                    user_id,\r\n                    false,\r\n                    listData.amount,\r\n                    moment(new Date()),\r\n                    listData.tag_no,\r\n                    new_amount,// current amount\r\n                    listData.remark\r\n                  ]);\r\n                await client.query(_QueryHandheld.updateWIP, [listData.product_id, parseFloat(new_amount), moment(new Date())]);\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:false,\r\n                    remark:\"ไม่มีให้ out เกินมา \"+new_amount,\r\n                  }\r\n                  data_detail.push(temp);\r\n                }\r\n                \r\n              }\r\n\r\n            } else if (model.type === \"F/G IN\") {\r\n\r\n              for (var listData of tempData) {\r\n\r\n             \r\n                //gen lot no from\r\n                let lotNo = moment(new Date()).format('YYYYMMDD');\r\n                var getLotNo = await client.query(_QueryHandheld.getLotNo, [lotNo,model.oem_id]);\r\n                if (getLotNo.rows.length > 0) {\r\n                  let laslotarr = [];\r\n                  var test = getLotNo.rows[0].fg_lot_no;\r\n                  for (let i of test) {\r\n                    laslotarr.push(i);\r\n                  }\r\n                  laslotarr.splice(0, 9);\r\n                  var key_lot = \"\";\r\n                  for (let i of laslotarr) {\r\n                    key_lot += i;\r\n                  }\r\n                  //console.log(\"test\",parseFloat(key_lot));\r\n                  var count = parseFloat(key_lot) + 1;\r\n                  //var count = getLotNo.rows.length + 1;\r\n                  lotNo = lotNo + '-' + pad_fnc(count);\r\n                } else {\r\n                  lotNo = lotNo + '-' + pad_fnc(1);\r\n                }\r\n                //gen lot no \r\n\r\n                 var id_logFG = uuidv4();\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].fg_amount || 0) + parseFloat(listData.amount);\r\n              \r\n                await client.query(_QueryHandheld.addLogFG,\r\n                  [\r\n                    id_logFG,\r\n                    listData.product_id,\r\n                    user_id,\r\n                    true,\r\n                    listData.amount,\r\n                    moment(new Date()),\r\n                    listData.project_id || null,\r\n                    lotNo,\r\n                    moment(new Date()),\r\n                    listData.remark || null,\r\n                    null,\r\n                    null,\r\n                    listData.tag_no\r\n                  ]);\r\n                await client.query(_QueryHandheld.updateFG, [listData.product_id, parseFloat(new_amount), moment(new Date())]);\r\n                let temp = {\r\n                  tag_no: listData.tag_no,\r\n                  lot_no: lotNo,\r\n                  amount:listData.amount,\r\n                  status:true,\r\n                  remark:listData.remark || \"\",\r\n                }\r\n                data_detail.push(temp);\r\n              }\r\n\r\n            } else if (model.type === \"F/G OUT\") {\r\n              for (var listData of tempData) {\r\n                await client.query(\"BEGIN\");\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [listData.product_id]);\r\n                var new_amount = parseFloat(amount.rows[0].fg_amount || 0) - parseFloat(listData.amount);\r\n                //console.log(new_amount)\r\n\r\n                var lot_stock = await client.query(_QueryHandheld.getSumLotNoReserved, [\r\n                  listData.product_id,\r\n                ]);\r\n              /*   var lot_stock = await client.query(_QueryHandheld.getSumLot, [listData.product_id]); */\r\n                const lot_stock2 = [];\r\n                for (let i of lot_stock.rows) {\r\n                  if (i.amount > 0) {\r\n                    lot_stock2.push(i);\r\n                  }\r\n                }\r\n     \r\n                const lot_noArr = lot_stock2.sort((a, b) => a.exprire_date - b.exprire_date);\r\n\r\n                //console.log(lot_noArr)\r\n                var b_amount = listData.amount\r\n\r\n                for (let lot of lot_noArr) {\r\n                  if (b_amount > 0) {\r\n                    var cut = 0;\r\n                    console.log(b_amount);\r\n                    var balance = lot.amount - b_amount;\r\n                    if (balance < 0) {\r\n                      b_amount = balance * (-1);\r\n                      cut = lot.amount;\r\n                    } else {\r\n                      cut = b_amount;\r\n                      b_amount = 0;\r\n                    }\r\n                    console.log(\"ตัด: \", cut, \"จาก lot \", lot.fg_lot_no);\r\n                    let id_logFG = uuidv4();\r\n                    await client.query(_QueryHandheld.addLogFG,\r\n                      [\r\n                        id_logFG,\r\n                        listData.product_id,\r\n                        user_id,\r\n                        false,\r\n                        cut,\r\n                        moment(new Date()),\r\n                        listData.project_id || null,\r\n                        lot.fg_lot_no,\r\n                        null,//listData.exp,\r\n                        listData.remark || null,\r\n                        null,\r\n                        null,\r\n                        listData.tag_no\r\n                      ]);\r\n\r\n                  }\r\n\r\n                }\r\n                if (b_amount !== 0) {\r\n                  console.log(\"ไม่มี lot ตัดแล้ว เกินมา \", b_amount)\r\n                  listData.new_amount = b_amount * (-1);\r\n                  data_negative.push(listData);\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:false,\r\n                    remark:\"ไม่มี lot ตัดแล้ว เกินมา \"+listData.new_amount,\r\n                  }\r\n                  data_detail.push(temp);\r\n                  await client.query(\"ROLLBACK\");\r\n                }else{\r\n                  let temp = {\r\n                    tag_no: listData.tag_no,\r\n                    lot_no: \"-\",\r\n                    amount:listData.amount,\r\n                    status:true,\r\n                    remark:listData.remark || \"\",\r\n                  }\r\n                  data_detail.push(temp);\r\n                  await client.query(_QueryHandheld.updateFG, [listData.product_id, parseFloat(new_amount), moment(new Date())]);\r\n                  await client.query(\"COMMIT\");\r\n                }\r\n        \r\n              }\r\n            }\r\n\r\n\r\n            /* if (data_negative.length > 0) {\r\n              console.log(\"in nagative\");\r\n              await client.query('ROLLBACK');\r\n              resolve(data_negative);\r\n            } else { */\r\n              await client.query('COMMIT')\r\n              console.log(\"COMMIT\");\r\n              resolve(data_detail);\r\n           /*  } */\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async findTrackNo(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n            var check_tag_no = await client.query(_QueryHandheld.check_tag_no, [model.tag_no, model.oem_id]);\r\n             console.log(check_tag_no.rows)\r\n            if (check_tag_no.rows.length > 0) {\r\n              model.amount = check_tag_no.rows[0].track_list.amount;\r\n              console.log(model)\r\n              resolve(model);\r\n            } else {\r\n              throw Error(\"not found tag no !!!\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async genLotNo(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(oem_id)\r\n            let lotNo = moment(new Date()).format('YYYYMMDD');\r\n            var getLotNo = await client.query(_QueryHandheld.getLotNo, [lotNo, oem_id]);\r\n            console.log(getLotNo.rows.length)\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].fg_lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 9);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              var count = parseFloat(key_lot) + 1;\r\n              //var count = getLotNo.rows.length + 1;\r\n              lotNo = lotNo + '-' + pad(count);\r\n            } else {\r\n              lotNo = lotNo + '-' + pad(1);\r\n            }\r\n\r\n\r\n \r\n\r\n\r\n            resolve(lotNo);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async genLotNo_material(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(model)\r\n            let lotNo = moment(new Date()).format('YYYYMMDD');\r\n            var getLotNo = await client.query(_QueryHandheld.getLotNo_material, [lotNo,oem_id]);\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].mat_lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 9);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              var count = parseFloat(key_lot) + 1;\r\n              //var count = getLotNo.rows.length + 1;\r\n              lotNo = lotNo + '-' + pad(count);\r\n            } else {\r\n              lotNo = lotNo + '-' + pad(1);\r\n            }\r\n\r\n\r\n\r\n\r\n          \r\n            resolve(lotNo);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  if (d < 10) {\r\n\r\n    return '000' + d.toString();\r\n  } else if (d < 100) {\r\n    return '00' + d.toString();\r\n  } else if (d < 1000) {\r\n    return '0' + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n\r\n}\r\n\r\nasync function genLotNo_fnc(oem_id){\r\n  var client = new Client(connectionConfig);\r\n  await client.connect();\r\n  try {\r\n    let lotNo = moment(new Date()).format('YYYYMMDD');\r\n    var getLotNo = await client.query(_QueryHandheld.getLotNo, [lotNo,oem_id]);\r\n    if (getLotNo.rows.length > 0) {\r\n      let laslotarr = [];\r\n      var test = getLotNo.rows[0].fg_lot_no;\r\n      for (let i of test) {\r\n        laslotarr.push(i);\r\n      }\r\n      laslotarr.splice(0, 9);\r\n      var key_lot = \"\";\r\n      for (let i of laslotarr) {\r\n        key_lot += i;\r\n      }\r\n      //console.log(\"test\",parseFloat(key_lot));\r\n      var count = parseFloat(key_lot) + 1;\r\n      //var count = getLotNo.rows.length + 1;\r\n      lotNo = lotNo + '-' + pad_fnc(count);\r\n    } else {\r\n      lotNo = lotNo + '-' + pad_fnc(1);\r\n    }\r\n    console.log(\"fnc\",lotNo);\r\n      return lotNo;\r\n    \r\n    } catch (e) {\r\n       console.log(e)\r\n    } finally {\r\n      await client.end();\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = handheldService;\r\n\n\n//# sourceURL=webpack:///./app/service/handheldService.js?");

/***/ }),

/***/ "./app/service/historyService.js":
/*!***************************************!*\
  !*** ./app/service/historyService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryHistory = __webpack_require__(/*! ../query/queryHistory.json */ \"./app/query/queryHistory.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar CryptoJS = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nvar appSetting = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst SECRET = appSetting.jwtSecret; \r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nclass historyService {\r\n\r\n    async getDelivery (model){\r\n        return new Promise(async (resolve, reject) => {\r\n            try {\r\n              (async () => {\r\n                var client = new Client(connectionConfig);\r\n                await client.connect();\r\n                try {\r\n\r\n                  \r\n\r\n                  \r\n                  let oem_id = model.oem_id;\r\n\r\n                    if (oem_id === null) {\r\n                        throw Error(\"Can't fine oem\");\r\n                    }\r\n                    console.log(model)\r\n                    let start_date = model.start_date || null;\r\n                    let end_date = model.end_date || null;\r\n\r\n                   if(model.color == \"default\"){\r\n                      model.color = ''\r\n                      var color = model.color = ''\r\n                    } \r\n\r\n                    if(start_date === null && end_date === null){\r\n                      if(color == ''){\r\n                        var temp = await client.query(_QueryHistory.getDeliveryDefaul, [oem_id,model.product_no || null,]);\r\n                        resolve(temp.rows);\r\n                      }\r\n                      var temp = await client.query(_QueryHistory.getDelivery, [oem_id,model.product_no || null,model.color || null]);\r\n                      resolve(temp.rows);\r\n                    }else{\r\n\r\n                      \r\n                      if(end_date===null){\r\n                        end_date =  moment(start_date).add(23,'hours').add(59,'minute').add(59,'seconds').format();\r\n                      }else{\r\n                        end_date = moment(end_date).add(23,'hours').add(59,'minute').add(59,'seconds').format();\r\n                      }\r\n                      \r\n                      if(color == ''){\r\n                        var temp2 = await client.query(_QueryHistory.getDelivery3, [oem_id,start_date,end_date,model.product_no || null,/* model.color || null */]);\r\n                      resolve(temp2.rows);\r\n\r\n                      }\r\n                      else{\r\n                      var temp2 = await client.query(_QueryHistory.getDelivery2, [oem_id,start_date,end_date,model.product_no || null,model.color || null]);\r\n                      resolve(temp2.rows);\r\n                      \r\n                      }\r\n                    \r\n                    }\r\n\r\n                  \r\n                  \r\n                 \r\n                  \r\n                } catch (e) {\r\n                  reject(e);\r\n                } finally {\r\n                  await client.end();\r\n                }\r\n              })().catch((e) => {\r\n                console.log(e);\r\n                throw Error(e);\r\n              });\r\n            } catch (e) {\r\n              reject(e);\r\n            }\r\n          });\r\n    }\r\n\r\n    async filter_cutting (model){\r\n      return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let oem_id = model.oem_id\r\n                  if (oem_id === null) {\r\n                      throw Error(\"Can't fine oem_id\");\r\n                  }\r\n\r\n                var temp = await client.query(_QueryHistory.filter_cutting, \r\n                   [oem_id,\r\n                    model.no || null, \r\n                    model.name || null,\r\n                   ]\r\n                  );\r\n               \r\n                resolve(temp.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n  }\r\n\r\n  async filter_maerial (model){\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n          (async () => {\r\n            var client = new Client(connectionConfig);\r\n            await client.connect();\r\n            try {\r\n              let date =  null;\r\n              let date2 = null;\r\n              let oem_id = model.oem_id\r\n              console.log(\"filter_maerial\",model);\r\n              if(model.date_start !== \"\"){\r\n               \r\n                date = moment(model.date_start).startOf('day').format();\r\n              }\r\n            if(model.date_end !== \"\"){\r\n                date2 = moment(model.date_end).endOf('day').format();\r\n            }\r\n            \r\n            if(model.date_end === \"\" && model.date_start !==\"\"){\r\n                date2 = moment(model.date_start).endOf('day').format();\r\n            }\r\n  \r\n                if (oem_id === null) {\r\n                    throw Error(\"Can't fine oem_id\");\r\n                }\r\n\r\n              var temp = await client.query(_QueryHistory.filter_material, \r\n                 [oem_id,\r\n                  model.no || null, \r\n                  model.name || null,\r\n                  date,\r\n                  date2,\r\n                  // model.date_start || null,\r\n                  // model.date_end || null,\r\n                 // model.create_date || null,\r\n                 ]\r\n                  );\r\n              \r\n              resolve(temp.rows);\r\n            } catch (e) {\r\n              reject(e);\r\n            } finally {\r\n              await client.end();\r\n            }\r\n          })().catch((e) => {\r\n            console.log(e);\r\n            throw Error(e);\r\n          });\r\n        } catch (e) {\r\n          reject(e);\r\n        }\r\n      });\r\n}\r\n// Stp\r\n\r\nasync filter_maerialSTP (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            \r\n            let oem_id = model.oem_id\r\n            console.log(\"filter_maerialSTP\",model);\r\n            let date =  null;\r\n            let date2 = null;\r\n            if(model.date_start !== \"\"){\r\n          \r\n              date = moment(model.date_start).startOf('day').format();\r\n            }\r\n          if(model.date_end !== \"\"){\r\n              date2 = moment(model.date_end).endOf('day').format();\r\n          }\r\n          \r\n          if(model.date_end === \"\" && model.date_start !==\"\"){\r\n              date2 = moment(model.date_start).endOf('day').format();\r\n          }\r\n\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              }\r\n\r\n            var temp = await client.query(_QueryHistory.filter_material_stp, \r\n               [oem_id,\r\n                model.no || null, \r\n                model.name || null,\r\n                date,\r\n                date2,\r\n                // model.date_start || null,\r\n                // model.date_end || null,\r\n               // model.create_date || null,\r\n               ]\r\n                );\r\n               var data = temp.rows;\r\n              var temp_deflux_lot = await client.query(_QueryHistory.get_deflux_lot_all,[]);\r\n              for(let mat of data) {\r\n                mat.deflux_list = [];\r\n                for(let item of temp_deflux_lot.rows){\r\n                  for(let item2 of item.mat_lot_list){\r\n                   if(item2.label === mat.mat_lot_no){\r\n                    mat.deflux_list.push(item.deflux_lot_no);\r\n                   }\r\n                     \r\n                  }\r\n              }  \r\n              }\r\n              //console.log(data)\r\n        /*       var test = data.filter((e2)=>{return e2.deflux_list.length > 1;}) */\r\n             // console.log(test)\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nasync filter_deflux (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let date =  null;\r\n            let date2 = null;\r\n       \r\n            console.log(\"filter_deflux\",model);\r\n            if(model.date_start !== \"\"){\r\n             \r\n              date = moment(model.date_start).startOf('day').format();\r\n            }\r\n          if(model.date_end !== \"\"){\r\n              date2 = moment(model.date_end).endOf('day').format();\r\n          }\r\n          \r\n          if(model.date_end === \"\" && model.date_start !==\"\"){\r\n              date2 = moment(model.date_start).endOf('day').format();\r\n          }\r\n\r\n        \r\n\r\n            var temp = await client.query(_QueryHistory.filter_deflux, \r\n               [\r\n                model.company_id,\r\n                model.oem_id,\r\n                model.diameter_no || null,\r\n                model.diameter_name || null,\r\n                date,\r\n                date2\r\n               ]\r\n                );\r\n            \r\n            resolve(temp.rows); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\n\r\nasync filter_product_fg (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(\"modelFG\",model);\r\n           \r\n            let oem_id = model.oem_id\r\n\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              }\r\n\r\n            var temp = await client.query(_QueryHistory.filter_product_fg, \r\n               [oem_id,\r\n                model.no || null, \r\n                model.name || null,\r\n               // model.create_date || null,\r\n               ]\r\n                );\r\n            \r\n            resolve(temp.rows);\r\n            \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nasync filter_product_fg_project (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(\"orpFg_ject\",model);\r\n            let date =  null;\r\n            let date2 = null;\r\n            if(model.date_start_fg !== \"\"){\r\n              \r\n              date = moment(model.date_start_fg).startOf('day').format();\r\n            }\r\n          if(model.date_end_fg !== \"\"){\r\n              date2 = moment(model.date_end_fg).endOf('day').format();\r\n          }\r\n          \r\n          if(model.date_end_fg === \"\" && model.date_start_fg !==\"\"){\r\n              date2 = moment(model.date_start_fg).endOf('day').format();\r\n          }\r\n\r\n    \r\n            let oem_id = model.oem_id\r\n\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              }\r\n\r\n            var temp = await client.query(_QueryHistory.filter_product_fg_project, \r\n               [oem_id,\r\n                model.no || null, \r\n                model.name || null,\r\n                date,\r\n                date2,\r\n                // model.date_start_fg || null,\r\n                // model.date_end_fg || null,\r\n               // model.create_date || null,\r\n               ]\r\n                );\r\n            \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nasync filter_productStp_fg_project (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(\"orpFg_ject\",model);\r\n            let date =  null;\r\n            let date2 = null;\r\n\r\n            if(model.date_start_fg !== \"\"){\r\n             \r\n              date = moment(model.date_start_fg).startOf('day').format();\r\n            }\r\n          if(model.date_end_fg !== \"\"){\r\n              date2 = moment(model.date_end_fg).endOf('day').format();\r\n          }\r\n          \r\n          if(model.date_end_fg === \"\" && model.date_start_fg !==\"\"){\r\n              date2 = moment(model.date_start_fg).endOf('day').format();\r\n          }\r\n\r\n            let oem_id = model.oem_id\r\n\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              }\r\n\r\n            var temp = await client.query(_QueryHistory.filter_productStp_fg_project, \r\n               [oem_id,\r\n                model.no || null, \r\n                model.name || null,\r\n                date,\r\n                date2,\r\n                // model.date_start_fg || null,\r\n                // model.date_end_fg || null,\r\n               // model.create_date || null,\r\n               ]\r\n                );\r\n            \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\nasync filter_product_wip (model){\r\n  return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let oem_id = model.oem_id\r\n\r\n              if (oem_id === null) {\r\n                  throw Error(\"Can't fine oem_id\");\r\n              }\r\n\r\n            var temp = await client.query(_QueryHistory.filter_product_wip, \r\n               [oem_id,\r\n                model.no || null, \r\n                model.name || null,\r\n               // model.create_date || null,\r\n               ]\r\n                );\r\n            \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n}\r\n\r\n}\r\nmodule.exports = historyService\n\n//# sourceURL=webpack:///./app/service/historyService.js?");

/***/ }),

/***/ "./app/service/load_statusService.js":
/*!*******************************************!*\
  !*** ./app/service/load_statusService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryLoad_status = __webpack_require__(/*! ../query/queryLoad_status.json */ \"./app/query/queryLoad_status.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass load_statusService {\r\n\r\n  async addLoad_status(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkStatus = await client.query(_QueryLoad_status.checkStatus_add,[model.status,model.company_id]);\r\n            if(checkStatus.rows.length > 0){\r\n              throw Error(\"System : Status has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is null\");\r\n            }\r\n            let load_status_id = uuidv4();\r\n   \r\n            await client.query(_QueryLoad_status.add, [\r\n            load_status_id,\r\n              model.status,\r\n              model.company_id,\r\n              model.remark,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n             \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterLoad_status(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n            let status = model.status ? model.status : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QueryLoad_status.filter, [\r\n                status,\r\n              company_id ,\r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async findByIdLoad_status(load_status_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryLoad_status.findById, [load_status_id]);\r\n            if (temp.rows.length > 0) {\r\n         \r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateLoad_status(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkStatus = await client.query(_QueryLoad_status.checkStatus_edit,[model.status,model.load_status_id,model.company_id]);\r\n            if(checkStatus.rows.length > 0){\r\n              throw Error(\"System : Status has already\");\r\n            }\r\n            await client.query(_QueryLoad_status.update, [\r\n                model.load_status_id,\r\n                model.status,\r\n                model.remark,\r\n                moment(new Date()),\r\n                user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delLoad_status(load_status_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryLoad_status.del, [load_status_id,moment(new Date()),user_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n\r\nmodule.exports = load_statusService;\r\n\n\n//# sourceURL=webpack:///./app/service/load_statusService.js?");

/***/ }),

/***/ "./app/service/logisticService.js":
/*!****************************************!*\
  !*** ./app/service/logisticService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _Querylogistic = __webpack_require__(/*! ../query/querylogistic.json */ \"./app/query/querylogistic.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\nclass logisticService {\r\n  async addLogistic(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          //console.log(model);\r\n          try {\r\n            var check_no = await client.query(_Querylogistic.checkNo_add, [\r\n              model.logistic_no,\r\n              model.company_id,\r\n            ]);\r\n            if (check_no.rows.length > 0) {\r\n              throw Error(\"System : Logistic No has already\");\r\n            }\r\n            var check_name = await client.query(_Querylogistic.checkName_add, [\r\n              model.logistic_name,\r\n              model.company_id,\r\n            ]);\r\n            if (check_name.rows.length > 0) {\r\n              throw Error(\"System : Logistic Name has already\");\r\n            }\r\n\r\n            let logistic_id = uuidv4();\r\n\r\n            await client.query(_Querylogistic.add, [\r\n              logistic_id,\r\n              model.logistic_type,\r\n              model.deliver,\r\n              model.deliver_content,\r\n              model.logistic_no,\r\n              model.logistic_name,\r\n              true,\r\n              model.company_id,\r\n              model.oem_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addLogisticCar(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var check_name = await client.query(\r\n              _Querylogistic.logistic_car_checkName_add,\r\n              [model.logistic_name]\r\n            );\r\n            if (check_name > 0) {\r\n              throw Error(\"System : Logistic Name has already\");\r\n            }\r\n            console.log(model);\r\n            let logistic_id = uuidv4();\r\n\r\n            let fineTypeByid = await client.query(_Querylogistic.fineTypeByid, [\r\n              model.logistic_type,\r\n            ]); //เช็กกลุ่มรถ\r\n            console.log(fineTypeByid.rows);\r\n            await client.query(_Querylogistic.addLogisticCar, [\r\n              logistic_id, //1\r\n              model.logistic_name, //2\r\n              model.logistic_sim || null, //3\r\n              model.logistic_type, //4\r\n              model.gps_id || null, //5\r\n              model.license_plate, //6\r\n              model.mileage || null, //7\r\n              model.oem_id, //8\r\n              model.company_id, //9\r\n              model.logistic_capacity || null, //10\r\n              model.tax_lasted || null, //11\r\n              model.tax_next || null, //12\r\n              model.logistic_code || null, //13\r\n              model.vin || null, //14\r\n              model.logistic_year || null, //15\r\n              model.model || null, //16\r\n              model.brand || null, //17\r\n              model.fuel_consumption || null, //18\r\n              model.kpi || null, //19\r\n              model.truck_id || null, //20\r\n              model.is_truck, //21\r\n              model.image_person_name || null, //22\r\n              model.image_person_path || null, //23\r\n              model.image_person || null, //24\r\n              true, //25\r\n              true, //26\r\n              model.officer_name || null, //27\r\n              model.officer_lastname || null, //28\r\n              model.officer_mobile || null, //29\r\n              user_id, //30\r\n              moment(new Date()), //31\r\n              \"6ce7e2b2-42ab-42da-a9f1-5c0eee96bc30\", //32\r\n              moment(new Date()), //33\r\n            ]);\r\n  \r\n            if (model.image_car.length > 0) {\r\n             \r\n              let sort = 0;\r\n           \r\n              for (const imageList of model.image_car) {\r\n                let img_id = uuidv4();\r\n                await client.query(_Querylogistic.addListNewImageCar, [\r\n                  img_id,\r\n                  logistic_id,\r\n                  imageList.image_car,\r\n                  imageList.image_car_name,\r\n                  imageList.image_car_path,\r\n                  true,\r\n                  ++sort,\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                ]);\r\n              }\r\n            }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateLogistic(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"ตัวไหนนี้ตัวนี้\", model);\r\n            if (\r\n              model.logistic_group === \"38dc8839-7424-4465-9ca4-36d136231010\"\r\n            ) {\r\n              console.log(\"DTC\");\r\n\r\n              await client.query(_Querylogistic.updateLogisTicDTC, [\r\n                model.id, //1\r\n                model.logistic_capacity || null, //2\r\n                model.tax_lasted || null, //3\r\n                model.tax_next || null, //4\r\n                model.imei || null, //5\r\n                model.vin || null, //6\r\n                model.logistic_year || null, //7\r\n                model.model || null, //8\r\n                model.brand || null, //9\r\n                model.fuel_consumption || null, //10\r\n                model.kpi || null, //11\r\n                model.tow_truck, //12\r\n                model.is_truck || null, //13\r\n                model.officer_image.officer_img || null, //14\r\n                model.officer_image.officer_img_name || null, //15\r\n                model.officer_name || null, //15\r\n                model.officer_lastname || null, //17\r\n                model.officer_mobile || null, //18\r\n                user_id, //19\r\n                model.officer_image.officer_img_path || null, //20\r\n                model.logistic_type, //21\r\n                moment(new Date()), //22\r\n              ]);\r\n            } else {\r\n              console.log(\"None DTC\");\r\n              await client.query(_Querylogistic.updateLogisTic, [\r\n                model.id,\r\n                model.logistic_name || null,\r\n                model.logistic_sim || null,\r\n                model.logistic_type,\r\n                model.gps_id || null,\r\n                model.license_plate || null,\r\n                model.mileage || null,\r\n                model.logistic_capacity || null,\r\n                model.tax_lasted || null,\r\n                model.tax_next || null,\r\n                model.imei || null,\r\n                model.vin || null,\r\n                model.logistic_year || null,\r\n                model.model || null,\r\n                model.brand || null,\r\n                model.fuel_consumption || null,\r\n                model.kpi || null,\r\n                model.tow_truck,\r\n                model.is_truck || null,\r\n                model.officer_image.officer_img || null,\r\n                model.officer_image.officer_img_name || null,\r\n                model.officer_name || null,\r\n                model.officer_lastname || null,\r\n                model.officer_mobile || null,\r\n                user_id,\r\n                model.officer_image.officer_img_path || null,\r\n                moment(new Date()),\r\n              ]);\r\n            }\r\n            console.log(\"test\",model.image_car);\r\n            if (model.image_car.length > 0) {\r\n              let count_image = await client.query(\r\n                _Querylogistic.fineImageBbyCarId,\r\n                [model.id]\r\n              );\r\n\r\n              if (count_image.rows.length > 0) {\r\n                await client.query(_Querylogistic.clearImageList, [model.id]);\r\n                /*   console.log(\"has image\",model.image_car); */\r\n              }\r\n\r\n              let sort = 0;\r\n\r\n              for (const imageList of model.image_car) {\r\n                let img_id = uuidv4();\r\n                await client.query(_Querylogistic.addListNewImageCar, [\r\n                  img_id,\r\n                  model.id,\r\n                  imageList.image_car,\r\n                  imageList.image_car_name,\r\n                  imageList.image_car_path,\r\n                  true,\r\n                  ++sort,\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterlogistic_type(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var logistic_type = await client.query(\r\n              _Querylogistic.getlogistic_type,\r\n              []\r\n            );\r\n            console.log(\"COMMIT\");\r\n            resolve(logistic_type.rows);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delLogistic(logistic_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_Querylogistic.del, [logistic_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async logistic_car_del(logistic_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n            await client.query(_Querylogistic.del_dtcCar, [\r\n              logistic_id,\r\n              false,\r\n              false,\r\n              moment(new Date()),\r\n              user_id\r\n            ]);\r\n\r\n            console.log(\"COMMIT\");\r\n\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdLogistic(logistic_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_Querylogistic.findById, [\r\n              logistic_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_Querylogistic.GetMenu, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterlogistic(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"TEST\");\r\n            /*  let oem_id_temp = \"\";\r\n\r\n            if (model.oem_id === \"บจก.สตูลค้าเหล็ก\") {\r\n              oem_id_temp = \"b717f172-5013-4aa3-a040-65f4f116870b\";\r\n            } else if (model.oem_id === \"บจก.เอสทีสตีล(2001)\") {\r\n              oem_id_temp = \"08721f6f-ee1d-4900-8d67-2c7ce03b601e\";\r\n            } else if (model.oem_id === \"บจก.เอสทีสตีล(2001) ปัตตานี\") {\r\n              oem_id_temp = \"c8de2754-d8f9-4e18-97db-4201efca6e2f\";\r\n            } else if (model.oem_id === \"บจก.เอสที คอนกรีตโปรดักส์\") {\r\n              oem_id_temp = \"d937f81b-9743-4c33-886f-e1c575f4cf21\";\r\n            } else if (model.oem_id === \"บจก.เอสทีซีวิล(2001)\") {\r\n              oem_id_temp = \"360e9f89-6b60-4edd-9f4d-a6e487c97cf3\";\r\n            } else {\r\n              oem_id_temp = null;\r\n            } */\r\n\r\n            //console.log(model);\r\n\r\n            let temp_data;\r\n\r\n            if (model.oem_id != null && model.oem_id != \"\") {\r\n\r\n              if (model.setLogisticGroupTypeDTC != \"all\") {\r\n\r\n                console.log(\"Get data\",model.setLogisticGroupTypeDTC);\r\n\r\n                var temp = await client.query(_Querylogistic.filter, [\r\n                  model.company_id,\r\n                  model.oem_id,\r\n                  model.plate_number || null,\r\n                  model.setLogisticGroupTypeDTC,\r\n                ]);\r\n                temp_data = temp.rows;\r\n\r\n              } else {\r\n                var temp = await client.query(_Querylogistic.filter2, [\r\n                  model.company_id,\r\n                  model.oem_id,\r\n                  model.plate_number || null,\r\n                ]);\r\n                temp_data = temp.rows;\r\n\r\n              }\r\n\r\n            } else {\r\n        console.log(\"Get data\",model.setLogisticGroupTypeDTC);\r\n              if (model.setLogisticGroupTypeDTC != \"all\") {\r\n                var temp = await client.query(_Querylogistic.filter_all, [\r\n                  model.company_id,\r\n                  model.plate_number || null,\r\n                  model.setLogisticGroupTypeDTC,\r\n                ]);\r\n                temp_data = temp.rows;\r\n              } else {\r\n                var temp = await client.query(_Querylogistic.filter_all2, [\r\n                  model.company_id,\r\n                  model.plate_number || null,\r\n                ]);\r\n                temp_data = temp.rows;\r\n              }\r\n              fineTypeByid\r\n            }\r\n            console.log(temp_data);\r\n            for (let index = 0; index < temp_data.length; index++) {\r\n              \r\n              var cartype = await client.query(_Querylogistic.getcartype, [\r\n                temp_data[index].car_type_id,\r\n              ]);\r\n\r\n              if (cartype.rows.length > 0) {\r\n                temp_data[index].car_type_name = cartype.rows[0].name;\r\n              }\r\n             /*  console.log(cartype.rows,temp_data[index].car_type_id,);\r\n */\r\n\r\n              \r\n            }\r\n           \r\n\r\n\r\n            resolve(temp_data);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetCarType() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_Querylogistic.GetCarType, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addTowTruck(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model);\r\n\r\n            var temp = await client.query(_Querylogistic.checkPlateCar, [\r\n              model.plate_car,\r\n            ]);\r\n            var temp2 = await client.query(_Querylogistic.checkChassisCar, [\r\n              model.chassis_number,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              throw Error(\"ป้ายทะเบียนนี้มีอยู่แล้ว ไม่สามารถทำการเพิ่มได้\");\r\n            }\r\n            if (temp2.rows.length > 0) {\r\n              throw Error(\"เลขตัวถังนี้มีอยู่แล้ว ไม่สามารถทำการเพิ่มได้\");\r\n            }\r\n            let id_towTruck = uuidv4();\r\n            await client.query(_Querylogistic.addTowTruck, [\r\n              id_towTruck,\r\n              model.plate_number,\r\n              model.chassis_number,\r\n              model.model_car,\r\n              model.car_type_id,\r\n              model.truck_detail,\r\n              true,\r\n              true,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              model.oem_id,\r\n              model.company,\r\n            ]);\r\n\r\n            /*     console.log(temp); */\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findTowTruckById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_Querylogistic.findTowTruckById, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filter_towTruck(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /*  console.log(model); */\r\n\r\n            var temp = await client.query(_Querylogistic.filter_towTruck, [\r\n              model.plate_number || null,\r\n              model.chassis_number || null,\r\n              model.model_car || null,\r\n              model.car_type_id || null,\r\n              model.oem_id,\r\n            ]);\r\n            /*     console.log(temp); */\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async editTowTruck(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model);\r\n\r\n            var temp = await client.query(_Querylogistic.checkPlateCar2, [\r\n              model.plate_number,\r\n              model.id,\r\n            ]);\r\n            var temp2 = await client.query(_Querylogistic.checkChassisCar2, [\r\n              model.chassis_number,\r\n              model.id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              throw Error(\r\n                \"ป้ายทะเบียนนี้มีอยู่แล้ว ไม่สามารถทำการแก้เป็นเลขทะเบียนนี้ได้\"\r\n              );\r\n            }\r\n            if (temp2.rows.length > 0) {\r\n              throw Error(\r\n                \"เลขตัวถังนี้มีอยู่แล้ว ไม่สามารถทำการแก้เป็นเลขตัวถังนี้ได้\"\r\n              );\r\n            }\r\n            await client.query(_Querylogistic.editTowTruck, [\r\n              model.id,\r\n              model.plate_number,\r\n              model.chassis_number,\r\n              model.model_car,\r\n              model.car_type_id,\r\n              model.truck_detail,\r\n              user_id,\r\n              moment(new Date()),\r\n            ]);\r\n\r\n            /*     console.log(temp); */\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delTowTruck(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_Querylogistic.delTowTruck, [\r\n              id,\r\n              user_id,\r\n              moment(new Date()),\r\n            ]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async allOemByCompany(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(model);\r\n          let query = await client.query(_Querylogistic.allOemByCompany, [\r\n            model.company_id,\r\n          ]);\r\n          resolve(query.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        reject(e);\r\n      });\r\n    });\r\n  }\r\n\r\n  async upDateFromDTC_Type(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          // console.log(model);\r\n\r\n          for await (const type of model) {\r\n            let check_name_type = await client.query(\r\n              _Querylogistic.checkTypeCar,\r\n              [type.type]\r\n            );\r\n\r\n            if (check_name_type.rows[0].count === \"0\") {\r\n              let logistic_type_id = uuidv4();\r\n              let sort = await client.query(_Querylogistic.getTypeSortMax);\r\n              await client.query(_Querylogistic.addTypeCar, [\r\n                logistic_type_id,\r\n                type.type,\r\n                true,\r\n              ]);\r\n            }\r\n          }\r\n\r\n          resolve(\"True\");\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        reject(e);\r\n      });\r\n    });\r\n  }\r\n\r\n \r\n  async UpdateFromDTC_Car(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(\"dataDTC\",model);\r\n     \r\n          for await (const car of model) {\r\n            let truck_name = car.vehicle_name || \"\";\r\n            var check_plate_number = await client.query(\r\n              _Querylogistic.logistic_car_checkPlate_number,\r\n              [car.license_plate] // แบบใหม่\r\n              //[truck_name.split(\"/\")[0]] // แบบเก่า\r\n            ); // หาป้ายทะเบียน\r\n\r\n            let logistic_type_id = \"\";\r\n\r\n            let fineTypeByName = await client.query(\r\n              _Querylogistic.fineTypeByName,\r\n              [truck_name.split(\"/\")[1]]\r\n            ); //เช็กกลุ่มรถ\r\n\r\n            if (fineTypeByName.rows.length > 0) {\r\n              //เจอกลุ่มไหม เจอหา ไอดี\r\n              logistic_type_id = fineTypeByName.rows[0].id;\r\n          \r\n            } else {\r\n              //ไม่เจอเพิ่มใหม่\r\n\r\n              console.log(\"type2\", truck_name.split(\"/\")[1]);\r\n              let _logistic_type_id = uuidv4();\r\n              let sort = await client.query(_Querylogistic.getTypeSortMax);\r\n              await client.query(_Querylogistic.addTypeCar, [\r\n                _logistic_type_id,\r\n                truck_name.split(\"/\")[1],\r\n                true,\r\n              ]);\r\n              logistic_type_id = _logistic_type_id;\r\n            }\r\n      \r\n            if (check_plate_number.rows.length > 0) {\r\n              // true มีแล้ว\r\n               \r\n               console.log(\"มีแล้ว\",  car.vehicle_name);\r\n               console.log('list_have',check_plate_number.rows);\r\n              \r\n               if(check_plate_number.rows[0].is_use === false){\r\n                console.log(\"มีแล้ว เป็น false ให้ปรับเป็น true\",  check_plate_number.rows[0].plate_number);\r\n                await client.query(_Querylogistic.updateLogisTicForDTC_isUse, [\r\n                  check_plate_number.rows[0].id, //1\r\n                  car.vehicle_name || null, // DTC2  d xcd\r\n                  car.sim_no || null, // DTC3\r\n                  logistic_type_id, // DTC4\r\n                  car.gps_id || null, // DTC5\r\n                  car.license_plate, // DTC6\r\n                  car.mileage || null, // DTC7\r\n                  car.group_id, // DTC8\r\n                  car.company_id || null, // DTC9\r\n                  user_id, //10\r\n                  moment(new Date()), //11\r\n                  \"38dc8839-7424-4465-9ca4-36d136231010\", //12\r\n                  true, // 13\r\n                  true, //14\r\n                ]);\r\n               }else{\r\n                await client.query(_Querylogistic.updateLogisTicForDTC, [\r\n                  check_plate_number.rows[0].id, //1\r\n                  car.vehicle_name || null, // DTC2  d xcd\r\n                  car.sim_no || null, // DTC3\r\n                  logistic_type_id, // DTC4\r\n                  car.gps_id || null, // DTC5\r\n                  car.license_plate, // DTC6\r\n                  car.mileage || null, // DTC7\r\n                  car.group_id, // DTC8\r\n                  car.company_id || null, // DTC9\r\n                  user_id, //10\r\n                  moment(new Date()), //11\r\n                  \"38dc8839-7424-4465-9ca4-36d136231010\", //12\r\n                ]);\r\n               }\r\n              \r\n            } else {\r\n              // ยังไม่มี\r\n              console.log(\"ไม่มีเเล้ว\",  car.vehicle_name);\r\n\r\n              let logistic_id = uuidv4();\r\n              await client.query(_Querylogistic.addLogisticCar, [\r\n                logistic_id, // 1\r\n                car.vehicle_name || null, // DTC 2\r\n                car.sim_no || null, // DTC 3\r\n                null, // DTC4\r\n                car.gps_id || null, // DTC5\r\n                car.license_plate, // DTC6\r\n                car.mileage || null, // DTC7\r\n                car.group_id, // DTC8\r\n                car.company || null, // DTC9\r\n                car.logistic_capacity || null, //10\r\n                car.tax_lasted || null, //11\r\n                car.tax_next || null, //12\r\n                car.logistic_code || null, //13\r\n                car.vin || null, //14\r\n                car.logistic_year || null, //15\r\n                car.model || null, //16\r\n                car.brand || null, //17\r\n                car.fuel_consumption || null, //18\r\n                car.kpi || null, //19\r\n                car.truck_id || null, //20\r\n                car.is_truck, //21\r\n                car.image_person_name || null, //22\r\n                car.image_person_path || null, //23\r\n                car.image_person || null, //24\r\n                true, //25\r\n                true, //26\r\n                car.officer_name || null, //27\r\n                car.officer_lastname || null, //28\r\n                car.officer_mobile || null, //29\r\n                user_id, //30\r\n                moment(new Date()), //31\r\n                \"38dc8839-7424-4465-9ca4-36d136231010\", //32\r\n                moment(new Date()),//33\r\n              ]);\r\n            }\r\n          }\r\n\r\n       \r\n          resolve(\"True\");\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        reject(e);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  async fineLogisticById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let logistic = await client.query(_Querylogistic.finelogisticId, [\r\n            id,\r\n          ]);\r\n          // let logistic_image = await client.query(_Querylogistic.finelogisticId, [id]);\r\n\r\n        \r\n\r\n          if (logistic.rows.length > 0) {\r\n\r\n            let count_image = await client.query(\r\n              _Querylogistic.fineImageBbyCarId,\r\n              [id]\r\n            );\r\n        /*     console.log(logistic.rows[0]); */\r\n            let temp_data_ = {\r\n              logistic_name: logistic.rows[0].car_name,\r\n              logistic_sim: logistic.rows[0].sim_number,\r\n              logistic_type: logistic.rows[0].car_type_name,\r\n              license_plate: logistic.rows[0].plate_number,\r\n              gps_id: logistic.rows[0].box_number,\r\n              mileage: logistic.rows[0].mileage,\r\n              oem_id: logistic.rows[0].oem_id,\r\n              company_id: logistic.rows[0].company_id,\r\n              logistic_capacity: logistic.rows[0].capacity,\r\n              tax_lasted: logistic.rows[0].tax,\r\n              tax_next: logistic.rows[0].next_tax,\r\n              vin: logistic.rows[0].vin_number,\r\n              imei: logistic.rows[0].chassis_number,\r\n              logistic_year: logistic.rows[0].car_year,\r\n              brand: logistic.rows[0].band_car,\r\n              fuel_consumption: logistic.rows[0].fuel_efficiency,\r\n              model: logistic.rows[0].model_car,\r\n              logistic_code: logistic.rows[0].logistic_group_name === \"DTC\" ? true: false,\r\n              image_car: count_image.rows.length >0 ? count_image.rows : [] ,\r\n              officer_name: logistic.rows[0].person_sirname_car,\r\n              officer_lastname: logistic.rows[0].person_lastname_car,\r\n              officer_mobile: logistic.rows[0].person_tel_car,\r\n              officer_image: {\r\n                officer_img: logistic.rows[0].image_person,\r\n                officer_img_name: logistic.rows[0].image_person_name,\r\n                officer_img_path: logistic.rows[0].image_person_path,\r\n              },\r\n              kpi: logistic.rows[0].kpi,\r\n              tow_truck: logistic.rows[0].tow_truck,\r\n              logistic_group: logistic.rows[0].logistic_group_id,\r\n              car_type_id: logistic.rows[0].car_type_id,\r\n              car_type_name: logistic.rows[0].car_type_name,\r\n            };\r\n\r\n            resolve(temp_data_);\r\n          } else {\r\n            throw Error(\"can not fide\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        reject(e);\r\n      });\r\n    });\r\n  }\r\n\r\n  async getplate_number(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"modelggg\");\r\n            var temp = await client.query(_Querylogistic.getplate_number, [\r\n              model.oem_id,\r\n            ]);\r\n            // console.log(\"gome\");\r\n            // console.log(\"sass\",temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getgas_station(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_Querylogistic.getgas_station, [\r\n              model.company_id,\r\n            ]);\r\n            // console.log(\"gasstiont\");\r\n            // console.log(temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addrecordOil(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"โมเดลADD_Oil\", model);\r\n           \r\n            let times = model.time.split(\":\");\r\n            let sumdays = moment(model.date).add(times[0],'hours').add(times[1],'minute').format(\"yyyy-MM-DD HH:mm\")\r\n            \r\n            var check = await client.query(_Querylogistic.chackplate_date, [\r\n              model.plate_number,\r\n              sumdays,\r\n            ]);\r\n            if (check.rows.length > 0) {\r\n              throw Error(\"เลขทะเบียน เวลาเเละวันที่ซ้ำในระบบ\");\r\n            }\r\n            let a_oil_value = 0;\r\n            let sum_oil_value = 0;\r\n            var chekliter1 = await client.query(_Querylogistic.checkliter, []);\r\n\r\n            a_oil_value = chekliter1.rows[0].oil_value;\r\n            sum_oil_value = parseFloat(a_oil_value) - parseFloat(model.liter);\r\n            // console.log(\"a_oil_value\",sum_oil_value); //เช็ค จำนวนน้ำมันถ้าเกินไม่ไห้แอด\r\n            console.log(\"modelSave\",model)\r\n            console.log(\"sumday\",sumdays)\r\n              let id_recordOil = uuidv4();\r\n              await client.query(_Querylogistic.updateMile, [\r\n                model.mile,\r\n                model.plate_number,\r\n              ]);\r\n              if(model.oil_location_name === \"SST\"){\r\n                if(parseFloat(model.liter) > parseFloat(a_oil_value)){\r\n                  throw Error(\"จำนวนน้ำมันที่เติม มีมากกว่าจำนวนน้ำมันที่เหลือ\");\r\n                }else{\r\n                await client.query(_Querylogistic.addrecordOil, [\r\n                  id_recordOil,\r\n                  model.plate_number,\r\n                  sumdays,\r\n                  model.mile,\r\n                  model.liter,\r\n                  model.locationAdd,\r\n                  true,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                  model.imaget_path,\r\n                  model.image_name,\r\n                  model.meter_oil,\r\n                  model.refueling_name,\r\n                  model.dirver_name_add,\r\n                ]);\r\n\r\n                await client.query(_Querylogistic.updateExpreesOil, [\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  sum_oil_value,\r\n                ]);\r\n                let id_fuel = uuidv4();\r\n              await client.query(_Querylogistic.addFuel_oil2, [\r\n                id_fuel,\r\n                model.oem_id,\r\n                model.liter,\r\n                moment(new Date()),\r\n                user_id,\r\n                false,\r\n                sum_oil_value\r\n              ]);\r\n              }\r\n\r\n              }else{\r\n                await client.query(_Querylogistic.addrecordOil2, [\r\n                  id_recordOil,\r\n                  model.plate_number,\r\n                  sumdays,\r\n                  model.mile,\r\n                  model.liter,\r\n                  model.locationAdd,\r\n                  true,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                  model.imaget_path,\r\n                  model.image_name,\r\n                  model.dirver_name_add,\r\n                ]);\r\n            }\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  // หน้า recordOil\r\n  async all_record_oil(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n \r\n         /*    if (model.date_start !== \"\" && model.date_end === \"\") {\r\n              model.date_end = moment(model.date_start)\r\n                .add(23, \"hours\")\r\n                .add(59, \"minute\")\r\n                .add(59, \"seconds\")\r\n                .format(\"yyyy-MM-DD HH:mm\");\r\n            } */\r\n\r\n            if(model.date_start !== \"\"){\r\n               \r\n              model.date_start = moment(model.date_start).startOf('day').format();\r\n            }\r\n          if(model.date_end !== \"\"){\r\n            model.date_end = moment(model.date_end).endOf('day').format();\r\n          }\r\n          \r\n          if(model.date_end === \"\" && model.date_start !==\"\"){\r\n            model.date_end = moment(model.date_start).endOf('day').format();\r\n          }\r\n          console.log(model.date_start)\r\n          console.log(model.date_end)\r\n        /*     \r\n            console.log(moment(model.date_start).startOf('day').format(\"yyyy-MM-DD HH:mm\"));\r\n            console.log(moment(model.date_end).endOf('day').format(\"yyyy-MM-DD HH:mm\")); */\r\n            \r\n            if (model.oem_target === \"All_OEM\") {\r\n              var temp_oem = await client.query(\r\n                _Querylogistic.filtOil_not_oem,\r\n                [\r\n                  model.company_id,\r\n                  model.plate_number || null,\r\n                  model.oil_location_name || null,\r\n                  model.date_start || null,\r\n                  model.date_end || null,\r\n                ]\r\n              );\r\n              //console.log(\"ใช่ไหม\", temp_oem);\r\n              resolve(temp_oem.rows);\r\n            } else {\r\n              var temp = await client.query(_Querylogistic.filterrecordOil, [\r\n                model.company_id,\r\n                model.plate_number || null,\r\n                model.oil_location_name || null,\r\n                model.oem_target || null,\r\n                model.date_start || null,\r\n                model.date_end || null,\r\n              ]);\r\n             // console.log(\"ใช่ไหม\", temp);\r\n              resolve(temp.rows);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  //update Record_oil\r\n\r\n  async UpdateRecordOil(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"หน้าอัพเดดน้ำมัน\", model);\r\n            let times = model.time.split(\":\");\r\n            let datt= moment(model.date).format('yyyy-MM-DD');\r\n            let sumdays = moment(datt).add(times[0],'hours').add(times[1],'minute').format(\"yyyy-MM-DD HH:mm\");\r\n            var check = await client.query(\r\n              _Querylogistic.chekUpdaterecordOill,\r\n              [\r\n                model.id,\r\n                model.plate_number,\r\n                sumdays,\r\n                // moment(mode.record_date).format(),\r\n              ]\r\n            );\r\n            if (check.rows.length > 0) {\r\n              console.log(\"cheakTimefdf\", check);\r\n              throw Error(\"เลขทะเบียนรถ วันที่ เเละเวลา มีอยู่ในระบบเเล้ว\");\r\n            }\r\n            await client.query(_Querylogistic.updateMile, [\r\n              model.mile,\r\n              model.plate_number,\r\n            ]);\r\n            await client.query(_Querylogistic.updateOil_record, [\r\n              model.id,\r\n              model.plate_number,\r\n              sumdays,\r\n              model.mile,\r\n              model.liter,\r\n              model.locationAdd,\r\n              true,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              user_id,\r\n              model.oem_id,\r\n              model.company_id,\r\n              model.imaget_path,\r\n              model.image_name,\r\n              model.meter_oil,\r\n              model.refueling_name,\r\n              model.dirver_name_add,\r\n            ]);\r\n            console.log(\"เทสโมเดล\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findById_oil(oil_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_all = [];\r\n            let temp = await client.query(_Querylogistic.findoilbyid, [oil_id]);\r\n            let temp1 = await client.query(_Querylogistic.findoilbyid1, [oil_id]);\r\n        \r\n            // console.log(\"tempss\",temp.rows);\r\n            // console.log(\"tempss1\",temp1.rows);\r\n            let final = {\r\n              allfin: temp.rows,\r\n              viewdin: temp1.rows,\r\n            }\r\n            temp_all.push(final);\r\n            console.log(\"testTempAll\",temp_all[0]);\r\n\r\n            if (temp_all.length > 0) {\r\n              resolve(temp_all[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delrecord(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_Querylogistic.delOil_record, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getBill(oem_id, logistic_car_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_Querylogistic.getBill, [oem_id]);\r\n            console.log(temp.rows)\r\n            var temp2 = await client.query(_Querylogistic.getBillOutLogistic, [\r\n              logistic_car_id,\r\n            ]);\r\n\r\n            for (let e = 0; e < temp.rows.length; e++) {\r\n              for (let e2 of temp2.rows) {\r\n                if (temp.rows[e].id === e2.bill_id && e2.remark === null) {\r\n                  temp.rows[e].check = true;\r\n                }\r\n              }\r\n            }\r\n            var tempData = temp.rows.filter((e) => {\r\n              return !e.check;\r\n            });\r\n            console.log(\"lek\", tempData);\r\n            resolve(tempData);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async SaveLogisticInOut(model,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n  \r\n            console.log(\"model\",model);\r\n            var logistic_car_id = model.id;\r\n            \r\n          \r\n            var tempData = [];\r\n  \r\n            for(var item of model.data_now){\r\n              for(var item2 of item.table){\r\n                var old = model.data_old.filter((e)=>{return e.bill_id === item2.id && item.row === e.delivery_sort && moment(item.date).format('DD/MM/yyyy') === moment(e.logistic_date).format('DD/MM/yyyy')})\r\n                console.log(\"old\",old);\r\n                var temp = {\r\n                    \r\n                    logistic_car_id:logistic_car_id,\r\n                    delivery_sort:item.row,\r\n                    logistic_date:item.date,\r\n                    oem_id:model.oem_id,\r\n                    company_id:model.company_id,\r\n                    bill_id:item2.id,\r\n                    oem_bill_id:item2.oem_id,\r\n                    remark_cancle:old.length > 0 ? old[0].remark : null,\r\n                    cancle_remark:item2.remark || \"\",\r\n  \r\n                }\r\n                tempData.push(temp);\r\n              }\r\n            }\r\n            var date_now = moment(new Date()).startOf('day');\r\n            var date_future = moment(new Date()).add(1,'years').endOf('day').endOf('year');\r\n            var check = await client.query(\r\n              _Querylogistic.getLogisticInOut,\r\n              [logistic_car_id,date_now,date_future]\r\n            );\r\n\r\n            \r\n                console.log(\"cr\",check.rows)\r\n              for(let itemDB of check.rows){\r\n                let _Check = tempData.filter((element) => {\r\n                  return (\r\n                    element.bill_id === itemDB.bill_id && element.remark_cancle === itemDB.remark\r\n                  );\r\n                });\r\n                if(_Check.length === 0){\r\n                  await client.query(_Querylogistic.DelLogisticInOutById,[itemDB.id]); \r\n                  console.log(\"del\",itemDB.delivery_sort,item.bill_id)\r\n                }\r\n                \r\n              }\r\n  \r\n  \r\n              //-------------------------------------------------\r\n              for(var item of tempData){\r\n                let date1 = moment(item.logistic_date).startOf('day');\r\n                let date2 = moment(item.logistic_date).endOf('day');\r\n               // var checkDB = await client.query(_Querylogistic.getBillInDriver,[item.bill_id,logistic_car_id,item.delivery_sort,date1,date2]);\r\n                if(item.remark_cancle === null){\r\n                  var checkDB = await client.query(_Querylogistic.getBillInDriver2,[item.bill_id,logistic_car_id]);\r\n         \r\n                  if(checkDB.rows.length > 0){\r\n                    await client.query(_Querylogistic.UpdateLogisticInOut,[\r\n                      checkDB.rows[0].id,\r\n                      item.oem_bill_id || null,\r\n                      item.delivery_sort,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      date1,//item.logistic_date\r\n                    ]) \r\n                    console.log(\"update\",item)\r\n                  }else{\r\n                    var inOut_id = uuidv4();\r\n                     await client.query(_Querylogistic.SaveLogisticInOut,[\r\n                      inOut_id,\r\n                      item.logistic_car_id,\r\n                      item.bill_id,\r\n                      item.oem_bill_id || null,\r\n                      item.delivery_sort,\r\n                      null,\r\n                      null,\r\n                      true,\r\n                      true,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      moment(new Date()),\r\n                      user_id,\r\n                      item.oem_id,\r\n                      item.company_id,\r\n                      date1,//item.logistic_date\r\n                    ]) \r\n                    console.log(\"add\",item)\r\n                  }\r\n                }\r\n              \r\n              }\r\n             \r\n              //throw Error(\"break\");\r\n           \r\n           resolve(true); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n  async getLogisticInOut(logistic_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n  \r\n            var date_now = moment(new Date()).startOf('day');\r\n            var date_future = moment(new Date()).add(1,'years').endOf('day').endOf('year');\r\n            \r\n      \r\n            var losgistic_detail = await client.query(_Querylogistic.getLogisticDetailByID,[logistic_id])\r\n            var temp = await client.query(_Querylogistic.getLogisticInOut,[logistic_id , date_now,date_future]);\r\n            \r\n            var tempData = [];\r\n            var table =[];\r\n            for(let index =0; index <  temp.rows.length; index++) {\r\n  \r\n             // console.log(tempData,temp.rows[index].delivery_sort)\r\n              var check = tempData.filter((e)=>{\r\n                return (e.row === temp.rows[index].delivery_sort && moment(e.date).format('DD/MM/yyyy') == moment(temp.rows[index].logistic_date).format('DD/MM/yyyy'));\r\n              });\r\n          //  console.log(check);\r\n          var bill_detail = await client.query(_Querylogistic.getBillById,[temp.rows[index].bill_id]);\r\n          var CheckbillEnd = await client.query(_Querylogistic.CheckbillEnd,[temp.rows[index].bill_id]);\r\n              if(check.length === 0){\r\n                if(CheckbillEnd.rows.length > 0){\r\n                  bill_detail.rows[0].deivered_finish = true;\r\n                }\r\n                table =[];\r\n                table.push(bill_detail.rows[0]);\r\n                var temp_ ={\r\n                  row:temp.rows[index].delivery_sort,\r\n                  date:temp.rows[index].logistic_date,\r\n                  oem:temp.rows[index].oem_car_id,\r\n                  table:table,\r\n                }\r\n  \r\n                tempData.push(temp_)\r\n              }else{\r\n                var index_ = tempData.findIndex((e)=> e.row === temp.rows[index].delivery_sort && moment(e.date).format('DD/MM/yyyy') == moment(temp.rows[index].logistic_date).format('DD/MM/yyyy'));\r\n                if(CheckbillEnd.rows.length > 0){\r\n                  bill_detail.rows[0].deivered_finish = true;\r\n                }\r\n                bill_detail.rows[0].row_ = temp.rows[index].delivery_sort;\r\n                bill_detail.rows[0].date_ = temp.rows[index].logistic_date;\r\n                bill_detail.rows[0].id_driver = temp.rows[index].id;\r\n                tempData[index_].table.push(bill_detail.rows[0]);\r\n              }\r\n             \r\n            }\r\n            \r\n       \r\n            console.log(tempData);\r\n          \r\n            var temp_fianl = {\r\n              dataSort:tempData,\r\n              dataReal:temp.rows,\r\n              car_detail:losgistic_detail.rows[0],\r\n            }\r\n            console.log(\"tempData\",tempData)\r\n            resolve(temp_fianl); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  \r\n  async filterLogisticInOut(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n  \r\n            console.log(model)\r\n            var temp = await client.query(_Querylogistic.filterLogisticInOut, [\r\n              model.plate_number || null ,\r\n              model.oem_target || null,\r\n              model.company_id,\r\n             // model.statusDTC || null,\r\n           \r\n            ]);\r\n            var date_now = moment(new Date()).startOf('day');\r\n            var date_future = moment(new Date()).add(1,'years').endOf('day').endOf('year');\r\n            for(let item of temp.rows){\r\n              var temp2 = await client.query(_Querylogistic.getLogisticInOut,[item.id,date_now,date_future]);\r\n              item.bill_logistic = temp2.rows || [];\r\n            }\r\n            console.log(temp.rows)\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  async filterLogisticInOutReport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n  \r\n            console.log(model)\r\n            var temp = await client.query(_Querylogistic.filterLogisticInOutReport, [\r\n              model.plate_number || null ,\r\n              model.oem_target || null,\r\n              model.company_id,\r\n             // model.statusDTC || null,\r\n            \r\n            ]);\r\n            console.log(temp.rows)\r\n         \r\n            var date1 =  moment(model.date).startOf('day');\r\n            var date2 =  moment(model.date).endOf('day');\r\n            for(let item of temp.rows){\r\n              var temp2 = await client.query(_Querylogistic.getLogisticInOutReport,[item.id,date1,date2]);\r\n\r\n              \r\n              item.bill_logistic = temp2.rows || [];\r\n              for(let item2 of item.bill_logistic){\r\n                var driver =  await client.query(_Querylogistic.getPersonDriverDetail,[\r\n                  item2.id,\r\n              ]);\r\n              item2.driver_person = driver.rows[0] || \"\";\r\n              \r\n              }\r\n            }\r\n            \r\n          \r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async fineMaintenaceHistoryByCarID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            \r\n            var tempData = [];\r\n            var carMaintenance = await client.query(_Querylogistic.fineMaintenaceHistoryByCarID, [id]);\r\n            console.log(carMaintenance.rows)\r\n               for(let item = 0; item < carMaintenance.rows.length; item++){\r\n\r\n                //console.log(item)\r\n              \r\n                var check_maintenance_number = tempData.filter((e)=>{ return e.maintenance_number === carMaintenance.rows[item].maintenance_number});\r\n                if(check_maintenance_number.length > 0){\r\n                /*   var index = tempData.findIndex((e)=> e.maintenance_number === carMaintenance.rows[item].maintenance_number);\r\n                  if(index > -1){\r\n                      tempData[index].car_maintenance_list.push(carMaintenance.rows[item]);\r\n                    } */\r\n                }else{\r\n  \r\n                  tempData.push(carMaintenance.rows[item]);\r\n                /*   var index = tempData.findIndex((e)=> e.maintenance_number === carMaintenance.rows[item].maintenance_number);\r\n                  if(index > -1){\r\n                    console.log(\"here\")\r\n                    tempData[index].car_maintenance_list = [carMaintenance.rows[item]];\r\n                  } */\r\n                }\r\n               }\r\n\r\n               for(let item of carMaintenance.rows){\r\n                let check = tempData.filter((e)=> {return e.maintenance_number === item.maintenance_number })\r\n                if(check.length > 0){\r\n                  let index = tempData.findIndex((e2)=> e2.maintenance_number === item.maintenance_number);\r\n                  console.log(item.maintenance_number,item.detail_order)\r\n                  tempData[index].car_maintenance_list = tempData[index].car_maintenance_list || [];\r\n                  let tmp ={\r\n                    detail_order:item.detail_order,\r\n                    spare_part:item.spare_part,\r\n                    spare_part_amount:item.spare_part_amount,\r\n                    spare_part_unit:item.spare_part_unit,\r\n                    price_per_unit:item.price_per_unit,\r\n                    price:item.price,\r\n                  }\r\n                  tempData[index].car_maintenance_list.push(tmp);\r\n                }\r\n               }\r\n\r\n               console.log(\"tempData\",tempData)\r\n           /*  var carMaintenance1 = await client.query(_Querylogistic.fineMaintenaceHistoryByCarID, [id]);\r\n            var test = carMaintenance1.rows[0];\r\n            console.log(\"carMaintenance\",test);\r\n            \r\n            \r\n            for(let cm of carMaintenance.rows){\r\n              var check = tempData.filter((e)=>{ return e.plate_number === cm.plate_number});\r\n              \r\n              if(check.length > 0){\r\n                var index = tempData.findIndex((e2)=> e2.plate_number === cm.plate_number);\r\n                // console.log(\"index\",tempData[index].cm_list);\r\n                tempData[index].cm_list.push(cm);\r\n              }else{\r\n                cm.cm_list = [];\r\n                tempData.push(cm);\r\n              }\r\n            } \r\n            tempData[0].cm_list.push(test);\r\n            \r\n            console.log(\"CM\",tempData); */\r\n          \r\n/*             console.log(\"CM\",tempData) */\r\n/* \r\n            if (carMaintenance.rows > 0) {\r\n             \r\n            }\r\n            console.log(\"carMaintenance\",carMaintenance.rows); */\r\n         \r\n            // resolve(carMaintenance.rows); \r\n           resolve(tempData); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  }\r\n\r\nmodule.exports = logisticService;\r\n\n\n//# sourceURL=webpack:///./app/service/logisticService.js?");

/***/ }),

/***/ "./app/service/logservice.js":
/*!***********************************!*\
  !*** ./app/service/logservice.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var dbConnect = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nvar queryLog = __webpack_require__(/*! ../query/queryLog.json */ \"./app/query/queryLog.json\");\r\nconst { Client,Pool } = __webpack_require__(/*! pg */ \"pg\")\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\n// let oem_id = uuidv4();\r\nvar configLog = dbConnect.dbConnect.dbLogConnect;\r\nclass logService {\r\n    async log(model) {\r\n        return new Promise(((resolve, reject) => {\r\n            (async () => {\r\n                var client = new Client(configLog)\r\n                await client.connect();\r\n                try {\r\n                    await client.query(queryLog.add, [model.id, model.date, model.activity]);\r\n                    resolve(true);\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end();\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                reject(e);\r\n            })\r\n        }))\r\n    }\r\n    get model() {\r\n        return {\r\n            id: uuidv4(),\r\n            date: moment(new Date()),\r\n            activity: {\r\n                status: true,\r\n                path: \"\",\r\n                parameter: {},\r\n                response:{},\r\n                error: {}\r\n            }\r\n        }\r\n    }\r\n    // logModel = {\r\n    //     id: uuidv4(),\r\n    //     date: moment(new Date()),\r\n    //     activity: {\r\n    //         status: true,\r\n    //         path: \"\",\r\n    //         parameter: {},\r\n    //         error: {}\r\n    //     }\r\n    // }\r\n    // Eaction = {\r\n    //     add: \"add\",\r\n    //     edit: \"edit\",\r\n    //     del: \"del\",\r\n    //     find: \"find\",\r\n    //     filter: \"filter\",\r\n    //     upload: \"upload\",\r\n    //     login: \"login\",\r\n    //     logout: \"logout\"\r\n    // }\r\n\r\n}\r\nmodule.exports = logService\n\n//# sourceURL=webpack:///./app/service/logservice.js?");

/***/ }),

/***/ "./app/service/loopService.js":
/*!************************************!*\
  !*** ./app/service/loopService.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryLoop = __webpack_require__(/*! ../query/queryLoop.json */ \"./app/query/queryLoop.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass loopService {\r\n\r\n  async addLoop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkNo = await client.query(_QueryLoop.checkNo_add,[model.loop_no,model.company_id]);\r\n            if(checkNo.rows.length > 0){\r\n              throw Error(\"System : Loop No has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is null\");\r\n            }\r\n            let loop_id = uuidv4();\r\n   \r\n            await client.query(_QueryLoop.add, [\r\n              loop_id,\r\n              model.loop_no,\r\n              model.company_id,\r\n              model.remark,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n             \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterLoop(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n            let loop_no = model.loop_no ? model.loop_no : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QueryLoop.filter, [\r\n                loop_no,\r\n              company_id ,\r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdLoop(loop_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryLoop.findById, [loop_id]);\r\n            if (temp.rows.length > 0) {\r\n         \r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateLoop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkNo = await client.query(_QueryLoop.checkLoopNo_edit,[model.loop_no,model.loop_id,model.company_id]);\r\n            if(checkNo.rows.length > 0){\r\n              throw Error(\"System : Loop No has already\");\r\n            }\r\n            await client.query(_QueryLoop.update, [\r\n                model.loop_id,\r\n                model.loop_no,\r\n                model.remark,\r\n                moment(new Date()),\r\n                user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delLoop(loop_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryLoop.del, [loop_id,moment(new Date()),user_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n\r\nmodule.exports = loopService;\r\n\n\n//# sourceURL=webpack:///./app/service/loopService.js?");

/***/ }),

/***/ "./app/service/matInOutCTSService.js":
/*!*******************************************!*\
  !*** ./app/service/matInOutCTSService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryMatInOutCTS = __webpack_require__(/*! ../query/queryMatInOutCTS.json */ \"./app/query/queryMatInOutCTS.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst { count } = __webpack_require__(/*! console */ \"console\");\r\n\r\nclass matInOutCTS {\r\n  async getMaterialLotStock(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var lot_in_stock_list = [];\r\n            var lot_in_stock = await client.query(\r\n              _QueryMatInOutCTS.get_lot_in_stock_by_material_id,\r\n              [material_id]\r\n            );\r\n\r\n            for (let item of lot_in_stock.rows) {\r\n              var lot_in_stock_detail = await client.query(\r\n                _QueryMatInOutCTS.get_lot_in_stock_detail,\r\n                [item.coil_no, material_id]\r\n              );\r\n              \r\n              if (lot_in_stock_detail.rows.length > 0) {\r\n                let data = {\r\n                  material_log_id: lot_in_stock_detail.rows[0].id,\r\n                  material_log_no: item.coil_no,\r\n                  material_coil_no: item.coil_no,\r\n                  material_invoice_no:\r\n                    lot_in_stock_detail.rows[0].invoice_no || null,\r\n                  material_amount: item.amount,\r\n                  material_grade: lot_in_stock_detail.rows[0].grade || null,\r\n                  material_weight_tag:\r\n                    lot_in_stock_detail.rows[0].tag_weight || null,\r\n                  material_supplier_id:\r\n                    lot_in_stock_detail.rows[0].supplier_id || null,\r\n                  material_supplier:\r\n                    lot_in_stock_detail.rows[0].supplier_name || null,\r\n                  material_supplier_full:\r\n                    lot_in_stock_detail.rows[0].supplier_full_name || null,\r\n                  material_weight_actual:\r\n                    lot_in_stock_detail.rows[0].actual_weight || null,\r\n                  material_location_id:\r\n                    lot_in_stock_detail.rows[0].location_id || null,\r\n                  material_location:\r\n                    lot_in_stock_detail.rows[0].location_name || null,\r\n                  material_qc_status:\r\n                    lot_in_stock_detail.rows[0].qc_check || null,\r\n                  material_qc_date:\r\n                    lot_in_stock_detail.rows[0].check_date || null,\r\n                  material_qc_approved_by:\r\n                    lot_in_stock_detail.rows[0].qc_approve_person || null,\r\n                  material_ref_coil_no:\r\n                    lot_in_stock_detail.rows[0].ref_coil_no || null,\r\n                  material_supp_coil:\r\n                    lot_in_stock_detail.rows[0].supplier_coil || null,\r\n                  material_is_certificate:\r\n                    lot_in_stock_detail.rows[0].is_certificate || false,\r\n                };\r\n                if (data.material_amount > 0) {\r\n                  lot_in_stock_list.push(data);\r\n                }\r\n              }\r\n            }\r\n\r\n            resolve(lot_in_stock_list);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMaterialLotHistory(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var lot_history_list = [];\r\n            var lot_history = await client.query(\r\n              _QueryMatInOutCTS.get_lot_history,\r\n              [material_id]\r\n            );\r\n\r\n            for (let item of lot_history.rows) {\r\n              //console.log(lot_in_stock_detail.rows)\r\n              let data = {\r\n                material_coil_no: item.coil_no,\r\n                material_invoice_no: item.invoice_no,\r\n                material_edit_type: item.edit_type,\r\n                material_amount: item.amount,\r\n                material_grade: item.grade,\r\n                material_create_date: item.create_date,\r\n                material_qc_status: item.qc_check,\r\n                material_location: item.location_name,\r\n                material_weight_tag: item.tag_weight,\r\n                material_supplier: item.supplier_name,\r\n                material_ref_coil: item.ref_coil_no,\r\n                material_weight_actual: item.actual_weight,\r\n                material_qc_date: item.check_date,\r\n                material_qc_approved_by: item.qc_approve_person,\r\n              };\r\n\r\n              lot_history_list.push(data);\r\n            }\r\n\r\n            resolve(lot_history_list);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterRawMatInOut(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let company_key = model.company_key,\r\n              /*  oem_id = model.oem_id, */\r\n              company_id = model.company_id,\r\n              material_no = model.material_no || null,\r\n              materail_name = model.materail_name || null,\r\n              materail_lot_start_date = model.materail_lot_end_date\r\n                ? moment(model.materail_lot_start_date)\r\n                    .startOf(\"day\")\r\n                    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                : null,\r\n              materail_lot_end_date = model.materail_lot_end_date\r\n                ? moment(model.materail_lot_end_date)\r\n                    .endOf(\"day\")\r\n                    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                : null;\r\n\r\n            if (company_key != \"CTS\") {\r\n              throw Error(\"not fine 'company_key' !!!\");\r\n            }\r\n            /*  if (!oem_id) {\r\n              throw Error(\"not fine 'oem_id' !!!\");\r\n            } */\r\n            if (!company_id) {\r\n              throw Error(\"not fine 'company_id' !!!\");\r\n            }\r\n\r\n            var material_all_data = await client.query(\r\n              _QueryMatInOutCTS.allMaterialByCOM,\r\n              [/* oem_id, */ material_no, materail_name, company_id]\r\n            );\r\n\r\n            if (materail_lot_start_date) {\r\n              var data_in_date = await client.query(\r\n                _QueryMatInOutCTS.filter_mgt_data_with_time,\r\n                [\r\n                  /*   oem_id, */\r\n                  material_no,\r\n                  materail_name,\r\n                  company_id,\r\n                  materail_lot_start_date,\r\n                  materail_lot_end_date,\r\n                ]\r\n              );\r\n            } /* else { */\r\n\r\n            var material_log_data = await client.query(\r\n              _QueryMatInOutCTS.filter_mgt_data_with_out_time,\r\n              [/* oem_id, */ material_no, materail_name, company_id]\r\n            );\r\n            /*        } */\r\n\r\n            let tempData = [];\r\n            if (materail_lot_start_date) {\r\n              for (let date of data_in_date.rows) {\r\n                for (let data of material_log_data.rows) {\r\n                  if (date.material_id === data.material_id) {\r\n                    tempData.push(data);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              tempData = material_log_data.rows;\r\n            }\r\n            let result_filter_data = [];\r\n            /*    console.log(material_all_data.rows) */\r\n            for (const data of material_all_data.rows) {\r\n              var mat_dimention = await client.query(\r\n                _QueryMatInOutCTS.get_product_material,\r\n                [data.id]\r\n              );\r\n              const material_temp = {};\r\n              material_temp[\"material_id\"] = data.id;\r\n              material_temp[\"material_no\"] = data.no;\r\n              material_temp[\"material_name\"] = data.name;\r\n              material_temp[\"material_spec\"] = data.material_spec;\r\n              material_temp[\"material_size\"] = data.material_size;\r\n\r\n              material_temp[\"material_image\"] = data.image;\r\n              material_temp[\"material_image_name\"] = data.image_name;\r\n              material_temp[\"material_image_path\"] = data.imaget_path;\r\n              material_temp[\"material_min_stock\"] = data.minimum_lot;\r\n              material_temp[\"material_supplier\"] = data.material_supplier_id;\r\n              material_temp[\"material_dimention\"] = mat_dimention.rows;\r\n              material_temp[\"material_amount\"] = data.amount;\r\n\r\n              /*    var lot_in_stock_list = []; */\r\n              var lot_in_stock_list_wait_qc = [];\r\n              var lot_in_stock_list_qc_pass = [];\r\n              var lot_in_stock = await client.query(\r\n                _QueryMatInOutCTS.get_lot_in_stock_by_material_id,\r\n                [data.id]\r\n              );\r\n\r\n              for (let item of lot_in_stock.rows) {\r\n                var lot_in_stock_detail = await client.query(\r\n                  _QueryMatInOutCTS.get_lot_in_stock_detail,\r\n                  [item.coil_no, data.id]\r\n                );\r\n\r\n                if (lot_in_stock_detail.rows.length > 0) {\r\n                  let data_lot = {\r\n                    material_coil_no: item.coil_no,\r\n                    material_ref_coil_no:\r\n                      lot_in_stock_detail.rows[0].ref_coil_no,\r\n                    tracking_no: lot_in_stock_detail.rows[0].tracking_no,\r\n                    material_invoice_no:\r\n                      lot_in_stock_detail.rows[0].invoice_no || null,\r\n                    material_amount: item.amount,\r\n                    material_weight_actual:\r\n                      lot_in_stock_detail.rows[0].actual_weight || null,\r\n                    material_location:\r\n                      lot_in_stock_detail.rows[0].location_name || null,\r\n                    material_qc_status:\r\n                      lot_in_stock_detail.rows[0].qc_check || null,\r\n                    material_qc_date:\r\n                      lot_in_stock_detail.rows[0].check_date || null,\r\n                    material_qc_approve_person:\r\n                      lot_in_stock_detail.rows[0].qc_check === true\r\n                        ? lot_in_stock_detail.rows[0].qc_approve_person || null\r\n                        : \"\",\r\n                    material_tag_weight:\r\n                      lot_in_stock_detail.rows[0].tag_weight || null,\r\n                    material_actual_weight:\r\n                      lot_in_stock_detail.rows[0].actual_weight || null,\r\n                    material_grade: lot_in_stock_detail.rows[0].grade || null,\r\n                    material_supplier:\r\n                      lot_in_stock_detail.rows[0].supplier_id || null,\r\n                    material_is_certificate:\r\n                      lot_in_stock_detail.rows[0].is_certificate || false,\r\n                    material_supplier_coil:\r\n                      lot_in_stock_detail.rows[0].supplier_coil || \"ไม่ระบุ\",\r\n                  };\r\n\r\n                  if (data_lot.material_amount > 0) {\r\n                    var checkInDate = tempData.filter((e) => {\r\n                      return e.coil_no === data_lot.material_coil_no;\r\n                    });\r\n                    if (checkInDate.length > 0) {\r\n                      if (data_lot.material_qc_status === true) {\r\n                        //console.log(\"TRUE HERER QC\");\r\n                        lot_in_stock_list_qc_pass.push(data_lot);\r\n                      } else {\r\n                        // console.log(\"FALSE HERER QC\");\r\n                        lot_in_stock_list_wait_qc.push(data_lot);\r\n                      }\r\n                    }\r\n\r\n                    /*  lot_in_stock_list.push(data_lot); */\r\n                  }\r\n                }\r\n              }\r\n              material_temp[\"material_lot_list_wait_qc\"] =\r\n                lot_in_stock_list_wait_qc;\r\n              material_temp[\"material_lot_list_qc_passed\"] =\r\n                lot_in_stock_list_qc_pass;\r\n\r\n              /*         console.log(\"pass\",lot_in_stock_list_wait_qc); */\r\n              result_filter_data.push(material_temp);\r\n            }\r\n\r\n            if (materail_lot_start_date) {\r\n              let final_result_data = result_filter_data.filter((element) => {\r\n                return element.material_lot_list_qc_passed.length > 0;\r\n              });\r\n\r\n              resolve(final_result_data);\r\n            }\r\n\r\n            var temp = result_filter_data;\r\n            // wait qc\r\n            if (model.is_waitQc === true) {\r\n              var tempQc = result_filter_data.filter((e) => {\r\n                return e.material_lot_list_wait_qc.length > 0;\r\n              });\r\n              temp = tempQc;\r\n            }\r\n            // min_stock\r\n            if (model.is_minStock === true) {\r\n              var tempMin = [];\r\n              for (let i of temp) {\r\n                var weight_tag = 0;\r\n                for (let wqc of i.material_lot_list_wait_qc) {\r\n                  weight_tag += wqc.material_tag_weight || 0;\r\n                }\r\n                for (let qcp of i.material_lot_list_qc_passed) {\r\n                  weight_tag += qcp.material_tag_weight || 0;\r\n                }\r\n\r\n                if (weight_tag < i.material_min_stock) {\r\n                  tempMin.push(i);\r\n                }\r\n              }\r\n              temp = tempMin;\r\n            }\r\n\r\n            if (model.is_waitCer === true) {\r\n              var temp_Cer = [];\r\n              for (let i of temp) {\r\n                var temp_Cer1 = i.material_lot_list_wait_qc.filter((e) => {\r\n                  return e.material_is_certificate !== true;\r\n                });\r\n                var temp_Cer2 = i.material_lot_list_qc_passed.filter((e) => {\r\n                  return e.material_is_certificate !== true;\r\n                });\r\n\r\n                if (temp_Cer1.length > 0 || temp_Cer2.length > 0) {\r\n                  temp_Cer.push(i);\r\n                }\r\n              }\r\n\r\n              temp = temp_Cer;\r\n              console.log(temp);\r\n              /* for(let item of temp_Cer){\r\n                var check = temp.filter((c)=>{return c.material_id === item.material_id});\r\n                 if(check.length === 0){\r\n                  temp.push(item);\r\n                 }\r\n          \r\n              } */\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getRawMatInOut(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let company_key = model.company_key,\r\n              /*  oem_id = model.oem_id, */\r\n              company_id = model.company_id,\r\n              material_no = model.material_no || null,\r\n              materail_name = model.materail_name || null,\r\n              materail_lot_start_date = model.materail_lot_end_date\r\n                ? moment(model.materail_lot_start_date)\r\n                    .startOf(\"day\")\r\n                    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                : null,\r\n              materail_lot_end_date = model.materail_lot_end_date\r\n                ? moment(model.materail_lot_end_date)\r\n                    .endOf(\"day\")\r\n                    .format(\"YYYY-MM-DD HH:mm:ss\")\r\n                : null;\r\n\r\n            if (company_key != \"CTS\") {\r\n              throw Error(\"not fine 'company_key' !!!\");\r\n            }\r\n            /*  if (!oem_id) {\r\n              throw Error(\"not fine 'oem_id' !!!\");\r\n            } */\r\n            if (!company_id) {\r\n              throw Error(\"not fine 'company_id' !!!\");\r\n            }\r\n\r\n            var material_all_data = await client.query(\r\n              _QueryMatInOutCTS.allMaterialByCOM,\r\n              [/* oem_id, */ material_no, materail_name, company_id]\r\n            );\r\n\r\n            if (materail_lot_start_date) {\r\n              var data_in_date = await client.query(\r\n                _QueryMatInOutCTS.filter_mgt_data_with_time,\r\n                [\r\n                  /*   oem_id, */\r\n                  material_no,\r\n                  materail_name,\r\n                  company_id,\r\n                  materail_lot_start_date,\r\n                  materail_lot_end_date,\r\n                ]\r\n              );\r\n            } /* else { */\r\n\r\n            var material_log_data = await client.query(\r\n              _QueryMatInOutCTS.filter_mgt_data_with_out_time,\r\n              [/* oem_id, */ material_no, materail_name, company_id]\r\n            );\r\n            /*        } */\r\n\r\n            let tempData = [];\r\n            if (materail_lot_start_date) {\r\n              for (let date of data_in_date.rows) {\r\n                for (let data of material_log_data.rows) {\r\n                  if (date.material_id === data.material_id) {\r\n                    tempData.push(data);\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              tempData = material_log_data.rows;\r\n            }\r\n            let result_filter_data = [];\r\n            /*    console.log(material_all_data.rows) */\r\n            for (const data of material_all_data.rows) {\r\n              var mat_dimention = await client.query(\r\n                _QueryMatInOutCTS.get_product_material,\r\n                [data.id]\r\n              );\r\n              const material_temp = {};\r\n              material_temp[\"material_id\"] = data.id;\r\n              material_temp[\"material_no\"] = data.no;\r\n              material_temp[\"material_name\"] = data.name;\r\n              material_temp[\"material_spec\"] = data.material_spec;\r\n              material_temp[\"material_size\"] = data.material_size;\r\n\r\n              material_temp[\"material_image\"] = data.image;\r\n              material_temp[\"material_image_name\"] = data.image_name;\r\n              material_temp[\"material_image_path\"] = data.imaget_path;\r\n              material_temp[\"material_min_stock\"] = data.minimum_lot;\r\n              material_temp[\"material_supplier\"] = data.material_supplier_id;\r\n              material_temp[\"material_dimention\"] = mat_dimention.rows;\r\n              material_temp[\"material_amount\"] = data.amount;\r\n\r\n              /*    var lot_in_stock_list = []; */\r\n              var lot_in_stock_list_wait_qc = [];\r\n              var lot_in_stock_list_qc_pass = [];\r\n              var lot_in_stock = await client.query(\r\n                _QueryMatInOutCTS.get_lot_in_stock_by_material_id,\r\n                [data.id]\r\n              );\r\n\r\n              for (let item of lot_in_stock.rows) {\r\n                var lot_in_stock_detail = await client.query(\r\n                  _QueryMatInOutCTS.get_lot_in_stock_detail,\r\n                  [item.coil_no, data.id]\r\n                );\r\n\r\n                if (lot_in_stock_detail.rows.length > 0) {\r\n                  let data_lot = {\r\n                    material_coil_no: item.coil_no,\r\n                    material_ref_coil_no:\r\n                      lot_in_stock_detail.rows[0].ref_coil_no,\r\n                    tracking_no: lot_in_stock_detail.rows[0].tracking_no,\r\n                    material_invoice_no:\r\n                      lot_in_stock_detail.rows[0].invoice_no || null,\r\n                    material_amount: item.amount,\r\n                    material_weight_actual:\r\n                      lot_in_stock_detail.rows[0].actual_weight || null,\r\n                    material_location:\r\n                      lot_in_stock_detail.rows[0].location_name || null,\r\n                    material_qc_status:\r\n                      lot_in_stock_detail.rows[0].qc_check || null,\r\n                    material_qc_date:\r\n                      lot_in_stock_detail.rows[0].check_date || null,\r\n                    material_qc_approve_person:\r\n                      lot_in_stock_detail.rows[0].qc_check === true\r\n                        ? lot_in_stock_detail.rows[0].qc_approve_person || null\r\n                        : \"\",\r\n                    material_tag_weight:\r\n                      lot_in_stock_detail.rows[0].tag_weight || null,\r\n                    material_actual_weight:\r\n                      lot_in_stock_detail.rows[0].actual_weight || null,\r\n                    material_grade: lot_in_stock_detail.rows[0].grade || null,\r\n                    material_supplier:\r\n                      lot_in_stock_detail.rows[0].supplier_id || null,\r\n                    material_is_certificate:\r\n                      lot_in_stock_detail.rows[0].is_certificate || false,\r\n                    material_supplier_coil:\r\n                      lot_in_stock_detail.rows[0].supplier_coil || \"ไม่ระบุ\",\r\n                  };\r\n\r\n                  if (data_lot.material_amount > 0) {\r\n                    var checkInDate = tempData.filter((e) => {\r\n                      return e.coil_no === data_lot.material_coil_no;\r\n                    });\r\n                    if (checkInDate.length > 0) {\r\n                      if (data_lot.material_qc_status === true) {\r\n                        //console.log(\"TRUE HERER QC\");\r\n                        lot_in_stock_list_qc_pass.push(data_lot);\r\n                      } else {\r\n                        // console.log(\"FALSE HERER QC\");\r\n                        lot_in_stock_list_wait_qc.push(data_lot);\r\n                      }\r\n                    }\r\n\r\n                    /*  lot_in_stock_list.push(data_lot); */\r\n                  }\r\n                }\r\n              }\r\n              material_temp[\"material_lot_list_wait_qc\"] =\r\n                lot_in_stock_list_wait_qc;\r\n              material_temp[\"material_lot_list_qc_passed\"] =\r\n                lot_in_stock_list_qc_pass;\r\n\r\n              /*         console.log(\"pass\",lot_in_stock_list_wait_qc); */\r\n              result_filter_data.push(material_temp);\r\n            }\r\n\r\n            if (materail_lot_start_date) {\r\n              let final_result_data = result_filter_data.filter((element) => {\r\n                return element.material_lot_list_qc_passed.length > 0;\r\n              });\r\n\r\n              resolve(final_result_data);\r\n            }\r\n\r\n            var temp = result_filter_data;\r\n            // wait qc\r\n            if (model.is_waitQc === true) {\r\n              var tempQc = result_filter_data.filter((e) => {\r\n                return e.material_lot_list_wait_qc.length > 0;\r\n              });\r\n              temp = tempQc;\r\n            }\r\n            // min_stock\r\n            if (model.is_minStock === true) {\r\n              var tempMin = [];\r\n              for (let i of temp) {\r\n                var weight_tag = 0;\r\n                for (let wqc of i.material_lot_list_wait_qc) {\r\n                  weight_tag += wqc.material_tag_weight || 0;\r\n                }\r\n                for (let qcp of i.material_lot_list_qc_passed) {\r\n                  weight_tag += qcp.material_tag_weight || 0;\r\n                }\r\n\r\n                if (weight_tag < i.material_min_stock) {\r\n                  tempMin.push(i);\r\n                }\r\n              }\r\n              temp = tempMin;\r\n            }\r\n\r\n            if (model.is_waitCer === true) {\r\n              var temp_Cer = [];\r\n              for (let i of temp) {\r\n                var temp_Cer1 = i.material_lot_list_wait_qc.filter((e) => {\r\n                  return e.material_is_certificate !== true;\r\n                });\r\n                var temp_Cer2 = i.material_lot_list_qc_passed.filter((e) => {\r\n                  return e.material_is_certificate !== true;\r\n                });\r\n\r\n                if (temp_Cer1.length > 0 || temp_Cer2.length > 0) {\r\n                  temp_Cer.push(i);\r\n                }\r\n              }\r\n\r\n              temp = temp_Cer;\r\n              console.log(temp);\r\n              /* for(let item of temp_Cer){\r\n                var check = temp.filter((c)=>{return c.material_id === item.material_id});\r\n                 if(check.length === 0){\r\n                  temp.push(item);\r\n                 }\r\n          \r\n              } */\r\n            }\r\n\r\n            resolve(temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async qcApproved(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryMatInOutCTS.update_material_qc_approved, [\r\n              model.material_id,\r\n              model.material_coil_no,\r\n              model.material_invoice_no,\r\n              model.qc_approve_person,\r\n              true,\r\n              moment(new Date()),\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveHaveCer(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryMatInOutCTS.update_material_cer, [\r\n              model.material_id,\r\n              model.material_coil_no,\r\n              model.material_invoice_no,\r\n              true,\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getlotNo(mat_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryMatInOutCTS.getlotNo, [mat_id]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkRefCoil(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            var tempCheck = await client.query(\r\n              _QueryMatInOutCTS.check_material_ref_coil,\r\n              [model.material_id, model.material_ref_coil_no]\r\n            );\r\n            if (tempCheck.rows.length > 0) {\r\n              let temp = {\r\n                status: true,\r\n                message: \"Correct\",\r\n              };\r\n              resolve(temp);\r\n            } else {\r\n              let temp = {\r\n                status: false,\r\n                message: \"Incorrect\",\r\n              };\r\n              resolve(temp);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMaterialMGT(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var material_mgt_data = await client.query(\r\n              _QueryMatInOutCTS.getmaterial_mgt_data,\r\n              [material_id]\r\n            );\r\n            var supplier_active = await client.query(\r\n              _QueryMatInOutCTS.get_supplier_active,\r\n              [material_id]\r\n            );\r\n            var material_supplier_id;\r\n            var material_supplier_name;\r\n            if (supplier_active.rows.length > 0) {\r\n              material_supplier_id = supplier_active.rows[0].supplier_id;\r\n              material_supplier_name = supplier_active.rows[0].full_name;\r\n            }\r\n            var tmp_data = {\r\n              material_no: material_mgt_data.rows[0].material_no,\r\n              material_name: material_mgt_data.rows[0].material_name,\r\n              material_amount: material_mgt_data.rows[0].material_amount,\r\n              material_supplier_id: material_supplier_id || null,\r\n              material_supplier_name: material_supplier_name || null,\r\n            };\r\n\r\n            console.log(tmp_data);\r\n            resolve(tmp_data);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveEditAmountMaterialInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            var material_sum_in_amount = 0;\r\n            if (model.material_amount === null) {\r\n              model.material_amount = 0;\r\n            }\r\n            if (model.material_edit_type === true) {\r\n              material_sum_in_amount = 0;\r\n              for (let itemCoil of model.material_coil_no) {\r\n                var year = (\r\n                  parseInt(moment(new Date()).format(\"YYYY\")) + 543\r\n                ).toString();\r\n                var tag = \"M\" + year[2] + year[3] + \"-\";\r\n                var checkLastTag = await client.query(\r\n                  _QueryMatInOutCTS.getLastTag,\r\n                  [tag]\r\n                );\r\n\r\n                tag =\r\n                  \"M\" +\r\n                  year[2] +\r\n                  year[3] +\r\n                  \"-\" +\r\n                  pad_fnc2(checkLastTag.rows.length + 1);\r\n                var check_material_edit_type = await client.query(\r\n                  _QueryMatInOutCTS.check_material_cinvoice_no_coil_no,\r\n                  [\r\n                    model.material_id,\r\n                    itemCoil.coil_no,\r\n                    /*                   model.material_invoice_no, */\r\n                  ]\r\n                );\r\n                if (check_material_edit_type.rows.length > 0) {\r\n                  throw Error(\"coil_no นี้มีในระบบแล้ว\");\r\n                }\r\n                let log_material_cts_id = uuidv4();\r\n\r\n                var check_amount_material = await client.query(\r\n                  _QueryMatInOutCTS.get_material_amount_sum,\r\n                  [model.material_id]\r\n                );\r\n                material_sum_in_amount =\r\n                  parseInt(check_amount_material.rows[0].amount || 0) +\r\n                  parseInt(model.material_amount);\r\n                await client.query(\r\n                  _QueryMatInOutCTS.update_material_cts_edit_amount,\r\n                  [\r\n                    model.material_id,\r\n                    material_sum_in_amount,\r\n                    moment(new Date()),\r\n                  ]\r\n                );\r\n                if (\r\n                  itemCoil.old_coil_no !== null &&\r\n                  itemCoil.old_coil_no !== \"\"\r\n                ) {\r\n                  var tempDetailByRef = await client.query(\r\n                    _QueryMatInOutCTS.get_lot_in_stock_detail,\r\n                    [itemCoil.old_coil_no, model.material_id]\r\n                  );\r\n                  console.log(tempDetailByRef.rows);\r\n                  await client.query(\r\n                    _QueryMatInOutCTS.add_log_material_cts_edit_amount,\r\n                    [\r\n                      log_material_cts_id,\r\n                      model.material_id,\r\n                      user_id,\r\n                      true,\r\n                      model.material_amount,\r\n                      moment(new Date()),\r\n                      material_sum_in_amount,\r\n                      tempDetailByRef.rows[0].qc_check,\r\n                      tempDetailByRef.rows[0].check_date,\r\n                      tempDetailByRef.rows[0].qc_approve_person,\r\n                      itemCoil.coil_no,\r\n                      model.material_invoice_no,\r\n                      model.material_location || null,\r\n                      itemCoil.weight_by_tag || null,\r\n                      model.material_weight_by_actual || null,\r\n                      model.material_grade || null,\r\n                      model.material_unit || null,\r\n                      model.material_suplier_id || null,\r\n                      itemCoil.old_coil_no || null,\r\n                      tag,\r\n                      tempDetailByRef.rows[0].is_certificate,\r\n                      itemCoil.supp_coil || null,\r\n                      null,\r\n                      null,\r\n                    ]\r\n                  );\r\n                } else {\r\n                  await client.query(\r\n                    _QueryMatInOutCTS.add_log_material_cts_edit_amount,\r\n                    [\r\n                      log_material_cts_id,\r\n                      model.material_id,\r\n                      user_id,\r\n                      true,\r\n                      model.material_amount,\r\n                      moment(new Date()),\r\n                      material_sum_in_amount,\r\n                      false,\r\n                      null,\r\n                      null,\r\n                      itemCoil.coil_no,\r\n                      model.material_invoice_no,\r\n                      model.material_location || null,\r\n                      itemCoil.weight_by_tag || null,\r\n                      model.material_weight_by_actual || null,\r\n                      model.material_grade || null,\r\n                      model.material_unit || null,\r\n                      model.material_suplier_id || null,\r\n                      itemCoil.old_coil_no || null,\r\n                      tag,\r\n                      model.material_cer || false,\r\n                      itemCoil.supp_coil || null,\r\n                      null,\r\n                      null,\r\n                    ]\r\n                  );\r\n                }\r\n              }\r\n            } else if (model.material_edit_type === false) {\r\n              /*          console.log(model.material_coil_no) */\r\n              var lot_no_id = await client.query(\r\n                _QueryMatInOutCTS.getDetailLotNo,\r\n                [model.lot_no]\r\n              );\r\n              console.log(lot_no_id.rows);\r\n              for (let itemCoil of model.material_coil_no) {\r\n                var check_qc_material_coil_no = await client.query(\r\n                  _QueryMatInOutCTS.check_material_qc_by_coil_no,\r\n                  [itemCoil.material_coil_no]\r\n                );\r\n\r\n                if (check_qc_material_coil_no.rows.length > 0) {\r\n                  var material_sum_out_amount = 0;\r\n                  /* var get_material_edit_type = await client.query(\r\n                  _QueryMatInOutCTS.get_material_edit_type_query,\r\n                  [\r\n                    model.material_id,\r\n                    itemCoil.material_coil_no,\r\n                    itemCoil.material_invoice_no,\r\n                  ]\r\n                ); */\r\n                  var mat_amount = await client.query(\r\n                    _QueryMatInOutCTS.get_material_amount_sum,\r\n                    [model.material_id]\r\n                  );\r\n                  material_sum_out_amount =\r\n                    parseInt(mat_amount.rows[0].amount) -\r\n                    parseInt(itemCoil.material_amount);\r\n\r\n                  if (parseInt(material_sum_out_amount) < 0) {\r\n                    throw Error(\"จำนวนใน lot ไม่เพียงพอ\");\r\n                  } else {\r\n                    await client.query(\r\n                      _QueryMatInOutCTS.update_material_cts_edit_amount,\r\n                      [\r\n                        model.material_id,\r\n                        material_sum_out_amount,\r\n                        moment(new Date()),\r\n                      ]\r\n                    );\r\n                    let log_material_cts_id = uuidv4();\r\n\r\n                    await client.query(\r\n                      _QueryMatInOutCTS.add_log_material_cts_edit_amount,\r\n                      [\r\n                        log_material_cts_id,\r\n                        model.material_id,\r\n                        user_id,\r\n                        false,\r\n                        itemCoil.material_amount,\r\n                        moment(new Date()),\r\n                        material_sum_out_amount,\r\n                        check_qc_material_coil_no.rows[0].qc_check,\r\n                        check_qc_material_coil_no.rows[0].check_date,\r\n                        check_qc_material_coil_no.rows[0].qc_approve_person,\r\n                        check_qc_material_coil_no.rows[0].coil_no,\r\n                        check_qc_material_coil_no.rows[0].invoice_no,\r\n                        check_qc_material_coil_no.rows[0].warehouse_id,\r\n                        check_qc_material_coil_no.rows[0].tag_weight,\r\n                        check_qc_material_coil_no.rows[0].actual_weight,\r\n                        check_qc_material_coil_no.rows[0].grade,\r\n                        check_qc_material_coil_no.rows[0].unit,\r\n                        check_qc_material_coil_no.rows[0].supplier_id,\r\n                        check_qc_material_coil_no.rows[0].ref_coil_no,\r\n                        check_qc_material_coil_no.rows[0].tracking_no,\r\n                        check_qc_material_coil_no.rows[0].is_certificate,\r\n                        check_qc_material_coil_no.rows[0].supplier_coil,\r\n                        model.lot_no,\r\n                        lot_no_id.rows[0].id,\r\n                      ]\r\n                    );\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              throw Error(\"เลือก EditType\");\r\n            }\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveEditLogMaterialInOut(model) {\r\n    console.log('test ', model)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n     /*       let getData =  await client.query(\r\n              \"SELECT b.tag_weight,a.amount,a.material_id FROM log_material_cts_edit_amount a LEFT JOIN material b ON a.material_id = b.id WHERE a.id = $1\",\r\n              [\r\n                model.log_id,\r\n              ]\r\n            );\r\n\r\n            let new_amount = parseFloat(getData.rows[0].tag_weight || 0) - parseFloat(getData.rows[0].amount || 0);\r\n            new_amount = parseFloat(new_amount) + parseFloat(model.weight_by_tag || 0);\r\n            \r\n            await client.query(\r\n              \"UPDATE material SET amount = $2 WHERE id = $1;\",\r\n              [\r\n                getData.rows[0].material_id,\r\n                new_amount,\r\n              ]\r\n            ); */\r\n            await client.query(\r\n              _QueryMatInOutCTS.update_log_material_cts_edit_amount,\r\n              [\r\n                model.log_id,\r\n                model.is_cer,\r\n                model.invoice_no,\r\n                model.supplier_id,\r\n                model.grade,\r\n                model.location,\r\n                model.weight_by_tag || 0,\r\n                model.supp_coil || null,\r\n                model.old_coil_no || null,\r\n              ]\r\n            );\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLocation(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var location_list = await client.query(\r\n              _QueryMatInOutCTS.get_location_by_company,\r\n              [model.company_id]\r\n            );\r\n            console.log(location_list.rows);\r\n            resolve(location_list.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getSupplier(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var supplier_list = await client.query(\r\n              _QueryMatInOutCTS.get_supplier_by_company,\r\n              [model.company_id]\r\n            );\r\n\r\n            resolve(supplier_list.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async genCoilNo() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let coil_no = moment(new Date()).add(543, \"year\").format(\"LLLL\");\r\n            coil_no = moment(new Date(coil_no)).format(\"YYMMDD\");\r\n            var check_coil = await client.query(\r\n              _QueryMatInOutCTS.checkCoilToGen,\r\n              [coil_no]\r\n            );\r\n            var count = 1;\r\n            if (check_coil.rows.length > 0) {\r\n              count = check_coil.rows.length + 1;\r\n            }\r\n            coil_no = coil_no + pad_fnc(count);\r\n\r\n            resolve(coil_no);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  if (d < 10) {\r\n    return \"0\" + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n}\r\n\r\nfunction pad_fnc2(d) {\r\n  if (d.toString().length == 5) {\r\n    return \"0\" + d.toString();\r\n  } else if (d.toString().length == 4) {\r\n    return \"00\" + d.toString();\r\n  } else if (d.toString().length == 3) {\r\n    return \"000\" + d.toString();\r\n  } else if (d.toString().length == 2) {\r\n    return \"0000\" + d.toString();\r\n  } else {\r\n    return \"00000\" + d.toString();\r\n  }\r\n}\r\n\r\nmodule.exports = matInOutCTS;\r\n\n\n//# sourceURL=webpack:///./app/service/matInOutCTSService.js?");

/***/ }),

/***/ "./app/service/materailConCtsService.js":
/*!**********************************************!*\
  !*** ./app/service/materailConCtsService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryMaterailConCts = __webpack_require__(/*! ../query/queryMaterailConCts.json */ \"./app/query/queryMaterailConCts.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\n\r\nclass materailConCtsService {\r\n\r\n\r\n\r\n    async filterMaterialView(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let no = model.no ? model.no : null,\r\n                name = model.name ? model.name : null,\r\n                material_type_id = model.material_type_id\r\n                  ? model.material_type_id\r\n                  : null,\r\n                material_spec_id = model.material_spec_id\r\n                  ? model.material_spec_id\r\n                  : null,\r\n                material_size_id = model.material_size_id\r\n                  ? model.material_size_id\r\n                  : null,\r\n                material_supplier_id = model.material_supplier_id\r\n                  ? model.material_supplier_id\r\n                  : null;\r\n             \r\n                  /* console.log(\"วันที่date_start\",moment(model.date_start).format('DD-MM-YYYY'));\r\n                  console.log(\"วันที่date_end\",moment(model.date_end).format('DD-MM-YYYY')); */\r\n                 if (model.oem_id === null) {\r\n                     throw Error(\"Can't fine oem_id\");\r\n                 }\r\n\r\n                 /* if(model.date_start === \"\"){\r\n                model.date_start = moment(model.date_start).startOf('day').format();\r\n                 }\r\n               if(model.date_end === \"\"){\r\n                model.date_end = moment(model.date_end).endOf('day').format();\r\n               } */\r\n               \r\n               /* if(model.date_end === \"\" && model.date_start !==\"\"){\r\n                model.date_end = moment(model.date_start).endOf('day').format();\r\n               } */\r\n               let mat = await client.query(_QueryMaterailConCts.getMat, [\r\n                model.oem_id,\r\n                no,\r\n                name,\r\n                material_type_id,\r\n                /* model.date_start || null,\r\n                model.date_end || null, */\r\n                material_spec_id,\r\n                material_size_id,\r\n                material_supplier_id,\r\n               ]);\r\n               /* console.log('mat',mat.rows); */\r\n              \r\n               for(let item of mat.rows){\r\n                var temp = await client.query(_QueryMaterailConCts.getlogMatCTS,[\r\n                  item.id,\r\n                  model.date_start ? moment(model.date_start).format('YYYY-MM-DD') : null ,\r\n                  model.date_end ? moment(model.date_end).format('YYYY-MM-DD') : null\r\n                ]);\r\n                item.log_sum_amount = temp.rows.length > 0 ? temp.rows[0].sum_tag_weight : 0;\r\n                /* console.log('temp',temp.rows); */\r\n               }\r\n               for(let item2 of mat.rows){\r\n                var temp2 = await client.query(_QueryMaterailConCts.getMinOrder,[\r\n                  item2.id\r\n                ])\r\n                item2.minimum_order = temp2.rows.length > 0 ? temp2.rows[0].minimum_order : 0;\r\n                /* console.log('temp2',temp2.rows); */\r\n               }\r\n              \r\n                \r\n                resolve(mat.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n               console.log(e); \r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } \r\n\r\n}\r\n\r\n\r\nmodule.exports = materailConCtsService;\n\n//# sourceURL=webpack:///./app/service/materailConCtsService.js?");

/***/ }),

/***/ "./app/service/materialPlaningService.js":
/*!***********************************************!*\
  !*** ./app/service/materialPlaningService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n    Client,\r\n    Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProductPlaning = __webpack_require__(/*! ../query/queryProductPlaning.json */ \"./app/query/queryProductPlaning.json\");\r\nconst _QueryMaterialPlaning = __webpack_require__(/*! ../query/queryMaterialPlaning.json */ \"./app/query/queryMaterialPlaning.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar {\r\n    v4: uuidv4\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass materialPlaningService {\r\n\r\n    async test(item,user_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                var tempRes=[];\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try{\r\n                for (let model of item) {\r\n                  try {\r\n                    var check = await client.query(_QueryMaterialPlaning.findByProductForcast, [model.product_material_id,model.product_forcast_id]);\r\n                 \r\n                    // let _month = parseInt(model.month) - 1;\r\n                    // var ym = moment(new Date(model.year, _month));\r\n                    \r\n                    if (check.rows.length == 0) {\r\n                         let material_forcast_id = uuidv4();\r\n                         \r\n                         await client.query(_QueryMaterialPlaning.addMaterialForcast, [\r\n                             material_forcast_id, \r\n                             model.product_material_id, \r\n                             model.product_forcast_id, \r\n                             model.amount, \r\n                             model.product_amount, \r\n                             user_id, moment(new Date()), \r\n                             moment(new Date())]);\r\n                     } else {\r\n                         await client.query(_QueryMaterialPlaning.updateMaterialForcast, [ \r\n                             model.amount, \r\n                             model.product_amount, \r\n                             user_id, moment(new Date()),check.rows[0].id]);\r\n                     }\r\n                        model.status= true;\r\n                        tempRes.push(model);\r\n                  } catch (ex) {\r\n                    model.status= false;\r\n                    model.error= ex.message;\r\n                    tempRes.push(model);\r\n                  }\r\n\r\n                }\r\n                if ((tempRes.filter(x => !x.status)).length > 0) {\r\n                    await client.query('ROLLBACK')\r\n                }else{\r\n                    await client.query('COMMIT')\r\n                }\r\n                resolve(true)\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n    async updateMaterialForcast(item,user_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                var tempRes=[];\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n            /*     await client.query('BEGIN');\r\n                await client.query('ROLLBACK'); */\r\n              try{\r\n                let order_no = \"M\" + moment(new Date()).format(\"YYYYMMDD\");\r\n                //console.log(order_no);\r\n                let year = order_no.charAt(3);\r\n                year += order_no.charAt(4);\r\n                year += order_no.charAt(5);\r\n                year += order_no.charAt(6);\r\n                let month = order_no.charAt(7);\r\n                month += order_no.charAt(8);\r\n                let day = order_no.charAt(9);\r\n                day += order_no.charAt(10);\r\n                var oem_id = item.oem_id;\r\n            \r\n                \r\n\r\n             /*    const list_product2 = [];\r\n                for (let index = 0; index < item.length; index++) {\r\n\r\n                var temp = {\r\n\r\n                    no:item[index].no,\r\n                    name: item[index].name,\r\n                    material_type: item[index].material_type,\r\n                    buy_price : item[index].buy_price,\r\n                    material_size: item[index].material_size,\r\n                    material_spec: item[index].material_spec,\r\n                    material_supplier: item[index].material_supplier,\r\n                    material_supplier_id: item[index].material_supplier_id,\r\n                    material_unit: item[index].material_unit,\r\n                    oem_id: item[index].oem_id,\r\n                    product_amount: item[index].product_amount,\r\n                    product_forcast_id: item[index].product_forcast_id,\r\n                    eproduct_material_id: item[index].product_material_id,\r\n                    year_month: item[index].year_month,\r\n                    in_hand_amount: item[index].in_hand_amount,\r\n                    nmo: item[index].product_amount,\r\n                    total: item[index].buy_price * item[index].product_amount,\r\n                    year: item[index].year,\r\n                    month: item[index].month,\r\n                }\r\n                list_product2.push(temp);\r\n                }\r\n                console.log(list_product2); */\r\n                var check_orderNo = await client.query(_QueryMaterialPlaning.check_order, [order_no,oem_id]);\r\n                console.log(check_orderNo.rows.length)\r\n                if (check_orderNo.rows.length > 0) {\r\n                var count = check_orderNo.rows.length;\r\n                order_no = order_no + \"-\" + count;\r\n                }\r\n                console.log(\"order\", order_no);\r\n                let material_order_id = uuidv4();\r\n                await client.query(_QueryMaterialPlaning.add_order, [\r\n\r\n                    material_order_id,\r\n                    order_no,\r\n                    true,\r\n                    true,\r\n                    user_id,\r\n                    moment(new Date()),\r\n                    null,\r\n                    JSON.stringify(item.material) || null,\r\n                    oem_id\r\n\r\n                ]);\r\n\r\n                \r\n\r\n                \r\n                \r\n            \r\n                resolve(item.material);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n              } catch (ex) {\r\n                reject(ex);\r\n              }\r\n        }))\r\n    }\r\n\r\n\r\n\r\n    async filterMaterialForcast(model){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                let _month = parseInt(model.month) - 1;\r\n                var ym = moment(new Date(model.year, _month));\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try{\r\n                var query = await client.query(_QueryMaterialPlaning.filterMaterialPlaning, [ym.format(\"YYYYMM\"), model.no||null,model.name||null,model.material_type_id||null,model.material_spec_id||null,model.material_size_id||null,model.material_supplier_id||null,model.oem_id]);\r\n                // if (check.rows.length == 0) {\r\n                //     throw Error(\"not found\")\r\n                // } else {\r\n                //     await client.query(_QueryProductPlaning.updateRealOrder, [model.order,user_id,moment(new Date()),check.rows[0].id]);\r\n                // }\r\n                resolve(query.rows)\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n    async filterMaterialConsumption(model){\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect();\r\n                try{\r\n                var qqq = _QueryMaterialPlaning.filterMaterialConsumption.join(\" \")\r\n                var query = await client.query(qqq, [model.year, model.oem_id||null]);\r\n                let temp = (query.rows.length>0)?query.rows.map((m)=>{\r\n                    m.m1 = m.m1||0;\r\n                    m.m2 = m.m2||0;\r\n                    m.m3 = m.m3||0;\r\n                    m.m4 = m.m4||0;\r\n                    m.m5 = m.m5||0;\r\n                    m.m6 = m.m6||0;\r\n                    m.m7 = m.m7||0;\r\n                    m.m8 = m.m8||0;\r\n                    m.m9 = m.m9||0;\r\n                    m.m10 = m.m10||0;\r\n                    m.m11 = m.m11||0;\r\n                    m.m12 = m.m12||0;\r\n                    m.y = m.y||0;\r\n                    return m;\r\n                }).sort((a,b)=>b.y-a.y):[];\r\n                resolve(temp)\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            }catch(ex){\r\n                reject(ex); \r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n    ////////////////////////////////order raw material///////////////////////////////////\r\n\r\n    async filterOrderMaterial(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n    \r\n                let order_no = model.order_no ? model.order_no : null;\r\n                let start_date = model.start_date ? model.start_date : null;\r\n                let end_date = model.end_date ? model.end_date : null;\r\n                // console.log(order_no,start_date,end_date)\r\n                if (start_date === null && end_date === null) {\r\n                  var temp = await client.query(_QueryMaterialPlaning.filter_order, [\r\n                    order_no,model.oem_id\r\n    \r\n                  ]);\r\n    \r\n                  resolve(temp.rows);\r\n    \r\n    \r\n                } else {\r\n                  if (end_date === null) {\r\n                    end_date = moment(start_date).add(23, 'hours').add(59, 'minute').add(59, 'seconds').format();\r\n                  } else {\r\n                    end_date = moment(end_date).add(23, 'hours').add(59, 'minute').add(59, 'seconds').format();\r\n                  }\r\n    \r\n    \r\n                  console.log(\"end_date\", end_date)\r\n                  var temp_ = await client.query(_QueryMaterialPlaning.filter_orderByDate, [\r\n                    order_no,\r\n                    start_date,\r\n                    end_date,\r\n                    model.oem_id\r\n                  ]);\r\n    \r\n                  resolve(temp_.rows);\r\n                }\r\n    \r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n      async updateListMaterial(item) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n    \r\n              try {\r\n               \r\n                if (item.order_id==null) {\r\n                  throw Error(\"order not found\")\r\n                }\r\n                console.log(item);\r\n                \r\n                 await client.query(_QueryMaterialPlaning.updateListMaterial, [  \r\n                  item.order_id ,\r\n                  JSON.stringify(item.body) || null,\r\n                  JSON.stringify(item.header) || null,\r\n                ]);\r\n    \r\n    \r\n                console.log(\"COMMIT\");\r\n               resolve(true);\r\n              } catch (e) {\r\n                await client.query(\"ROLLBACK\");\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n      async cancleOrder_material(id, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                await client.query(_QueryMaterialPlaning.cancle_order, [\r\n                  id,\r\n                  user_id,\r\n                ]);\r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n      async filterordermaterial2(id,user_id,company_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            \r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n    \r\n                  console.log(company_id);\r\n                var tempmatlist = [];\r\n    \r\n                var ordermat = await client.query(_QueryMaterialPlaning.Getordermat, [id]);\r\n    \r\n    \r\n                var matdata = ordermat.rows[0].list_mat;\r\n                \r\n       \r\n    \r\n              \r\n               console.log(matdata.length);\r\n                for (let i = 0; i < matdata.length; i++) {\r\n                  var matid = matdata[i].eproduct_material_id;\r\n                  var nmomat = matdata[i].nmo;\r\n                  //  console.log(nmomat);\r\n                  // console.log(matid);\r\n    \r\n    \r\n                  if (matid != null) {\r\n                    var tempmat = await client.query(_QueryMaterialPlaning.Getminmatlot, [matid]);\r\n                  \r\n                  // console.log(tempmat.rows)\r\n                  if (tempmat.rows.length !=0) {\r\n                        let tempmaterial = tempmat.rows[0];\r\n                    tempmaterial[\"nmo\"] =  nmomat || 0;\r\n                    tempmatlist.push(tempmaterial);\r\n       \r\n                    // console.log(tempmatlist)\r\n    \r\n                  }\r\n                 \r\n    \r\n               \r\n    \r\n    \r\n                  }\r\n              \r\n          \r\n                }\r\n                var finaldata = [];\r\n                var checkmat = [];\r\n                var suppierdata = await client.query(_QueryMaterialPlaning.Getsupier,[company_id] );\r\n         \r\n                for (let c = 0; c < suppierdata.rows.length; c++) {\r\n                  let tempsup = suppierdata.rows[c];\r\n       \r\n                  \r\n                  let tmp_mat = [];\r\n                  for (let j = 0; j < tempmatlist.length; j++) {\r\n                    // console.log(tempmatlist[j].material_supplier_id+\"ms\"+j);\r\n                  \r\n                    // console.log(suppierdata.rows[c].id+\"s\"+c);\r\n            \r\n                    if (tempmatlist[j].material_supplier_id === suppierdata.rows[c].id) {\r\n                      \r\n                      tmp_mat.push(tempmatlist[j])\r\n                    }\r\n                  }\r\n                  tempsup[\"matdatas\"] = tmp_mat;\r\n                  finaldata.push(tempsup);\r\n    \r\n                }\r\n                \r\n             \r\n                 console.log(finaldata);\r\n    \r\n                console.log(\"COMMIT\");\r\n                resolve(finaldata);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync getMaterialByOSL(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(model);\r\n          var temp = await client.query(_QueryMaterialPlaning.GetOSLByID,[model.osl_id]);\r\n          console.log(temp.rows);\r\n          const product = temp.rows[0].partno_list.part_no;\r\n          const data = [];\r\n          for(let p of product){\r\n            var temp2 = await client.query(_QueryMaterialPlaning.GetMaterialByID,[p.material_id]);\r\n            //console.log(temp2.rows[0])\r\n          \r\n            let temp_mat = {\r\n              material_id:p.material_id,\r\n              amount:Math.ceil(p.steel_bar),\r\n              inhand:temp2.rows[0].amount,\r\n              material_no:temp2.rows[0].no,\r\n              material_name:temp2.rows[0].name,\r\n              buy_price:temp2.rows[0].buy_price,\r\n              min_lot:temp2.rows[0].minimum_lot,\r\n              \r\n            }\r\n           var check = data.filter((e)=>{\r\n              return e.material_id === p.material_id\r\n            })\r\n            if (check.length > 0) {\r\n              var index = data.findIndex((e)=>e.material_id === p.material_id);\r\n              data[index].amount = data[index].amount + Math.ceil(p.steel_bar);\r\n              console.log(index)\r\n            }else{\r\n              data.push(temp_mat)\r\n            }\r\n           \r\n          }\r\n          console.log(data);\r\n    \r\n        \r\n          \r\n          resolve(data)\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nasync get_listMAterialPO(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          //console.log(model);\r\n          var getlist_mat = await client.query(_QueryMaterialPlaning.getlist_matetailById,[model.order_id]);\r\n          var list_material = getlist_mat.rows[0].list_material;\r\n          //console.log(list_material);\r\n          var data = [];\r\n          var err_list = [];\r\n          for(let item of list_material){\r\n            var details_mat = await client.query(_QueryMaterialPlaning.GetDetailsByMatID,[item.material_id]);\r\n            var details_sup = await client.query(_QueryMaterialPlaning.GetMSRdetail,[item.material_id]);\r\n            var minimum_order =\"\";\r\n            var lead_time_days =\"\";\r\n            var remark =\"\";\r\n            var buy_price_new =\"\";\r\n            var contact_tel = \"\";\r\n            var contact_fax = \"\";\r\n            var contact_name = \"\";\r\n            var supplier_email= \"\";\r\n            if(details_sup.rows.length === 0){\r\n              err_list.push(\"Material No : \"+details_mat.rows[0].no+\" not have supplier!!!\");\r\n              \r\n            }else{\r\n              minimum_order=details_sup.rows[0].minimum_order || null;\r\n              lead_time_days=details_sup.rows[0].lead_time_days || null;\r\n              remark=details_sup.rows[0].remark || null;\r\n              buy_price_new=details_sup.rows[0].buy_price_new || null;\r\n              contact_tel = details_sup.rows[0].contact_tel || null;\r\n              contact_fax =details_sup.rows[0].contact_fax || null;\r\n              contact_name =details_sup.rows[0].contact_name || null;\r\n              supplier_email= details_sup.rows[0].supplier_email || null;\r\n            }\r\n            console.log(details_mat.rows[0].no,details_sup.rows);\r\n            let temp ={\r\n              material_id:item.material_id,\r\n              material_no:details_mat.rows[0].no,\r\n              material_name:details_mat.rows[0].name,\r\n              material_type:details_mat.rows[0].material_type,\r\n              material_spec:details_mat.rows[0].material_spec,\r\n              material_size:details_mat.rows[0].material_size,\r\n              material_unit:details_mat.rows[0].material_unit,\r\n              \r\n              supplier_id:details_mat.rows[0].material_supplier_id,\r\n              supplier_name:details_mat.rows[0].supplier_name,\r\n              amount:item.amount,\r\n              buy_price:item.buy_price,\r\n              inhand:item.inhand,\r\n              min_lot:item.min_lot,\r\n              nms:item.nms,\r\n              next_order:item.next_order,\r\n              total:item.total,\r\n              minimum_order:minimum_order,\r\n              lead_time_days:lead_time_days,\r\n              remark:remark,\r\n              buy_price_new:buy_price_new,\r\n              contact_tel:contact_tel,\r\n              contact_fax:contact_fax,\r\n              contact_name:contact_name,\r\n              supplier_email:supplier_email,\r\n\r\n            }\r\n            data.push(temp);\r\n          }\r\n          if(err_list.length > 0){\r\n            var err_message =\"\";\r\n            for(let i of err_list){\r\n              err_message += \"<br>\"+i;\r\n            }\r\n            throw Error(err_message);\r\n          }\r\n          console.log(data);\r\n          var supplier = [];\r\n          var data2 = data.reduce((group, item2) => {\r\n            const { supplier_name } = item2;\r\n            const { supplier_id } = item2;\r\n\r\n            const { contact_tel } = item2;\r\n            const { contact_fax } = item2;\r\n            const { contact_name } = item2;\r\n            const { supplier_email } = item2;\r\n         \r\n            let check = supplier.filter((e)=>{\r\n              return e.supplier_id === supplier_id\r\n            })\r\n            if(check.length == 0){\r\n              let temp = {\r\n                supplier_id: supplier_id,\r\n                supplier_name: supplier_name,\r\n                contact_tel: contact_tel,\r\n                contact_fax: contact_fax,\r\n                contact_name: contact_name,\r\n                supplier_email: supplier_email,\r\n\r\n              }\r\n              supplier.push(temp);\r\n            }\r\n            group[supplier_name] = group[supplier_name] || [];\r\n            group[supplier_name].push(item2);\r\n            return group;\r\n          }, {});\r\n        \r\n   \r\n          //var data2 = data.groupBy((supplier_id) => supplier_id);\r\n         // console.log(data);\r\n          //console.log(data2);\r\n          var final_data = {\r\n            list_supplier:supplier,\r\n            list_material:data,\r\n            list_mat_sup_group:data2\r\n          }\r\n          console.log(final_data);\r\n          resolve(final_data);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\nasync sentMailToPO(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var nodemailer = __webpack_require__(/*! nodemailer */ \"nodemailer\");\r\n          var transporter = nodemailer.createTransport({\r\n            service: 'gmail',\r\n            auth: {\r\n              user: 'tttexam123@gmail.com',\r\n              pass: 'TTTExam123456'\r\n            }\r\n          });\r\n          \r\n          var mailOptions = {\r\n            from: 'tttexam123@gmail.com',\r\n            to: 'issara.da61@chandra.ac.th',\r\n            subject: 'TEst sendMail',\r\n            text: 'That was easy! test send mail'\r\n          };\r\n          \r\n          transporter.sendMail(mailOptions, function(error, info){\r\n            if (error) {\r\n              console.log(error);\r\n            } else {\r\n              console.log('Email sent: ' + info.response);\r\n            }\r\n          });\r\n          resolve(false);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports = materialPlaningService\n\n//# sourceURL=webpack:///./app/service/materialPlaningService.js?");

/***/ }),

/***/ "./app/service/materialSTCService.js":
/*!*******************************************!*\
  !*** ./app/service/materialSTCService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerymaterialSTC = __webpack_require__(/*! ../query/querymaterialSTC.json */ \"./app/query/querymaterialSTC.json\");\r\n// const _QueryHandheld = require(\"../query/queryHandheld.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { isNullOrUndefined } = __webpack_require__(/*! util */ \"util\");\r\nconst { throws } = __webpack_require__(/*! assert */ \"assert\");\r\n\r\nclass materialSTCService {\r\n  async addmaterialSTC(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"โมเดลSTC\",model)\r\n            // let id = uuidv4();\r\n            var check = await client.query(_QuerymaterialSTC.chackStcadd, [\r\n              model.month,\r\n              model.year,\r\n              model.company_id,\r\n              model.oem_id,\r\n            ]);\r\n            //console.log(\"เช็ค เดือน ปี\",check)\r\n            if (check.rows.length > 0) {\r\n              // console.log(\"ปีเเล้วเดือนนี้ีมีในระบบเเล้ว\");\r\n              throw Error(\"ปีเเละเดือน ซ้ำในระบบ\");\r\n            }\r\n            // console.log(\"HELLO WOLD\");\r\n\r\n            // console.log(\"OK SAVE A ROWS IN TIME \");\r\n            let id = uuidv4();\r\n            await client.query(_QuerymaterialSTC.addMaterialSTC, [\r\n              id,\r\n              model.month,\r\n              model.year,\r\n              true,\r\n              model.oem_id,\r\n              model.company_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMat_Stc_Month_year(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"หา เดือนปี\",model)\r\n            var gets = await client.query(_QuerymaterialSTC.GetMat_stc_M_Y, [\r\n              model.company_id,\r\n              model.month || null,\r\n              model.year || null,\r\n            ]);\r\n            // var day = gets.rows;\r\n            //   for(let i of day){\r\n            //     i.sum = i.year+i.month;\r\n            //     i.year = parseInt(i.year);\r\n            //     i.month = parseInt(i.month);\r\n            //   }\r\n            //console.log(gets.rows)\r\n            //   const sorter = (a, b) => {\r\n\r\n            //     if (a.year !== b.year){\r\n            //        return a.year - b.year;\r\n            //     }else{\r\n            //        return day.indexOf(a.month) - day.indexOf(b.month);\r\n            //     };\r\n            //  };\r\n\r\n            //  day.sort((a,b)=>parseInt(b.sum)-parseInt(a.sum));\r\n            resolve(gets.rows);\r\n            //console.log(\"COMMIT\",gets);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllMaterialValue(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var gets = await client.query(\r\n              _QuerymaterialSTC.getAllMaterialValue1,\r\n              [id]\r\n            );\r\n            let temp = [];\r\n            //console.log(\"geteee\", gets.rows);\r\n\r\n            if (gets.rows.length > 0) {\r\n              for (\r\n                let index_data = 0;\r\n                index_data < gets.rows.length;\r\n                index_data++\r\n              ) {\r\n                const element = {};\r\n                element[\"id\"] = gets.rows[index_data].id;\r\n                element[\"mortar_silo_1\"] =\r\n                  gets.rows[index_data].stc_cement_powder_1;\r\n                element[\"mortar_silo_2\"] =\r\n                  gets.rows[index_data].stc_cement_powder_2;\r\n                element[\"fly_ash_silo\"] = gets.rows[index_data].stc_fly_ash;\r\n                element[\"mortar_ssm_1\"] =\r\n                  gets.rows[index_data].ssm_cement_powder_1;\r\n                element[\"mortar_ssm_2\"] =\r\n                  gets.rows[index_data].ssm_cement_powder_2;\r\n                element[\"flyAsh_ssm\"] = gets.rows[index_data].ssm_fly_ash;\r\n                element[\"surface_retarder_ssm\"] =\r\n                  gets.rows[index_data].ssm_retarder;\r\n                element[\"sand_ssm\"] = gets.rows[index_data].ssm_coarse_sand;\r\n                element[\"rock_ssm\"] = gets.rows[index_data].ssm_stone;\r\n                element[\"mortar_express\"] = gets.rows[index_data].exp_cement;\r\n                element[\"flyAss_express\"] = gets.rows[index_data].exp_fly_ash;\r\n                element[\"surface_retarder_express\"] =\r\n                  gets.rows[index_data].exp_retarder;\r\n                element[\"sand_express\"] = gets.rows[index_data].exp_coarse_sand;\r\n                element[\"rock_express\"] = gets.rows[index_data].exp_stone;\r\n                element[\"day\"] = gets.rows[index_data].seq;\r\n                element[\"item_material_date_id\"] =\r\n                  gets.rows[index_data].item_material_date_id;\r\n                element[\"mortar_elephant_in\"] =\r\n                  gets.rows[index_data].in_cement_elephan;\r\n                element[\"mortar_eagle_in\"] =\r\n                  gets.rows[index_data].in_cement_eagle;\r\n                element[\"fly_Ash_in\"] = gets.rows[index_data].in_flyash_ton;\r\n                element[\"surface_retarder_in\"] =\r\n                  gets.rows[index_data].in_retarder_ton;\r\n                element[\"number_in\"] = gets.rows[index_data].in_no_number;\r\n                element[\"mortart_in\"] = gets.rows[index_data].in_cement;\r\n                element[\"fly_ash_kg\"] = gets.rows[index_data].in_flyash_kg;\r\n                element[\"rock_3_8_in\"] = gets.rows[index_data].in_stone_3_8;\r\n                element[\"rock_3_4_in\"] = gets.rows[index_data].in_stone_3_4;\r\n                element[\"sand_in\"] = gets.rows[index_data].in_coarse_sand;\r\n                element[\"surface_retarder_in_2\"] =\r\n                  gets.rows[index_data].in_retarder;\r\n                element[\"update_by\"] = gets.rows[index_data].username;\r\n                element[\"remark\"] = gets.rows[index_data].in_remark;\r\n                temp.push(element);\r\n              }\r\n            }\r\n\r\n            //console.log(\"ytytt\",temp);\r\n            resolve(temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateAllStcMaterail(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          await client.query(\"BEGIN\");\r\n          try {\r\n            console.log(\"user_id\", user_id);\r\n            console.log(\"model\", model);\r\n\r\n            if (model.data_list.length > 0) {\r\n              for (const elementData of model.data_list) {\r\n                console.log(\"element\", elementData.update_by);\r\n\r\n                if (isNullOrUndefined(elementData.id)) {\r\n                  await client.query(_QuerymaterialSTC.addMaterialValueByID1, [\r\n                    elementData.item_material_date_id,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.mortar_silo_1.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    true,\r\n                    true,\r\n                    moment(new Date()),\r\n                    user_id,\r\n                    moment(new Date()),\r\n                    user_id,\r\n                    elementData.day,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.mortar_silo_2.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.fly_ash_silo.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.mortar_express\r\n                            .toString()\r\n                            .replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.flyAss_express\r\n                            .toString()\r\n                            .replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.surface_retarder_express\r\n                            .toString()\r\n                            .replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.sand_express.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortar_silo_2)\r\n                      ? Number(\r\n                          elementData.rock_express.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n\r\n                    !isNullOrUndefined(elementData.number_in)\r\n                      ? Number(\r\n                          elementData.number_in.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.fly_ash_kg)\r\n                      ? Number(\r\n                          elementData.fly_ash_kg.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.rock_3_8_in)\r\n                      ? Number(\r\n                          elementData.rock_3_8_in.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.rock_3_4_in)\r\n                      ? Number(\r\n                          elementData.rock_3_4_in.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.sand_in)\r\n                      ? Number(elementData.sand_in.toString().replace(/,/g, \"\"))\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.surface_retarder_in_2)\r\n                      ? Number(\r\n                          elementData.surface_retarder_in_2\r\n                            .toString()\r\n                            .replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.remark)\r\n                      ? elementData.remark\r\n                      : null,\r\n                    !isNullOrUndefined(elementData.mortart_in)\r\n                      ? Number(\r\n                          elementData.mortart_in.toString().replace(/,/g, \"\")\r\n                        )\r\n                      : null,\r\n                  ]);\r\n                  //console.log(\"ใหม่\");\r\n                } else {\r\n                  let i = 0;\r\n                  if (elementData.is_up === true) {\r\n                    console.log(\"เข้าอัปเดด\", elementData.day);\r\n                    await client.query(\r\n                      _QuerymaterialSTC.updateMaterialValueByID1,\r\n                      [\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.mortar_silo_1\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        moment(new Date()),\r\n                        user_id,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.mortar_silo_2\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.fly_ash_silo\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.mortar_express\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.flyAss_express\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.surface_retarder_express\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.sand_express\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortar_silo_2)\r\n                          ? Number(\r\n                              elementData.rock_express\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n\r\n                        !isNullOrUndefined(elementData.number_in)\r\n                          ? Number(\r\n                              elementData.number_in.toString().replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.fly_ash_kg)\r\n                          ? Number(\r\n                              elementData.fly_ash_kg\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.rock_3_8_in)\r\n                          ? Number(\r\n                              elementData.rock_3_8_in\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.rock_3_4_in)\r\n                          ? Number(\r\n                              elementData.rock_3_4_in\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.sand_in)\r\n                          ? Number(\r\n                              elementData.sand_in.toString().replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.surface_retarder_in_2)\r\n                          ? Number(\r\n                              elementData.surface_retarder_in_2\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.remark)\r\n                          ? elementData.remark\r\n                          : null,\r\n                        !isNullOrUndefined(elementData.mortart_in)\r\n                          ? Number(\r\n                              elementData.mortart_in\r\n                                .toString()\r\n                                .replace(/,/g, \"\")\r\n                            )\r\n                          : null,\r\n                        elementData.id,\r\n                      ]\r\n                    );\r\n                  } else {\r\n                    console.log(\"ไม่เข้า\", elementData.day);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.log(\"ROLLBACK\");\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async UpateSSM(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"UpateSSM\", model);\r\n            //*********************** */\r\n            var isProduction = true;\r\n\r\n            var oem_id = null;\r\n            if (isProduction === false) {\r\n              oem_id = \"d937f81b-9743-4c33-886f-e1c575f4cf21\";\r\n            } else {\r\n              oem_id = \"56d89897-b654-43c9-99a5-8ece3dd676b1\";\r\n            }\r\n            //*********************** */\r\n            const array = [];\r\n            //console.log(model);\r\n            for (let i of model) {\r\n              const myArray = i.split(\":::\");\r\n              var temp = {\r\n                mat_id: myArray[0],\r\n                mat_name: myArray[1],\r\n                balance: myArray[2],\r\n                company_id: myArray[3],\r\n              };\r\n              array.push(temp);\r\n            }\r\n            var company_id = array[0].company_id;\r\n            console.log(array);\r\n\r\n            var date = moment(new Date()).format(\"DD\");\r\n            var month = moment(new Date()).format(\"MM\");\r\n            var year = moment(new Date()).format(\"yyyy\");\r\n\r\n            var tempssl = {\r\n              cement_1: 0,\r\n              cement_2: 0,\r\n              fly_ash: 0,\r\n              retarder: 0,\r\n              coarse_sand: 0,\r\n              stone: 0,\r\n            };\r\n            for (let k of array) {\r\n              if (k.mat_id === \"M005\") {\r\n                tempssl.cement_1 = parseInt(k.balance);\r\n                //ปูนผง 1\r\n              } else if (k.mat_id === \"M006\") {\r\n                //ปูนผง 2\r\n                tempssl.cement_2 = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M007\") {\r\n                //Fly Ash\r\n                tempssl.fly_ash = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M009\") {\r\n                //น้ำยาหน่วง\r\n                tempssl.retarder = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M002\") {\r\n                //ทรายหยาบ\r\n                tempssl.coarse_sand = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M001\" || k.mat_id === \"M004\") {\r\n                //หิน 3/4\r\n                tempssl.stone = parseInt(tempssl.stone) + parseInt(k.balance);\r\n              }\r\n\r\n              // tempoDataSSL.push(tempssl);\r\n            }\r\n            console.log(tempssl);\r\n\r\n            var checkMonthYear = await client.query(\r\n              _QuerymaterialSTC.checkMonthYear,\r\n              [parseInt(month), parseInt(year), oem_id, company_id]\r\n            );\r\n            console.log(checkMonthYear.rows);\r\n            if (checkMonthYear.rows.length > 0) {\r\n              //มีปีมีเดือน item materila date\r\n              var checkSSLdata = await client.query(\r\n                _QuerymaterialSTC.checkSSLdata,\r\n                [checkMonthYear.rows[0].id, parseInt(date)]\r\n              );\r\n              console.log(checkSSLdata.rows);\r\n              if (checkSSLdata.rows.length > 0) {\r\n                //มีข้อมูลในปีในเดือน\r\n                await client.query(_QuerymaterialSTC.updateMatSSM, [\r\n                  oem_id,\r\n                  company_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  parseInt(date),\r\n                  tempssl.cement_1,\r\n                  tempssl.cement_2,\r\n                  tempssl.fly_ash,\r\n                  tempssl.retarder,\r\n                  tempssl.coarse_sand,\r\n                  tempssl.stone,\r\n                  checkSSLdata.rows[0].id,\r\n                ]);\r\n                //อัพเดต ข้อมูลลง item materila value\r\n              } else {\r\n                //มีปีมีเดือน item materila date แต่ไม่มี data\r\n\r\n                var id_ssm = uuidv4();\r\n                await client.query(_QuerymaterialSTC.insertMatSSM, [\r\n                  id_ssm,\r\n                  checkMonthYear.rows[0].id,\r\n                  oem_id,\r\n                  company_id,\r\n                  true,\r\n                  true,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  parseInt(date),\r\n                  tempssl.cement_1,\r\n                  tempssl.cement_2,\r\n                  tempssl.fly_ash,\r\n                  tempssl.retarder,\r\n                  tempssl.coarse_sand,\r\n                  tempssl.stone,\r\n                ]);\r\n              }\r\n            } else {\r\n              var id_yearmonth = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertYearMonthSSM, [\r\n                id_yearmonth,\r\n                true,\r\n                oem_id,\r\n                company_id,\r\n                parseInt(month),\r\n                parseInt(year),\r\n              ]);\r\n\r\n              var id_ssm = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertMatSSM, [\r\n                id_ssm,\r\n                id_yearmonth,\r\n                oem_id,\r\n                company_id,\r\n                true,\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                parseInt(date),\r\n                tempssl.cement_1,\r\n                tempssl.cement_2,\r\n                tempssl.fly_ash,\r\n                tempssl.retarder,\r\n                tempssl.coarse_sand,\r\n                tempssl.stone,\r\n              ]);\r\n\r\n              //ไม่มีปี ไม่มีเดือน\r\n\r\n              //เพิ่ม ปี เดือน ลง ใน item materila date\r\n\r\n              //เพิ่ม ข้อมูลลงใน  item materila value\r\n            }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.log(\"error\", e);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async UpdateDaily(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"UpdateDaily\", model);\r\n            //*********************** */\r\n            var isProduction = true;\r\n\r\n            var oem_id = null;\r\n            if (isProduction === false) {\r\n              oem_id = \"d937f81b-9743-4c33-886f-e1c575f4cf21\";\r\n            } else {\r\n              oem_id = \"56d89897-b654-43c9-99a5-8ece3dd676b1\";\r\n            }\r\n            //*********************** */\r\n            const array = [];\r\n            //console.log(model);\r\n            for (let i of model) {\r\n              //const myArray = i.a.split(\":::\");\r\n              const myArray = i.split(\":::\");\r\n              var temp = {\r\n                mat_id: myArray[0],\r\n                mat_name: myArray[1],\r\n                balance: myArray[2],\r\n                company_id: myArray[3],\r\n              };\r\n              array.push(temp);\r\n            }\r\n            var company_id = array[0].company_id;\r\n            //  var company_id = \"4b51aaa7-13b3-4a60-8751-322baed1a29e\";\r\n            console.log(array);\r\n\r\n            var date =  moment(new Date()).format(\"DD\");\r\n            var month = moment(new Date()).format(\"MM\");\r\n            var year = moment(new Date()).format(\"yyyy\");\r\n\r\n         \r\n            const m005 = array.filter((element)=>{\r\n              return element.mat_id === \"M005\";\r\n            }).reduce((element1, element2) => {\r\n              element1 += parseInt(element2.balance); \r\n              return element1;\r\n          },0)\r\n         \r\n          const m006 = array.filter((element)=>{\r\n            return element.mat_id === \"M006\";\r\n          }).reduce((element1, element2) => {\r\n            element1 += parseInt(element2.balance); \r\n            return element1;\r\n        },0)\r\n\r\n          const m007 =array.filter((element)=>{\r\n            return element.mat_id === \"M007\";\r\n          }).reduce((element1, element2) => {\r\n            element1 += parseInt(element2.balance); \r\n            return element1;\r\n        },0)\r\n\r\n          const m009 =array.filter((element)=>{\r\n            return element.mat_id === \"M009\";\r\n          }).reduce((element1, element2) => {\r\n            element1 += parseInt(element2.balance); \r\n            return element1;\r\n        },0)\r\n            /* for (let k of array) {\r\n              if (k.mat_id === \"M005\") {\r\n                tempdaily.du_mortar_elephant = parseInt(k.balance);\r\n                //ปูนช้าง\r\n              } else if (k.mat_id === \"M006\") {\r\n                //ปูนอินทรีย์\r\n                tempdaily.du_mortar_eagle = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M007\") {\r\n                //Fly Ash\r\n                tempdaily.du_fly_ash = parseInt(k.balance);\r\n              } else if (k.mat_id === \"M009\") {\r\n                //น้ำยาหน่วง\r\n                tempdaily.du_retarder = parseInt(k.balance);\r\n              }\r\n            } */\r\n            var tempdaily = {\r\n              du_mortar_elephant:parseInt(m005) || 0,\r\n              du_mortar_eagle: parseInt(m006) || 0,\r\n              du_fly_ash: parseInt(m007) ||0,\r\n              du_retarder:parseInt(m009) ||  0,\r\n            };\r\n            console.log(\"tempdaily\",tempdaily);\r\n\r\n            var checkMonthYear = await client.query(\r\n              _QuerymaterialSTC.checkMonthYear,\r\n              [parseInt(month), parseInt(year), oem_id, company_id]\r\n            );\r\n            console.log(checkMonthYear.rows);\r\n            if (checkMonthYear.rows.length > 0) {\r\n              //มีปีมีเดือน item materila date\r\n              var checkSSLdata = await client.query(\r\n                _QuerymaterialSTC.checkSSLdata,\r\n                [checkMonthYear.rows[0].id, parseInt(date)]\r\n              );\r\n              console.log(checkSSLdata.rows);\r\n              if (checkSSLdata.rows.length > 0) {\r\n                //มีข้อมูลในปีในเดือน\r\n\r\n                await client.query(_QuerymaterialSTC.updateMatDaily, [\r\n                  oem_id,\r\n                  company_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  parseInt(date),\r\n                  tempdaily.du_mortar_elephant,\r\n                  tempdaily.du_mortar_eagle,\r\n                  tempdaily.du_fly_ash,\r\n                  tempdaily.du_retarder,\r\n                  checkSSLdata.rows[0].id,\r\n                ]);\r\n                //อัพเดต ข้อมูลลง item materila value\r\n              } else {\r\n                //มีปีมีเดือน item materila date แต่ไม่มี data\r\n\r\n                var id_ssm = uuidv4();\r\n\r\n                await client.query(_QuerymaterialSTC.insertMatDaily, [\r\n                  id_ssm,\r\n                  checkMonthYear.rows[0].id,\r\n                  oem_id,\r\n                  company_id,\r\n                  true,\r\n                  true,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  parseInt(date),\r\n                  tempdaily.du_mortar_elephant,\r\n                  tempdaily.du_mortar_eagle,\r\n                  tempdaily.du_fly_ash,\r\n                  tempdaily.du_retarder,\r\n                ]);\r\n              }\r\n            } else {\r\n              var id_yearmonth = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertYearMonthSSM, [\r\n                id_yearmonth,\r\n                true,\r\n                oem_id,\r\n                company_id,\r\n                parseInt(month),\r\n                parseInt(year),\r\n              ]);\r\n\r\n              var id_ssm = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertMatDaily, [\r\n                id_ssm,\r\n                id_yearmonth,\r\n                oem_id,\r\n                company_id,\r\n                true,\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                parseInt(date),\r\n                tempdaily.du_mortar_elephant,\r\n                tempdaily.du_mortar_eagle,\r\n                tempdaily.du_fly_ash,\r\n                tempdaily.du_retarder,\r\n              ]);\r\n\r\n              //ไม่มีปี ไม่มีเดือน\r\n\r\n              //เพิ่ม ปี เดือน ลง ใน item materila date\r\n\r\n              //เพิ่ม ข้อมูลลงใน  item materila value\r\n            }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.log(\"error\", e);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllMaterialValueByYearMonth(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var gets = await client.query(_QuerymaterialSTC.GetMat_stc_M_Y, [\r\n              model.company_id,\r\n              model.month || null,\r\n              model.year || null,\r\n            ]);\r\n\r\n            console.log(model.month);\r\n            if (gets.rows.length > 0) {\r\n              var gets_data = await client.query(\r\n                _QuerymaterialSTC.getAllMaterialValue1,\r\n                [gets.rows[0].id]\r\n              );\r\n              let temp = [];\r\n\r\n              if (gets_data.rows.length > 0) {\r\n                for (\r\n                  let index_data = 0;\r\n                  index_data < gets_data.rows.length;\r\n                  index_data++\r\n                ) {\r\n                  const element = {};\r\n                  element[\"id\"] = gets_data.rows[index_data].id;\r\n                  element[\"mortar_silo_1\"] =\r\n                    gets_data.rows[index_data].stc_cement_powder_1;\r\n                  element[\"mortar_silo_2\"] =\r\n                    gets_data.rows[index_data].stc_cement_powder_2;\r\n                  element[\"fly_ash_silo\"] =\r\n                    gets_data.rows[index_data].stc_fly_ash;\r\n                  element[\"mortar_ssm_1\"] =\r\n                    gets_data.rows[index_data].ssm_cement_powder_1;\r\n                  element[\"mortar_ssm_2\"] =\r\n                    gets_data.rows[index_data].ssm_cement_powder_2;\r\n                  element[\"flyAsh_ssm\"] =\r\n                    gets_data.rows[index_data].ssm_fly_ash;\r\n                  element[\"surface_retarder_ssm\"] =\r\n                    gets_data.rows[index_data].ssm_retarder;\r\n                  element[\"sand_ssm\"] =\r\n                    gets_data.rows[index_data].ssm_coarse_sand;\r\n                  element[\"rock_ssm\"] = gets_data.rows[index_data].ssm_stone;\r\n                  element[\"mortar_express\"] =\r\n                    gets_data.rows[index_data].exp_cement;\r\n                  element[\"flyAss_express\"] =\r\n                    gets_data.rows[index_data].exp_fly_ash;\r\n                  element[\"surface_retarder_express\"] =\r\n                    gets_data.rows[index_data].exp_retarder;\r\n                  element[\"sand_express\"] =\r\n                    gets_data.rows[index_data].exp_coarse_sand;\r\n                  element[\"rock_express\"] =\r\n                    gets_data.rows[index_data].exp_stone;\r\n                  element[\"day\"] = gets_data.rows[index_data].seq;\r\n                  element[\"item_material_date_id\"] =\r\n                    gets_data.rows[index_data].item_material_date_id;\r\n                  element[\"mortar_elephant_in\"] =\r\n                    gets_data.rows[index_data].in_cement_elephan;\r\n                  element[\"mortar_eagle_in\"] =\r\n                    gets_data.rows[index_data].in_cement_eagle;\r\n                  element[\"fly_Ash_in\"] =\r\n                    gets_data.rows[index_data].in_flyash_ton;\r\n                  element[\"surface_retarder_in\"] =\r\n                    gets_data.rows[index_data].in_retarder_ton;\r\n                  element[\"number_in\"] =\r\n                    gets_data.rows[index_data].in_no_number;\r\n                  element[\"mortart_in\"] = gets_data.rows[index_data].in_cement;\r\n                  element[\"fly_ash_kg\"] =\r\n                    gets_data.rows[index_data].in_flyash_kg;\r\n                  element[\"rock_3_8_in\"] =\r\n                    gets_data.rows[index_data].in_stone_3_8;\r\n                  element[\"rock_3_4_in\"] =\r\n                    gets_data.rows[index_data].in_stone_3_4;\r\n                  element[\"sand_in\"] =\r\n                    gets_data.rows[index_data].in_coarse_sand;\r\n                  element[\"surface_retarder_in_2\"] =\r\n                    gets_data.rows[index_data].in_retarder;\r\n                  element[\"update_by\"] = gets_data.rows[index_data].username;\r\n                  element[\"remark\"] = gets_data.rows[index_data].in_remark;\r\n                  temp.push(element);\r\n                }\r\n\r\n                resolve(temp);\r\n              }\r\n            }\r\n\r\n            resolve(\"ไม่พบปี หรือ เดือน ที่เลือก\");\r\n          } catch (e) {\r\n            console.log(\"error\", e);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async UpdateTiger(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"UpdateTiger\", model);\r\n            //*********************** */\r\n            var isProduction = true;\r\n\r\n            var oem_id = null;\r\n            if (isProduction === false) {\r\n              oem_id = \"d937f81b-9743-4c33-886f-e1c575f4cf21\";\r\n            } else {\r\n              oem_id = \"56d89897-b654-43c9-99a5-8ece3dd676b1\";\r\n            }\r\n            //*********************** */\r\n            const array = [];\r\n            //console.log(model);\r\n            for (let i of model) {\r\n              //const myArray = i.a.split(\":::\");\r\n              const myArray = i.split(\":::\");\r\n\r\n              var temp = {\r\n                Plate1: myArray[0],\r\n                InboundDate: myArray[1],\r\n                InboundWeight: myArray[2],\r\n                OutboundDate: myArray[3],\r\n                OutboundWeight: myArray[4],\r\n                GrossWeight: myArray[5],\r\n                KgPerTradingUnit: myArray[6],\r\n                Remark1: myArray[7],\r\n                company_id: myArray[8],\r\n              };\r\n\r\n              if (myArray[7] != \"\" && myArray[0] != \"\") {\r\n                array.push(temp);\r\n                console.log(myArray[7]);\r\n              }\r\n            }\r\n            //  var company_id = array[8].company_id;\r\n            //  var company_id = \"4b51aaa7-13b3-4a60-8751-322baed1a29e\";\r\n             console.log(array);\r\n            let bill_list = [];\r\n            for (const tiger of array) {\r\n             \r\n              var bill = await client.query(_QuerymaterialSTC.findbill, [\r\n                tiger.Remark1,\r\n                tiger.Plate1,\r\n              ]);\r\n            \r\n              if (bill.rows.length === 1) {\r\n                /* console.log(\"bill\",bill.rows); */\r\n                let element_Date_List = {};\r\n                element_Date_List[\"bill_id\"] = bill.rows[0].bill_id;\r\n                element_Date_List[\"Plate1\"] = tiger.Plate1;\r\n                element_Date_List[\"InboundDate\"] = moment(new Date(tiger.InboundDate));\r\n                element_Date_List[\"InboundWeight\"] = parseInt(tiger.InboundWeight);\r\n                element_Date_List[\"OutboundDate\"] = moment(new Date(tiger.OutboundDate));\r\n                element_Date_List[\"OutboundWeight\"] = parseInt(tiger.OutboundWeight);\r\n                element_Date_List[\"GrossWeight\"] = parseInt(tiger.GrossWeight);\r\n                element_Date_List[\"KgPerTradingUnit\"] = parseInt(tiger.KgPerTradingUnit);\r\n                element_Date_List[\"Remark1\"] = tiger.Remark1;\r\n                element_Date_List[\"company_id\"] = tiger.company_id;\r\n                \r\n                bill_list.push(element_Date_List);\r\n\r\n                //console.log(bill.rows);\r\n              }\r\n            }\r\n\r\n            console.log(\"bill_list\",bill_list);\r\n\r\n            for (const tiger_data of bill_list) {\r\n              /* if(tiger_data.bill_id ===\"12ce486d-120f-477d-86b5-6a0862eb331a\"){\r\n\r\n                console.log(\"++++\",Number(tiger_data.GrossWeight/tiger_data.KgPerTradingUnit).toFixed(2) );\r\n              } */\r\n               await client.query(_QuerymaterialSTC.update_weight_tiger, [\r\n                Number(tiger_data.GrossWeight/tiger_data.KgPerTradingUnit).toFixed(2) ,\r\n                0,\r\n                tiger_data.OutboundWeight - tiger_data.InboundWeight,\r\n                moment(new Date()),\r\n                tiger_data.bill_id,\r\n              ]);\r\n\r\n            }\r\n            \r\n/* \r\n            \r\n             weight\r\ncompressive_strength\r\nweight_meter\r\nweight_meter_updated\r\nid\r\n            \r\n            compressive_strength\r\n            weight_meter\r\n            weight_meter_updated \r\n\r\n            var date =moment(new Date()).format('DD');\r\n              var month =moment(new Date()).format('MM');\r\n              var year = moment(new Date()).format('yyyy');\r\n      \r\n              var tempdaily = {\r\n                du_mortar_elephant:0,\r\n                du_mortar_eagle:0,\r\n                du_fly_ash:0,\r\n                du_retarder:0,\r\n         \r\n                \r\n              }\r\n              for(let k of array){\r\n                       \r\n                      if(k.mat_id === \"M005\"){\r\n                        tempdaily.du_mortar_elephant = parseInt(k.balance);\r\n                        //ปูนช้าง\r\n                      }else if(k.mat_id === \"M006\"){\r\n                        //ปูนอินทรีย์\r\n                        tempdaily.du_mortar_eagle = parseInt(k.balance);\r\n                      }else if(k.mat_id === \"M007\"){\r\n                        //Fly Ash\r\n                        tempdaily.du_fly_ash = parseInt(k.balance);\r\n                      }else if(k.mat_id === \"M009\"){\r\n                        //น้ำยาหน่วง\r\n                        tempdaily.du_retarder = parseInt(k.balance);\r\n                      }\r\n\r\n              \r\n               \r\n                }\r\n                console.log(tempdaily)\r\n\r\n                var checkMonthYear = await client.query(_QuerymaterialSTC.checkMonthYear,[parseInt(month),parseInt(year),oem_id,company_id]);\r\n                console.log(checkMonthYear.rows);\r\n                if(checkMonthYear.rows.length > 0){\r\n                  //มีปีมีเดือน item materila date\r\n                  var checkSSLdata = await client.query(_QuerymaterialSTC.checkSSLdata,[checkMonthYear.rows[0].id,parseInt(date)]);\r\n                  console.log(checkSSLdata.rows);\r\n                  if(checkSSLdata.rows.length > 0){\r\n                      //มีข้อมูลในปีในเดือน \r\n                \r\n\r\n                      await client.query(_QuerymaterialSTC.updateMatDaily,[\r\n                        oem_id,\r\n                        company_id,\r\n                        moment(new Date()),\r\n                        user_id,\r\n                        parseInt(date),\r\n                        tempdaily.du_mortar_elephant,\r\n                        tempdaily.du_mortar_eagle,\r\n                        tempdaily.du_fly_ash,\r\n                        tempdaily.du_retarder,\r\n                        checkSSLdata.rows[0].id,\r\n                      ])\r\n                      //อัพเดต ข้อมูลลง item materila value\r\n              \r\n                \r\n              }else{\r\n                //มีปีมีเดือน item materila date แต่ไม่มี data\r\n \r\n                var id_ssm = uuidv4();\r\n           \r\n\r\n                await client.query(_QuerymaterialSTC.insertMatDaily,[\r\n                  id_ssm,\r\n                  checkMonthYear.rows[0].id,\r\n                  oem_id,\r\n                  company_id,\r\n                  true,\r\n                  true,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  moment(new Date()),\r\n                  user_id,\r\n                  parseInt(date),\r\n                  tempdaily.du_mortar_elephant,\r\n                  tempdaily.du_mortar_eagle,\r\n                  tempdaily.du_fly_ash,\r\n                  tempdaily.du_retarder,\r\n                ])\r\n              \r\n\r\n\r\n\r\n              }\r\n\r\n\r\n             \r\n            \r\n            \r\n            \r\n            \r\n            }else{\r\n                var id_yearmonth = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertYearMonthSSM,[\r\n                id_yearmonth,\r\n                true,\r\n                oem_id,\r\n                company_id,\r\n                parseInt(month),\r\n                parseInt(year)\r\n              ]);\r\n\r\n              var id_ssm = uuidv4();\r\n              await client.query(_QuerymaterialSTC.insertMatDaily,[\r\n                id_ssm,\r\n                id_yearmonth,\r\n                oem_id,\r\n                company_id,\r\n                true,\r\n                true,\r\n                moment(new Date()),\r\n                user_id,\r\n                moment(new Date()),\r\n                user_id,\r\n                parseInt(date),\r\n                tempdaily.du_mortar_elephant,\r\n                tempdaily.du_mortar_eagle,\r\n                tempdaily.du_fly_ash,\r\n                tempdaily.du_retarder,\r\n              ])\r\n             \r\n\r\n                //ไม่มีปี ไม่มีเดือน \r\n               \r\n                //เพิ่ม ปี เดือน ลง ใน item materila date\r\n\r\n                //เพิ่ม ข้อมูลลงใน  item materila value\r\n           }*/\r\n            /*   console.log(\"COMMIT\");*/\r\n            resolve(true);\r\n\r\n            /*   throw Error(\"test\"); */\r\n          } catch (e) {\r\n            console.log(\"error\", e);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = materialSTCService;\r\n\n\n//# sourceURL=webpack:///./app/service/materialSTCService.js?");

/***/ }),

/***/ "./app/service/materialService.js":
/*!****************************************!*\
  !*** ./app/service/materialService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryMaterial = __webpack_require__(/*! ../query/queryMaterial.json */ \"./app/query/queryMaterial.json\");\r\nconst _QueryHandheld = __webpack_require__(/*! ../query/queryHandheld.json */ \"./app/query/queryHandheld.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass materialService {\r\n  async addMaterial(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          await client.query(\"BEGIN\");\r\n          try {\r\n         \r\n            var checkNo = await client.query(_QueryMaterial.checkNoMaterial, [\r\n              model.no,\r\n              model.oem_id\r\n              \r\n            ]);\r\n            if(checkNo.rows.length > 0){\r\n              throw Error(\"System : Material No has already\");\r\n            }\r\n            let material_id = uuidv4();\r\n            await client.query(_QueryMaterial.add, [\r\n              material_id,\r\n              model.no,\r\n              model.name,\r\n              model.material_type_id || null,\r\n              model.material_spec_id || null,\r\n              model.material_size_id || null,\r\n              model.buy_price,\r\n              model.material_supplier_id || null,\r\n              model.material_unit_id || null,\r\n              model.amount || null,\r\n              model.description || null,\r\n              model.remark || null,\r\n              model.image || null,\r\n              model.image_name || null,\r\n              model.imaget_path || null,\r\n              user_id,\r\n              model.oem_id || null,\r\n              model.is_active || null,\r\n              true,\r\n              false,\r\n              model.weight_piece,\r\n              model.supplier_lead_time || null,\r\n              model.minimum_lot || null,\r\n              model.minimum_order_supplier || null,\r\n              moment(new Date()),\r\n              moment(new Date()),\r\n              model.coil_weight\r\n            ]);\r\n\r\n            for(var k =0; k < model.supplier_data.length; k++){\r\n              console.log(model.supplier_data[k])\r\n              /* model.supplier_data[k].is_active = false;\r\n            if(model.supplier_data[k].supplier_id === model.material_supplier_id){\r\n              model.supplier_data[k].is_active = true;\r\n            } */\r\n                let material_supplier_id = uuidv4();   \r\n            \r\n                await client.query(_QueryMaterial.addMaterialSupplier, [\r\n                  material_supplier_id, \r\n                  material_id, \r\n                  model.supplier_data[k].supplier_id, \r\n                  model.supplier_data[k].is_active, \r\n                  model.supplier_data[k].sort, \r\n                  model.supplier_data[k].buy_price,\r\n                  model.supplier_data[k].create_date,\r\n                  true,\r\n                  model.supplier_data[k].minimum_order,\r\n                  model.supplier_data[k].lead_time_days,\r\n                  model.supplier_data[k].remark,\r\n                  model.supplier_data[k].mat_cycle_time\r\n                ]);  \r\n          }\r\n          await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.log(\"ROLLBACK\");\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n           \r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async updateMaterial(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n    \r\n          await client.connect();\r\n          await client.query(\"BEGIN\");\r\n          try {\r\n            \r\n            var checkNo = await client.query(_QueryMaterial.checkNoMaterial_edit, [\r\n              model.no,\r\n              model.id,\r\n              model.oem_id\r\n            ]);\r\n            if (checkNo.rows.length > 0) {\r\n              throw Error(\"System : Material No has already\");\r\n       \r\n            }\r\n            //console.log(model.supplier_data)\r\n   \r\n            //console.log(model.supplier_data)\r\n\r\n\r\n            var check_supplier_del = await client.query(_QueryMaterial.check_supplier_del,[model.id]);\r\n                   \r\n                                for(var e = 0; e < check_supplier_del.rows.length; e++){\r\n                                    let check =  model.supplier_data.filter((element)=>{ \r\n                                        return (element.supplier_id === check_supplier_del.rows[e].supplier_id && element.sort === check_supplier_del.rows[e].sort);\r\n                                    })\r\n                                    if(check.length > 0){\r\n                                      //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n                                    }else{\r\n                                        await client.query(_QueryMaterial.DeleteMSforUpdate,[check_supplier_del.rows[e].material_id, check_supplier_del.rows[e].supplier_id]); \r\n                                        //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n                                    }\r\n                                   \r\n                                }            \r\n\r\n\r\n                               \r\n                  \r\n                           \r\n                         for(var k =0; k < model.supplier_data.length; k++){\r\n                         /*  model.supplier_data[k].is_active = false;\r\n                        if(model.supplier_data[k].supplier_id === model.material_supplier_id && model.supplier_data[k].sort === model.material_supplier_sort) {\r\n                          model.supplier_data[k].is_active = true;\r\n                        } */\r\n                          var check_MS = await client.query(_QueryMaterial.checkMaterialSupplier,[model.id, model.supplier_data[k].supplier_id]);\r\n                          console.log(\"test\",check_MS.rows) \r\n                         if(check_MS.rows.length > 0){\r\n                            //console.log(\"helllo\")\r\n                            await client.query(_QueryMaterial.updateMaerialSupplier,[check_MS.rows[0].id,\r\n                               model.supplier_data[k].buy_price, \r\n                                model.supplier_data[k].is_active,\r\n                                model.supplier_data[k].sort,\r\n                                model.supplier_data[k].create_date,\r\n                                model.supplier_data[k].minimum_order,\r\n                                model.supplier_data[k].lead_time_days,\r\n                                model.supplier_data[k].remark,\r\n                                model.supplier_data[k].mat_cycle_time,\r\n                              ]);\r\n                            //console.log(\"helllo1\")\r\n                         }else{\r\n                            let material_supplier_id = uuidv4();   \r\n                            await client.query(_QueryMaterial.addMaterialSupplier, [material_supplier_id,\r\n                               model.id,\r\n                                model.supplier_data[k].supplier_id, \r\n                                model.supplier_data[k].is_active,\r\n                                 model.supplier_data[k].sort,\r\n                                  model.supplier_data[k].buy_price,\r\n                                  model.supplier_data[k].create_date,\r\n                                  true,\r\n                                  model.supplier_data[k].minimum_order,\r\n                                  model.supplier_data[k].lead_time_days,\r\n                                  model.supplier_data[k].remark,\r\n                                   model.supplier_data[k].mat_cycle_time\r\n                                  ]);  \r\n                         }\r\n                        \r\n                          \r\n                      \r\n                      }\r\n                      let temp2 = await client.query(_QueryMaterial.get_supplier, [\r\n                        model.id,\r\n                      ]);\r\n                      temp2.rows.sort((a,b) => a.sort - b.sort);\r\n                      let sort = 1;\r\n                    for(let item of temp2.rows){\r\n                      item.sort = sort;\r\n                      await client.query(_QueryMaterial.update_sort,[item.id,item.sort]);\r\n                      sort++;\r\n                    }\r\n            \r\n            \r\n\r\n            await client.query(_QueryMaterial.updateNoAmount, [\r\n              model.no,\r\n              model.name || null,\r\n              model.material_type_id || null,\r\n              model.material_spec_id || null,\r\n              model.material_size_id || null,\r\n              model.buy_price || null,\r\n              model.material_supplier_id || null,\r\n              model.material_unit_id || null,\r\n     \r\n              model.description || null,\r\n              model.remark || null,\r\n              model.image || null,\r\n              model.image_name || null,\r\n              model.imaget_path || null,\r\n              user_id,\r\n              model.oem_id || null,\r\n              model.is_active || null,\r\n              moment(new Date()),\r\n              model.weight_piece || null,\r\n              model.supplier_lead_time || null,\r\n              model.minimum_lot || null,\r\n              model.minimum_order_supplier || null,\r\n              model.id,\r\n              model.coil_weight\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delMaterial(material_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryMaterial.del, [material_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async findByIdMaterial(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryMaterial.findById, [\r\n              material_id,\r\n            ]);\r\n            let temp2 = await client.query(_QueryMaterial.get_supplier, [\r\n              material_id,\r\n            ]);\r\n            for(let i of temp2.rows){\r\n              if(i.create_date === null){\r\n                i.create_date = moment(new Date());\r\n              }\r\n            }\r\n            temp.rows[0].supplier_data = temp2.rows;\r\n            console.log(temp2.rows)\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByNoMaterial(no, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryMaterial.findByNo, [\r\n              no,\r\n              oem_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found!\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateMaterial_desktop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryMaterial.update_material_desktop, [\r\n              model.no,\r\n              model.amount || null,\r\n              model.oem_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addLogMaterialAmount_desktop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let id = uuidv4();\r\n            await client.query(_QueryMaterial.insert_log_material_edit_mount, [\r\n              id,\r\n              model.material_id || null,\r\n              model.user_id || null,\r\n              model.edit_type || null,\r\n              model.amount || null,\r\n              moment(new Date()),\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkNameMaterial(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var query = await client.query(_QueryMaterial.checkNameMaterial, [\r\n              model.name,\r\n              model.oem_id,\r\n            ]);\r\n            let temp = query.rows.length > 0 ? true : false;\r\n            resolve(temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async filterMaterial(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let no = model.no ? model.no : null,\r\n              name = model.name ? model.name : null,\r\n              material_type_id = model.material_type_id\r\n                ? model.material_type_id\r\n                : null,\r\n              material_spec_id = model.material_spec_id\r\n                ? model.material_spec_id\r\n                : null,\r\n              material_size_id = model.material_size_id\r\n                ? model.material_size_id\r\n                : null,\r\n              material_supplier_id = model.material_supplier_id\r\n                ? model.material_supplier_id\r\n                : null;\r\n                \r\n               console.log(\"ลอตมินนน\",model.minimum_lot);\r\n            if(model.with_oem === true){\r\n              var temp = await client.query(_QueryMaterial.filter, [\r\n                no,\r\n                name,\r\n                material_type_id,\r\n                material_spec_id,\r\n                material_size_id,\r\n                material_supplier_id,\r\n                model.oem_id || null,\r\n                model.minimum_lot || null\r\n              ]);\r\n              var tempData = temp.rows;\r\n              console.log(tempData)\r\n              for(let i =0; i < tempData.length;i++){\r\n                let temp2 = await client.query(_QueryMaterial.get_supplier_active, [\r\n                  tempData[i].id,\r\n                ]);\r\n                if(temp2.rows.length > 0){\r\n                  console.log(\"INNN\")\r\n                  tempData[i].minimum_order = temp2.rows[0].minimum_order;\r\n                }else{\r\n                  tempData[i].minimum_order = null;\r\n                }\r\n              }\r\n              console.log(tempData)\r\n              resolve(tempData);\r\n             \r\n            }else{\r\n              var temp_with_out_oem = await client.query(_QueryMaterial.filterwittoutOEM, [\r\n                no,\r\n                name,\r\n                material_type_id,\r\n                material_spec_id,\r\n                material_size_id,\r\n                material_supplier_id,\r\n                model.company_id,\r\n                model.minimum_lot || null\r\n                //model.oem_id || null,\r\n              ]);\r\n              var tempData = temp_with_out_oem.rows;\r\n              for(let i =0; i < tempData.length;i++){\r\n                let temp2 = await client.query(_QueryMaterial.get_supplier_active, [\r\n                  tempData[i].id,\r\n                ]);\r\n                if(temp2.rows.length > 0){\r\n                  tempData[i].minimum_order = temp2.rows[0].minimum_order;\r\n                }else{\r\n                  tempData[i].minimum_order = null;\r\n                }\r\n              }\r\n              resolve(tempData);\r\n            }\r\n           \r\n\r\n           \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelMaterial(modelSheetArr, user_id, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempRes = [];\r\n          await client.connect();\r\n          await client.query(\"BEGIN\");\r\n          try{\r\n\r\n          \r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              var isUpdate = false;\r\n\r\n              model.oem_id = oem_id;\r\n              model.is_active = true;\r\n              (model.no = model.no ? model.no : null),\r\n                (model.name = model.name ? model.name : null),\r\n                (model.material_type_id = model.material_type_id\r\n                  ? model.material_type_id\r\n                  : null),\r\n                (model.material_spec_id = model.material_spec_id\r\n                  ? model.material_spec_id\r\n                  : null),\r\n                (model.material_size_id = model.material_size_id\r\n                  ? model.material_size_id\r\n                  : null),\r\n                (model.buy_price = model.buy_price ? model.buy_price : 0),\r\n                (model.material_supplier_id = model.material_supplier_id\r\n                  ? model.material_supplier_id\r\n                  : null),\r\n                (model.material_unit_id = model.material_unit_by_piece\r\n                  ? material_unit_id.Piece\r\n                  : material_unit_id.Weight),\r\n                (model.amount = model.amount ? model.amount : 0),\r\n                (model.description = model.description\r\n                  ? model.description\r\n                  : null),\r\n                (model.weight_piece = model.weight_piece\r\n                  ? model.weight_piece\r\n                  : null),\r\n                (model.supplier_lead_time = model.supplier_lead_time\r\n                  ? model.supplier_lead_time\r\n                  : null),\r\n                (model.minimum_lot = model.minimum_lot\r\n                  ? model.minimum_lot\r\n                  : null),\r\n                (model.minimum_order_supplier = model.minimum_order_supplier\r\n                  ? model.minimum_order_supplier\r\n                  : null),\r\n                (model.remark = model.remark ? model.remark : null),\r\n                (model.image = model.image ? model.image : null),\r\n                (model.image_name = model.image_name ? model.image_name : null),\r\n                (model.imaget_path = model.imaget_path\r\n                  ? model.imaget_path\r\n                  : null);\r\n              try {\r\n                var query = await client.query(\r\n                  _QueryMaterial.checkNoMaterial2,\r\n                  [model.no, model.oem_id]\r\n                );\r\n                if (query.rows.length > 0) {\r\n                  isUpdate = true;\r\n                  // throw Error(\"already material no\");\r\n                }\r\n                //-------------------------------------\r\n                var findMaterialTypeByName = await client.query(\r\n                  _QueryMaterial.findMaterialTypeByName,\r\n                  [model.material_type_name]\r\n                );\r\n                if (findMaterialTypeByName.rows.length > 0) {\r\n                  model.material_type_id = findMaterialTypeByName.rows[0].id;\r\n                } else {\r\n                  throw Error(\"not found MaterialType\");\r\n                }\r\n                //-------------------------------------\r\n                var findMaterialSpecByName = await client.query(\r\n                  _QueryMaterial.findMaterialSpecByName,\r\n                  [model.material_spec_name]\r\n                );\r\n                if (findMaterialSpecByName.rows.length > 0) {\r\n                  model.material_spec_id = findMaterialSpecByName.rows[0].id;\r\n                } else {\r\n                  throw Error(\"not found MaterialSpec\");\r\n                }\r\n                //-------------------------------------\r\n                var findMaterialSizeByName = await client.query(\r\n                  _QueryMaterial.findMaterialSizeByName,\r\n                  [model.material_size_name]\r\n                );\r\n                if (findMaterialSizeByName.rows.length > 0) {\r\n                  model.material_size_id = findMaterialSizeByName.rows[0].id;\r\n                } else {\r\n                  throw Error(\"not found MaterialSize\");\r\n                }\r\n                //-------------------------------------\r\n                var findMaterialSupplierByName = await client.query(\r\n                  _QueryMaterial.findMaterialSupplierByName,\r\n                  [model.material_supplier_name]\r\n                );\r\n                if (findMaterialSupplierByName.rows.length > 0) {\r\n                  model.material_supplier_id =\r\n                    findMaterialSupplierByName.rows[0].id;\r\n                } else {\r\n                  throw Error(\"not found MaterialSupplier\");\r\n                }\r\n                //-------------------------------------\r\n                if (isUpdate) {\r\n                  model.id = query.rows[0].id;\r\n                  await client.query(_QueryMaterial.update, [\r\n                    model.no,\r\n                    model.name,\r\n                    model.material_type_id,\r\n                    model.material_spec_id,\r\n                    model.material_size_id,\r\n                    model.buy_price,\r\n                    model.material_supplier_id,\r\n                    model.material_unit_id,\r\n                    model.amount,\r\n                    model.description,\r\n                    model.remark,\r\n                    model.image,\r\n                    model.image_name,\r\n                    model.imaget_path,\r\n                    user_id,\r\n                    model.oem_id,\r\n                    model.is_active,\r\n                    moment(new Date()),\r\n                    model.weight_piece || null,\r\n                    model.supplier_lead_time || null,\r\n                    model.minimum_lot || null,\r\n                    model.minimum_order_supplier || null,\r\n                    model.id,\r\n                  ]);\r\n\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                    isUpdate: true,\r\n                    status_update: true,\r\n                  });\r\n                } else {\r\n                  let material_id = uuidv4();\r\n                  await client.query(_QueryMaterial.add, [\r\n                    material_id,\r\n                    model.no,\r\n                    model.name,\r\n                    model.material_type_id,\r\n                    model.material_spec_id,\r\n                    model.material_size_id,\r\n                    model.buy_price,\r\n                    model.material_supplier_id,\r\n                    model.material_unit_id,\r\n                    model.amount,\r\n                    model.description,\r\n                    model.remark,\r\n                    model.image,\r\n                    model.image_name,\r\n                    model.imaget_path,\r\n                    user_id,\r\n                    model.oem_id,\r\n                    model.is_active,\r\n                    true,\r\n                    false,\r\n                    model.weight_piece || null,\r\n                    model.supplier_lead_time || null,\r\n                    model.minimum_lot || null,\r\n                    model.minimum_order_supplier || null,\r\n                    moment(new Date()),\r\n                    moment(new Date()),\r\n                  ]);\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                    isUpdate: false,\r\n                    status_update: true,\r\n                  });\r\n                }\r\n              } catch (e) {\r\n                tempRes.push({\r\n                  model: model.no,\r\n                  status: false,\r\n                  error: e.message,\r\n                  status_update: false,\r\n                });\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (tempRes.filter((x) => !x.status).length > 0) {\r\n            await client.query(\"ROLLBACK\");\r\n            console.log(\"ROLLBACK\");\r\n          } else {\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT All\");\r\n          }\r\n\r\n    \r\n          resolve(tempRes);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async updateMaterialAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n\r\n   \r\n            if(model.edit_type === true){\r\n              //console.log(\"IN\");\r\n              //hrow Error(\"break\");\r\n\r\n    \r\n             \r\n         \r\n                  var amount = await client.query(_QueryHandheld.getAmountMATById,[model.id]);\r\n                  var new_amount = parseFloat(amount.rows[0].amount || 0) + parseFloat(model.amount);\r\n           \r\n                  let id_logMAT = uuidv4();         \r\n                  var exp_date =  model.exp_date || moment(new Date());\r\n                  //console.log(moment(exp_date).format('DD/MM/yyyy :: HH:mm น.'));\r\n                 \r\n                  await client.query(_QueryHandheld.addLogMAT,\r\n                    [\r\n                      id_logMAT,\r\n                      model.id,\r\n                      user_id,\r\n                      true,\r\n                      model.amount,\r\n                      moment(new Date()),\r\n                      model.lot_no,\r\n                      model.tag_no || null,\r\n                      exp_date,\r\n                      model.remark || null\r\n                    ]);\r\n                  await client.query(_QueryHandheld.updateMAT,[model.id,parseFloat(new_amount),moment(new Date())]);\r\n\r\n         \r\n                \r\n          } else if(model.edit_type === false){\r\n           // console.log(\"OUT\");\r\n                            var amount = await client.query(_QueryHandheld.getAmountMATById,[model.id]);\r\n                                    var new_amount = parseFloat(amount.rows[0].amount || 0) - parseFloat(model.amount);\r\n                                    //console.log(new_amount)\r\n                                    var lot_stock = await client.query(_QueryHandheld.getSumLot_MAT,[model.id]);\r\n                                    const lot_stock2 = [];\r\n                                   for(let i of lot_stock.rows){\r\n                                       if(i.amount > 0){\r\n                                        lot_stock2.push(i);\r\n                                       }\r\n                                   }\r\n                                    //console.log(lot_stock.rows)\r\n                                    const lot_noArr = lot_stock2.sort((a, b) => a.exprire_date - b.exprire_date); \r\n                                        \r\n                                    //console.log(lot_noArr)\r\n                                    var b_amount = model.amount;\r\n                               \r\n                             \r\n                                    for(let lot of lot_noArr){\r\n                                      if(b_amount > 0){\r\n                                        var cut = 0;\r\n                                      console.log(b_amount);\r\n                                      var balance = lot.amount - b_amount;\r\n                                      if(balance < 0){\r\n                                        b_amount = balance*(-1);\r\n                                        cut = lot.amount;\r\n                                      }else{\r\n                                        cut = b_amount;\r\n                                        b_amount = 0;\r\n                                      }\r\n                                      //console.log(\"ตัด: \",cut, \"จาก lot \",lot.mat_lot_no);\r\n                                      let id_logMAT = uuidv4();          \r\n                                      await client.query(_QueryHandheld.addLogMAT,\r\n                                        [\r\n                                          id_logMAT,\r\n                                          model.id,\r\n                                          user_id,\r\n                                          false,\r\n                                          cut,\r\n                                          moment(new Date()),\r\n                                          lot.mat_lot_no,\r\n                                          model.tag_no || null,\r\n                                          null,\r\n                                          model.remark || null\r\n                                        ]);\r\n                                  \r\n                                      \r\n                                      }\r\n                                      \r\n                                  }\r\n                                    if(b_amount !== 0){\r\n                                      //console.log(\"ไม่มี lot ตัดแล้ว เกินมา \",b_amount)\r\n                                       model.new_amount = b_amount * (-1);\r\n                                  \r\n                                            throw Error(\"Over Stock amount -\"+b_amount); \r\n                         \r\n                                    }\r\n                                   \r\n                                    await client.query(_QueryHandheld.updateMAT,[model.id,parseFloat(new_amount),moment(new Date())]);\r\n            //throw Error(\"break\");\r\n          }\r\n            \r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async getHistory(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            let temp_sum = await client.query(_QueryMaterial.getsumHistory, [\r\n              material_id,\r\n            ]);\r\n            const temp_new = [];\r\n            for(var i = 0; i < temp_sum.rows.length; i++){\r\n              if(temp_sum.rows[i].amount > 0){\r\n                const data = {\r\n                  amount: temp_sum.rows[i].amount,\r\n                  create_date: temp_sum.rows[i].create_date,\r\n                  exprire_date: temp_sum.rows[i].exprire_date,\r\n                  mat_lot_no: temp_sum.rows[i].mat_lot_no\r\n                }\r\n\r\n                temp_new.push(data);\r\n              }\r\n            }\r\n            temp_new.sort((a, b) => a.exprire_date - b.exprire_date);\r\n         \r\n              resolve(temp_new);\r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getHistoryMAT(material_id,user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n        try {\r\n            (async () => {\r\n                var client = new Client(connectionConfig)\r\n                await client.connect()\r\n                try {\r\n\r\n                     var temp = await client.query(_QueryMaterial.getHistoryMAT, [material_id]);\r\n                        //console.log(temp);\r\n                        resolve(temp.rows);\r\n\r\n                } catch (e) {\r\n                    reject(e);\r\n                } finally {\r\n                    await client.end()\r\n                }\r\n            })().catch(e => {\r\n                console.log(e);\r\n                throw Error(e)\r\n            })\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    }))\r\n}\r\n\r\nasync filtermatsize2(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n       \r\n          let mat_size = model.mat_size ? model.mat_size : null,\r\n          company_id = model.company_id ? model.company_id : null;\r\n    \r\n            var temp = await client.query(_QueryMaterial.filltermatsize,[mat_size,company_id]);\r\n\r\n\r\n    \r\n            resolve(temp.rows);\r\n           \r\n  \r\n        //  console.log(temp.rows)\r\n\r\n         \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync addMaterialsize(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          //console.log(model)\r\n          var checkName = await client.query(_QueryMaterial.checkNoMaterialsize, [\r\n            model.mat_size,model.company_id,\r\n            \r\n          ]);\r\n          if(checkName.rows.length > 0){\r\n            throw Error(\"System : Material Size has already\");\r\n          }\r\n          let materialsize_id = uuidv4();\r\n          let temp_sort = await client.query(_QueryMaterial.CheckSortMatsize);\r\n          let sort = temp_sort.rows[0].max || 0;\r\n          if(sort===null)\r\n          {\r\n           sort = 0;\r\n          }\r\n          let is_use = \"true\";\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.addmatsize, [\r\n         \r\n            materialsize_id,\r\n            model.company_id,\r\n            model.mat_size,\r\n            is_use,\r\n            sort+1 || null,\r\n            model.remark || null,\r\n            updatedate,\r\n            user_id,\r\n   \r\n          ]);\r\n\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync updateMaterialsize(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          \r\n          var checkNo = await client.query(_QueryMaterial.checkNameMaterialsize_edit, [model.id,model.company_id,model.mat_size,]);\r\n          if (checkNo.rows.length > 0) {\r\n            throw Error(\"System : Material Size has already\");\r\n     \r\n          }\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.updateMatsize, [\r\n           model.id,\r\n            model.mat_size,\r\n            model.remark || null,\r\n            updatedate,\r\n            user_id,\r\n        \r\n        ]);\r\n        \r\n\r\n\r\n        \r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync findByIdMaterialsize(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(_QueryMaterial.findBynamesize, [id]);\r\n\r\n          if (temp.rows.length > 0) {\r\n           /*  console.log(temp.rows)\r\n            console.log(temp.rows[0]) */\r\n            resolve(temp.rows[0]);\r\n          } else {\r\n            reject(\"not found\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\nasync delMaterialsize(id, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.delmatsize, [id,user_id,updatedate]);\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync filtermatspec2(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n       \r\n          let mat_spec = model.mat_spec ? model.mat_spec : null,\r\n          company_id = model.company_id ? model.company_id : null;\r\n    \r\n            var temp = await client.query(_QueryMaterial.filltermatspec,[mat_spec,company_id]);\r\n\r\n\r\n    \r\n            resolve(temp.rows);\r\n           \r\n  \r\n        //  console.log(temp.rows)\r\n\r\n         \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync findByIdMaterialspec(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(_QueryMaterial.findBynamespec, [id]);\r\n\r\n          if (temp.rows.length > 0) {\r\n           /*  console.log(temp.rows)\r\n            console.log(temp.rows[0]) */\r\n            resolve(temp.rows[0]);\r\n          } else {\r\n            reject(\"not found\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync addMaterialspec(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          \r\n          var checkName = await client.query(_QueryMaterial.checkNoMaterialspec, [\r\n            model.mat_spec,model.company_id,\r\n            \r\n          ]);\r\n          if(checkName.rows.length > 0){\r\n            throw Error(\"System : Material Spec has already\");\r\n          }\r\n          let materialspec_id = uuidv4();\r\n          let temp_sort = await client.query(_QueryMaterial.CheckSortMatspec);\r\n          let sort = temp_sort.rows[0].max || 0;\r\n          if(sort===null)\r\n          {\r\n           sort = 0;\r\n          }\r\n          let is_use = \"true\";\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.addmatspec, [\r\n         \r\n            materialspec_id,\r\n            model.company_id,\r\n            model.mat_spec,\r\n            is_use,\r\n            sort+1 || null,\r\n            model.remark || null,\r\n            updatedate,\r\n            user_id,\r\n   \r\n          ]);\r\n\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync updateMaterialspec(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n         \r\n          var checkNo = await client.query(_QueryMaterial.checkNameMaterialspec_edit, [model.id,model.company_id,model.mat_spec,]);\r\n  \r\n          if (checkNo.rows.length > 0) {\r\n            throw Error(\"System : Material Spec has already\");\r\n     \r\n          }\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.updateMatspec, [\r\n           model.id,\r\n            model.mat_spec,\r\n            model.remark || null,\r\n            updatedate,\r\n            user_id,\r\n        ]);\r\n        \r\n\r\n\r\n        \r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync delMaterialspec(id, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.delmatspec, [id,user_id,updatedate]);\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync filtermattype2(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n      //  console.log(model);\r\n          let mat_type = model.mat_type ? model.mat_type : null,\r\n          company_id = model.company_id ? model.company_id : null;\r\n    \r\n            var temp = await client.query(_QueryMaterial.filltermattype,[mat_type,company_id]);\r\n\r\n\r\n    \r\n            resolve(temp.rows);\r\n           \r\n  \r\n        //  console.log(temp.rows)\r\n\r\n         \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync findByIdMaterialtype(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(_QueryMaterial.findBynametype, [id]);\r\n\r\n          if (temp.rows.length > 0) {\r\n           /*  console.log(temp.rows)\r\n            console.log(temp.rows[0]) */\r\n            resolve(temp.rows[0]);\r\n          } else {\r\n            reject(\"not found\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync addMaterialtype(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          // console.log(user_id);\r\n          var checkName = await client.query(_QueryMaterial.checkNoMaterialtype, [\r\n            model.mat_type,model.company_id,\r\n            \r\n          ]);\r\n          if(checkName.rows.length > 0){\r\n            throw Error(\"System : Material Type has already\");\r\n          }\r\n          let materialtype_id = uuidv4();\r\n          let temp_sort = await client.query(_QueryMaterial.CheckSortMattype);\r\n          let sort = temp_sort.rows[0].max || 0;\r\n          if(sort===null)\r\n          {\r\n           sort = 0;\r\n          }\r\n          let is_use = \"true\";\r\n          let updatedate = moment(new Date()).format();\r\n         \r\n          await client.query(_QueryMaterial.addmattype, [\r\n         \r\n            materialtype_id,\r\n            model.company_id,\r\n            model.mat_type,\r\n            is_use,\r\n            sort+1 || null,\r\n            model.remark || null,\r\n           updatedate,\r\n           user_id,\r\n   \r\n          ]);\r\n\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync updateMaterialtype(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n    \r\n          var checkNo = await client.query(_QueryMaterial.checkNameMaterialtype_edit,  [model.id,model.company_id,model.mat_type,]);\r\n          console.log(checkNo);\r\n          if (checkNo.rows.length > 0) {\r\n            throw Error(\"System : Material Type has already\");\r\n     \r\n          }\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.updateMattype, [\r\n           model.id,\r\n            model.mat_type,\r\n            model.remark || null,\r\n            user_id,\r\n            updatedate,\r\n\r\n        \r\n        ]);\r\n        \r\n\r\n\r\n        \r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync delMaterialtype(id, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.delmattype, [id,user_id,updatedate]);\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync filtermodel_category2(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n      //  console.log(model);\r\n          let model_category = model.model_category ? model.model_category : null,\r\n          oem_id = model.oem_id ? model.oem_id : null;\r\n    \r\n            var temp = await client.query(_QueryMaterial.filltermodel_category,[model_category,oem_id]);\r\n\r\n\r\n    \r\n            resolve(temp.rows);\r\n           \r\n  \r\n         console.log(temp.rows)\r\n\r\n         \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync delmc(id, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.delmc, [id,user_id,updatedate]);\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync findByIdMc2(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          console.log(id);\r\n          let temp = await client.query(_QueryMaterial.findBymcid, [id]);\r\n\r\n          if (temp.rows.length > 0) {\r\n   \r\n            resolve(temp.rows[0]);\r\n          } else {\r\n            reject(\"not found\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync addmatmodel(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          \r\n          var checkName = await client.query(_QueryMaterial.checkMCname, [\r\n            model.model_category,model.oem_id,\r\n            \r\n          ]);\r\n          if(checkName.rows.length > 0){\r\n            throw Error(\"System : Data has already\");\r\n          }\r\n          let product_model_id = uuidv4();\r\n          let temp_sort = await client.query(_QueryMaterial.CheckSortMc);\r\n          let sort = temp_sort.rows[0].max || 0;\r\n          if(sort===null)\r\n          {\r\n           sort = 0;\r\n          }\r\n          let is_use = \"true\";\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.addmc, [\r\n         \r\n            product_model_id,\r\n            model.oem_id,\r\n            model.model_category,\r\n            is_use,\r\n            sort+1 || null,\r\n            model.remark || null,\r\n            updatedate,\r\n            user_id,\r\n   \r\n          ]);\r\n\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync updateMc2(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n    \r\n          var checkNo = await client.query(_QueryMaterial.checkMc_edit,  [model.id,model.oem_id,model.model_category,]);\r\n          console.log(checkNo.rows.length ,\" : dest\");\r\n          if (checkNo.rows.length > 0) {\r\n            throw Error(\"System : Data has already\");\r\n     \r\n          }\r\n          let updatedate = moment(new Date()).format();\r\n          await client.query(_QueryMaterial.updateMc, [\r\n\r\n           model.id,\r\n           model.model_category,\r\n            model.remark || null,\r\n            user_id,\r\n            updatedate,\r\n\r\n        \r\n        ]);\r\n        \r\n\r\n\r\n        \r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n}\r\nmodule.exports = materialService;\r\n\n\n//# sourceURL=webpack:///./app/service/materialService.js?");

/***/ }),

/***/ "./app/service/orderSummaryService.js":
/*!********************************************!*\
  !*** ./app/service/orderSummaryService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryOrderSummary = __webpack_require__(/*! ../query/queryOrderSummary.json */ \"./app/query/queryOrderSummary.json\");\r\nconst _QueryProductPlaning = __webpack_require__(/*! ../query/queryProductPlaning.json */ \"./app/query/queryProductPlaning.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\"); \r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\n\r\n\r\nclass orderSummaryService {\r\n\r\n    async filterOSLByNo(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n                        let osl_no = model.osl_no ? model.osl_no : null,\r\n                            oem_id = model.oem_id ? model.oem_id : null;\r\n                       if(model.is_draft === true){\r\n                        var temp = await client.query(_QueryOrderSummary.filterOSLByNo2, [\r\n                            osl_no,\r\n                            oem_id,\r\n                   \r\n                        ]);\r\n                       }else{\r\n                        var temp = await client.query(_QueryOrderSummary.filterOSLByNo, [\r\n                            osl_no,\r\n                            oem_id,\r\n                   \r\n                        ]);\r\n                       }\r\n                       \r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetSection(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n                        let oem_id = model.oem_id ? model.oem_id : null;\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getSection, [\r\n                            oem_id,\r\n                        ]);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetProcessBySectionId(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getProcess, [\r\n                            model.section_id,\r\n                        ]);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetMachineByProcessId(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getMachine, [\r\n                            model.process_id,\r\n                        ]);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetLastOrder(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getOrder);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetViewOrderOSL_ByProcress_id(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getProcess, [\r\n                            model.section_id,\r\n                        ]);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async GetDay_off(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getDay_off, [\r\n                            model.start_date,\r\n                            model.end_date,\r\n                        ]);\r\n                        /*     console.log(temp); */\r\n                        resolve(temp.rows[0].count);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetDay_off_detail(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        /*  console.log(model); */\r\n\r\n                        var temp = await client.query(_QueryOrderSummary.getDay_off_detail, [\r\n                            model.start_date,\r\n                            model.end_date,\r\n                        ]);\r\n                        //console.log(temp.rows);\r\n                        resolve(temp.rows);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    /*  console.log(e); */\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async addLog_OSL(model, user_id) {\r\n        return new Promise((async(resolve, reject) => {\r\n            function pad(d) {\r\n                return (d < 10) ? '0' + d.toString() : d.toString();\r\n            }\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n\r\n             \r\n                        let gen_osl_no = \"\";\r\n                        var daysss = moment(new Date()).format(\"YYMMDD\");\r\n                        var check_OSL_No = await client.query(_QueryOrderSummary.checkolstag,[daysss]);\r\n                        var countosl = 0;\r\n                        if( 0 == check_OSL_No.rows.length)\r\n                        {\r\n                              gen_osl_no = daysss+\"-01\";\r\n\r\n\r\n                        }\r\n                        else\r\n                        {\r\n                            countosl = check_OSL_No.rows.length+1;\r\n                            gen_osl_no = daysss+\"-\"+pad(countosl);\r\n\r\n                        }\r\n                        \r\n                        console.log(check_OSL_No.rows.length);\r\n                      \r\n                        // gen_osl_no = daysss+\"-\"+pad(osl_no+1);\r\n                        // console.log(\"gen_osl_no : \"+gen_osl_no );\r\n                        let id = uuidv4();\r\n                       // console.log(model.create_by);\r\n                       // console.log(model.oem_id);\r\n                        const part_no = JSON.stringify(model.part_no);\r\n                        const process_id = JSON.stringify(model.process_id);\r\n                        const manpower = JSON.stringify(model.manpower);\r\n                        const calculate = JSON.stringify(model.calculate);\r\n                        await client.query(_QueryOrderSummary.AddOSL_log, [\r\n                            id,\r\n                            model.customer || null,\r\n                            model.refpo || null,\r\n                            gen_osl_no,\r\n                            part_no,\r\n                            moment(new Date()),\r\n                            model.create_by,\r\n                            model.oem_id,\r\n                            process_id,\r\n                            model.start_date,\r\n                            manpower,\r\n                            calculate,\r\n                            model.end_date,\r\n                            model.is_draft || null,\r\n                        ]);\r\n   \r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        console.log(e)\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n    }\r\n\r\n\r\n    async editLog_OSL(model, user_id) {\r\n        return new Promise((async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try {\r\n\r\n\r\n                        //console.log(model)\r\n              \r\n                        const part_no = JSON.stringify(model.part_no);\r\n                        const process_id = JSON.stringify(model.process_id);\r\n                        const manpower = JSON.stringify(model.manpower);\r\n                        const calculate = JSON.stringify(model.calculate);\r\n                        await client.query(_QueryOrderSummary.UpdateOSL_log, [\r\n                            model.id,\r\n                            model.customer || null,\r\n                            model.refpo || null,\r\n                            part_no,\r\n                            process_id,\r\n                            model.start_date,\r\n                            manpower,\r\n                            calculate,\r\n                            model.end_date,\r\n                            model.is_draft,\r\n                        ]);\r\n                        console.log(\"COMMIT\")\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        console.log(e)\r\n                        await client.query('ROLLBACK')\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end()\r\n                    }\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n    }\r\n\r\n    async find_OSLById(osl_id) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try {\r\n                        let temp = await client.query(_QueryOrderSummary.findOSLById, [\r\n                            osl_id,\r\n                        ]);\r\n                        //console.log(temp.rows[0]);\r\n                        if (temp.rows.length > 0) {\r\n                            resolve(temp.rows[0]);\r\n                        } else {\r\n                            reject(\"not found\");\r\n                        }\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    console.log(e);\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async GetOSL_table(item) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n                    try{\r\n                    const list_prodct_temp =[];\r\n                    for(let order of item[0]){\r\n                        //console.log(\"order\",order.order_id)\r\n                        var temp_list_productByOrder = await client.query(_QueryOrderSummary.GetList_productByOrder,[order.order_id])\r\n                        //console.log(temp_list_productByOrder.rows[0].list_product); \r\n                        for(let list of temp_list_productByOrder.rows[0].list_product){\r\n                            let have_product = list_prodct_temp.filter((element)=>{ \r\n                                return (element.product_id === list.id);\r\n                            }) \r\n                            let have_product_index = list_prodct_temp.findIndex((element)=>\r\n                                element.product_id === list.id\r\n                            ) \r\n                            //console.log(have_product_index)\r\n                            let In_hand = await client.query(_QueryOrderSummary.GetInhandById,[list.id]);\r\n                                \r\n                            if(have_product.length > 0){\r\n                                list_prodct_temp[have_product_index].amount = list.order + have_product[0].amount;\r\n                                list_prodct_temp[have_product_index].steel_bar = list.steel_bar + have_product[0].steel_bar;\r\n         \r\n                            }else{\r\n                                let temp = {\r\n                                    product_id:list.id,\r\n                                    product_no:list.no,\r\n                                    product_name:list.name,\r\n                                    amount:list.order,\r\n                                    //mat_lot_no:list.mat_lot,\r\n                                    in_hand:In_hand.rows[0].fg_amount,\r\n                                    steel_bar:list.steel_bar,\r\n\r\n                                    cycle_time:0,\r\n\r\n                                }\r\n                                list_prodct_temp.push(temp); \r\n                            }                               \r\n                           \r\n                        }\r\n                        \r\n                    }\r\n            \r\n                    for(let process of item[1]){\r\n                        for(let product of list_prodct_temp){\r\n                            var temp_list_cycle_time = await client.query(_QueryOrderSummary.GetCycle_timeByListProduct, [\r\n                                product.product_id,\r\n                                process.process_id,\r\n                            ]);\r\n                            if(temp_list_cycle_time.rows.length > 0){\r\n                                product.cycle_time =product.cycle_time + temp_list_cycle_time.rows[0].cycle_time;\r\n                            }\r\n                    }\r\n                }\r\n           \r\n            \r\n                var list_prodct_temp2 = [];\r\n                console.log(list_prodct_temp)\r\n                    for(let list_item of list_prodct_temp){\r\n                   \r\n                        var product_detail = await client.query(_QueryOrderSummary.GetProduct_Detail, [\r\n                            list_item.product_id, \r\n                        ]);\r\n                  \r\n                      \r\n                        var process = await client.query(_QueryOrderSummary.getProcessByProductID,[list_item.product_id]);\r\n                        var machine = await client.query(_QueryOrderSummary.getMachineByProductId,[list_item.product_id]);\r\n                        var material_lot = await client.query(_QueryOrderSummary.getMaterial_lot,[product_detail.rows[0].material_id]);\r\n                      //  if(list_item.product_no === '0278100628'){\r\n                            console.log(list_item)\r\n                            console.log(product_detail.rows)\r\n                            console.log(list_item.product_id,list_item.product_no,\"mat_lot\",material_lot.rows)\r\n                       // }\r\n                        \r\n                     \r\n                        const list_lot = [];\r\n                        var b_amount = Math.ceil(list_item.steel_bar);\r\n                        if(material_lot.rows.length > 0){\r\n                          \r\n                               \r\n                             \r\n                            for(let lot of material_lot.rows){\r\n                               // console.log(lot)\r\n                              if(b_amount > 0){\r\n                                var cut = 0;\r\n                              //console.log(b_amount);\r\n                              var balance = lot.amount - b_amount;\r\n                              if(balance < 0){\r\n                                b_amount = balance*(-1);\r\n                                cut = lot.amount;\r\n\r\n                              }else{\r\n                                cut = b_amount;\r\n                                b_amount = 0;\r\n                              }\r\n                              \r\n                              console.log(\"***\",list_item.steel_bar, list_item.product_no,\" ตัด: \",cut, \"จาก lot \",lot.mat_lot_no);\r\n                              \r\n                        \r\n                               if(cut > 0){\r\n                                var temp = {\r\n                                    mat_id:product_detail.rows[0].material_id,\r\n                                    mat_no:product_detail.rows[0].mat_no,\r\n                                    mat_lot:lot.mat_lot_no,\r\n                                    mat_amount:cut,\r\n                                }\r\n                                list_lot.push(temp);\r\n                                console.log(list_item.steel_bar, list_item.product_no,\" ตัด: \",cut, \"จาก lot \",lot.mat_lot_no);\r\n                               }\r\n                            \r\n                              }\r\n                               \r\n                              \r\n                          }\r\n                          \r\n                        }\r\n                        if(b_amount !== 0){\r\n                             var temp = {\r\n                                 mat_id:product_detail.rows[0].material_id,\r\n                                 mat_no:product_detail.rows[0].mat_no,\r\n                                 mat_lot:false,\r\n                                 mat_amount:b_amount,\r\n                             }\r\n                             list_lot.push(temp);\r\n                            console.log(product_detail.rows[0].mat_no,\"ไม่มี lot ตัดแล้ว เกินมา \",b_amount)\r\n                            /* lot.new_amount = b_amount * (-1); */\r\n                       \r\n                               //  throw Error(\"Over Stock amount -\"+b_amount); \r\n              \r\n                         }\r\n                          //console.log(\"material\",product_detail.rows[0].mat_no)\r\n                          //console.log(\"list_lot\",list_lot)\r\n                        if(product_detail.rows.length > 0) {\r\n                            let temp = {\r\n                                product_id:list_item.product_id,\r\n                                product_no:list_item.product_no,\r\n                                product_name:list_item.product_name,\r\n                                amount:list_item.amount,\r\n                                in_hand:list_item.in_hand || 0,\r\n                            /*     mat_lot_no:list_item.mat_lot_no, */\r\n                                steel_bar:list_item.steel_bar,\r\n                                cycle_time:list_item.cycle_time,\r\n                                material_lot:list_lot,\r\n                                material_id:product_detail.rows[0].material_id || \"\",\r\n                                wt_mtr:product_detail.rows[0].wt_mtr || \"\",\r\n                                c_leng:product_detail.rows[0].c_leng || \"\",\r\n                                cos_pc:product_detail.rows[0].cos_pc || \"\",\r\n                                mat_no:product_detail.rows[0].mat_no || \"\",\r\n                                mat_size:product_detail.rows[0].mat_size || \"\",\r\n                                mat_type:product_detail.rows[0].mat_type || \"\",\r\n                                mat_spec:product_detail.rows[0].mat_spec || \"\",\r\n                                product_route:product_detail.rows[0].product_route || \"\",\r\n                                Customer:product_detail.rows[0].Customer || \"\",\r\n                                process:process.rows,\r\n                                machine:machine.rows,\r\n                               \r\n                            }\r\n                            \r\n                            list_prodct_temp2.push(temp);\r\n                        }else{\r\n                            let temp = {\r\n                                product_id:list_item.product_id,\r\n                                product_no:list_item.product_no,\r\n                                product_name:list_item.product_name,\r\n                                amount:list_item.amount,\r\n                                in_hand:list_item.in_hand,\r\n                     /*            mat_lot_no:list_item.mat_lot_no, */\r\n                                steel_bar:list_item.steel_bar,\r\n                                cycle_time:list_item.cycle_time,\r\n                                material_lot:list_lot,\r\n                                material_id: \"\",\r\n                                wt_mtr:\"\",\r\n                                c_leng: \"\",\r\n                                cos_pc:\"\",\r\n                                mat_no:\"\",\r\n                                mat_size:\"\",\r\n                                mat_type:\"\",\r\n                                mat_spec:\"\",\r\n                                product_route:\"\",\r\n                                Customer:\"\",\r\n                                machine:machine.rows,\r\n                                process:process.rows,\r\n                            }\r\n                            \r\n                            list_prodct_temp2.push(temp);\r\n                        }\r\n                        \r\n                        //console.log(list_prodct_temp2);\r\n                    }\r\n                    console.log(\"ดาต้า\",list_prodct_temp2);\r\n\r\n                    console.log(\"COMMIT\");\r\n                    resolve(list_prodct_temp2);\r\n                } catch (e) {\r\n                    reject(e);\r\n                  } finally {\r\n                    await client.end();\r\n                  }\r\n                })().catch((e) => {\r\n           \r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    async findMachineByMultipleProcess(model) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n\r\n                    try {\r\n                        var tempRes = [];\r\n                        for (let item of model) {\r\n                            // console.log(item)\r\n                            let machine_process = await client.query(_QueryOrderSummary.findMachineByProcessId, [\r\n                                item.process_id,\r\n                                item.oem_id\r\n                            ]);\r\n\r\n                            if (machine_process.rows.length > 1) {\r\n                                for (var index = 0; index < machine_process.rows.length; index++) {\r\n                                    tempRes.push(machine_process.rows[index])\r\n                                }\r\n                            } else {\r\n                                tempRes.push(machine_process.rows[0])\r\n                            }\r\n                            /*   if (temp.rows.length > 0) {\r\n                                resolve(temp.rows[0]);\r\n                              } else {\r\n                                reject(\"not found\");\r\n                              } */\r\n                        }\r\n                        //console.log(tempRes);\r\n                        resolve(tempRes);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    console.log(e);\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    async addtagno(model,user_id) {\r\n        return new Promise(async(resolve, reject) => {\r\n            function pad(d) {\r\n                if(d < 10){\r\n\r\n                    return '00' + d.toString();\r\n                }else if(d < 100){\r\n                    return '0' + d.toString();\r\n                }else{\r\n                    return d.toString();\r\n                }\r\n                \r\n            }\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n             \r\n                    try {\r\n                        var temps=[];\r\n                        // console.log(model);\r\n              \r\n                        for (let i=0; i < model.length; i++){\r\n                           \r\n                            var tagno = moment(new Date()).format(\"YYYYMMDD\");\r\n                            let temp = await client.query(_QueryOrderSummary.checktag, [\r\n                                tagno,\r\n                            ]);\r\n                         \r\n                            var count =  temp.rows.length + 1;\r\n                            \r\n                            tagno = tagno +\"-\"+pad(count);\r\n                            //console.log(tagno);\r\n                            let id = uuidv4();\r\n                            const track_list = JSON.stringify(model[i]);\r\n    \r\n                             model[i].tagno=tagno;\r\n                            if(model[i].end_date){\r\n                             await client.query(_QueryOrderSummary.Addtageno, [id,track_list,moment(new Date()),user_id,tagno,model[i].oem_id]);}\r\n                      \r\n                         temps.push(model[i]);\r\n                        };\r\n                     \r\n                 \r\n                        // var tagno = moment(new Date()).format(\"YYYYMMDD\");\r\n                        // let temp = await client.query(_QueryOrderSummary.checktag, [\r\n                        //     tagno,\r\n                        // ]);\r\n                        \r\n                       /// console.log(temps);\r\n                        // if (temp.rows.length > 0) {\r\n                        //      var count =  temp.rows.length + 1;\r\n                        //      tagno = tagno +\"_\"+count;\r\n                        // } \r\n                        // else \r\n                        // {\r\n                        //     tagno = tagno +\"_1\";     \r\n                        // }\r\n\r\n                        resolve(temps);\r\n                      \r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    console.log(e);\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    \r\n    async SetActualTimeByOSL(model,user_id) {\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                (async() => {\r\n                    var client = new Client(connectionConfig);\r\n                    await client.connect();\r\n\r\n                    try {\r\n                        //var tempRes = [];\r\n                        console.log(model)\r\n                        var osl = await client.query(_QueryOrderSummary.findOSLById,[model.osl_id]);\r\n                        console.log(osl.rows[0].partno_list);\r\n                        osl.rows[0].partno_list.product_plan = model.product_plan;\r\n                        var temp = {\r\n                            order:osl.rows[0].partno_list.order,\r\n                            part_no:osl.rows[0].partno_list.part_no,\r\n                            product_plan:osl.rows[0].partno_list.product_plan,\r\n                            machine:osl.rows[0].partno_list.machine,\r\n                        }\r\n                        console.log(temp)\r\n                            await client.query(_QueryOrderSummary.SetActualOSL,[model.osl_id,temp]);\r\n                        resolve(true);\r\n                    } catch (e) {\r\n                        reject(e);\r\n                    } finally {\r\n                        await client.end();\r\n                    }\r\n                })().catch((e) => {\r\n                    console.log(e);\r\n                    throw Error(e);\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nmodule.exports = orderSummaryService;\n\n//# sourceURL=webpack:///./app/service/orderSummaryService.js?");

/***/ }),

/***/ "./app/service/packInOutCTSService.js":
/*!********************************************!*\
  !*** ./app/service/packInOutCTSService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPackInOutCTS = __webpack_require__(/*! ../query/queryPackInOutCTS.json */ \"./app/query/queryPackInOutCTS.json\");\r\nconst _QueryShupInOutCTS = __webpack_require__(/*! ../query/queryWipshupOutInCTS.json */ \"./app/query/queryWipshupOutInCTS.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass packInOutCTSService {\r\n  async filterPackInOut(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model\", model);\r\n            let temp = await client.query(\r\n              _QueryPackInOutCTS.filterProductPack,\r\n              [\r\n                model.oem_id,\r\n                model.product_no || null,\r\n                model.product_name || null,\r\n              ]\r\n            );\r\n\r\n            let lot_in_stock_list = [];\r\n\r\n            for (let item of temp.rows) {\r\n              if (item.product_id === \"2c48d668-f3a5-4dfe-a62e-7c6144bc584b\") {\r\n                console.log(item.product_id);\r\n              }\r\n              let lot_in_stock = await client.query(\r\n                _QueryPackInOutCTS.getLotInStock,\r\n                [item.product_id]\r\n              );\r\n\r\n              lot_in_stock_list = lot_in_stock.rows;\r\n\r\n              let final = [];\r\n              for (let i of lot_in_stock_list) {\r\n                let LotDetail = await client.query(\r\n                  _QueryPackInOutCTS.GetLotPackDetail,\r\n                  [item.product_id, i.pack_no]\r\n                );\r\n\r\n                let LotCTS = await client.query(_QueryPackInOutCTS.GetLotCTSDetail,[LotDetail.rows[0].pack_lot_no || null]);\r\n                let cut_name = '';\r\n                if (LotCTS.rows.length > 0) {\r\n                   cut_name = LotCTS.rows[0].full_name || '';\r\n                }\r\n                if (i.weight_amount > 0 || i.piece_amount > 0) {\r\n                  var list = {\r\n                    track_no: LotDetail.rows[0].tracking_tag_pack_chup,\r\n                    lot_no: LotDetail.rows[0].pack_lot_no || null,\r\n                    po_no: LotDetail.rows[0].po_no,\r\n                    pack_no: i.pack_no,\r\n                    box_no: LotDetail.rows[0].box_no,\r\n                    box_date: LotDetail.rows[0].box_date,\r\n                    ref_box_no: LotDetail.rows[0].ref_box_no,\r\n                    type_amount: i.weight_amount > 0 ? \"weight\" : \"piece\",\r\n                    amount:\r\n                      i.weight_amount > 0 ? i.weight_amount : i.piece_amount,\r\n                    date: i.create_date,\r\n                    choup_fac: LotDetail.rows[0].plating_plant_code,\r\n                    choup_tel: LotDetail.rows[0].tel,\r\n                    surface: LotDetail.rows[0].surface,\r\n                    customer: cut_name,\r\n                  };\r\n\r\n                  final.push(list);\r\n                }\r\n              }\r\n              var tempData = final;\r\n              /*  if(model.is_work_choup === true){\r\n                     tempData = final.filter((e)=> {return e.surface !== 'น้ามันกันสนิม'});\r\n                 \r\n                  }\r\n\r\n                  if(model.is_work_sanim === true){\r\n                    tempData = final.filter((e)=> {return e.surface === 'น้ามันกันสนิม'});\r\n                \r\n                 } */\r\n\r\n              item.lot_detail = tempData;\r\n            }\r\n            var temp_final = [];\r\n            if (model.is_work_choup === true) {\r\n              var temp_c = temp.rows.filter((e) => {\r\n                return e.surface !== \"น้ำมันกันสนิม\";\r\n              });\r\n              for (let i of temp_c) {\r\n                temp_final.push(i);\r\n              }\r\n            }\r\n\r\n            if (model.is_work_sanim === true) {\r\n              var temp_sanim = temp.rows.filter((e) => {\r\n                return e.surface === \"น้ำมันกันสนิม\";\r\n              });\r\n              for (let i of temp_sanim) {\r\n                temp_final.push(i);\r\n              }\r\n            }\r\n\r\n            if (model.is_work_late === true) {\r\n              var temp_c = temp_final.filter((e) => {\r\n                return e.surface !== \"น้ำมันกันสนิม\";\r\n              });\r\n              var temp_sanim = temp_final.filter((e) => {\r\n                return e.surface == \"น้ำมันกันสนิม\";\r\n              });\r\n              temp_final = [];\r\n              for (let i of temp_c) {\r\n                var temp_late_c = i.lot_detail.filter((e) => {\r\n                  return moment(new Date()).diff(moment(e.date), \"days\") > 180;\r\n                });\r\n                i.lot_detail = temp_late_c;\r\n                if (i.lot_detail.length > 0) {\r\n                  temp_final.push(i);\r\n                }\r\n              }\r\n              /* console.log(temp_c)\r\n           \r\n                console.log(temp_sanim) */\r\n              for (let i of temp_sanim) {\r\n                var temp_late_sanim = i.lot_detail.filter((e) => {\r\n                  return moment(new Date()).diff(moment(e.date), \"days\") > 90;\r\n                });\r\n                /*      console.log(i) */\r\n                i.lot_detail = temp_late_sanim;\r\n                if (i.lot_detail.length > 0) {\r\n                  temp_final.push(i);\r\n                }\r\n              }\r\n            }\r\n\r\n            resolve(temp_final);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getlotNo(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(\r\n              _QueryPackInOutCTS.getProductionOrder,\r\n              [product_id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n            /* resolve(tempData) */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /////  Genaerate TAG ID\r\n            /* console.log(\"model\",model) */\r\n\r\n            if (model.edit_type === true) {\r\n              for (let item of model.box_no_list) {\r\n                var year = (\r\n                  parseInt(moment(new Date()).format(\"YYYY\")) + 543\r\n                ).toString();\r\n                var tag = \"P\" + year[2] + year[3] + \"-\";\r\n                /* console.log(\"tag\",tag) */\r\n                var checkLastTag = await client.query(\r\n                  _QueryPackInOutCTS.getLastTag,\r\n                  [tag]\r\n                );\r\n\r\n                var tag =\r\n                  \"P\" +\r\n                  year[2] +\r\n                  year[3] +\r\n                  \"-\" +\r\n                  pad_fnc(checkLastTag.rows.length + 1);\r\n\r\n                let pack_no = moment(new Date())\r\n                  .add(543, \"year\")\r\n                  .format(\"LLLL\");\r\n                pack_no = \"PACK\" + moment(new Date(pack_no)).format(\"YYMMDD\");\r\n                var check_pack = await client.query(\r\n                  _QueryPackInOutCTS.checkPackToGen,\r\n                  [pack_no]\r\n                );\r\n                var count = 1;\r\n                if (check_pack.rows.length > 0) {\r\n                  count = check_pack.rows.length + 1;\r\n                }\r\n                pack_no = pack_no + pad_fncGen(count);\r\n\r\n                /*     console.log(\"tag\",tag);\r\n                  console.log(\"pack\",pack_no); */\r\n\r\n                let id_pack_inOut = uuidv4();\r\n                await client.query(_QueryPackInOutCTS.inSavelogPack, [\r\n                  id_pack_inOut,\r\n                  true,\r\n                  null,\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  null,\r\n                  null,\r\n                  pack_no,\r\n                  model.product_id,\r\n                  tag,\r\n                  null,\r\n                  null, // pack loss\r\n                  Number(item.weight_by_tag) || null, //weight_amount\r\n                  null, //picecs_amount\r\n                  model.lot_no || null,\r\n                  item.box_no,\r\n                  new Date(),\r\n                  item.old_box_no || null,\r\n                ]);\r\n              }\r\n            } else if (model.edit_type === false) {\r\n              for (let item of model.pack_no_list) {\r\n                var LotDetail = await client.query(\r\n                  _QueryPackInOutCTS.GetLotPackDetail,\r\n                  [model.product_id, item.pack_no]\r\n                );\r\n\r\n\r\n                   console.log(LotDetail.rows[0].weight_amount)\r\n                if (parseFloat(model.loss_amount) > parseFloat(LotDetail.rows[0].weight_amount)) {\r\n                  throw Error(\"จำนวนสูญสายเกินความเป็นจริง\");\r\n                }\r\n                var unit_amount = Math.floor(\r\n                  parseFloat(LotDetail.rows[0].weight_amount) /\r\n                    parseFloat(LotDetail.rows[0].nw_number)\r\n                );\r\n              let box_no = '';\r\n                if (item.pack_no != null) {\r\n                  var chack = await client.query(_QueryPackInOutCTS.chackbox, [\r\n                    item.pack_no\r\n                  ]);\r\n                  console.log(chack);\r\n        if (chack.rows.length > 0) {\r\n          box_no = chack.rows[0].ref_box_no || ''\r\n        }\r\n                }\r\n\r\n\r\n\r\n                let id_pack_Out = uuidv4();\r\n                await client.query(_QueryPackInOutCTS.inSavelogPack, [\r\n                  id_pack_Out,\r\n                  model.edit_type,\r\n                  unit_amount, /// แปลง กก. เป็น ชิ้น\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  LotDetail.rows[0].log_wip_chup_edit_amount_cts_id,\r\n                  LotDetail.rows[0].tracking_tag_wip_chup,\r\n                  item.pack_no,\r\n                  model.product_id,\r\n                  LotDetail.rows[0].tracking_tag_pack_chup,\r\n                  LotDetail.rows[0].wip_chup_lot_no,\r\n                  model.loss_amount || null,\r\n                  LotDetail.rows[0].weight_amount || null,\r\n                  LotDetail.rows[0].piece_amount || null,\r\n                  LotDetail.rows[0].pack_lot_no || null,\r\n                  item.box_no,\r\n                  new Date(),\r\n                  box_no,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotInStock(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let lot_in_stock = await client.query(\r\n              _QueryPackInOutCTS.getLotInStock,\r\n              [product_id]\r\n            );\r\n            /*                let lot_in_stock2 =  await client.query(_QueryPackInOutCTS.getLotInStock2, [\r\n                product_id\r\n                ]); */\r\n            /*    console.log(\"lot_in_stock2\",lot_in_stock2.rows); */\r\n\r\n            \r\n\r\n            var tempDate = [];\r\n            for (let item of lot_in_stock.rows) {\r\n              var LotDetail = await client.query(\r\n                _QueryPackInOutCTS.GetLotPackDetail,\r\n                [product_id, item.pack_no]\r\n              );\r\n              console.log(LotDetail.rows,'sss');\r\n              let temp = {\r\n                lot_no: LotDetail.rows[0].pack_lot_no,\r\n                pack_no: item.pack_no,\r\n                amount: Number(item.weight_amount),\r\n                /*             unit:LotDetail.rows[0].weight_amount != null ? 'กิโลกรัม' : 'ชิ้น' , */\r\n                box_no: LotDetail.rows[0].box_no,\r\n                box_date: LotDetail.rows[0].box_date,\r\n                ref_box_no: LotDetail.rows[0].ref_box_no,\r\n                loss_amount: LotDetail.rows[0].pack_loss,\r\n                plating_plant_id: LotDetail.rows[0].plating_plant_id,\r\n                plating_plant_name: LotDetail.rows[0].plating_plant_code,\r\n                create_date: LotDetail.rows[0].create_date,\r\n                tel: LotDetail.rows[0].tel,\r\n                /*  qc_date:LotDetail.rows[0].qc_date,\r\n                   qc_by:LotDetail.rows[0].qc_approve, */\r\n                /*        tracking_tag_wip_chup:LotDetail.rows[0].tracking_tag_wip_chup,\r\n                   tracking_tag_pack_chup:LotDetail.rows[0].tracking_tag_pack_chup, */\r\n                create_date: LotDetail.rows[0].create_date,\r\n                nw_number: LotDetail.rows[0].nw_number,\r\n              };\r\n              if (Number(item.weight_amount) > 0) {\r\n                tempDate.push(temp);\r\n              }\r\n            }\r\n            console.log(tempDate,'sss');\r\n            resolve(tempDate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetLotPackHistory(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(\r\n              _QueryPackInOutCTS.GetLotPackHistrory,\r\n              [product_id]\r\n            );\r\n            var tempDate = [];\r\n            for (let item of temp.rows) {\r\n              let temp = {\r\n                lot_no: item.pack_lot_no,\r\n                amount: item.weight_amount,\r\n                pack_no: item.pack_no,\r\n                /*       unit:item.weight_amount != null ? 'กิโลกรัม' : 'ชิ้น' , */\r\n                tel: item.tel,\r\n                loss_amount: item.pack_loss,\r\n                plating_plant_id: item.plating_plant_id,\r\n                plating_plant_name: item.plating_plant_name,\r\n                create_date: item.create_date,\r\n                box_no: item.box_no,\r\n                box_date: item.box_date,\r\n                ref_box_no: item.ref_box_no,\r\n                /*  qc_date:item.qc_date,\r\n                 qc_by:item.qc_approve, */\r\n                tracking_tag_wip_chup: item.tracking_tag_wip_chup,\r\n                tracking_tag_pack: item.tracking_tag_pack_chup,\r\n                edit_type: item.edit_type,\r\n                create_date: item.create_date,\r\n              };\r\n              /* if(item.amount > 0 ){ */\r\n              tempDate.push(temp);\r\n            }\r\n\r\n            resolve(tempDate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async genBoxNo() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let box_no = moment(new Date()).add(543, \"year\").format(\"LLLL\");\r\n            box_no = \"PACK\" + moment(new Date(box_no)).format(\"YYMMDD\");\r\n            var check_box = await client.query(\r\n              _QueryPackInOutCTS.checkPackToGen,\r\n              [box_no]\r\n            );\r\n            var count = 1;\r\n            if (check_box.rows.length > 0) {\r\n              count = check_box.rows.length + 1;\r\n            }\r\n            box_no = box_no + pad_fncGen(count);\r\n\r\n            resolve(box_no);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkRefBox(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            var tempCheck = await client.query(\r\n              _QueryPackInOutCTS.check_product_ref_box,\r\n              [model.product_id, model.product_ref_box_no]\r\n            );\r\n            if (tempCheck.rows.length > 0) {\r\n              let temp = {\r\n                status: true,\r\n                message: \"Correct\",\r\n              };\r\n              resolve(temp);\r\n            } else {\r\n              let temp = {\r\n                status: false,\r\n                message: \"Incorrect\",\r\n              };\r\n              resolve(temp);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async getPackloginreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n         //console.log(\"ddd\",model)\r\n\r\n           \r\n            var tempStock = {rows:[]}\r\n\r\n            for (let index = 0; index < model.tracking.length; index++) {\r\n              var getdata = await client.query(_QueryPackInOutCTS.getPackloginreport,[ model.tracking[index]]);\r\n              getdata.rows[0].tracking = model.tracking[index]\r\n              tempStock.rows.push(getdata.rows[0]) \r\n            }\r\n          \r\n\r\n            console.log(\"x\",tempStock.rows)\r\n\r\n\r\n            var tempData = []\r\n            if (tempStock.rows.length > 0) {\r\n              \r\n              for(let i = 0; i < tempStock.rows.length; i++ ){\r\n                var detailLot = await client.query(_QueryPackInOutCTS.GetLotWipPackDetail,[ model.product_id,tempStock.rows[i].pack_no]);\r\n                var detailLotchup = await client.query(_QueryShupInOutCTS.getchup,[detailLot.rows[0].log_wip_chup_edit_amount_cts_id]);\r\n                console.log(\"xz\",detailLotchup.rows)\r\n               if(detailLot.rows.length > 0){\r\n             \r\n              /* var box_no = detailLot.rows[0].ref_box_no === null ? detailLot.rows[0].box_no : detailLot.rows[0].ref_box_no; */\r\n              var box_no = tempStock.rows[i].tracking;\r\n              var pack_no = detailLot.rows[0].tracking_tag_pack_chup;\r\n              var create_date = detailLot.rows[0].create_date;\r\n              var chackPO_cts = detailLot.rows[0].pack_lot_no\r\n              var po_no = null;\r\n              if (detailLotchup.rows.length > 0) {\r\n                po_no  = detailLotchup.rows[0].po_no\r\n              }\r\n             \r\n               }\r\n               console.log(\"z\",chackPO_cts)\r\n               var detailproLot = await client.query(_QueryPackInOutCTS.getProductionOrderDetail,[chackPO_cts]);\r\n               console.log(\"xx\",detailproLot.rows)\r\n                let as = {\r\n                  order_no: detailproLot.rows[0].order_no,\r\n                  amount:tempStock.rows[i].weight_amount !== null ? tempStock.rows[i].weight_amount: tempStock.rows[i].piece_amount,\r\n                  plated: detailproLot.rows[0].plated,\r\n                  box_no: box_no,\r\n                  po_no: po_no,\r\n                  tracking_no: pack_no,\r\n                  product_no: detailproLot.rows[0].product_no,\r\n                  product_name: detailproLot.rows[0].product_name,\r\n                  customer_name: detailproLot.rows[0].customer_name,\r\n                  create_date: create_date\r\n                }\r\n                tempData.push(as)\r\n             } \r\n              \r\n              \r\n            }\r\n            console.log(tempData);\r\n            resolve(tempData)\r\n        } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  if (d.toString().length == 5) {\r\n    return \"0\" + d.toString();\r\n  } else if (d.toString().length == 4) {\r\n    return \"00\" + d.toString();\r\n  } else if (d.toString().length == 3) {\r\n    return \"000\" + d.toString();\r\n  } else if (d.toString().length == 2) {\r\n    return \"0000\" + d.toString();\r\n  } else {\r\n    return \"00000\" + d.toString();\r\n  }\r\n}\r\n\r\nfunction pad_fncGen(d) {\r\n  if (d < 10) {\r\n    return \"0\" + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n}\r\n\r\nmodule.exports = packInOutCTSService;\r\n\n\n//# sourceURL=webpack:///./app/service/packInOutCTSService.js?");

/***/ }),

/***/ "./app/service/permissionService.js":
/*!******************************************!*\
  !*** ./app/service/permissionService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPermission = __webpack_require__(/*! ../query/queryPermission.json */ \"./app/query/queryPermission.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\n\r\nclass permissionService {\r\n  /* \r\n    async addMaterial(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                var query = await client.query(_QueryMaterial.checkNameMaterial, [\r\n                  model.no,\r\n                  model.oem_id,\r\n                ]);\r\n                if (query.rows.length > 0) {\r\n                  reject({\r\n                    message: \"already material no\",\r\n                  });\r\n                }\r\n                let material_id = uuidv4();\r\n               \r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n */\r\n\r\n  async findByUserIdPermission(material_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByUserId, [\r\n              material_id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAll_ICON() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAll_icon, [\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getAllMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllMenu);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeatureUser() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeatureUser);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getAllFeature() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getAllFeature);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterFeature(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.filterFeature,[\r\n              model.feature || null,\r\n              model.menu_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_all() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_all);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            //console.log(model)\r\n            var checkFeature = await client.query(\r\n              _QueryPermission.checkNameFeature,\r\n              [model.feature,model.menu_id]\r\n            );\r\n            if(checkFeature.rows.length > 0){\r\n              throw Error(\"Feature Name Already!!\");\r\n            }\r\n\r\n            var query_sort = await client.query(_QueryPermission.checkFeature);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n            await client.query(_QueryPermission.addFeature, [\r\n              id,\r\n              model.feature,\r\n              model.menu_id,\r\n              sort + 1,\r\n              moment(new Date()),\r\n              user_id,\r\n              user_id,\r\n              moment(new Date()),\r\n              true,\r\n              model.display_feature,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addFeatureUser(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var checkFeatureUser = await client.query(\r\n              _QueryPermission.checkFeatureUser,\r\n              [\r\n                model.user_id,\r\n                model.feature_id,\r\n              ]\r\n            );\r\n            if(checkFeatureUser.rows.length > 0){\r\n              throw Error(\"Feature and User has Already!!\");\r\n            }\r\n\r\n            let id = uuidv4();\r\n\r\n            await client.query(_QueryPermission.addFeatureUser, [\r\n              id,\r\n              model.user_id,\r\n              true,\r\n              model.feature_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var query_sort = await client.query(_QueryPermission.checkMenuSort);\r\n            let sort = query_sort.rows[0].max;\r\n            let id = uuidv4();\r\n            /*    if(model.level == 1){\r\n                  let icon = null;\r\n                  let parent_id = null;\r\n                }else if(model.level == 2){\r\n                  let parent_id = model.parent_id;\r\n                } */\r\n                console.log(model)\r\n               \r\n            await client.query(_QueryPermission.addMenu, [\r\n              id,\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n              model.level,\r\n              moment(new Date()),\r\n              user_id,\r\n              moment(new Date()),\r\n              user_id,\r\n              true,\r\n              sort + 1,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n              model.display_name || null,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n             \r\n            ]);\r\n           \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateMenu(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            console.log(model);\r\n            //throw Error(\"break\");\r\n            await client.query(_QueryPermission.updateMenu, [\r\n              model.id,\r\n              model.name || null,\r\n              model.display_name || null,\r\n              model.path || null,\r\n              moment(new Date()),\r\n              user_id,\r\n              model.parent_id || null,\r\n              model.icon || null,\r\n              model.image_name || null,\r\n              model.image_path || null,\r\n              model.is_image === \"image\" ? true : false,\r\n\r\n              model.academy || null,\r\n              model.academy_image_name || null,\r\n              model.academy_image_path || null,\r\n              model.academy_image || null,\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            await client.query(_QueryPermission.updateFeature, [\r\n              model.id,\r\n              model.feature,\r\n              model.display_feature,\r\n              model.menu_id,\r\n              user_id,\r\n              moment(new Date()),\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateFeature_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n             await client.query(_QueryPermission.delFeaturePemission,[model.user_id]);\r\n             for(let index = 0; index < model.feature.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addFeaturePemission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  true,\r\n                  model.feature[index].id,\r\n                ]);\r\n             }\r\n          /*   await client.query(_QueryPermission.updateFeatureUser, [\r\n              model.id,\r\n              model.user_id,\r\n              model.feature_id,\r\n            ]); */\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delMenu(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var query = await client.query(_QueryPermission.checkSupMenu, [id]);\r\n            if (query.rows[0].count > 0) {\r\n              reject({\r\n                message: \"Don't delete because have sup menu\",\r\n              });\r\n            } else {\r\n              await client.query(_QueryPermission.delMenu, [id]);\r\n              console.log(\"COMMIT\");\r\n              resolve(true);\r\n            }\r\n            /*   reject({\r\n                message: query,\r\n              }); */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeature, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delfeature_user(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          console.log(id);\r\n          try {\r\n            await client.query(_QueryPermission.delFeatureUser, [id]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv1, [\r\n              model.name || null,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterMenuLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv2, [\r\n              model.name || null,\r\n              model.parent_id,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_1(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_1,[\r\n              model.name || null,\r\n              model.path || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_2(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n            let temp = await client.query(_QueryPermission.get_level_2,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async get_Level_3(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.get_level_3,[\r\n              model.name || null,\r\n              model.path || null,\r\n              model.parent_id || null,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findLevelById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.find_level_Byid, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.findByFeatureId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findFeatureUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryPermission.findByFeatureUserDataId,\r\n              [id]\r\n            );\r\n            console.log(temp.rows)\r\n          \r\n              resolve(temp.rows);\r\n        \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getLevel2ByLv1(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            //console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            //console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLevel3ByLv2(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n            for(var i=0; i < model.length;i++){\r\n              var temp = await client.query(_QueryPermission.getLevelByLv,[model[i].menu_parent]);\r\n              for(var t=0; t < temp.rows.length;t++){\r\n                arr.push(temp.rows[t]);\r\n              }\r\n              \r\n            }\r\n            console.log(arr)\r\n            if (arr.length > 0) {\r\n              resolve(arr);\r\n            } else {\r\n              resolve(arr);\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n  async addMenuPermission(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n            console.log(model)\r\n            const arr = [];\r\n       \r\n              await client.query(_QueryPermission.delMenuPermission,[model[0].user_id]);\r\n      \r\n            for(var i=0; i < model.length;i++){\r\n              let pm_id = uuidv4();\r\n            await client.query(_QueryPermission.addMenuPermission,[pm_id,model[i].menu_id,true, model[i].user_id]);\r\n            }\r\n            console.log(arr)\r\n            resolve(true);\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findMenuPermissionByUserId(user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n             \r\n          try {\r\n          \r\n          \r\n         \r\n              var temp = await client.query(_QueryPermission.findMenuPermissionByUserId,[user_id]);\r\n               console.log(temp.rows)\r\n              \r\n            \r\n            //console.log(arr)\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            } \r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getMenuByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getMenuByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getFeatureByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getFeatureByUserId, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n             var temp_Default = {\r\n                user_id:id,\r\n                menu:\"\",\r\n                feature:\"\",\r\n              };\r\n              resolve([temp_Default]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async sorting_menu(data,admin_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            let menuByLevel = await client.query(_QueryPermission.getMenuByLevel, [\r\n                data.menu_level,\r\n              ]);\r\n            \r\n\r\n            if (menuByLevel.rows.length === 0) {\r\n              reject(\"not found\");\r\n            }\r\n\r\n            \r\n            if (data.sort_type===\"sort_up\") {\r\n              let menu_for_swap = {};\r\n            for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n              if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                menu_for_swap[\"menu_id\"] = menuByLevel.rows[index-1].id;\r\n                menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index-1].sort;\r\n              }\r\n            }\r\n\r\n\r\n           /*  console.log(  menuByLevel); */\r\n           /*  console.log(menu_for_swap.menu_id); */\r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n                admin_id,\r\n              menu_for_swap.menu_sort,\r\n              data.current_sort_id,\r\n            ]);\r\n            \r\n            \r\n            await client.query(_QueryPermission.update_sort, [\r\n              moment(new Date()),\r\n              admin_id,\r\n              data.current_sort,\r\n              menu_for_swap.menu_id,\r\n            ]);\r\n\r\n           \r\n\r\n            }else if (data.sort_type===\"sort_down\"){\r\n\r\n              let menu_for_swap = {};\r\n              for (let index = 0; index < menuByLevel.rows.length; index++) {\r\n                if (data.current_sort_id === menuByLevel.rows[index].id) {\r\n                  menu_for_swap[\"menu_id\"] = menuByLevel.rows[index+1].id;\r\n                  menu_for_swap[\"menu_sort\"] = menuByLevel.rows[index+1].sort;\r\n                }\r\n              }\r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                  admin_id,\r\n                menu_for_swap.menu_sort,\r\n                data.current_sort_id,\r\n              ]);\r\n              \r\n              \r\n              await client.query(_QueryPermission.update_sort, [\r\n                moment(new Date()),\r\n                admin_id,\r\n                data.current_sort,\r\n                menu_for_swap.menu_id,\r\n              ]);\r\n  \r\n             \r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n    \r\n  async getOEMByUserID(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryPermission.getOEMByUserID, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async findOemUserById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(id);\r\n            let temp = await client.query(_QueryPermission.findOemUserById, [\r\n              id,\r\n            ]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              resolve([]);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async updateOem_user(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n\r\n            console.log(model)\r\n          \r\n            \r\n             \r\n             if ( model.oem.length > 0) {\r\n\r\n              await client.query(_QueryPermission.delOemPermission,[model.user_id]);\r\n\r\n                  for(let index = 0; index < model.oem.length; index++){\r\n                let pf_id = uuidv4();\r\n                await client.query(_QueryPermission.addOemPermission, [\r\n                  pf_id,\r\n                  model.user_id,\r\n                  model.oem[index].id,\r\n                  true,\r\n                ]);\r\n             }\r\n\r\n             }\r\n          \r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = permissionService;\r\n\n\n//# sourceURL=webpack:///./app/service/permissionService.js?");

/***/ }),

/***/ "./app/service/planningCTSService.js":
/*!*******************************************!*\
  !*** ./app/service/planningCTSService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPlanningCTS = __webpack_require__(/*! ../query/queryPlanningCTS.json */ \"./app/query/queryPlanningCTS.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass planningCTSService {\r\n  async filterPlanning(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /*          console.log(model); */\r\n\r\n            const planningData = [];\r\n            var productList = await client.query(_QueryPlanningCTS.getProduct, [\r\n              model.no || null,\r\n              model.modelCate || null,\r\n              model.oem_id,\r\n            ]);\r\n            var n1 = moment(new Date(model.year + \"-\" + pad_fnc(model.month)));\r\n            var n2 = moment(n1).add(1, \"month\").format(\"YYYYMM\");\r\n            var n3 = moment(n1).add(2, \"month\").format(\"YYYYMM\");\r\n            var n4 = moment(n1).add(3, \"month\").format(\"YYYYMM\");\r\n            /*          console.log(n1)\r\n            console.log(n2)\r\n            console.log(n3)\r\n            console.log(n4) */\r\n\r\n            for (let item of productList.rows) {\r\n              var forecast_n2_sum = 0;\r\n              var forecast_n2 = await client.query(\r\n                _QueryPlanningCTS.getForecastByYearMonth,\r\n                [\r\n                  n2,\r\n                  item.id, //product_id\r\n                ]\r\n              );\r\n              for (let i of forecast_n2.rows) {\r\n                forecast_n2_sum += parseInt(i.amount_forcast);\r\n              }\r\n              var forecast_n3_sum = 0;\r\n              var forecast_n3 = await client.query(\r\n                _QueryPlanningCTS.getForecastByYearMonth,\r\n                [\r\n                  n3,\r\n                  item.id, //product_id\r\n                ]\r\n              );\r\n              for (let i of forecast_n3.rows) {\r\n                forecast_n3_sum += parseInt(i.amount_forcast);\r\n              }\r\n              var forecast_n4_sum = 0;\r\n              var forecast_n4 = await client.query(\r\n                _QueryPlanningCTS.getForecastByYearMonth,\r\n                [\r\n                  n4,\r\n                  item.id, //product_id\r\n                ]\r\n              );\r\n              for (let i of forecast_n4.rows) {\r\n                forecast_n4_sum += parseInt(i.amount_forcast);\r\n              }\r\n              var forecast_day = await client.query(\r\n                _QueryPlanningCTS.getForecastDayByYearMonth,\r\n                [\r\n                  model.year + pad_fnc(model.month),\r\n                  item.id, //product_id\r\n                ]\r\n              );\r\n\r\n              var start_date = moment(\r\n                new Date(model.year + \"-\" + pad_fnc(model.month))\r\n              ).startOf(\"month\");\r\n              var end_date = moment(start_date).endOf(\"month\");\r\n              /*   console.log(start_date);\r\n              console.log(end_date); */\r\n              var fgIn = await client.query(\r\n                _QueryPlanningCTS.getFgInByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n              var fgOut = await client.query(\r\n                _QueryPlanningCTS.getFgOutByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n\r\n              const current_dateStock_lasted = new Date(\r\n                Number(model.year),\r\n                Number(model.month)-1,\r\n                0,\r\n                23,59\r\n              )\r\n              const current_dateStock = new Date(\r\n                Number(model.year),\r\n                Number(model.month)-2,\r\n                1,\r\n              )\r\n\r\n              var start_date2 = moment(\r\n                new Date(model.year + \"-\" + pad_fnc(model.month))\r\n              ).startOf(\"month\").add(-1,'month');\r\n              var end_date2 = moment(start_date2).endOf(\"month\").add(-1,'month');;\r\n                var getStockLastMonth = await client.query(\r\n                  _QueryPlanningCTS.getLastStockByLek,\r\n                  [\r\n                    item.id, //product_id\r\n                    start_date2,\r\n                    end_date2,\r\n                  ]\r\n                );\r\n                console.log(start_date.format('DD/MM/YYYY'))\r\n                  console.log(\"getStockLastMonth\",getStockLastMonth.rows)\r\n                  if(getStockLastMonth.rows.length == 0 && parseInt(start_date.format('YYYYMM')) > parseInt(moment(new Date()).format('YYYYMM')) ){\r\n                     getStockLastMonth = await client.query(\r\n                      _QueryPlanningCTS.getLastStockByLek2,\r\n                      [\r\n                        item.id, //product_id\r\n                  \r\n                      ]\r\n                    );\r\n                  }\r\n\r\n\r\n              var last_month_stock = await client.query(\r\n                _QueryPlanningCTS.getLastStock,\r\n                [\r\n                  item.id, //product_id\r\n                  current_dateStock,\r\n                  current_dateStock_lasted,\r\n                ]\r\n              );\r\n              console.log(\"last_month_stock\",last_month_stock.rows);\r\n              var po_start_date = Number(moment(start_date).format(\"YYYYMMDD\"));\r\n              var po_end_date = Number(moment(end_date).format(\"YYYYMMDD\"));\r\n\r\n              var po_order = await client.query(\r\n                _QueryPlanningCTS.getPoOrderByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  parseInt(po_start_date),\r\n                  parseInt(po_end_date),\r\n                ]\r\n              );\r\n\r\n              var choup_inData = await client.query(\r\n                _QueryPlanningCTS.getChoupInByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n\r\n              var choup_outData = await client.query(\r\n                _QueryPlanningCTS.getChoupOutByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n\r\n              var pack_inData = await client.query(\r\n                _QueryPlanningCTS.getPackInByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n\r\n              var pack_outData = await client.query(\r\n                _QueryPlanningCTS.getPackOutByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  start_date,\r\n                  end_date,\r\n                ]\r\n              );\r\n\r\n              let temp = {\r\n                product_id: item.id, //product_id\r\n                product_no: item.no, //product_no\r\n                product_surface: item.surface, // surface\r\n                product_stock:\r\n                  getStockLastMonth.rows.length > 0\r\n                    ? getStockLastMonth.rows[0].current_amount\r\n                    : 0, // current_amount\r\n                /*        product_forecast:forecast.rows, // forecast month, */\r\n                product_forecast_n2: forecast_n2.rows,\r\n                product_forecast_n2_sum: forecast_n2_sum,\r\n                product_forecast_n3: forecast_n3.rows,\r\n                product_forecast_n3_sum: forecast_n3_sum,\r\n                product_forecast_n4: forecast_n4.rows,\r\n                product_forecast_n4_sum: forecast_n4_sum,\r\n                product_due: forecast_day.rows, // forcecast day\r\n                product_poOrder: po_order.rows,\r\n                product_fgIN: fgIn.rows,\r\n                prodcut_fgOut: fgOut.rows,\r\n                product_choup_in: choup_inData.rows,\r\n                product_choup_out: choup_outData.rows,\r\n\r\n                product_pack_in: pack_inData.rows,\r\n                product_pack_out: pack_outData.rows,\r\n\r\n                due: [],\r\n                fg_in: [],\r\n                fg_out: [],\r\n                choup_in: [],\r\n                choup_out: [],\r\n\r\n                pack_in: [],\r\n                pack_out: [],\r\n              };\r\n              planningData.push(temp);\r\n            }\r\n\r\n            /*     console.log(planningData); */\r\n            var day_in_month = moment(start_date).daysInMonth();\r\n\r\n            for (let item of planningData) {\r\n              let due = [];\r\n              let fg_in = [];\r\n              let fg_out = [];\r\n              let act_stock = [];\r\n              let po_order = [];\r\n              let choup_in = [];\r\n              let choup_out = [];\r\n\r\n              let pack_in = [];\r\n              let pack_out = [];\r\n\r\n              for (let i = 0; i < day_in_month; i++) {\r\n                var due_value = item.product_due.filter((e) => {\r\n                  return parseInt(e.day) === i + 1;\r\n                });\r\n                /*  console.log(due_value) */\r\n                if (due_value.length > 0) {\r\n                  let due_sum = 0;\r\n                  for (let i of due_value) {\r\n                    due_sum += parseInt(i.amount_forcast);\r\n                  }\r\n                  due.push(parseInt(due_sum));\r\n                } else {\r\n                  due.push(0);\r\n                }\r\n\r\n                var fgIn_value = item.product_fgIN.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (fgIn_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of fgIn_value) {\r\n                    sum_amount += parseInt(i.amount);\r\n                  }\r\n                  fg_in.push(parseInt(sum_amount));\r\n                } else {\r\n                  fg_in.push(0);\r\n                }\r\n\r\n                var fgOut_value = item.prodcut_fgOut.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (fgOut_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of fgOut_value) {\r\n                    sum_amount += parseInt(i.amount);\r\n                  }\r\n                  fg_out.push(parseInt(sum_amount));\r\n                  /*        fg_out.push(parseInt(fgOut_value[0].amount)); */\r\n                } else {\r\n                  fg_out.push(0);\r\n                }\r\n\r\n                let old_act_stock = act_stock[act_stock.length - 1];\r\n                if (i === 0) {\r\n                  let act_stock_value =\r\n                    (item.product_stock -due[i])+ fg_in[i] ;\r\n                  act_stock.push(act_stock_value);\r\n                } else {\r\n                  let act_stock_value = (old_act_stock  -due[i] )+ fg_in[i];\r\n                  act_stock.push(act_stock_value);\r\n                }\r\n\r\n                let po_value = item.product_poOrder.filter((e) => {\r\n                  return (\r\n                    parseInt(\r\n                      moment(e.delivery_date, \"YYYYMMDD\").format(\"DD\")\r\n                    ) ===\r\n                    i + 1\r\n                  );\r\n                });\r\n                /*   console.log(po_value,i+1); */\r\n                if (po_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of po_value) {\r\n                    sum_amount += parseInt(i.qty_ordered);\r\n                  }\r\n                  po_order.push(parseInt(sum_amount));\r\n                } else {\r\n                  po_order.push(0);\r\n                }\r\n\r\n                var choupIn_value = item.product_choup_in.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (choupIn_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of choupIn_value) {\r\n                    if (i.weight_amount !== null && i.picecs_amount === null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat( parseFloat(i.weight_amount) / parseFloat(i.nw)*1000 ).toFixed(2)\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                       /*  console.log(\"weight_amount\", Math.floor(\r\n                          parseFloat( parseFloat(i.weight_amount) / parseFloat(i.nw) *1000).toFixed(2)\r\n                        )); */\r\n                      sum_amount += parseInt(amount);\r\n                    } else {\r\n                      sum_amount += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n                  //console.log(\"ชิ้น\", sum_amount);\r\n                  choup_in.push(parseInt(sum_amount));\r\n                } else {\r\n                  choup_in.push(0);\r\n                }\r\n\r\n                var choupOut_value = item.product_choup_out.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (choupOut_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of choupOut_value) {\r\n                    if (i.weight_amount !== null && i.picecs_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat( parseFloat(i.weight_amount) / parseFloat(i.nw)*1000 ).toFixed(2)\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                     /*  console.log(\"ชิ้น\", amount, i.nw); */\r\n                      sum_amount += parseInt(amount);\r\n                    } else {\r\n                      sum_amount += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n                  //console.log(\"ชิ้น\", sum_amount);\r\n                  choup_out.push(parseInt(sum_amount));\r\n                  /*        fg_out.push(parseInt(fgOut_value[0].amount)); */\r\n                } else {\r\n                  choup_out.push(0);\r\n                }\r\n                // console.log(start_date,end_date);\r\n\r\n                // Pack In\r\n\r\n                var packIn_value = item.product_pack_in.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (packIn_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of packIn_value) {\r\n                    if (i.weight_amount !== null && i.picecs_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw)\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      console.log(\"ชิ้น\", amount, i.nw);\r\n                      sum_amount += parseInt(amount);\r\n                    } else {\r\n                      sum_amount += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n                  pack_in.push(parseInt(sum_amount));\r\n                } else {\r\n                  pack_in.push(0);\r\n                }\r\n\r\n                // Pack Out\r\n\r\n                var packOut_value = item.product_pack_out.filter((e) => {\r\n                  return parseInt(moment(e.create_date).format(\"DD\")) === i + 1;\r\n                });\r\n                if (packOut_value.length > 0) {\r\n                  var sum_amount = 0;\r\n                  for (let i of packOut_value) {\r\n                    if (i.weight_amount !== null && i.picecs_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw)\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      //console.log(\"ชิ้น\", amount, i.nw);\r\n                      sum_amount += parseInt(amount);\r\n                    } else {\r\n                      sum_amount += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n                  pack_out.push(parseInt(sum_amount));\r\n                } else {\r\n                  pack_out.push(0);\r\n                }\r\n              }\r\n              let sum = 0;\r\n              var balance = fg_out.map((a, i) => {\r\n                sum +=   a - (po_order[i] === 0 ? due[i] : po_order[i]);\r\n                return sum;\r\n              });\r\n              sum = 0;\r\n              item.due = due;\r\n              item.fg_in = fg_in;\r\n              item.actual = fg_out;\r\n              item.balance =  balance;\r\n              item.act_stock = act_stock;\r\n              item.po_order = po_order;\r\n              item.choup_in = choup_in;\r\n              item.choup_out = choup_out;\r\n\r\n              item.pack_in = pack_in;\r\n              item.pack_out = pack_out;\r\n            }\r\n\r\n            planningData.sort((a, b) =>\r\n              a.product_no.localeCompare(b.product_no)\r\n            );\r\n            resolve(planningData);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async dailyPlan(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var tempProduct = [];\r\n            for (let i of model.modelCate) {\r\n              var productList = await client.query(\r\n                _QueryPlanningCTS.getProduct,\r\n                [null, i.value, model.oem_id]\r\n              );\r\n\r\n              for (let product of productList.rows) {\r\n                tempProduct.push(product);\r\n              }\r\n            }\r\n\r\n            var tempProductInDeliveryDate = [];\r\n            var date = moment(new Date()).format(\"YYYYMMDD\");\r\n            var date2 = moment(date).endOf(\"month\").format(\"YYYYMMDD\");\r\n\r\n            for (let item of tempProduct) {\r\n              var tempPo = await client.query(\r\n                _QueryPlanningCTS.getPoDeliveryByDate,\r\n                [\r\n                  item.id, //product_id\r\n                  date, //now deliveryd aate\r\n                  date2, //end month delivery_date\r\n                ]\r\n              );\r\n              var po_start_date = Number(moment(start_date).format(\"YYYYMMDD\"));\r\n              var po_end_date = Number(moment(end_date).format(\"YYYYMMDD\"));\r\n\r\n              var po_order1 = await client.query(\r\n                _QueryPlanningCTS.getPoOrderByYearMonth,\r\n                [\r\n                  item.id, //product_id\r\n                  parseInt(po_start_date),\r\n                  parseInt(date2),\r\n                ]\r\n              );\r\n              if (tempPo.rows.length > 0) {\r\n                for (let po of tempPo.rows) {\r\n                  var n1 = moment(new Date());\r\n                  var n2 = moment(n1).add(1, \"month\").format(\"YYYYMM\");\r\n                  var forecast_n2_sum = 0;\r\n                  var forecast_n2 = await client.query(\r\n                    _QueryPlanningCTS.getForecastByYearMonth,\r\n                    [\r\n                      n2,\r\n                      item.id, //product_id\r\n                    ]\r\n                  );\r\n                  for (let i of forecast_n2.rows) {\r\n                    forecast_n2_sum += parseInt(i.amount_forcast);\r\n                  }\r\n                  var customer = await client.query(\r\n                    _QueryPlanningCTS.getCustomerByProduct,\r\n                    [item.id]\r\n                  );\r\n                  var customer_name_list = \"\";\r\n                  let count = 1;\r\n                  for (let i of customer.rows) {\r\n                    /*             console.log(i.customer_name) */\r\n                    customer_name_list +=\r\n                      i.customer_name +\r\n                      (count === customer.rows.length ? \"\" : \" , \");\r\n                    count++;\r\n                  }\r\n\r\n                  var forecast_day = await client.query(\r\n                    _QueryPlanningCTS.getForecastDayByYearMonth,\r\n                    [\r\n                      moment(new Date()).format(\"YYYYMM\"),\r\n                      item.id, //product_id\r\n                    ]\r\n                  );\r\n\r\n                  var start_date = moment(new Date()).startOf(\"month\");\r\n                  var end_date = moment(start_date).endOf(\"month\");\r\n                  var day_in_month = moment(start_date).daysInMonth();\r\n                  /*   console.log(day_in_month); */\r\n                  var fgIn = await client.query(\r\n                    _QueryPlanningCTS.getFgInByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      start_date,\r\n                      end_date,\r\n                    ]\r\n                  );\r\n                  var fgOut = await client.query(\r\n                    _QueryPlanningCTS.getFgOutByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      start_date,\r\n                      end_date,\r\n                    ]\r\n                  );\r\n\r\n                  var choupIn = await client.query(\r\n                    _QueryPlanningCTS.getChoupInByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      moment(new Date()).startOf(\"days\"),\r\n                      moment(new Date()).endOf(\"days\"),\r\n                    ]\r\n                  );\r\n\r\n                  var choupOut = await client.query(\r\n                    _QueryPlanningCTS.getChoupOutByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      moment(new Date()).startOf(\"days\"),\r\n                      moment(new Date()).endOf(\"days\"),\r\n                    ]\r\n                  );\r\n\r\n                  var choupInToDay = 0;\r\n                  for (let i of choupIn.rows) {\r\n                    if (i.weight_amount !== null && i.picecs_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw) *1000\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      /*   console.log(\"ชิ้น\",amount,i.nw) */\r\n                      choupInToDay += parseInt(amount);\r\n                    } else {\r\n                      choupInToDay += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n\r\n                  var choupOutToDay = 0;\r\n                  for (let i of choupOut.rows) {\r\n                    if (i.weight_amount !== null && i.picecs_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw) *1000\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      /*   console.log(\"ชิ้น\",amount,i.nw) */\r\n                      choupOutToDay += parseInt(amount);\r\n                    } else {\r\n                      choupOutToDay += parseInt(i.picecs_amount);\r\n                    }\r\n                  }\r\n\r\n                  var packIn = await client.query(\r\n                    _QueryPlanningCTS.getPackInByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      moment(new Date()).startOf(\"days\"),\r\n                      moment(new Date()).endOf(\"days\"),\r\n                    ]\r\n                  );\r\n                  var packOut = await client.query(\r\n                    _QueryPlanningCTS.getPackOutByYearMonth,\r\n                    [\r\n                      item.id, //product_id\r\n                      moment(new Date()).startOf(\"days\"),\r\n                      moment(new Date()).endOf(\"days\"),\r\n                    ]\r\n                  );\r\n\r\n                  var packInToDay = 0;\r\n                  for (let i of packIn.rows) {\r\n                    if (i.weight_amount !== null && i.piece_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw)*1000\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      /*   console.log(\"ชิ้น\",amount,i.nw) */\r\n                      packInToDay += parseInt(amount);\r\n                    } else {\r\n                      packInToDay += parseInt(i.piece_amount);\r\n                    }\r\n                  }\r\n\r\n                  var packOutToDay = 0;\r\n                  for (let i of packOut.rows) {\r\n                    if (i.weight_amount !== null && i.piece_amount == null) {\r\n                      var amount = Math.floor(\r\n                        parseFloat(i.weight_amount).toFixed(2) /\r\n                          parseFloat(i.nw)*1000\r\n                      ); /// แปลงกิโล เป็น ชิ้น\r\n                      /*   console.log(\"ชิ้น\",amount,i.nw) */\r\n                      packOutToDay += parseInt(amount);\r\n                    } else {\r\n                      packOutToDay += parseInt(i.piece_amount);\r\n                    }\r\n                  }\r\n                  const current_dateStock_lasted = new Date(\r\n                    Number(model.year),\r\n                    Number(model.month),\r\n                    0,\r\n                    23,59\r\n                  )\r\n                  const current_dateStock = new Date(\r\n                    Number(model.year),\r\n                    Number(model.month)-1,\r\n                    1,\r\n                  )\r\n                  console.log(\"current_dateStock\",\"current_dateStock_lasted\",current_dateStock,current_dateStock_lasted);\r\n                  var last_month_stock = await client.query(\r\n                    _QueryPlanningCTS.getLastStock,\r\n                    [\r\n                      item.id, //product_id\r\n                      current_dateStock,\r\n                      current_dateStock_lasted,\r\n                    ]\r\n                  );\r\n                  console.log(\"last_month_stock\",last_month_stock);\r\n                  item.product_stock =\r\n                    last_month_stock.rows.length > 0\r\n                      ? last_month_stock.rows[0].current_amount_sum\r\n                      : 0; // current_amount\r\n                  item.product_due = forecast_day.rows; // forcecast day\r\n                  /*         item.product_poOrder=po_order.rows; */\r\n                  item.product_fgIN = fgIn.rows;\r\n                  item.prodcut_fgOut = fgOut.rows;\r\n\r\n                  let due = [];\r\n                  let fg_in = [];\r\n                  let fg_out = [];\r\n                  let act_stock = [];\r\n                  let po_order = [];\r\n                  for (let i = 0; i < day_in_month; i++) {\r\n                    var due_value = item.product_due.filter((e) => {\r\n                      return parseInt(e.day) === i + 1;\r\n                    });\r\n                    /*  console.log(due_value) */\r\n                    if (due_value.length > 0) {\r\n                      due.push(parseInt(due_value[0].amount_forcast));\r\n                    } else {\r\n                      due.push(0);\r\n                    }\r\n\r\n                    var fgIn_value = item.product_fgIN.filter((e) => {\r\n                      return (\r\n                        parseInt(moment(e.create_date).format(\"DD\")) === i + 1\r\n                      );\r\n                    });\r\n                    if (fgIn_value.length > 0) {\r\n                      var sum_amount = 0;\r\n                      for (let i of fgIn_value) {\r\n                        sum_amount += parseInt(i.amount);\r\n                      }\r\n                      fg_in.push(parseInt(sum_amount));\r\n                    } else {\r\n                      fg_in.push(0);\r\n                    }\r\n\r\n                    var fgOut_value = item.prodcut_fgOut.filter((e) => {\r\n                      return (\r\n                        parseInt(moment(e.create_date).format(\"DD\")) === i + 1\r\n                      );\r\n                    });\r\n                    if (fgOut_value.length > 0) {\r\n                      var sum_amount = 0;\r\n                      for (let i of fgOut_value) {\r\n                        sum_amount += parseInt(i.amount);\r\n                      }\r\n                      fg_out.push(parseInt(sum_amount));\r\n                      /*        fg_out.push(parseInt(fgOut_value[0].amount)); */\r\n                    } else {\r\n                      fg_out.push(0);\r\n                    }\r\n\r\n                    let po_value = po_order1.rows.filter((e) => {\r\n                      return (\r\n                        parseInt(\r\n                          moment(e.delivery_date, \"YYYYMMDD\").format(\"DD\")\r\n                        ) ===\r\n                        i + 1\r\n                      );\r\n                    });\r\n                    /*   console.log(po_value,i+1); */\r\n                    if (po_value.length > 0) {\r\n                      var sum_amount = 0;\r\n                      for (let i of po_value) {\r\n                        sum_amount += parseInt(i.qty_ordered);\r\n                      }\r\n                      po_order.push(parseInt(sum_amount));\r\n                    } else {\r\n                      po_order.push(0);\r\n                    }\r\n\r\n                    let old_act_stock = act_stock[act_stock.length - 1];\r\n                    if (i === 0) {\r\n                      /*      console.log(item.product_stock); */\r\n                      let act_stock_value =\r\n                        (item.product_stock - due[i])+  fg_in[i] ;\r\n                      act_stock.push(act_stock_value);\r\n                    } else {\r\n                      let act_stock_value =\r\n                      (old_act_stock  -due[i] )+  fg_in[i] ;\r\n                      act_stock.push(act_stock_value);\r\n                    }\r\n                  }\r\n                  let test = [];\r\n                  for (\r\n                    let i = parseInt(moment(new Date()).format(\"DD\")) - 1;\r\n                    i < day_in_month;\r\n                    i++\r\n                  ) {\r\n                    var due_value = due[i];\r\n\r\n                    if (po_order[i] > 0) {\r\n                      /*         console.log(\"pote\",po_order)\r\n                          console.log(\"in\",po_order[i]) */\r\n                      due_value = po_order[i];\r\n                    }\r\n                    test.push(due_value);\r\n\r\n                    /*         var under = act_stock[act_stock.length - 1] -  */\r\n                  }\r\n\r\n                  var all_forcast_plan = test.reduce((a, b) => a + b);\r\n\r\n                  var balance =\r\n                    all_forcast_plan - act_stock[act_stock.length - 1];\r\n                  console.log(all_forcast_plan, balance);\r\n                  /*    var sum_balance =0;\r\n                    for(let b of balance){\r\n                      sum_balance += parseInt(b);\r\n                    } */\r\n                  var generate_day =\r\n                    Math.ceil(po.qty_ordered / item.min_product || 0) *\r\n                      item.min_product || 0;\r\n\r\n                  let temp = {\r\n                    product_id: item.id, //product_id\r\n                    product_no: item.no, //product_no\r\n                    product_name: item.name, //name\r\n                    product_customer: customer_name_list, //product_customer\r\n                    product_due: po.delivery_date, //due date\r\n                    product_min: generate_day, //min product\r\n                    po_order: po.qty_ordered, //qty_ordered\r\n                    product_n2: forecast_n2_sum, //N+1\r\n                    product_wip_out: choupOutToDay, // wip ชุบ out รอ data\r\n                    product_wip_in: choupInToDay, // wip ชุบ out รอ data\r\n                    product_pack_in: packInToDay,\r\n                    product_pack_out: packOutToDay,\r\n                    balance: balance,\r\n\r\n                    /*     po:po_order,\r\n                      due:due,\r\n                      ba:balance */\r\n                  };\r\n                  tempProductInDeliveryDate.push(temp);\r\n                }\r\n              }\r\n            }\r\n            tempProductInDeliveryDate.sort(\r\n              (a, b) => a.product_due - b.product_due\r\n            );\r\n            /*       console.log(tempProductInDeliveryDate); */\r\n            resolve(tempProductInDeliveryDate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  if (d < 10) {\r\n    return \"0\" + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n}\r\n\r\nmodule.exports = planningCTSService;\r\n\n\n//# sourceURL=webpack:///./app/service/planningCTSService.js?");

/***/ }),

/***/ "./app/service/productPlaningService.js":
/*!**********************************************!*\
  !*** ./app/service/productPlaningService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst {\r\n  Client,\r\n  Pool\r\n} = __webpack_require__(/*! pg */ \"pg\")\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProduct = __webpack_require__(/*! ../query/queryProduct.json */ \"./app/query/queryProduct.json\");\r\nconst _QueryProductPlaning = __webpack_require__(/*! ../query/queryProductPlaning.json */ \"./app/query/queryProductPlaning.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\n\r\nvar {\r\n  v4: uuidv4, stringify\r\n} = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { json } = __webpack_require__(/*! body-parser */ \"body-parser\");\r\n\r\nclass productPlaningService {\r\n\r\n  async updateRealOrder(item, user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n      function pad(d) {\r\n        if(d < 10){\r\n\r\n            return '000' + d.toString();\r\n        }else if(d < 100){\r\n            return '00' + d.toString();\r\n        }else if(d < 1000){\r\n            return '0' + d.toString();\r\n        }else{\r\n            return d.toString();\r\n        }\r\n        \r\n    }\r\n      try {\r\n\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n       try {\r\n        let order_no = \"OP\" + moment(new Date()).format(\"YYYYMMDD\");\r\n        //console.log(order_no);\r\n        \r\n        \r\n              var getOrderNo = await client.query(_QueryProductPlaning.getOrderNo,[order_no,item[0].oem_id]);\r\n              console.log(getOrderNo.rows);\r\n              if(getOrderNo.rows.length > 0){\r\n                let laslotarr =[];\r\n                var test = getOrderNo.rows[0].order_no;\r\n                console.log(test);\r\n                for(let i of test){\r\n                  laslotarr.push(i);\r\n                }\r\n                laslotarr.splice(0, 11); \r\n                var key_lot = \"\";\r\n                for(let i of laslotarr){\r\n                  key_lot += i;\r\n                }\r\n                console.log(key_lot);\r\n              \r\n                var count = parseInt(key_lot)+1;\r\n                  console.log(count);\r\n                order_no = order_no+'-'+pad(count);\r\n              }else{\r\n                order_no = order_no+'-'+pad(1);\r\n              }\r\n      \r\n        console.log(order_no);\r\n        const list_product = [];\r\n         var oem_id = item[0].oem_id;\r\n        for (let model of item) {\r\n          if (model.order > 0) {\r\n            list_product.push(model);\r\n          }\r\n        }\r\n\r\n        const list_product2 = [];\r\n        for (let index = 0; index < list_product.length; index++) {\r\n          var sum =  list_product[index].order;\r\n          var GetProductDetail = await client.query(_QueryProductPlaning.GetProductDetail, [list_product[index].id,list_product[index].oem_id]);\r\n          var GetProductLot = await client.query(_QueryProductPlaning.GetProductDetail2, [GetProductDetail.rows[0].mat_id]);\r\n          const list_lot = [];\r\n          for(var i = 0; i < GetProductLot.rows.length; i++){\r\n            // console.log(\"test\",GetProductLot.rows[i]);\r\n            // console.log(\"test2\",GetProductDetail.rows[0].mat_id)\r\n            sum = sum - GetProductLot.rows[i].amount;\r\n\r\n            if(sum>0){\r\n              var net = GetProductLot.rows[i].amount\r\n            }\r\n            else{\r\n              var net = (Number(GetProductLot.rows[i].amount) +Number(sum))\r\n            }\r\n            \r\n            \r\n            if(GetProductLot.rows[i].amount >0){\r\n            var templot = {\r\n              mat_lot:GetProductLot.rows[i].mat_lot_no,\r\n            \r\n              mat_amount:net,\r\n            }\r\n            list_lot.push(templot);\r\n            if(sum<=0){\r\n              break\r\n            }\r\n           }\r\n\r\n           //throw Error(\"break\");\r\n          }\r\n          var temp = {\r\n            id: list_product[index].id,\r\n            no: list_product[index].no,\r\n            name: list_product[index].name,\r\n            year: list_product[index].year,\r\n            month: list_product[index].month,\r\n            suggestion : list_product[index].m_suggession,\r\n            order: list_product[index].order,\r\n            mat_size: GetProductDetail.rows[0].mat_size,\r\n            c_leng: GetProductDetail.rows[0].c_leng,\r\n            mat_spec: GetProductDetail.rows[0].mat_spec,\r\n            n1: list_product[index].n1,\r\n            n2: list_product[index].n2,\r\n            n3: list_product[index].n3,\r\n            n4: list_product[index].n4,\r\n            steel_bar: list_product[index].steel_bar,\r\n            mat_id: GetProductDetail.rows[0].mat_id,\r\n            mat_no: GetProductDetail.rows[0].mat_no,\r\n            mat_lot:list_lot\r\n            //mat_lot:GetProductLot.rows[0].mat_lot_no,\r\n            //mat_amount:GetProductLot.rows[0].amount,\r\n          }\r\n          if(list_product[index].order > 0){\r\n            list_product2.push(temp);\r\n          }\r\n         \r\n        }\r\n\r\n       //console.log(list_mat_lot);\r\n       console.log(list_product2)\r\n       //console.log(list_product2)\r\n       // console.log(GetProductDetail)\r\n\r\n\r\n        if(list_product2.length > 0){\r\n           /* var check_orderNo = await client.query(_QueryProductPlaning.check_order, [order_no,item.oem_id]);\r\n          console.log(check_orderNo.rows.length)\r\n          if (check_orderNo.rows.length > 0) {\r\n            var count = check_orderNo.rows.length;\r\n            order_no = order_no + \"-\" + count;\r\n          }  */\r\n         // console.log(\"order\", order_no);\r\n          let product_order_id = uuidv4();\r\n          await client.query(_QueryProductPlaning.add_order, [\r\n            product_order_id,\r\n            order_no,\r\n            true,\r\n            true,\r\n            user_id,\r\n            moment(new Date()),\r\n            null,\r\n            JSON.stringify(list_product2) || null,\r\n            oem_id,\r\n          ]);\r\n        }else{\r\n          throw Error(\"Not approve becuase it not have order!!!\");\r\n        }\r\n    \r\n\r\n       \r\n        resolve(list_product); \r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      \r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n    }))\r\n  }\r\n\r\n  async filterViewOrderProduction(order_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n\r\n\r\n\r\n            var temp = await client.query(_QueryProductPlaning.findOrder, [\r\n              order_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async FilterOrderForcast(model) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n       \r\n          let year = model.year;\r\n          let  month = model.month;\r\n          let oem_id = model.oem_id; \r\n          var client = new Client(connectionConfig)\r\n          let _month = parseInt(month) - 1;\r\n          var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n          var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n          var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n          var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n          let listYearMonth = [t1, t2, t3, t4];\r\n          var ym = moment(new Date(year, _month));\r\n          await client.connect()\r\n          try {\r\n\r\n           \r\n           \r\n            var temp = await client.query(_QueryProductPlaning.findProductForcast, [null,model.oem_id, year, month, (t1.format(\"YYYYMM\") + t2.format(\"YYYYMM\") + t3.format(\"YYYYMM\") + t4.format(\"YYYYMM\"))]);\r\n            console.log(temp.rows)\r\n            var calSuggestion = async (suggestion, item) => {\r\n              let _suggestion = parseInt(suggestion);\r\n              let sum = 0;\r\n              for (let [index, ym] of listYearMonth.entries()) {\r\n                if (_suggestion < index + 1) break;\r\n                sum += item['n' + (index + 1)] || 0;\r\n              }\r\n              return sum - ((item.wip_amount || 0) + (item.fg_amount || 0));\r\n            }\r\n            const asyncRes = await Promise.all(temp.rows.map(async (i) => {\r\n\r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMothCheck, [ym.format(\"YYYYMM\"), i.no, model.oem_id]);\r\n              var getC_leng = await client.query(_QueryProductPlaning.getC_leng,[i.id,model.oem_id]);\r\n             /*  console.log(getC_leng.rows); */\r\n              if (check.rows.length > 0) {\r\n                //console.log(check.rows[0].amount);\r\n\r\n              }\r\n              let temp = {\r\n                \"id\": i.id,\r\n                \"no\": i.no,\r\n                \"name\": i.name,\r\n                \"wip\": i.wip_amount || 0,\r\n                \"fg\": i.fg_amount || 0,\r\n                \"delivery\": i.delivery || 0,\r\n                \"amount_forcast\": i.amount_forcast || 0,\r\n                \"amount\": check.rows.length > 0 ? check.rows[0].amount : null,\r\n                \"in_hand\": (i.fg_amount || 0) + (i.wip_amount || 0),\r\n                \"pending\": (i.amount_forcast || 0) - (i.delivery || 0),\r\n                \"n1\": i.n1,\r\n                \"n2\": i.n2,\r\n                \"n3\": i.n3,\r\n                \"n4\": i.n4,\r\n                \"suggestion\": (model.suggestion) ? await calSuggestion(model.suggestion, i) : 0\r\n              }\r\n              //console.log(\"temp\",temp)\r\n        /*       if(temp.no === 'MR00120212'){\r\n               console.log(\"temp\",temp)\r\n              } */\r\n              let default_steel_bar = 600;\r\n              let steel_bar = (temp.suggestion * parseInt(getC_leng.rows[0].c_leng)) / default_steel_bar;\r\n              let actual_suggestion = (Math.ceil(steel_bar)*600) / parseInt(getC_leng.rows[0].c_leng);\r\n              if (steel_bar < 0 ) {\r\n                var sum_amount = parseInt(getC_leng.rows[0].amount || 0);\r\n           \r\n              } else \r\n              if (steel_bar >= 0){\r\n                var sum_amount = parseInt(getC_leng.rows[0].amount - steel_bar);\r\n              \r\n              }\r\n         \r\n           /*    if(temp.no === 'MR00120212'){\r\n                console.log(temp.no,temp.suggestion,steel_bar);\r\n              } */\r\n         if (sum_amount < 0  && steel_bar > 0 ) {\r\n          var chack_sum_amount = true\r\n        \r\n         } else {\r\n          var chack_sum_amount = false\r\n         }\r\n\r\n\r\n              let temp2 = {\r\n                \"id\": temp.id,\r\n                \"no\": temp.no,\r\n                \"name\": temp.name,\r\n                \"wip\": temp.wip || 0,\r\n                \"fg\": temp.fg || 0,\r\n                \"delivery\": temp.delivery || 0,\r\n                \"amount_forcast\": temp.amount_forcast || 0,\r\n                \"amount\": temp.amount,\r\n                \"in_hand\": temp.in_hand,\r\n                \"pending\": temp.pending,\r\n                \"n1\": temp.n1,\r\n                \"n2\": temp.n2,\r\n                \"n3\": temp.n3,\r\n                \"n4\": temp.n4,\r\n                \"steel_bar\":steel_bar,\r\n                \"suggestion\": temp.suggestion,\r\n                \"actual_suggestion\":Math.floor(actual_suggestion),\r\n                \"chack_sum_amount\": chack_sum_amount,\r\n                \"amount_mat\": getC_leng.rows[0].amount || 0,\r\n                \"mat_no\": getC_leng.rows[0].mat_no || \"\"\r\n              }\r\n         \r\n              return temp2;\r\n\r\n            }));\r\n            console.log(asyncRes)\r\n            /*   console.log(check); */\r\n\r\n            resolve(asyncRes);\r\n\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end()\r\n          }\r\n        })().catch(e => {\r\n          console.log(e);\r\n          throw Error(e)\r\n        })\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    }))\r\n  }\r\n  async importReadOrderForcastKubota(year, month, oem_id, dataSheet) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig)\r\n  \r\n        await client.connect();\r\n        try{\r\n        let tempRes = [];\r\n       \r\n        for (let d of dataSheet) {\r\n\r\n            \r\n            try {\r\n           \r\n\r\n             // console.log(d.no);\r\n         \r\n             // console.log(d.no);\r\n              //var findMatchProduct = await client.query(_QueryProductPlaning.findProductForcast, [d.no, oem_id, year, month, '']);\r\n              var findMatchProduct = await client.query(_QueryProductPlaning.findProductForcast2, [d.no, oem_id]);\r\n            \r\n              if (findMatchProduct.rows.length < 1) {\r\n                tempRes.push({\r\n                  \"id\": null,\r\n                  \"no\": d.no,\r\n                  \"name\": \"\",\r\n                  \"wip\": 0,\r\n                  \"fg\": 0,\r\n                  \"delivery\": 0,\r\n                  \"amount_forcast\": 0,\r\n                  \"in_hand\": 0,\r\n                  \"pending\": 0,\r\n                  \"n1\": d.n1 || 0,\r\n                  \"n2\": d.n2 || 0,\r\n                  \"n3\": d.n3 || 0,\r\n                  \"n4\": d.n4 || 0,\r\n                  \"status\": false,\r\n                  \"error\": \"not fount!!!\",\r\n                  \"issue_date\":d.issue_date ? d.issue_date : new Date(),\r\n                })\r\n              }else{\r\n                tempRes.push({\r\n                  \"id\": findMatchProduct.rows[0].id,\r\n                  \"no\": findMatchProduct.rows[0].no,\r\n                  \"name\": findMatchProduct.rows[0].name,\r\n                  \"wip\": findMatchProduct.rows[0].wip_amount || 0,\r\n                  \"fg\": findMatchProduct.rows[0].fg_amount || 0,\r\n                  \"delivery\": findMatchProduct.rows[0].delivery || 0,\r\n                  \"amount_forcast\": findMatchProduct.rows[0].amount_forcast || 0,\r\n                  \"in_hand\": (findMatchProduct.rows[0].fg_amount || 0) + (findMatchProduct.rows[0].wip_amount || 0),\r\n                  \"pending\": (findMatchProduct.rows[0].amount_forcast || 0) - (findMatchProduct.rows[0].delivery || 0),\r\n                  \"status\": true,\r\n                  \"n1\": d.n1 || 0,\r\n                  \"n2\": d.n2 || 0,\r\n                  \"n3\": d.n3 || 0,\r\n                  \"n4\": d.n4 || 0,\r\n                  \"issue_date\":d.issue_date ? d.issue_date : new Date(),\r\n                })\r\n              }\r\n            \r\n\r\n              \r\n            } catch (ex) {\r\n             \r\n            } finally {\r\n\r\n            }\r\n          \r\n        }\r\n        resolve(tempRes);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n\r\n    }))\r\n  }\r\n\r\n  async importSaveOrderForcastKubota(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var res = await this.importReadOrderForcastKubota(year, month, oem_id, dataSheet);\r\n\r\n       \r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            let issue_date =  moment(product.issue_date ,'YY/MM/DD').format();\r\n            \r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n              if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),issue_date]);\r\n\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id,issue_date]);\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),issue_date]);\r\n\r\n              }\r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n          // console.log('COMMIT')\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n\r\n  async importReadOrderForcast(year, month, oem_id, dataSheet) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig)\r\n        let tempRes = [];\r\n        var reg = /^\\d+$/;\r\n        await client.connect();\r\n       try{\r\n        for (let data of dataSheet) {\r\n          for (let d of data) {\r\n            try {\r\n           \r\n              var findMatchProduct = await client.query(_QueryProductPlaning.findProductForcast2, [d.no, oem_id]);\r\n            \r\n         \r\n              if (findMatchProduct.rows.length < 1 || isNaN(d.n1) || isNaN(d.n2) || isNaN(d.n3) || isNaN(d.n4)) {\r\n                tempRes.push({\r\n                  \"id\": null,\r\n                  \"no\": d.no,\r\n                  \"name\": \"\",\r\n                  \"wip\": 0,\r\n                  \"fg\": 0,\r\n                  \"delivery\": 0,\r\n                  \"amount_forcast\": 0,\r\n                  \"in_hand\": 0,\r\n                  \"pending\": 0,\r\n                  \"n1\": d.n1 || 0,\r\n                  \"n2\": d.n2 || 0,\r\n                  \"n3\": d.n3 || 0,\r\n                  \"n4\": d.n4 || 0,\r\n                  \"status\": false,\r\n                  \"error\": \"not found!!! or n1-4 are not number!!!\",\r\n                  \"issue_date\": new Date(),\r\n                }) \r\n              } else {\r\n                 tempRes.push({\r\n                \"id\": findMatchProduct.rows[0].id,\r\n                \"no\": findMatchProduct.rows[0].no,\r\n                \"name\": findMatchProduct.rows[0].name,\r\n                \"wip\": findMatchProduct.rows[0].wip_amount || 0,\r\n                \"fg\": findMatchProduct.rows[0].fg_amount || 0,\r\n                \"delivery\": findMatchProduct.rows[0].delivery || 0,\r\n                \"amount_forcast\": findMatchProduct.rows[0].amount_forcast || 0,\r\n                \"in_hand\": (findMatchProduct.rows[0].fg_amount || 0) + (findMatchProduct.rows[0].wip_amount || 0),\r\n                \"pending\": (findMatchProduct.rows[0].amount_forcast || 0) - (findMatchProduct.rows[0].delivery || 0),\r\n                \"status\": true,\r\n                \"n1\": d.n1 || 0,\r\n                \"n2\": d.n2 || 0,\r\n                \"n3\": d.n3 || 0,\r\n                \"n4\": d.n4 || 0,\r\n                \"issue_date\": new Date(),\r\n               })\r\n              }\r\n             \r\n            } catch (ex) {\r\n         \r\n            } finally {\r\n\r\n            } \r\n          } \r\n        }\r\n       // console.log(tempRes);\r\n        resolve(tempRes);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n\r\n    }))\r\n  }\r\n\r\n  async importSaveOrderForcast(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => { \r\n      try {\r\n        var res = await this.importReadOrderForcast(year, month, oem_id, dataSheet);\r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n  \r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n              if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),product.issue_date]);\r\n\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id,product.issue_date]);\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),product.issue_date]);\r\n\r\n              }\r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n           console.log('COMMIT')\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n\r\n\r\n  async importUpdateOrderForcast(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var res = await this.importReadOrderForcast(year, month, oem_id, dataSheet);\r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n              if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),moment(new Date())]);\r\n\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id],moment(new Date()));\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),moment(new Date())]);\r\n\r\n              }\r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n           console.log('COMMIT')\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  async importAddOrderForcast(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => { \r\n      try {\r\n        var res = await this.importReadOrderForcast(year, month, oem_id, dataSheet);\r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n  \r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n              console.log(check.rows)\r\n              console.log(listYearMonth)\r\n              console.log(product[\"n\" + (index + 1)])\r\n\r\n              \r\n                if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),product.issue_date]);\r\n\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast_add, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id,product.issue_date]);\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),product.issue_date]);\r\n\r\n              }\r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n           console.log('COMMIT')\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  async productMonitoring(model) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var _dateStart = moment(new Date(model.year, 0));\r\n        var _dateEnd = moment(new Date(model.year, 11));\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try{\r\n        var query = await client.query(_QueryProductPlaning.productMonitoring.join(''), [model.oem_id, _dateStart.format(\"YYYYMM\"), _dateEnd.format(\"YYYYMM\"), model.year]);\r\n        let temp = [];\r\n        var _dateNow = moment(new Date(2021, 11));\r\n        let _currentMonth = parseInt(_dateNow.format(\"MM\"));\r\n        let selectYear = parseInt(model.year);\r\n        temp = query.rows.map((m) => {\r\n          m.LQA = 0;\r\n          m.LYA = 0;\r\n          m.Q1 = 0;\r\n          m.Q2 = 0;\r\n          m.Q3 = 0;\r\n          m.Q4 = 0;\r\n          var quarter = {\r\n            year: 0,\r\n            q: 0\r\n          }\r\n          m.q1 = (parseInt(m.q1) || 0);\r\n          m.q2 = (parseInt(m.q2) || 0);\r\n          m.q3 = (parseInt(m.q3) || 0);\r\n          m.q4 = (parseInt(m.q4) || 0);\r\n          quarter.year = _dateNow.year();\r\n          quarter.q = this.calQuarter(_dateNow);\r\n          quarter.q = quarter.q - 1\r\n          let endOfQ = quarter.q == 0 ? 4 : quarter.q;\r\n          if (quarter.year > selectYear) {\r\n            m.LQA += m.q1\r\n            m.LQA += m.q2\r\n            m.LQA += m.q3\r\n            m.LQA += m.q4\r\n            m.Q1 = m.q1;\r\n            m.Q2 = m.q2;\r\n            m.Q3 = m.q3;\r\n            m.Q4 = m.q4;\r\n            m.LYA = (m.q1 + m.q2 + m.q3 + m.q4) / 4\r\n          } else {\r\n            if (endOfQ > 1) {\r\n              m.LQA += m.q1;\r\n              m.Q1 = m.q1;\r\n              m.LYA = m.q1;\r\n            }\r\n            if (endOfQ > 2) {\r\n              m.LQA += m.q2\r\n              m.Q2 = m.q2;\r\n              m.LYA = (m.q1 + m.q2) / 2\r\n            }\r\n            if (endOfQ > 3) {\r\n              m.LQA += m.q3\r\n              m.Q3 = m.q3;\r\n              m.LYA = (m.q1 + m.q2 + m.q3) / 3\r\n            }\r\n\r\n          }\r\n\r\n          return m;\r\n        });\r\n\r\n        resolve(temp)\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n    }))\r\n  }\r\n  calQuarter(_dateNow) {\r\n    return Math.floor((_dateNow.month() + 3) / 3)\r\n  }\r\n\r\n\r\n\r\n  async filterOrderProduction(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            let order_no = model.order_no ? model.order_no : null;\r\n            let start_date = model.start_date ? model.start_date : null;\r\n            let end_date = model.end_date ? model.end_date : null;\r\n            // console.log(order_no,start_date,end_date)\r\n            if (start_date === null && end_date === null) {\r\n              var temp = await client.query(_QueryProductPlaning.filter_order, [\r\n                order_no,model.oem_id\r\n\r\n              ]);\r\n\r\n              resolve(temp.rows);\r\n\r\n\r\n            } else {\r\n              if (end_date === null) {\r\n                end_date = moment(start_date).add(23, 'hours').add(59, 'minute').add(59, 'seconds').format();\r\n              } else {\r\n                end_date = moment(end_date).add(23, 'hours').add(59, 'minute').add(59, 'seconds').format();\r\n              }\r\n\r\n\r\n              console.log(\"end_date\", end_date)\r\n              var temp_ = await client.query(_QueryProductPlaning.filter_orderByDate, [\r\n                order_no,\r\n                start_date,\r\n                end_date,\r\n                model.oem_id,\r\n              ]);\r\n\r\n              resolve(temp_.rows);\r\n            }\r\n\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async cancleOrder_product(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryProductPlaning.cancle_order, [\r\n              id,\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async addOrderProduction(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            let id = uuidv4();\r\n            let create_by = \"0fc9e975-8bfa-43ff-9f6f-c31120c9c957\";\r\n\r\n            var temp = await client.query(_QueryProductPlaning.add_order, [\r\n              id,\r\n              model.order_no,\r\n              true,\r\n              true,\r\n              create_by,\r\n              moment(new Date())\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  async updateListProduct(item) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n           \r\n            if (item.order_id==null) {\r\n              throw Error(\"order not found\")\r\n            }\r\n           \r\n            \r\n             await client.query(_QueryProductPlaning.updateListProduct, [  \r\n              item.order_id ,\r\n              JSON.stringify(item.body) || null,\r\n              JSON.stringify(item.header) || null,\r\n            ]);\r\n\r\n\r\n            console.log(\"COMMIT\");\r\n           resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  async importReadOrderForcastBKC_FTP(year, month, oem_id, dataSheet,mod_date) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig)\r\n        let tempRes = [];\r\n        var reg = /^\\d+$/;\r\n        await client.connect();\r\n        try{\r\n        for (let data of dataSheet) {\r\n          for (let d of data) {\r\n\r\n            try {\r\n              var findMatchProduct = await client.query(_QueryProductPlaning.findProductForcast2, [d.no, oem_id]);\r\n             /*  console.log('data',findMatchProduct.rows); */\r\n               \r\n              if (findMatchProduct.rows.length < 1) {\r\n             \r\n                tempRes.push({\r\n                  \"id\": null,\r\n                  \"no\": d.no,\r\n                  \"name\": \"\",\r\n                  \"wip\": 0,\r\n                  \"fg\": 0,\r\n                  \"delivery\": 0,\r\n                  \"amount_forcast\": 0,\r\n                  \"in_hand\": 0,\r\n                  \"pending\": 0,\r\n                  \"n1\": Number(d.n1) || 0,\r\n                  \"n2\": Number(d.n2) || 0,\r\n                  \"n3\": Number(d.n3) || 0,\r\n                  \"n4\": Number(d.n4) || 0,\r\n                  \"status\": false,\r\n                  \"error\": \"\",\r\n                  \"mod_date\":mod_date,\r\n                })\r\n              \r\n            }\r\n         else{\r\n          tempRes.push({\r\n            \"id\": findMatchProduct.rows[0].id,\r\n            \"no\": findMatchProduct.rows[0].no,\r\n            \"name\": findMatchProduct.rows[0].name,\r\n            \"wip\": findMatchProduct.rows[0].wip_amount || 0,\r\n            \"fg\": findMatchProduct.rows[0].fg_amount || 0,\r\n            \"delivery\": findMatchProduct.rows[0].delivery || 0,\r\n            \"amount_forcast\": findMatchProduct.rows[0].amount_forcast || 0,\r\n            \"in_hand\": (findMatchProduct.rows[0].fg_amount || 0) + (findMatchProduct.rows[0].wip_amount || 0),\r\n            \"pending\": (findMatchProduct.rows[0].amount_forcast || 0) - (findMatchProduct.rows[0].delivery || 0),\r\n            \"status\": true,\r\n            \"n1\": Number(d.n1) || 0,\r\n            \"n2\": Number(d.n2) || 0,\r\n            \"n3\": Number(d.n3) || 0,\r\n            \"n4\": Number(d.n4) || 0,\r\n            \"mod_date\":mod_date,\r\n          })\r\n            }\r\n\r\n            } catch(ex){\r\n              console.log(ex); \r\n            } finally {\r\n            \r\n            }\r\n          }\r\n        }\r\n        console.log('data',tempRes);\r\n        //console.log(tempRes);\r\n        resolve(tempRes);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n\r\n    }))\r\n  }\r\n\r\n  \r\n  async importSaveOrderForcastBKC_FTP(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var res = await this.importReadOrderForcastBKC_FTP(year, month, oem_id, dataSheet);\r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n              \r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n              console.log(check.rows);\r\n              if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),moment(new Date())]);\r\n                console.log('save1')\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id,moment(new Date())]);\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),moment(new Date())]);\r\n                console.log('save2')\r\n              }\r\n             \r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n          console.log('COMMIT')\r\n          resolve();\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n \r\n\r\n\r\n\r\n\r\n\r\n async importReadOrderForcastKomatsu(year, month, oem_id, dataSheet) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig)\r\n        let tempRes = [];\r\n        var reg = /^\\d+$/;\r\n        await client.connect();\r\n   /*      console.log('model',year,month,oem_id);\r\n        console.log('data',dataSheet); */\r\n        try{\r\n          let issue_date = \"\";\r\n\r\n          if (dataSheet) {\r\n             issue_date =  moment(dataSheet[0].issuedate,'MM/DD/YYYY').format();\r\n          }\r\n          \r\n          \r\n          \r\n\r\n        for (let data of dataSheet) {\r\n        \r\n          \r\n            try {\r\n              var findMatchProduct = await client.query(_QueryProductPlaning.findProductForcast2, [data.no, oem_id]);\r\n            /*   console.log('data',year); */\r\n               \r\n              if (findMatchProduct.rows.length < 1) {\r\n             \r\n                tempRes.push({\r\n                  \"id\": null,\r\n                  \"no\": data.no,\r\n                  \"name\": \"\",\r\n                  \"wip\": 0,\r\n                  \"fg\": 0,\r\n                  \"delivery\": 0,\r\n                  \"amount_forcast\": 0,\r\n                  \"in_hand\": 0,\r\n                  \"pending\": 0,\r\n                  \"n1\": Number(data.n1) || 0,\r\n                  \"n2\": Number(data.n2) || 0,\r\n                  \"n3\": Number(data.n3) || 0,\r\n                  \"n4\": Number(data.n4) || 0,\r\n                  \"status\": false,\r\n                  \"error\": \"not found!!! or n1-4 are not number!!!\",\r\n                  \"issue_date\": issue_date ? issue_date : new Date(),\r\n                })\r\n              \r\n            }\r\n         else{\r\n          tempRes.push({\r\n            \"id\": findMatchProduct.rows[0].id,\r\n            \"no\": findMatchProduct.rows[0].no,\r\n            \"name\": findMatchProduct.rows[0].name,\r\n            \"wip\": findMatchProduct.rows[0].wip_amount || 0,\r\n            \"fg\": findMatchProduct.rows[0].fg_amount || 0,\r\n            \"delivery\": findMatchProduct.rows[0].delivery || 0,\r\n            \"amount_forcast\": findMatchProduct.rows[0].amount_forcast || 0,\r\n            \"in_hand\": (findMatchProduct.rows[0].fg_amount || 0) + (findMatchProduct.rows[0].wip_amount || 0),\r\n            \"pending\": (findMatchProduct.rows[0].amount_forcast || 0) - (findMatchProduct.rows[0].delivery || 0),\r\n            \"status\": true,\r\n            \"n1\": Number(data.n1) || 0,\r\n            \"n2\": Number(data.n2) || 0,\r\n            \"n3\": Number(data.n3) || 0,\r\n            \"n4\": Number(data.n4) || 0,\r\n            \"issue_date\": issue_date ? issue_date : new Date(),\r\n          })\r\n            }\r\n\r\n            } catch(ex){\r\n              console.log(ex); \r\n            } finally {\r\n            \r\n            }\r\n          }\r\n        \r\n       /*  console.log('tempRes',tempRes); */\r\n        //console.log(tempRes);\r\n        resolve(tempRes);\r\n      } catch (e) {\r\n        reject(e);\r\n      } finally {\r\n        await client.end();\r\n      }\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n\r\n    }))\r\n  }\r\n\r\n  \r\n  async importSaveOrderForcastKomatsu(year, month, oem_id, dataSheet, user_id) {\r\n    return new Promise((async (resolve, reject) => {\r\n      try {\r\n        var res = await this.importReadOrderForcastKomatsu(year, month, oem_id, dataSheet);\r\n        if ((res.filter(x => !x.status)).length > 0) {\r\n         \r\n          throw Error(\"some one not match\")\r\n         \r\n        }\r\n        let _month = parseInt(month) - 1;\r\n\r\n        var t1 = moment(new Date(year, _month)).add(1, 'M');\r\n        var t2 = moment(new Date(year, _month)).add(2, 'M');\r\n        var t3 = moment(new Date(year, _month)).add(3, 'M');\r\n        var t4 = moment(new Date(year, _month)).add(4, 'M');\r\n        let listYearMonth = [t1, t2, t3, t4];\r\n        /* console.log(\"testttt\",_month,listYearMonth) */\r\n        var client = new Client(connectionConfig)\r\n        await client.connect();\r\n        try {\r\n          await client.query('BEGIN');\r\n          for (let product of res) {\r\n            for (let [index, ym] of listYearMonth.entries()) {\r\n\r\n        \r\n              let ProductForcastId = uuidv4();\r\n              let ProductForcastLogId = uuidv4();\r\n              var check = await client.query(_QueryProductPlaning.findProductForcastbyYearMoth, [ym.format(\"YYYYMM\"), product.no]);\r\n             /*  console.log(check.rows); */\r\n              if (check.rows.length == 0) {\r\n                await client.query(_QueryProductPlaning.addProductForcast, [ProductForcastId, product.id, ym.format(\"YYYYMM\"), 0, product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), moment(new Date()),product.issue_date]);\r\n               /*  console.log('save1') */\r\n              } else {\r\n                await client.query(_QueryProductPlaning.updateProductForcast, [product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()), check.rows[0].id,product.issue_date]);\r\n                await client.query(_QueryProductPlaning.addLogProductForcast, [ProductForcastLogId, product.id, ym.format(\"YYYYMM\"), product[\"n\" + (index + 1)], product.wip, product.fg, product.in_hand, user_id, moment(new Date()),product.issue_date]);\r\n                \r\n              }\r\n             \r\n            }\r\n          }\r\n          await client.query('COMMIT')\r\n          console.log('COMMIT')\r\n          resolve();\r\n        } catch (ex) {\r\n          await client.query('ROLLBACK')\r\n          reject(ex)\r\n        } finally {\r\n          await client.end()\r\n        }\r\n        resolve(res)\r\n      } catch (ex) {\r\n        reject(ex)\r\n      }\r\n\r\n\r\n    }));\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n}\r\n\r\nmodule.exports = productPlaningService;\r\n\n\n//# sourceURL=webpack:///./app/service/productPlaningService.js?");

/***/ }),

/***/ "./app/service/productService.js":
/*!***************************************!*\
  !*** ./app/service/productService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\n\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProduct = __webpack_require__(/*! ../query/queryProduct.json */ \"./app/query/queryProduct.json\");\r\nconst _QueryMaterial = __webpack_require__(/*! ../query/queryMaterial.json */ \"./app/query/queryMaterial.json\");\r\nconst _QueryHandheld = __webpack_require__(/*! ../query/queryHandheld.json */ \"./app/query/queryHandheld.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode, kdf } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { log } = __webpack_require__(/*! debug */ \"debug\");\r\nconst handheldService = __webpack_require__(/*! ../service/handheldService */ \"./app/service/handheldService.js\");\r\nconst _handheldService = new handheldService();\r\nclass productService {\r\n  async addProduct(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             /* console.log(\"svaeProduct\",model)\r\n                       throw Error(\"break\") */\r\n                       if (model.check_product === true) {\r\n                        var loopnum = \"\";\r\n                        var chack = await client.query(_QueryProduct.chackloopproductno, [\r\n                          model.oem_id,\r\n                        \r\n                        ]);\r\n                        \r\n                         loopnum = chack.rows.length +1\r\n                        \r\n                        /*   console.log(\"xx\",loopnum.toString().length ) */\r\n                          if (loopnum.toString().length === 3) {\r\n                            model.no =\"0\"+loopnum.toString()\r\n                          }\r\n                          if (loopnum.toString().length === 2) {\r\n                            model.no =\"00\"+loopnum.toString()\r\n                          }\r\n                          if (loopnum.toString().length === 1) {\r\n                            model.no =\"000\"+loopnum.toString()\r\n                          }\r\n                        \r\n                          \r\n                       \r\n                       }\r\n             let product_id = uuidv4();\r\n            if (model.status_select == \"normal\") {\r\n              await client.query(\"BEGIN\");\r\n              var query = await client.query(_QueryProduct.checkNameProduct, [\r\n                model.no,\r\n                model.oem_id,\r\n                model.id || null,\r\n              ]);\r\n              if (query.rows.length > 0) {\r\n                throw Error(\"System : Product No has already\");\r\n              }\r\n            \r\n              let is_assy = false;\r\n              await client.query(_QueryProduct.addProduct, [\r\n                product_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.qty_unit || 0,\r\n                model.min_product || null,\r\n                model.min_lot || null,\r\n                user_id,\r\n                model.oem_id || null,\r\n                true,\r\n                true,\r\n                false,\r\n                moment(new Date()),\r\n                moment(new Date()),\r\n                is_assy,\r\n                null,\r\n                model.is_virtual,\r\n                model.surface || null,\r\n                model.nw_number || null,\r\n                model.packing_standart || null,\r\n              ]);\r\n              await client.query(_QueryProduct.addProductDetail, [\r\n                product_id,\r\n                model.image || null,\r\n                model.description || null,\r\n                model.sell_price || null,\r\n                model.circle_time || null,\r\n                model.sku_user || null,\r\n                model.product_route_id || null,\r\n                model.product_size_id || null,\r\n                model.product_color_id || null,\r\n                model.image_name || null,\r\n                model.image_path || null,\r\n                model.sku_system || null,\r\n                model.cost || null,\r\n                model.size || null,\r\n                model.unit || null,\r\n                model.thickness || null,\r\n                model.weight || null,\r\n                model.cross_section_area || null,\r\n                model.stp_type ,\r\n                model.width || null,\r\n                model.height || null,\r\n                model.blade_head || null,\r\n                \r\n\r\n              ]);\r\n              for (var i = 0; i < model.multiple_material.length; i++) {\r\n                let product_material_id = uuidv4();\r\n\r\n                await client.query(_QueryProduct.addProductMaterial, [\r\n                  product_material_id,\r\n                  model.multiple_material[i].product_id || product_id,\r\n                  model.multiple_material[i].material_id || null,\r\n                  model.multiple_material[i].wt_mtr || null,\r\n                  model.multiple_material[i].c_leng || null,\r\n                  model.multiple_material[i].cos_pc || null,\r\n                  model.multiple_material[i].remark || null,     \r\n                  model.multiple_material[i].amount_txt || null,     \r\n                  model.multiple_material[i].unit_txt || null,\r\n                  /* model.multiple_material[i].nw_number || null, */\r\n                  model.multiple_material[i].gw_number || null,\r\n                  model.multiple_material[i].d_number || null,\r\n                  model.multiple_material[i].t_number || null,\r\n                  model.multiple_material[i].w_number || null,\r\n                  model.multiple_material[i].l_number || null,\r\n                 /*  model.multiple_material[i].country || null, */\r\n                ]);\r\n              }\r\n              //throw Error(\"already Product no\");\r\n\r\n              for (var c = 0; c < model.customer_product.length; c++) {\r\n                if (model.customer_product[c].is_use === true) {\r\n                  let product_cp_id = uuidv4();\r\n\r\n                  var product_plants_item = product_id;\r\n                  await client.query(_QueryProduct.addProduct, [\r\n                    product_cp_id,\r\n                    model.customer_product[c].customer_item || null,\r\n                    model.customer_product[c].customer_item_name || null,\r\n                    model.product_model_id || null,\r\n                    model.qty_unit || null,\r\n                    model.min_product || null,\r\n                    model.min_lot || null,\r\n                    user_id,\r\n                    model.oem_id || null,\r\n                    true,\r\n                    true,\r\n                    false,\r\n                    moment(new Date()),\r\n                    moment(new Date()),\r\n                    is_assy,\r\n                    product_plants_item,\r\n                    model.is_virtual,\r\n                    model.surface || null,\r\n                    model.nw_number || null,\r\n                    model.packing_standart || null,\r\n                  ]);\r\n                  //console.log(c,model.customer_product[c])\r\n                }\r\n              }\r\n\r\n              //console.log(model.cycle_time)\r\n              for (\r\n                let section_i = 0;\r\n                section_i < model.cycle_time.length;\r\n                section_i++\r\n              ) {\r\n                //console.log(\"section\", model.cycle_time[section_i].section)\r\n                //console.log(\"process\", model.cycle_time[section_i].process.length)\r\n\r\n                for (\r\n                  let process_i = 0;\r\n                  process_i < model.cycle_time[section_i].process.length;\r\n                  process_i++\r\n                ) {\r\n                  if (\r\n                    model.cycle_time[section_i].process[process_i]\r\n                      .cycle_time !== \"\"\r\n                  ) {\r\n                    let cycle_id = uuidv4();\r\n                    //console.log(\"add process \", model.cycle_time[section_i].process[process_i])\r\n                    await client.query(_QueryProduct.addCycle_time, [\r\n                      cycle_id,\r\n                      model.cycle_time[section_i].process[process_i].process_id,\r\n                      model.cycle_time[section_i].process[process_i].cycle_time,\r\n                      true,\r\n                      product_id,\r\n                    ]);\r\n                  }\r\n                }\r\n              }\r\n              //throw Error(\"break\");\r\n\r\n              // throw Error(\"already Product no\");\r\n            } else if (model.status_select == \"sub_assy\") {\r\n              //console.log(\"product_assy\")\r\n              //console.log(model)\r\n              //throw Error(\"break\");\r\n              await client.query(\"BEGIN\");\r\n              var query = await client.query(_QueryProduct.checkNameProduct, [\r\n                model.no,\r\n                model.oem_id,\r\n                model.id || null,\r\n              ]);\r\n              if (query.rows.length > 0) {\r\n                throw Error(\"System : Product No has already\");\r\n              }\r\n              var query = await client.query(_QueryProduct.checkNameProduct, [\r\n                model.no,\r\n                model.oem_id,\r\n                model.id || null,\r\n              ]);\r\n              if (query.rows.length > 0) {\r\n                throw Error(\"System : Product No has already\");\r\n              }\r\n              let product_id = uuidv4();\r\n              let is_assy = true;\r\n              await client.query(_QueryProduct.addProduct, [\r\n                product_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.qty_unit || 0,\r\n                model.min_product || null,\r\n                model.min_lot || null,\r\n                user_id,\r\n                model.oem_id || null,\r\n                true,\r\n                true,\r\n                false,\r\n                moment(new Date()),\r\n                moment(new Date()),\r\n                is_assy,\r\n                null,\r\n                model.is_virtual,\r\n                model.surface || null,\r\n                model.nw_number || null,\r\n                model.packing_standart || null,\r\n              ]);\r\n              await client.query(_QueryProduct.addProductDetail, [\r\n                product_id,\r\n                model.image || null,\r\n                model.description || null,\r\n                model.sell_price || null,\r\n                model.circle_time || null,\r\n                model.sku_user || null,\r\n                model.product_route_id || null,\r\n                model.product_size_id || null,\r\n                model.product_color_id || null,\r\n                model.image_name || null,\r\n                model.image_path || null,\r\n                model.sku_system || null,\r\n                model.cost || null,\r\n                \r\n              ]);\r\n              for (var i = 0; i < model.multiple_product_subAssy.length; i++) {\r\n                let product_product_id = uuidv4();\r\n                // console.log(model.multiple_product_subAssy[i])\r\n                let updatedate = moment(new Date());\r\n                await client.query(_QueryProduct.addProductProduct, [\r\n                  product_product_id,\r\n                  model.multiple_product_subAssy[i].product_id || product_id,\r\n                  model.multiple_product_subAssy[i].product_sub || null,\r\n                  model.multiple_product_subAssy[i].amount || null,\r\n                  model.multiple_product_subAssy[i].remark || null,\r\n                  updatedate,\r\n                  user_id,\r\n                ]);\r\n              }\r\n\r\n              for (var c = 0; c < model.customer_product.length; c++) {\r\n                if (model.customer_product[c].is_use === true) {\r\n                  let product_cp_id = uuidv4();\r\n\r\n                  var product_plants_item = product_id;\r\n                  await client.query(_QueryProduct.addProduct, [\r\n                    product_cp_id,\r\n                    model.customer_product[c].customer_item || null,\r\n                    model.customer_product[c].customer_item_name || null,\r\n                    model.product_model_id || null,\r\n                    model.qty_unit || null,\r\n                    model.min_product || null,\r\n                    model.min_lot || null,\r\n                    user_id,\r\n                    model.oem_id || null,\r\n                    true,\r\n                    true,\r\n                    false,\r\n                    moment(new Date()),\r\n                    moment(new Date()),\r\n                    is_assy,\r\n                    product_plants_item,\r\n                    model.is_virtual,\r\n                    model.surface || null,\r\n                    model.nw_number || null,\r\n                    model.packing_standart || null,\r\n                  ]);\r\n                  //console.log(c,model.customer_product[c])\r\n                }\r\n              }\r\n\r\n              //console.log(model.cycle_time)\r\n              for (\r\n                let section_i = 0;\r\n                section_i < model.cycle_time.length;\r\n                section_i++\r\n              ) {\r\n                //console.log(\"section\", model.cycle_time[section_i].section)\r\n                //console.log(\"process\", model.cycle_time[section_i].process.length)\r\n\r\n                for (\r\n                  let process_i = 0;\r\n                  process_i < model.cycle_time[section_i].process.length;\r\n                  process_i++\r\n                ) {\r\n                  if (\r\n                    model.cycle_time[section_i].process[process_i]\r\n                      .cycle_time !== \"\"\r\n                  ) {\r\n                    let cycle_id = uuidv4();\r\n                    //console.log(\"add process \", model.cycle_time[section_i].process[process_i])\r\n                    await client.query(_QueryProduct.addCycle_time, [\r\n                      cycle_id,\r\n                      model.cycle_time[section_i].process[process_i].process_id,\r\n                      model.cycle_time[section_i].process[process_i].cycle_time,\r\n                      true,\r\n                      product_id,\r\n                    ]);\r\n                  }\r\n                }\r\n              }\r\n              //throw Error(\"break\");\r\n            } else {\r\n              throw Error(\r\n                \"System : Please Select Normal or Sub Assy to continue\"\r\n              );\r\n            }\r\n\r\n            var check_supplier_del = await client.query(\r\n              _QueryProduct.check_supplier_del,\r\n              [product_id]\r\n            );\r\n\r\n            for (var e = 0; e < check_supplier_del.rows.length; e++) {\r\n              let check = model.supplier_data.filter((element) => {\r\n                return (\r\n                  element.supplier_id ===\r\n                  check_supplier_del.rows[e].supplier_id &&\r\n                  element.sort === check_supplier_del.rows[e].sort\r\n                );\r\n              });\r\n              if (check.length > 0) {\r\n                //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n              } else {\r\n                await client.query(_QueryProduct.DeletePSforUpdate, [\r\n                  check_supplier_del.rows[e].product_id,\r\n                  check_supplier_del.rows[e].supplier_id,\r\n                ]);\r\n                //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n              }\r\n            }\r\n\r\n            for (var k = 0; k < model.supplier_data.length; k++) {\r\n              var check_PS = await client.query(\r\n                _QueryProduct.checkProductSupplier,\r\n                [\r\n                  product_id,\r\n                  model.supplier_data[k].supplier_id,\r\n                  model.supplier_data[k].sort,\r\n                ]\r\n              );\r\n              console.log(\"test\", check_PS.rows);\r\n              if (check_PS.rows.length > 0) {\r\n                let updatedate = moment(new Date());\r\n                //console.log(\"helllo\")\r\n                await client.query(_QueryProduct.updateProductSupplier, [\r\n                  check_PS.rows[0].id,\r\n                  model.supplier_data[k].buy_price || 0,\r\n                  model.supplier_data[k].is_active,\r\n                  model.supplier_data[k].sort,\r\n                  model.supplier_data[k].create_date,\r\n                  model.supplier_data[k].minimum_order || 0,\r\n                  model.supplier_data[k].lead_time || 0,\r\n                  model.supplier_data[k].remark,\r\n                  updatedate,\r\n                  user_id,\r\n                ]);\r\n                //console.log(\"helllo1\")\r\n              } else {\r\n               \r\n                let product_supplier_id = uuidv4();\r\n                let updatedate = moment(new Date());\r\n                await client.query(_QueryProduct.addProductSupplier, [\r\n                  product_supplier_id,\r\n                  product_id,\r\n                  model.supplier_data[k].supplier_id,\r\n                  model.supplier_data[k].is_active,\r\n                  model.supplier_data[k].sort,\r\n                  model.supplier_data[k].create_date,\r\n                  true,\r\n                  model.supplier_data[k].buy_price || 0,\r\n                  model.supplier_data[k].minimum_order || 0,\r\n                  model.supplier_data[k].lead_time || 0,\r\n                  model.supplier_data[k].remark || null,\r\n                  updatedate,\r\n                  user_id,\r\n                ]);\r\n              }\r\n            }\r\n            let temp2 = await client.query(_QueryProduct.get_supplier, [\r\n              model.id,\r\n            ]);\r\n            temp2.rows.sort((a, b) => a.sort - b.sort);\r\n            let sort = 1;\r\n            for (let item of temp2.rows) {\r\n              item.sort = sort;\r\n              await client.query(_QueryProduct.update_sort, [\r\n                item.id,\r\n                item.sort,\r\n              ]);\r\n              sort++;\r\n            }\r\n\r\n            for (let m of model.machine_data) {\r\n              let pm_id = uuidv4();\r\n              await client.query(_QueryProduct.AddMachine, [\r\n                pm_id,\r\n                m.machine_id,\r\n                model.id,\r\n                m.sort || null,\r\n                moment(new Date()),\r\n              ]);\r\n            }\r\n\r\n          \r\n            for (let f of model.facchoup_data) {\r\n            let fac_id = uuidv4();\r\n            await client.query(_QueryProduct.add_plating_product, [\r\n              fac_id,\r\n              f.id,\r\n              product_id,\r\n              true,\r\n              true,\r\n              new Date()\r\n            ]);\r\n\r\n          }\r\n\r\n          for (let c of model.customer_data) {\r\n            let cus_id = uuidv4();\r\n            await client.query(_QueryProduct.add_product_customer, [\r\n              cus_id,\r\n              product_id,\r\n              c.id,\r\n            ]);\r\n  \r\n          }\r\n\r\n\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async updateProduct(model, user_id) {\r\n    console.log(model)\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             console.log(\"อัพเดด\",model)\r\n            /*   console.log(\"อัพเดด\",model)\r\n                        throw Error(\"break\") */\r\n            if (model.status_select == \"normal\") {\r\n              //console.log(\"normal\")\r\n              await client.query(\"BEGIN\");\r\n              //console.log(model.cycle_time)\r\n              var query = await client.query(_QueryProduct.checkNameProduct2, [\r\n                model.no,\r\n                model.oem_id,\r\n                model.id,\r\n              ]);\r\n              if (query.rows.length > 0) {\r\n                throw Error(\"System : Product No has already\");\r\n              }\r\n              for (\r\n                let section_i = 0;\r\n                section_i < model.cycle_time.length;\r\n                section_i++\r\n              ) {\r\n                //console.log(\"section\", model.cycle_time[section_i].section)\r\n                //console.log(\"process\", model.cycle_time[section_i].process.length)\r\n\r\n                for (\r\n                  let process_i = 0;\r\n                  process_i < model.cycle_time[section_i].process.length;\r\n                  process_i++\r\n                ) {\r\n                  let check_cycle_time = await client.query(\r\n                    _QueryProduct.check_cycle_time,\r\n                    [\r\n                      model.cycle_time[section_i].process[process_i].process_id,\r\n                      model.cycle_time[section_i].process[process_i].product_id,\r\n                    ]\r\n                  );\r\n                  if (check_cycle_time.rows.length > 0) {\r\n                    //console.log(\"update process \", model.cycle_time[section_i].process[process_i])\r\n                    if (\r\n                      model.cycle_time[section_i].process[process_i]\r\n                        .cycle_time !== \"\"\r\n                    ) {\r\n                      await client.query(_QueryProduct.updateCycle_time, [\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .cycle_time,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                    } else {\r\n                      await client.query(_QueryProduct.delCycle_time, [\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                      //console.log(\"ว่างนะ\")\r\n                    }\r\n                  } else {\r\n                    if (\r\n                      model.cycle_time[section_i].process[process_i]\r\n                        .cycle_time !== \"\"\r\n                    ) {\r\n                      let cycle_id = uuidv4();\r\n                      //console.log(\"add process \", model.cycle_time[section_i].process[process_i])\r\n                      await client.query(_QueryProduct.addCycle_time, [\r\n                        cycle_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .cycle_time,\r\n                        true,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                      //console.log(\"haven't cycle time\")\r\n                    }\r\n                  }\r\n                  //console.log(\"process\", model.cycle_time[section_i].process[process_i])\r\n                }\r\n              }\r\n              //throw Error(\"break\");\r\n\r\n              // console.log(model)\r\n              await client.query(_QueryProduct.updateProduct, [\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.qty_unit || 0,\r\n                model.min_product || null,\r\n                model.min_lot || null,\r\n                user_id,\r\n                moment(new Date()),\r\n                model.id,\r\n                false,\r\n                model.is_virtual,\r\n                model.surface || null,\r\n                model.nw_number || null,\r\n                model.packing_standart || null,\r\n              ]);\r\n           var checkdetail  = await client.query(`select * from product_detail where product_id = $1`, [\r\n              \r\n                model.id,\r\n              \r\n              ]);\r\n\r\n              if (checkdetail.rows.length > 0) {\r\n                await client.query(_QueryProduct.updateProductDetail, [\r\n                  model.image || null,\r\n                  model.description || null,\r\n                  model.sell_price || null,\r\n                  model.circle_time || null,\r\n                  model.sku_user || null,\r\n                  model.product_route_id || null,\r\n                  model.product_size_id || null,\r\n                  model.product_color_id || null,\r\n                  model.image_name || null,\r\n                  model.image_path || null,\r\n                  model.sku_system || null,\r\n                  model.id,\r\n                  model.cost || null,\r\n                  model.size || null,\r\n                  model.unit || null,\r\n                  model.thickness || null,\r\n                  model.weight || null,\r\n                  model.cross_section_area || null,\r\n                  model.stp_type,\r\n                  model.width || null,\r\n                  model.height || null,\r\n                  model.blade_head || null,\r\n                 \r\n  \r\n                ]);\r\n              } else {\r\n                await client.query(_QueryProduct.addProductDetail, [\r\n                  model.id,\r\n                  model.image || null,\r\n                  model.description || null,\r\n                  model.sell_price || null,\r\n                  model.circle_time || null,\r\n                  model.sku_user || null,\r\n                  model.product_route_id || null,\r\n                  model.product_size_id || null,\r\n                  model.product_color_id || null,\r\n                  model.image_name || null,\r\n                  model.image_path || null,\r\n                  model.sku_system || null,\r\n                  model.cost || null,\r\n                  model.size || null,\r\n                  model.unit || null,\r\n                  model.thickness || null,\r\n                  model.weight || null,\r\n                  model.cross_section_area || null,\r\n                  model.stp_type ,\r\n                  model.width || null,\r\n                  model.height || null,\r\n                  model.blade_head || null,\r\n                  \r\n  \r\n                ]);\r\n              }\r\n\r\n\r\n\r\n\r\n          \r\n\r\n              var check_mat_del = await client.query(\r\n                _QueryProduct.check_mat_del,\r\n                [model.id]\r\n              );\r\n\r\n              for (var e = 0; e < check_mat_del.rows.length; e++) {\r\n                let check = model.multiple_material.filter((element) => {\r\n                  return (\r\n                    element.material_id === check_mat_del.rows[e].material_id\r\n                  );\r\n                });\r\n                if (check.length > 0) {\r\n                  //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n                } else {\r\n                  await client.query(_QueryProduct.DeletePMforUpdate, [\r\n                    check_mat_del.rows[e].product_id,\r\n                    check_mat_del.rows[e].material_id,\r\n                  ]);\r\n                  //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n                }\r\n              }\r\n\r\n              // console.log(model.multiple_material)\r\n\r\n              for (var k = 0; k < model.multiple_material.length; k++) {\r\n                console.log(\"re\",model.multiple_material)\r\n                var check_PM = await client.query(\r\n                  _QueryProduct.checkProductMaterial,\r\n                  [\r\n                    model.multiple_material[k].product_id,\r\n                    model.multiple_material[k].material_id,\r\n                  ]\r\n                );\r\n                //console.log(check_PM.rows)\r\n                if (check_PM.rows.length > 0) {\r\n                  // console.log(\"helllo\")\r\n                  await client.query(_QueryProduct.updateProductMaterials, [\r\n                    model.multiple_material[k].id,\r\n                    model.multiple_material[k].wt_mtr || null,\r\n                    model.multiple_material[k].c_leng || null,\r\n                    model.multiple_material[k].cos_pc || null,\r\n                    model.multiple_material[k].amount_txt || null,\r\n                    model.multiple_material[k].unit_txt || null,\r\n                   /*  model.multiple_material[k].nw_number || null, */\r\n                    model.multiple_material[k].gw_number || null,\r\n                    model.multiple_material[k].d_number || null,\r\n                    model.multiple_material[k].t_number || null,\r\n                    model.multiple_material[k].w_number || null,\r\n                    model.multiple_material[k].l_number || null,\r\n                    /* model.multiple_material[k].country || null, */\r\n                  ]);\r\n                } else {\r\n                  let product_material_id = uuidv4();\r\n                  let remark_txt =  model.multiple_material[k].remark || null;\r\n                  let amount_txt =  model.multiple_material[k].amount_txt || null;\r\n                  let unit_txt =  model.multiple_material[k].unit_txt || null;\r\n                  console.log(\"test\",remark_txt,amount_txt,unit_txt)\r\n                  await client.query(_QueryProduct.addProductMaterial, [\r\n                    product_material_id,\r\n                    model.multiple_material[k].product_id,\r\n                    model.multiple_material[k].material_id || null,\r\n                    model.multiple_material[k].wt_mtr || null,\r\n                    model.multiple_material[k].c_leng || null,\r\n                    model.multiple_material[k].cos_pc || null,\r\n                    remark_txt,  \r\n                    amount_txt,     \r\n                    unit_txt,\r\n                    /* model.multiple_material[k].nw_number || null, */\r\n                    model.multiple_material[k].gw_number || null,\r\n                    model.multiple_material[k].d_number || null,\r\n                    model.multiple_material[k].t_number || null,\r\n                    model.multiple_material[k].w_number || null,\r\n                    model.multiple_material[k].l_number || null,\r\n                    /* model.multiple_material[k].country || null, */\r\n                  ]);\r\n                 \r\n                }\r\n              }\r\n\r\n              let is_assy = false;\r\n              for (\r\n                var index = 0;\r\n                index < model.customer_product.length;\r\n                index++\r\n              ) {\r\n                if (model.customer_product[index].id !== \"\") {\r\n                  let check_customerProduct = await client.query(\r\n                    _QueryProduct.CheckCustomerProduct,\r\n                    [model.customer_product[index].id, model.oem_id]\r\n                  );\r\n                  if (check_customerProduct.rows.length > 0) {\r\n                    if (model.customer_product[index].is_use === true) {\r\n                      //console.log(\"edit\",model.customer_product[index])\r\n                      await client.query(_QueryProduct.UpdateProductCustomer, [\r\n                        model.customer_product[index].id,\r\n                        model.customer_product[index].customer_item,\r\n                        model.customer_product[index].customer_item_name,\r\n                        model.customer_product[index].is_use,\r\n                        model.customer_product[index].last_update,\r\n                      ]);\r\n                    }\r\n                    if (model.customer_product[index].is_use === false) {\r\n                      //console.log(\"edit_delete\",model.customer_product[index])\r\n                      await client.query(_QueryProduct.UpdateProductCustomer, [\r\n                        model.customer_product[index].id,\r\n                        model.customer_product[index].customer_item,\r\n                        model.customer_product[index].customer_item_name,\r\n                        model.customer_product[index].is_use,\r\n                        moment(new Date()),\r\n                      ]);\r\n                    }\r\n                  }\r\n                } else {\r\n                  if (model.customer_product[index].is_use === true) {\r\n                    //console.log(\"add\",model.customer_product[index])\r\n                    let product_cp_id = uuidv4();\r\n\r\n                    var product_plants_item = model.id;\r\n                    await client.query(_QueryProduct.addProduct, [\r\n                      product_cp_id,\r\n                      model.customer_product[index].customer_item || null,\r\n                      model.customer_product[index].customer_item_name || null,\r\n                      model.product_model_id || null,\r\n                      model.qty_unit || null,\r\n                      model.min_product || null,\r\n                      model.min_lot || null,\r\n                      user_id,\r\n                      model.oem_id || null,\r\n                      true,\r\n                      true,\r\n                      false,\r\n                      moment(new Date()),\r\n                      moment(new Date()),\r\n                      is_assy,\r\n                      product_plants_item,\r\n                      model.is_virtual,\r\n                      model.surface || null,\r\n                      model.nw_number || null,\r\n                      model.packing_standart || null,\r\n                    ]);\r\n                  }\r\n                }\r\n              }\r\n\r\n              var check_process_cycle_del = await client.query(\r\n                _QueryProduct.check_cycle_del,\r\n                [model.id]\r\n              );\r\n\r\n              for (var e = 0; e < check_process_cycle_del.rows.length; e++) {\r\n                let check = model.process_cycle_time.filter((element) => {\r\n                  return (\r\n                    element.process_id ===\r\n                    check_process_cycle_del.rows[e].process_id\r\n                  );\r\n                });\r\n                if (check.length > 0) {\r\n                  //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n                } else {\r\n                  await client.query(_QueryProduct.DeletePCforUpdate, [\r\n                    check_process_cycle_del.rows[e].product_id,\r\n                    check_process_cycle_del.rows[e].process_id,\r\n                  ]);\r\n                  //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n                }\r\n              }\r\n\r\n              for (var k = 0; k < model.process_cycle_time.length; k++) {\r\n                var check_PC = await client.query(\r\n                  _QueryProduct.checkProcessCycleTime,\r\n                  [\r\n                    model.process_cycle_time[k].product_id,\r\n                    model.process_cycle_time[k].process_id,\r\n                  ]\r\n                );\r\n                //console.log(\"test\",check_PC.rows)\r\n                if (check_PC.rows.length > 0) {\r\n                  //console.log(\"helllo\")\r\n                  await client.query(_QueryProduct.updateProcessCycleTime, [\r\n                    check_PC.rows[0].id,\r\n                    model.process_cycle_time[k].cycle_time,\r\n                    model.process_cycle_time[k].sort,\r\n                  ]);\r\n                  //console.log(\"helllo1\")\r\n                } else {\r\n                  let product_cycle_id = uuidv4();\r\n                  await client.query(_QueryProduct.addProcessCycleTime, [\r\n                    product_cycle_id,\r\n                    null,\r\n                    null,\r\n                    model.process_cycle_time[k].process_id,\r\n                    model.process_cycle_time[k].cycle_time,\r\n                    true,\r\n                    model.id,\r\n                    model.process_cycle_time[k].sort,\r\n                  ]);\r\n                }\r\n              }\r\n\r\n              //throw Error(\"already Product no\");\r\n            } else if (model.status_select == \"sub_assy\") {\r\n              await client.query(\"BEGIN\");\r\n              var query = await client.query(_QueryProduct.checkNameProduct2, [\r\n                model.no,\r\n                model.oem_id,\r\n                model.id,\r\n              ]);\r\n              if (query.rows.length > 0) {\r\n                throw Error(\"System : Product No has already\");\r\n              }\r\n\r\n              //console.log(model.cycle_time)\r\n              for (\r\n                let section_i = 0;\r\n                section_i < model.cycle_time.length;\r\n                section_i++\r\n              ) {\r\n                //console.log(\"section\", model.cycle_time[section_i].section)\r\n                //console.log(\"process\", model.cycle_time[section_i].process.length)\r\n\r\n                for (\r\n                  let process_i = 0;\r\n                  process_i < model.cycle_time[section_i].process.length;\r\n                  process_i++\r\n                ) {\r\n                  let check_cycle_time = await client.query(\r\n                    _QueryProduct.check_cycle_time,\r\n                    [\r\n                      model.cycle_time[section_i].process[process_i].process_id,\r\n                      model.cycle_time[section_i].process[process_i].product_id,\r\n                    ]\r\n                  );\r\n                  if (check_cycle_time.rows.length > 0) {\r\n                    //console.log(\"update process \", model.cycle_time[section_i].process[process_i])\r\n                    if (\r\n                      model.cycle_time[section_i].process[process_i]\r\n                        .cycle_time !== \"\"\r\n                    ) {\r\n                      await client.query(_QueryProduct.updateCycle_time, [\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .cycle_time,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                    } else {\r\n                      await client.query(_QueryProduct.delCycle_time, [\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                      //console.log(\"ว่างนะ\")\r\n                    }\r\n                  } else {\r\n                    if (\r\n                      model.cycle_time[section_i].process[process_i]\r\n                        .cycle_time !== \"\"\r\n                    ) {\r\n                      let cycle_id = uuidv4();\r\n                      //console.log(\"add process \", model.cycle_time[section_i].process[process_i])\r\n                      await client.query(_QueryProduct.addCycle_time, [\r\n                        cycle_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .process_id,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .cycle_time,\r\n                        true,\r\n                        model.cycle_time[section_i].process[process_i]\r\n                          .product_id,\r\n                      ]);\r\n                      //console.log(\"haven't cycle time\")\r\n                    }\r\n                  }\r\n                  //console.log(\"process\", model.cycle_time[section_i].process[process_i])\r\n                }\r\n              }\r\n              //throw Error(\"break\");\r\n\r\n              // console.log(model)\r\n              await client.query(_QueryProduct.updateProduct, [\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.qty_unit || 0,\r\n                model.min_product || null,\r\n                model.min_lot || null,\r\n                user_id,\r\n                moment(new Date()),\r\n                model.id,\r\n                true,\r\n                model.is_virtual,\r\n                model.surface || null,\r\n                model.nw_number || null,\r\n                model.packing_standart || null,\r\n              ]);\r\n              await client.query(_QueryProduct.updateProductDetail, [\r\n                model.image || null,\r\n                model.description || null,\r\n                model.sell_price || null,\r\n                model.circle_time || null,\r\n                model.sku_user || null,\r\n                model.product_route_id || null,\r\n                model.product_size_id || null,\r\n                model.product_color_id || null,\r\n                model.image_name || null,\r\n                model.image_path || null,\r\n                model.sku_system || null,\r\n                model.id,\r\n                model.cost || null,\r\n                model.size || null,\r\n                model.unit || null,\r\n                model.thickness || null,\r\n                model.weight || null,\r\n                model.cross_section_area || null,\r\n                model.stp_type ,\r\n                model.width || null,\r\n                model.height || null,\r\n                model.blade_head || null,\r\n              ]);\r\n\r\n              var check_pro_del = await client.query(\r\n                _QueryProduct.check_pro_del,\r\n                [model.id]\r\n              );\r\n\r\n              for (var e = 0; e < check_pro_del.rows.length; e++) {\r\n                let check = model.multiple_product_subAssy.filter((element) => {\r\n                  return (\r\n                    element.product_sub === check_pro_del.rows[e].product_sub\r\n                  );\r\n                });\r\n                if (check.length > 0) {\r\n                  //console.log(\"ไม่ลบ\" ,check_pro_del.rows[e])\r\n                } else {\r\n                  await client.query(_QueryProduct.DeletePPforUpdate, [\r\n                    check_pro_del.rows[e].product_id,\r\n                    check_pro_del.rows[e].product_sub,\r\n                  ]);\r\n                  //console.log(\"ลบ\" ,check_pro_del.rows[e])\r\n                }\r\n              }\r\n\r\n              //console.log(model.multiple_product_subAssy)\r\n              //throw Error(\"break\");\r\n\r\n              for (var i = 0; i < model.multiple_product_subAssy.length; i++) {\r\n                var check_PP = await client.query(\r\n                  _QueryProduct.checkProductProduct,\r\n                  [\r\n                    model.multiple_product_subAssy[i].product_id,\r\n                    model.multiple_product_subAssy[i].product_sub,\r\n                  ]\r\n                );\r\n\r\n                if (check_PP.rows.length > 0) {\r\n                  let updatedate = moment(new Date());\r\n                  await client.query(_QueryProduct.updateProductProducts, [\r\n                    model.multiple_product_subAssy[i].product_id,\r\n                    model.multiple_product_subAssy[i].product_sub,\r\n                    model.multiple_product_subAssy[i].amount,\r\n                    updatedate,\r\n                    user_id,\r\n                  ]);\r\n                  //console.log(\"update\",check_PP.rows[0].amount, \" to \",model.multiple_product_subAssy[i].amount)\r\n                } else {\r\n                  let updatedate = moment(new Date());\r\n                  let product_product_id = uuidv4();\r\n                  await client.query(_QueryProduct.addProductProduct, [\r\n                    product_product_id,\r\n                    model.multiple_product_subAssy[i].product_id || product_id,\r\n                    model.multiple_product_subAssy[i].product_sub || null,\r\n                    model.multiple_product_subAssy[i].amount || null,\r\n                    model.multiple_product_subAssy[i].remark || null,\r\n                    updatedate,\r\n                    user_id,\r\n                  ]);\r\n                  //console.log(\"add\",model.multiple_product_subAssy[i].amount)\r\n                }\r\n              }\r\n\r\n              // throw Error(\"break\");\r\n\r\n              let is_assy = true;\r\n              for (\r\n                var index = 0;\r\n                index < model.customer_product.length;\r\n                index++\r\n              ) {\r\n                if (model.customer_product[index].id !== \"\") {\r\n                  //console.log(\"have_id\",model.customer_product[index])\r\n                  let check_customerProduct = await client.query(\r\n                    _QueryProduct.CheckCustomerProduct,\r\n                    [model.customer_product[index].id, model.oem_id]\r\n                  );\r\n                  if (check_customerProduct.rows.length > 0) {\r\n                    if (model.customer_product[index].is_use === true) {\r\n                      //console.log(\"edit\",model.customer_product[index])\r\n                      await client.query(_QueryProduct.UpdateProductCustomer, [\r\n                        model.customer_product[index].id,\r\n                        model.customer_product[index].customer_item,\r\n                        model.customer_product[index].customer_item_name,\r\n                        model.customer_product[index].is_use,\r\n                        model.customer_product[index].last_update,\r\n                      ]);\r\n                    }\r\n                    if (model.customer_product[index].is_use === false) {\r\n                      //console.log(\"edit_delete\",model.customer_product[index])\r\n                      await client.query(_QueryProduct.UpdateProductCustomer, [\r\n                        model.customer_product[index].id,\r\n                        model.customer_product[index].customer_item,\r\n                        model.customer_product[index].customer_item_name,\r\n                        model.customer_product[index].is_use,\r\n                        moment(new Date()),\r\n                      ]);\r\n                    }\r\n                  }\r\n                } else {\r\n                  //console.log(\"not_id\",model.customer_product[index])\r\n                  if (model.customer_product[index].is_use === true) {\r\n                    //console.log(\"add\",model.customer_product[index])\r\n                    let product_cp_id = uuidv4();\r\n\r\n                    var product_plants_item = model.id;\r\n                    await client.query(_QueryProduct.addProduct, [\r\n                      product_cp_id,\r\n                      model.customer_product[index].customer_item || null,\r\n                      model.customer_product[index].customer_item_name || null,\r\n                      model.product_model_id || null,\r\n                      model.qty_unit || null,\r\n                      model.min_product || null,\r\n                      model.min_lot || null,\r\n                      user_id,\r\n                      model.oem_id || null,\r\n                      true,\r\n                      true,\r\n                      false,\r\n                      moment(new Date()),\r\n                      moment(new Date()),\r\n                      is_assy,\r\n                      product_plants_item,\r\n                      model.is_virtual,\r\n                      model.surface || null,\r\n                      model.nw_number || null,\r\n                      model.packing_standart || null,\r\n                    ]);\r\n                  }\r\n                }\r\n              }\r\n\r\n              var check_process_cycle_del = await client.query(\r\n                _QueryProduct.check_cycle_del,\r\n                [model.id]\r\n              );\r\n\r\n              for (var e = 0; e < check_process_cycle_del.rows.length; e++) {\r\n                let check = model.process_cycle_time.filter((element) => {\r\n                  return (\r\n                    element.process_id ===\r\n                    check_process_cycle_del.rows[e].process_id\r\n                  );\r\n                });\r\n                if (check.length > 0) {\r\n                  //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n                } else {\r\n                  await client.query(_QueryProduct.DeletePCforUpdate, [\r\n                    check_process_cycle_del.rows[e].product_id,\r\n                    check_process_cycle_del.rows[e].process_id,\r\n                  ]);\r\n                  //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n                }\r\n              }\r\n\r\n              for (var k = 0; k < model.process_cycle_time.length; k++) {\r\n                var check_PC = await client.query(\r\n                  _QueryProduct.checkProcessCycleTime,\r\n                  [\r\n                    model.process_cycle_time[k].product_id,\r\n                    model.process_cycle_time[k].process_id,\r\n                  ]\r\n                );\r\n                //console.log(\"test\",check_PC.rows)\r\n                if (check_PC.rows.length > 0) {\r\n                  //console.log(\"helllo\")\r\n                  await client.query(_QueryProduct.updateProcessCycleTime, [\r\n                    check_PC.rows[0].id,\r\n                    model.process_cycle_time[k].cycle_time,\r\n                    model.process_cycle_time[k].sort,\r\n                  ]);\r\n                  //console.log(\"helllo1\")\r\n                } else {\r\n                  let product_cycle_id = uuidv4();\r\n                  await client.query(_QueryProduct.addProcessCycleTime, [\r\n                    product_cycle_id,\r\n                    null,\r\n                    null,\r\n                    model.process_cycle_time[k].process_id,\r\n                    model.process_cycle_time[k].cycle_time,\r\n                    true,\r\n                    model.id,\r\n                    model.process_cycle_time[k].sort,\r\n                  ]);\r\n                }\r\n              }\r\n            } else {\r\n              throw Error(\r\n                \"System : Please Select Normal or Sub Assy to continue\"\r\n              );\r\n            }\r\n\r\n            var check_supplier_del = await client.query(\r\n              _QueryProduct.check_supplier_del,\r\n              [model.id]\r\n            );\r\n\r\n            for (var e = 0; e < check_supplier_del.rows.length; e++) {\r\n              let check = model.supplier_data.filter((element) => {\r\n                return (\r\n                  element.supplier_id ===\r\n                  check_supplier_del.rows[e].supplier_id &&\r\n                  element.sort === check_supplier_del.rows[e].sort\r\n                );\r\n              });\r\n              if (check.length > 0) {\r\n                //console.log(\"ไม่ลบ\" ,check_mat_del.rows[e])\r\n              } else {\r\n                await client.query(_QueryProduct.DeletePSforUpdate, [\r\n                  check_supplier_del.rows[e].product_id,\r\n                  check_supplier_del.rows[e].supplier_id,\r\n                ]);\r\n                //console.log(\"ลบ\" ,check_mat_del.rows[e])\r\n              }\r\n            }\r\n\r\n            for (var k = 0; k < model.supplier_data.length; k++) {\r\n              var check_PS = await client.query(\r\n                _QueryProduct.checkProductSupplier,\r\n                [\r\n                  model.id,\r\n                  model.supplier_data[k].supplier_id,\r\n                  model.supplier_data[k].sort,\r\n                ]\r\n              );\r\n              /* console.log(\"test\", check_PS.rows); */\r\n              if (check_PS.rows.length > 0) {\r\n                //console.log(\"helllo\")\r\n                let updatedate = moment(new Date());\r\n                await client.query(_QueryProduct.updateProductSupplier, [\r\n                  check_PS.rows[0].id,\r\n                  model.supplier_data[k].buy_price,\r\n                  model.supplier_data[k].is_active,\r\n                  model.supplier_data[k].sort,\r\n                  model.supplier_data[k].create_date,\r\n                  model.supplier_data[k].minimum_order,\r\n                  model.supplier_data[k].lead_time,\r\n                  model.supplier_data[k].remark,\r\n                  updatedate,\r\n                  user_id,\r\n                ]);\r\n                //console.log(\"helllo1\")\r\n              } else {\r\n                let product_supplier_id = uuidv4();\r\n                let updatedate = moment(new Date());\r\n                await client.query(_QueryProduct.addProductSupplier, [\r\n                  product_supplier_id,\r\n                  model.id,\r\n                  model.supplier_data[k].supplier_id,\r\n                  model.supplier_data[k].is_active,\r\n                  model.supplier_data[k].sort,\r\n                  model.supplier_data[k].create_date,\r\n                  true,\r\n                  model.supplier_data[k].buy_price,\r\n                  model.supplier_data[k].minimum_order,\r\n                  model.supplier_data[k].lead_time,\r\n                  model.supplier_data[k].remark,\r\n                  updatedate,\r\n                  user_id,\r\n                ]);\r\n              }\r\n            }\r\n            let temp2 = await client.query(_QueryProduct.get_supplier, [\r\n              model.id,\r\n            ]);\r\n            temp2.rows.sort((a, b) => a.sort - b.sort);\r\n            let sort = 1;\r\n            for (let item of temp2.rows) {\r\n              item.sort = sort;\r\n              await client.query(_QueryProduct.update_sort, [\r\n                item.id,\r\n                item.sort,\r\n              ]);\r\n              sort++;\r\n            }\r\n\r\n            await client.query(_QueryProduct.DeleteMachineforUpdate, [\r\n              model.product_id,\r\n            ]);\r\n            for (let m of model.machine_data) {\r\n              let pm_id = uuidv4();\r\n              await client.query(_QueryProduct.AddMachine, [\r\n                pm_id,\r\n                m.machine_id,\r\n                model.id,\r\n                m.sort || null,\r\n                moment(new Date()),\r\n              ]);\r\n            }\r\n\r\n\r\n            var chackfac = await client.query(_QueryProduct.chack_plating_product, [\r\n              model.id,\r\n            ]);\r\n  \r\n            if (model.facchoup_data.length > 0) {\r\n              var addtabelfac = [];\r\n              var edittabelfac = [];\r\n            for (let i of model.facchoup_data) {\r\n              var check = chackfac.rows.filter((e) => {\r\n                return e.plating_plat_id === i.fac_id;\r\n              });\r\n              /* console.log(check, \"x\"); */\r\n              if (check.length > 0) {\r\n                let as = {\r\n                  id: check[0].id,\r\n                  plating_plat_id: i.id,\r\n                };\r\n                edittabelfac.push(as);\r\n                // console.log(as, \"2\");\r\n              }else{\r\n                let as = {\r\n                  plating_plat_id: i.id,\r\n\r\n                };\r\n                addtabelfac.push(as);\r\n              }\r\n            }\r\n\r\n\r\n            for (let i of addtabelfac) {\r\n            let fac_id = uuidv4();\r\n            await client.query(_QueryProduct.add_plating_product, [\r\n              fac_id,\r\n              i.plating_plat_id,\r\n              model.id,\r\n              true,\r\n              true,\r\n              new Date()\r\n            ]);\r\n\r\n          }\r\n\r\n        /*   for (let i of edittabelfac) {\r\n            await client.query(_QueryProduct.edit_plating_product, [\r\n              i.id,\r\n              i.plating_plat_id,\r\n              model.id,\r\n              new Date()\r\n            ]);\r\n          } */\r\n\r\n\r\n          }\r\n      \r\n          \r\n          var deltabelfac = [];\r\n          for (let i of chackfac.rows) {\r\n            var check = model.facchoup_data.filter((e) => {\r\n              return e.fac_id === i.plating_plat_id;\r\n            });\r\n            // console.log(check);\r\n            if (check.length === 0) {\r\n            \r\n              let as = {\r\n                del_id: i.id,\r\n                plating_plat_id:i.plating_plat_id\r\n                \r\n              };\r\n              deltabelfac.push(as);\r\n        \r\n            }\r\n          }\r\n          console.log(deltabelfac, \"1\");\r\n\r\n          for (let i of deltabelfac) {\r\n            await client.query(_QueryProduct.del_plating_product, [\r\n              i.del_id,\r\n            ]);\r\n          }\r\n           \r\n\r\n          var chackcus = await client.query(_QueryProduct.chack_product_customer, [\r\n            model.id,\r\n          ]);\r\n\r\n          console.log(chackcus.rows,model.customer_data)\r\n          if (model.customer_data.length > 0) {\r\n            var addtabelcus = [];\r\n          for (let i of model.customer_data) {\r\n            var check = chackcus.rows.filter((e) => {\r\n              return e.customer_id  === i.cus_id;\r\n            });\r\n            \r\n            if (check.length == 0) {\r\n              let as = {\r\n                customer_id: i.cus_id,\r\n\r\n              };\r\n              addtabelcus.push(as);\r\n            }\r\n\r\n          }\r\n\r\n\r\n          for (let i of addtabelcus) {\r\n          let cus_id = uuidv4();\r\n          await client.query(_QueryProduct.add_product_customer, [\r\n            cus_id,\r\n            model.id,\r\n            i.customer_id,\r\n          ]);\r\n\r\n        }\r\n        console.log(check)\r\n       \r\n\r\n\r\n        var deltabelcus = [];\r\n        for (let i of chackcus.rows) {\r\n          var check = model.customer_data.filter((e) => {\r\n            return e.cus_id === i.customer_id;\r\n          });\r\n        \r\n          if (check.length === 0) {\r\n          \r\n            let as = {\r\n              del_id: i.id,\r\n              \r\n            };\r\n            deltabelcus.push(as);\r\n          \r\n          }\r\n          console.log(deltabelcus,'aaaa');\r\n\r\n        for (let i of deltabelcus) {\r\n          await client.query(_QueryProduct.del_product_customer, [\r\n            i.del_id,\r\n          ]);\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n        \r\n         \r\n\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n            console.log(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async delProduct(product_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryProduct.delProduct, [\r\n              user_id,\r\n              moment(new Date()),\r\n              product_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdProduct(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var re_temp;\r\n            let temp = await client.query(_QueryProduct.findProductById, [\r\n              product_id,\r\n            ]);\r\n            var temp_customer_product = await client.query(\r\n              _QueryProduct.findCustomeProductByProductId,\r\n              [product_id]\r\n            );\r\n            var temp_process_cycle_time = await client.query(\r\n              _QueryProduct.check_cycle_del,\r\n              [product_id]\r\n            );\r\n            let temp2 = await client.query(_QueryProduct.get_supplier, [\r\n              product_id,\r\n            ]);\r\n            let temp_machine = await client.query(_QueryProduct.get_machine, [\r\n              product_id,\r\n            ]);\r\n            \r\n              let customer = await client.query(_QueryProduct.get_customer,[\r\n                product_id\r\n              ]);\r\n\r\n            \r\n              let plating_product = await client.query(_QueryProduct.get_plating_product,[\r\n                product_id\r\n              ]);\r\n           \r\n           \r\n             \r\n  \r\n            \r\n  \r\n            //console.log(temp.rows[0].is_assy)\r\n            if (temp.rows[0].is_assy === true) {\r\n              // console.log(\"is_Assy\")\r\n              var multi_product_assy = await client.query(\r\n                _QueryProduct.findmutipleProductByProductId,\r\n                [product_id]\r\n              );\r\n              //console.log(multi_product_assy.rows);\r\n              re_temp = {\r\n                id: temp.rows[0].id,\r\n                no: temp.rows[0].no,\r\n                name: temp.rows[0].name,\r\n                surface: temp.rows[0].surface,\r\n                nw_number: temp.rows[0].nw_number, \r\n                packing_standart: temp.rows[0].packing_standart, \r\n                product_model_id: temp.rows[0].product_model_id,\r\n                qty_unit: temp.rows[0].qty_unit,\r\n                min_product: temp.rows[0].min_product,\r\n                min_lot: temp.rows[0].min_lot,\r\n                user_id: temp.rows[0].user_id,\r\n                oem_id: temp.rows[0].oem_id,\r\n                wip_amount: temp.rows[0].wip_amount,\r\n                fg_amount: temp.rows[0].fg_amount,\r\n                image: temp.rows[0].image,\r\n                description: temp.rows[0].description,\r\n                sell_price: temp.rows[0].sell_price,\r\n                cost: temp.rows[0].cost,\r\n                circle_time: temp.rows[0].circle_time,\r\n                sku_user: temp.rows[0].sku_user,\r\n                product_route_id: temp.rows[0].product_route_id,\r\n                product_size_id: temp.rows[0].product_size_id,\r\n                product_color_id: temp.rows[0].product_color_id,\r\n                image_name: temp.rows[0].image_name,\r\n                imaget_path: temp.rows[0].imaget_path,\r\n                sku_system: temp.rows[0].sku_system,\r\n                multiple_product_subAssy: multi_product_assy.rows,\r\n                is_assy: temp.rows[0].is_assy,\r\n                multiple_mat: \"\",\r\n                customer_product: temp_customer_product.rows,\r\n                process_cycle_time: temp_process_cycle_time.rows || null,\r\n                supplier_data: temp2.rows,\r\n                machine_data: temp_machine.rows,\r\n                size: temp.rows[0].size,\r\n                unit: temp.rows[0].unit,\r\n                thickness: temp.rows[0].thickness,\r\n                weight: temp.rows[0].weight,\r\n                cross_section_area: temp.rows[0].cross_section_area,\r\n                is_virtual: temp.rows[0].is_trade,\r\n                stp_type: temp.rows[0].stp_type,\r\n                width: temp.rows[0].width,\r\n                height: temp.rows[0].height,\r\n                blade_head: temp.rows[0].blade_head,\r\n                packing_standart: temp.rows[0].packing_standart,\r\n                prod_customer: customer.rows,\r\n                plating_product: plating_product.rows\r\n              };\r\n              console.log(re_temp);\r\n            } else {\r\n              //console.log(\"is_not_Assy\")\r\n              var multi_mat = await client.query(\r\n                _QueryProduct.findmultipleMatByProductId,\r\n                [product_id]\r\n              );\r\n              console.log(\"poID\",product_id);\r\n              re_temp = {\r\n                id: temp.rows[0].id,\r\n                no: temp.rows[0].no,\r\n                name: temp.rows[0].name,\r\n                surface: temp.rows[0].surface,\r\n                nw_number: temp.rows[0].nw_number,\r\n                packing_standart: temp.rows[0].packing_standart, \r\n                product_model_id: temp.rows[0].product_model_id,\r\n                qty_unit: temp.rows[0].qty_unit,\r\n                min_product: temp.rows[0].min_product,\r\n                min_lot: temp.rows[0].min_lot,\r\n                user_id: temp.rows[0].user_id,\r\n                oem_id: temp.rows[0].oem_id,\r\n                wip_amount: temp.rows[0].wip_amount,\r\n                fg_amount: temp.rows[0].fg_amount,\r\n                image: temp.rows[0].image,\r\n                description: temp.rows[0].description,\r\n                sell_price: temp.rows[0].sell_price,\r\n                cost: temp.rows[0].cost,\r\n                circle_time: temp.rows[0].circle_time,\r\n                sku_user: temp.rows[0].sku_user,\r\n                product_route_id: temp.rows[0].product_route_id,\r\n                product_size_id: temp.rows[0].product_size_id,\r\n                product_color_id: temp.rows[0].product_color_id,\r\n                image_name: temp.rows[0].image_name,\r\n                imaget_path: temp.rows[0].imaget_path,\r\n                sku_system: temp.rows[0].sku_system,\r\n                multiple_mat: multi_mat.rows,\r\n                is_assy: temp.rows[0].is_assy,\r\n                multiple_product_subAssy: \"\",\r\n                customer_product: temp_customer_product.rows,\r\n                process_cycle_time: temp_process_cycle_time.rows || null,\r\n                supplier_data: temp2.rows,\r\n                machine_data: temp_machine.rows,\r\n                size: temp.rows[0].size,\r\n                unit: temp.rows[0].unit,\r\n                thickness: temp.rows[0].thickness,\r\n                weight: temp.rows[0].weight,\r\n                cross_section_area: temp.rows[0].cross_section_area,\r\n                is_virtual: temp.rows[0].is_trade,\r\n                stp_type: temp.rows[0].stp_type,\r\n                width: temp.rows[0].width,\r\n                height: temp.rows[0].height,\r\n                blade_head: temp.rows[0].blade_head,\r\n                packing_standart: temp.rows[0].packing_standart,\r\n                prod_customer: customer.rows,\r\n                plating_product: plating_product.rows\r\n              };\r\n              console.log(\"Mate\",re_temp);\r\n            }\r\n\r\n            if (temp.rows.length > 0) {\r\n              //console.log(temp.rows);\r\n              resolve(re_temp);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByNoProduct(no, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryProduct.findByNo, [no, oem_id]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProduct_desktop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            if (model.amount_type == \"wip\") {\r\n              await client.query(_QueryProduct.update_product_wip_desktop, [\r\n                model.no,\r\n                model.amount || null,\r\n                model.oem_id,\r\n              ]);\r\n            } else if (model.amount_type == \"fg\") {\r\n              await client.query(_QueryProduct.update_product_fg_desktop, [\r\n                model.no,\r\n                model.amount || null,\r\n                model.oem_id,\r\n              ]);\r\n            } else if (model.amount_type == \"cut\") {\r\n              await client.query(_QueryProduct.update_product_cut_desktop, [\r\n                model.no,\r\n                model.amount || null,\r\n                model.oem_id,\r\n              ]);\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addLogProduct_desktop(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let id = uuidv4();\r\n            if (model.product_type == \"wip\") {\r\n              await client.query(\r\n                _QueryProduct.insert_log_product_wip_edit_mount,\r\n                [\r\n                  id,\r\n                  model.product_id || null,\r\n                  model.user_id || null,\r\n                  model.edit_type || null,\r\n                  model.amount || null,\r\n                  moment(new Date()),\r\n                ]\r\n              );\r\n            } else if (model.product_type == \"fg\") {\r\n              await client.query(\r\n                _QueryProduct.insert_log_product_fg_edit_mount,\r\n                [\r\n                  id,\r\n                  model.product_id || null,\r\n                  model.user_id || null,\r\n                  model.edit_type || null,\r\n                  model.amount || null,\r\n                  moment(new Date()),\r\n                  model.project_id || null,\r\n                ]\r\n              );\r\n            } else if (model.product_type == \"cut\") {\r\n              await client.query(\r\n                _QueryProduct.insert_log_product_cut_edit_mount,\r\n                [\r\n                  id,\r\n                  model.product_id || null,\r\n                  model.user_id || null,\r\n                  model.edit_type || null,\r\n                  model.amount || null,\r\n                  moment(new Date()),\r\n                ]\r\n              );\r\n            }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProduct(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           /*  console.log(model); */\r\n\r\n            /*        if(model.inventory === true){ */\r\n            //var temp = await client.query(_QueryProduct.filterProductcheck, [model.no || null, model.name || null, model.product_model_id || null, model.oem_id || null,model.inventory]);\r\n            // }\r\n            /*   else{\r\n                                        \r\n                                        var temp = await client.query(_QueryProduct.filterProduct, [model.no || null, model.name || null, model.product_model_id || null, model.oem_id || null]);\r\n                                        } */\r\n            var temp = await client.query(_QueryProduct.filterProduct, [\r\n              model.no || null,\r\n              model.name || null,\r\n              model.product_model_id || null,\r\n              model.oem_id || null,\r\n              model.inventory || false,\r\n              model.virtual_product || false,\r\n              model.under_min_lot || false,\r\n            ]);\r\n            if (model.oem_fix === \"thanasub\") {\r\n              //console.log(\"here\");\r\n              for (let index = 0; index < temp.rows.length; index++) {\r\n                let supplier = await client.query(\r\n                  _QueryProduct.get_supplier_Active,\r\n                  [temp.rows[index].id]\r\n                );\r\n                console.log(\"here\",supplier.rows);\r\n                if (supplier.rows.length > 0) {\r\n                  \r\n                  temp.rows[index].supplier = supplier.rows[0].supplier;\r\n                  temp.rows[index].buy_price = supplier.rows[0].buy_price;\r\n                  temp.rows[index].line = supplier.rows[0].line;\r\n                  temp.rows[index].tel = supplier.rows[0].tel;\r\n              /*     console.log(temp.rows[index]); */\r\n                }\r\n              }\r\n            }\r\n\r\n            \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProductAll(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            /*   if(model.inventory === true){\r\n                            var temp = await client.query(_QueryProduct.filterProductAllcheck, [model.no || null, model.name || null, model.product_model_id || null, model.oem_id || null]);\r\n                            }\r\n                            else{ */\r\n\r\n            var temp = await client.query(_QueryProduct.filterProductAll, [\r\n              model.no || null,\r\n              model.name || null,\r\n              model.product_model_id || null,\r\n              model.oem_id || null,\r\n              model.inventory || false,\r\n              model.virtual_product || false,\r\n              model.under_min_lot || false,\r\n            ]);\r\n            // }\r\n\r\n            if (model.oem_fix === \"thanasub\") {\r\n              console.log(\"here\");\r\n              for (let index = 0; index < temp.rows.length; index++) {\r\n                let supplier = await client.query(\r\n                  _QueryProduct.get_supplier_Active,\r\n                  [temp.rows[index].id]\r\n                );\r\n\r\n                if (supplier.rows.length > 0) {\r\n                  temp.rows[index].supplier = supplier.rows[0].supplier;\r\n                  temp.rows[index].line = supplier.rows[0].line;\r\n                  temp.rows[index].tel = supplier.rows[0].tel;\r\n                  console.log(temp.rows[index]);\r\n                }\r\n              }\r\n            }\r\n\r\n            console.log(temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelProduct(modelSheetArr, user_id, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempRes = [];\r\n          await client.connect();\r\n          try{\r\n          await client.query(\"BEGIN\");\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              var isUpdate = false;\r\n\r\n              try {\r\n                if (model.qty_unit < 0 || model.sell_price < 0) {\r\n                  throw Error(\"qty_unit / sell_price is not negative\");\r\n                }\r\n                var query = await client.query(_QueryProduct.checkNameProduct, [\r\n                  model.no,\r\n                  oem_id,\r\n                  null,\r\n                ]);\r\n                if (query.rows.length > 0) {\r\n                  isUpdate = true;\r\n                  /*        console.log(query.rows[0]);\r\n                                    console.log(model.description); */\r\n                  // throw Error(\"already Product no\");\r\n                }\r\n                //-------------------------------------\r\n                var findProductModelByName = await client.query(\r\n                  _QueryProduct.findProductModelByName,\r\n                  [model.product_model_name || null, oem_id]\r\n                );\r\n                if (findProductModelByName.rows.length > 0) {\r\n                  model.product_model_id = findProductModelByName.rows[0].id;\r\n                } else {\r\n                  model.product_model_id = null;\r\n                }\r\n                //-------------------------------------\r\n                var findProductRouteByName = await client.query(\r\n                  _QueryProduct.findProductRouteByName,\r\n                  [model.product_route_name || null, oem_id]\r\n                );\r\n                if (findProductRouteByName.rows.length > 0) {\r\n                  model.product_route_id = findProductRouteByName.rows[0].id;\r\n                } else {\r\n                  model.product_route_id = null;\r\n                }\r\n                //-------------------------------------\r\n                var findProductSizeByName = await client.query(\r\n                  _QueryProduct.findProductSizeByName,\r\n                  [model.product_size_name, oem_id]\r\n                );\r\n                if (findProductSizeByName.rows.length > 0) {\r\n                  model.product_size_id = findProductSizeByName.rows[0].id;\r\n                } else {\r\n                  model.product_size_id = null;\r\n                }\r\n                //-------------------------------------\r\n                var findProductColorByName = await client.query(\r\n                  _QueryProduct.findProductColorByName,\r\n                  [model.product_color_name, oem_id]\r\n                );\r\n                if (findProductColorByName.rows.length > 0) {\r\n                  model.product_color_id = findProductColorByName.rows[0].id;\r\n                } else {\r\n                  model.product_color_id = null;\r\n                }\r\n                if (isUpdate) {\r\n                  // console.log(model);\r\n                  model.image = query.rows[0].image;\r\n                  model.id = query.rows[0].id;\r\n                  model.description = model.description;\r\n                  model.circle_time = query.rows[0].circle_time;\r\n                  model.sku_user = model.sku_user || query.rows[0].sku_user;\r\n                  model.image_name = query.rows[0].image_name;\r\n                  model.image_path = query.rows[0].image_path;\r\n                  model.sku_system = query.rows[0].sku_system;\r\n                  await client.query(_QueryProduct.updateProduct, [\r\n                    model.no || null,\r\n                    model.name || null,\r\n                    model.product_model_id || null,\r\n                    model.qty_unit || 0,\r\n                    model.min_product || 0,\r\n                    model.min_lot || 0,\r\n                    user_id,\r\n                    moment(new Date()),\r\n                    model.id,\r\n                  ]);\r\n                  await client.query(_QueryProduct.updateProductDetail, [\r\n                    model.image || null,\r\n                    model.description || null,\r\n                    model.sell_price || null,\r\n                    model.circle_time || null,\r\n                    model.sku_user || null,\r\n                    model.product_route_id || null,\r\n                    model.product_size_id || null,\r\n                    model.product_color_id || null,\r\n                    model.image_name || null,\r\n                    model.image_path || null,\r\n                    model.sku_system || null,\r\n                    model.id,\r\n                    model.cost || null,\r\n                    model.size || null,\r\n                    model.unit || null,\r\n                    model.thickness || null,\r\n                    model.weight || null,\r\n                    model.cross_section_area || null,\r\n                    model.stp_type ,\r\n                    model.width || null,\r\n                    model.height || null,\r\n                    model.blade_head || null,\r\n                  ]);\r\n\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                    isUpdate: true,\r\n                    status_update: true,\r\n                  });\r\n                } else {\r\n                  //-------------------------------------\r\n                  let product_id = uuidv4();\r\n                  let product_material_id = uuidv4();\r\n                  await client.query(_QueryProduct.addProduct, [\r\n                    product_id,\r\n                    model.no || null,\r\n                    model.name || null,\r\n                    model.product_model_id || null,\r\n                    model.qty_unit || 0,\r\n                    model.min_product || 0,\r\n                    model.min_lot || 0,\r\n                    user_id,\r\n                    oem_id || null,\r\n                    true,\r\n                    true,\r\n                    false,\r\n                    moment(new Date()),\r\n                    moment(new Date()),\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    model.surface || null,\r\n                    model.nw_number || null,\r\n                    model.packing_standart\r\n                  ]);\r\n                  await client.query(_QueryProduct.addProductDetail, [\r\n                    product_id,\r\n                    model.image || null,\r\n                    model.description || null,\r\n                    model.sell_price || null,\r\n                    model.circle_time || null,\r\n                    model.sku_user || null,\r\n                    model.product_route_id || null,\r\n                    model.product_size_id || null,\r\n                    model.product_color_id || null,\r\n                    model.image_name || null,\r\n                    model.image_path || null,\r\n                    model.sku_system || null,\r\n                    model.id,\r\n                    model.cost || null,\r\n                    model.size || null,\r\n                    model.unit || null,\r\n                    model.thickness || null,\r\n                    model.weight || null,\r\n                    model.cross_section_area || null,\r\n                    model.stp_type ,\r\n                    model.width || null,\r\n                    model.height || null,\r\n                    model.blade_head || null,\r\n                  ]);\r\n                  await client.query(_QueryProduct.addProductMaterial, [\r\n                    product_material_id,\r\n                    product_id,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null,\r\n                    null\r\n                  ]);\r\n\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                    isUpdate: false,\r\n                    status_update: true,\r\n                  });\r\n                }\r\n\r\n                //   console.log(\"COMMIT\", model.no)\r\n              } catch (e) {\r\n                tempRes.push({\r\n                  model: model.no,\r\n                  status: false,\r\n                  error: e.message,\r\n                  status_update: false,\r\n                });\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n\r\n          if (tempRes.filter((x) => !x.status).length > 0) {\r\n            await client.query(\"ROLLBACK\");\r\n            console.log(\"ROLLBACK\");\r\n          } else {\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT All\");\r\n          }\r\n\r\n    \r\n          resolve(tempRes);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelBomlist(modelSheetArr, user_id, oem_id, part_no) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempMultimat = [];\r\n          let tempRes = [];\r\n          var product_id;\r\n          await client.connect();\r\n          try{\r\n          await client.query(\"BEGIN\");\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              try {\r\n                if (part_no == model.product_no) {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    product_id = null;\r\n                  } else {\r\n                    product_id = product.rows[0].id || null;\r\n                  }\r\n                } else {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    throw Error(\"Part_no not found!!\");\r\n                  }\r\n                  product_id = product.rows[0].id || null;\r\n                }\r\n                //await client.query(_QueryProduct.DeletePMforUpdate, [product.rows[0].id]);\r\n              } catch (e) {\r\n                // throw Error(e)\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              try {\r\n                if (part_no == model.product_no) {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    product_id = null;\r\n                  } else {\r\n                    product_id = product.rows[0].id || null;\r\n                  }\r\n                } else {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n\r\n                  if (product.rows.length < 1) {\r\n                    throw Error(\"Product No not found!!\");\r\n                  }\r\n                  product_id = product.rows[0].id || null;\r\n                }\r\n                /*   if (product.rows.length < 1) {\r\n                                throw Error(\"Part_no not found!!\");\r\n    \r\n                               } */\r\n                //console.log(\"product: \",product.rows[0])\r\n                var material = await client.query(\r\n                  _QueryProduct.findMaterialIdByNo,\r\n                  [model.material_no, oem_id]\r\n                );\r\n                if (material.rows.length < 1) {\r\n                  throw Error(\"Mat_code not found!!\");\r\n                }\r\n\r\n                if (\r\n                  typeof model.wt_mtr == \"string\" ||\r\n                  typeof model.c_leng == \"string\" ||\r\n                  typeof model.cos_pc == \"string\"\r\n                ) {\r\n                  throw Error(\"wt_mtr and c_leng and cos_pc is not text!!\");\r\n                }\r\n                if (model.wt_mtr < 0 || model.c_leng < 0 || model.cos_pc < 0) {\r\n                  throw Error(\"wt_mtr and c_leng and cos_pc is not negative!!\");\r\n                }\r\n                // console.log(\"material: \",material.rows[0])\r\n                var tempmat = {\r\n                  id: null,\r\n                  product_id: product_id,\r\n                  part_no: model.product_no,\r\n                  material_id: material.rows[0].id || null,\r\n                  no: material.rows[0].no,\r\n                  name: material.rows[0].name,\r\n                  material_size_id: material.rows[0].material_size_id,\r\n                  material_spec_id: material.rows[0].material_spec_id,\r\n                  material_type_id: material.rows[0].material_type_id,\r\n                  remark: material.rows[0].remark,\r\n                  wt_mtr: model.wt_mtr,\r\n                  c_leng: model.c_leng,\r\n                  cos_pc: model.cos_pc,\r\n                };\r\n                tempMultimat.push(tempmat);\r\n                //console.log(\"multi \",multi_mat.rows);\r\n                /*   var temp ={\r\n                                product_id:product_id,\r\n                                material_id:material.rows[0].id || null,\r\n                                wt_mtr:model.wt_mtr,\r\n                                c_leng:model.c_leng,\r\n                                cos_pc:model.cos_pc,\r\n                            } */\r\n                // await client.query(_QueryProduct.addProductMaterial, [product_material_id, temp.product_id, temp.material_id || null, temp.wt_mtr || null, temp.c_leng || null, temp.cos_pc || null]);\r\n\r\n                tempRes.push({\r\n                  product_id: product_id || null,\r\n                  part_no: model.product_no,\r\n                  material_id: material.rows[0].id || null,\r\n                  mat_code: model.material_no,\r\n                  wt_mtr: model.wt_mtr,\r\n                  c_leng: model.c_leng,\r\n                  cos_pc: model.cos_pc,\r\n                  error: \"\",\r\n                  status: true,\r\n                });\r\n\r\n                //  console.log(\"COMMIT\", temp)\r\n              } catch (e) {\r\n                tempRes.push({\r\n                  product_id: product_id || null,\r\n                  part_no: model.product_no,\r\n                  material_id: material.rows[0].id || null,\r\n                  mat_code: model.material_no,\r\n                  wt_mtr: model.wt_mtr,\r\n                  c_leng: model.c_leng,\r\n                  cos_pc: model.cos_pc,\r\n                  error: e.message,\r\n                  status: false,\r\n                });\r\n                //  throw Error(e)\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n          var tempRes_data = {\r\n            tempRes: tempRes,\r\n            tempMultimat: tempMultimat,\r\n          };\r\n          //   console.log(tempRes)\r\n          ////   console.log(tempMultimat)\r\n          //console.log(tempRes_data)\r\n\r\n          /* if ((tempRes.filter(x => !x.status)).length > 0) {\r\n                        await client.query('ROLLBACK')\r\n                        console.log(\"ROLLBACK\")\r\n                    } else { */\r\n          await client.query(\"COMMIT\");\r\n          console.log(\"COMMIT All\");\r\n          /* } */\r\n\r\n      \r\n          resolve(tempRes_data);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelBomlist_Assy(modelSheetArr, user_id, oem_id, part_no) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempMultiple_product_sub_assy = [];\r\n          let tempRes = [];\r\n          var product_id;\r\n          await client.connect();\r\n          try{\r\n          await client.query(\"BEGIN\");\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              //console.log(model)\r\n              try {\r\n                if (part_no == model.product_no) {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    product_id = null;\r\n                  } else {\r\n                    product_id = product.rows[0].id || null;\r\n                  }\r\n                } else {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    throw Error(\"Part_no not found!!\");\r\n                  }\r\n                  product_id = product.rows[0].id || null;\r\n                }\r\n                //await client.query(_QueryProduct.DeletePMforUpdate, [product.rows[0].id]);\r\n                //console.log(product_id)\r\n              } catch (e) {\r\n                // throw Error(e)\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n\r\n          for (const modelbookArr of modelSheetArr) {\r\n            for (const model of modelbookArr) {\r\n              try {\r\n                if (part_no == model.product_no) {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n                  if (product.rows.length < 1) {\r\n                    product_id = null;\r\n                  } else {\r\n                    product_id = product.rows[0].id || null;\r\n                  }\r\n                } else {\r\n                  var product = await client.query(\r\n                    _QueryProduct.findProductIdByNo,\r\n                    [model.product_no, oem_id]\r\n                  );\r\n\r\n                  if (product.rows.length < 1) {\r\n                    throw Error(\"Product No not found!!\");\r\n                  }\r\n                  product_id = product.rows[0].id || null;\r\n                }\r\n\r\n                //console.log(\"product: \",product.rows[0])\r\n                var product_sub = await client.query(\r\n                  _QueryProduct.findProductIdByNo,\r\n                  [model.product_no_sub_assy, oem_id]\r\n                );\r\n                if (product_sub.rows.length < 1) {\r\n                  throw Error(\"Product No(Sub-Assy) not found!!\");\r\n                }\r\n\r\n                //console.log(\"product_sub: \",product_sub.rows[0])\r\n                var tempproduct_sub = {\r\n                  id: null,\r\n                  product_id: product_id,\r\n                  part_no: model.product_no,\r\n                  product_sub: product_sub.rows[0].id || null,\r\n                  no: product_sub.rows[0].no,\r\n                  name: product_sub.rows[0].name,\r\n                  remark: product_sub.rows[0].remark,\r\n                  amount: model.amount,\r\n                };\r\n                //console.log(tempproduct_sub)\r\n\r\n                tempMultiple_product_sub_assy.push(tempproduct_sub);\r\n                //console.log(\"multi \",multi_mat.rows);\r\n                var temp = {\r\n                  product_id: product_id,\r\n                  product_sub: product_sub.rows[0].id || null,\r\n                  amount: model.amount,\r\n                  remark: model.remark,\r\n                };\r\n                // await client.query(_QueryProduct.addProductMaterial, [product_material_id, temp.product_id, temp.material_id || null, temp.wt_mtr || null, temp.c_leng || null, temp.cos_pc || null]);\r\n\r\n                tempRes.push({\r\n                  product_id: temp.product_id || null,\r\n                  part_no: model.product_no,\r\n                  product_sub: temp.product_sub || null,\r\n                  product_sub_no: model.product_no_sub_assy,\r\n                  amount: model.amount,\r\n                  remark: model.remark,\r\n                  error: \"\",\r\n                  status: true,\r\n                });\r\n\r\n                //  console.log(\"COMMIT\", temp)\r\n              } catch (e) {\r\n                tempRes.push({\r\n                  product_id: temp.product_id || null,\r\n                  part_no: model.product_no,\r\n                  product_sub: temp.product_sub_id || null,\r\n                  product_sub_no: model.product_no_sub_assy,\r\n                  amount: model.amount,\r\n                  remark: model.remark,\r\n                  error: e.message,\r\n                  status: false,\r\n                });\r\n                //  throw Error(e)\r\n                console.log(e);\r\n              }\r\n            }\r\n          }\r\n          var tempRes_data = {\r\n            tempRes: tempRes,\r\n            tempMultiple_product_sub_assy: tempMultiple_product_sub_assy,\r\n          };\r\n          //   console.log(tempRes)\r\n          ////   console.log(tempMultimat)\r\n          ///    console.log(tempRes_data)\r\n\r\n          if (tempRes.filter((x) => !x.status).length > 0) {\r\n            await client.query(\"ROLLBACK\");\r\n            console.log(\"ROLLBACK\");\r\n          } else {\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT All\");\r\n          }\r\n\r\n          \r\n     \r\n          resolve(tempRes_data);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductWIPAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            model.amount = model.amount || 0;\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n            var current = await client.query(\r\n              _QueryProduct.getValueProductWIPAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              throw Error(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              throw Error(\r\n                \"can not set value here, response is \" + current.rows[0].amount\r\n              );\r\n            }\r\n            let material_log_id = uuidv4();\r\n            await client.query(_QueryProduct.addLogProductWIPAmount, [\r\n              material_log_id,\r\n              model.id,\r\n              user_id,\r\n              model.edit_type,\r\n              model.amount,\r\n              moment(new Date()),\r\n              model.remark || null,\r\n            ]);\r\n            await client.query(_QueryProduct.productWIPAmountInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductEnd_userAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            model.amount = model.amount || 0;\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n            var current = await client.query(\r\n              _QueryProduct.getValueProductEnd_userAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              throw Error(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              throw Error(\r\n                \"can not set value here, response is \" + current.rows[0].amount\r\n              );\r\n            }\r\n            let end_user_log_id = uuidv4();\r\n            await client.query(_QueryProduct.addLogProductEnd_userAmount, [\r\n              end_user_log_id,\r\n              model.end_user_id,\r\n              model.id,\r\n              user_id,\r\n              model.edit_type,\r\n              model.amount,\r\n              moment(new Date()),\r\n            ]);\r\n            await client.query(_QueryProduct.productEnd_userAmountInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductLogsticAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            model.amount = model.amount || 0;\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n            var current = await client.query(\r\n              _QueryProduct.getValueProductLogisticAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              throw Error(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              throw Error(\r\n                \"can not set value here, response is \" + current.rows[0].amount\r\n              );\r\n            }\r\n            let logistic_log_id = uuidv4();\r\n            await client.query(_QueryProduct.addLogProductLogisticAmount, [\r\n              logistic_log_id,\r\n              model.logistic_id,\r\n              model.id,\r\n              user_id,\r\n              model.edit_type,\r\n              model.amount,\r\n              moment(new Date()),\r\n            ]);\r\n            await client.query(_QueryProduct.productLogisticAmountInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getlog_detailFG(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n\r\n          let temp_sum = await client.query(_QueryProduct.getsumHistory, [\r\n            product_id,\r\n          ]);\r\n          const temp_new = [];\r\n          for (var i = 0; i < temp_sum.rows.length; i++) {\r\n            if (temp_sum.rows[i].amount > 0) {\r\n              let temp_sum_detail = await client.query(_QueryProduct.getsumHistoryDetail, [\r\n                temp_sum.rows[i].fg_lot_no, product_id\r\n              ]);\r\n              console.log(temp_sum_detail.rows)\r\n              let customer = await client.query(_QueryProduct.getcusNameById, [\r\n                temp_sum_detail.rows[0].customer_id\r\n              ]);\r\n              let end_user = await client.query(_QueryProduct.getendNameById, [\r\n                temp_sum_detail.rows[0].end_user_id\r\n              ]);\r\n              let customer_name = \"\";\r\n              if (customer.rows.length > 0) {\r\n                customer_name = customer.rows[0].name + \" [CUS]\";\r\n              }\r\n              if (end_user.rows.length > 0) {\r\n                customer_name = end_user.rows[0].name + \" [END]\";;\r\n              }\r\n              const data = {\r\n                amount: temp_sum.rows[i].amount,\r\n                create_date: temp_sum.rows[i].create_date,\r\n                exprire_date: temp_sum.rows[i].exprire_date,\r\n                fg_lot_no: temp_sum.rows[i].fg_lot_no,\r\n                is_reserved: temp_sum_detail.rows[0].is_reserved,\r\n                customer: customer_name,\r\n                stp_machine:temp_sum_detail.rows[0].stp_machine,\r\n              };\r\n\r\n              temp_new.push(data);\r\n\r\n            }\r\n          }\r\n        /*   temp_new.sort((a, b) => a.exprire_date - b.exprire_date); */\r\n          temp_new.sort((a, b) => moment(a.exprire_date) - moment(b.exprire_date));\r\n   /*        if (temp_new.length > 0) { */\r\n            console.log(temp_new)\r\n            resolve(temp_new);\r\n   /*        } else { */\r\n          //  reject(\"not found\");\r\n    /*       } */\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async updateProductFGAmountInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!(typeof model.amount === \"number\")) {\r\n          reject(\"amount need type number\");\r\n        }\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n    \r\n\r\n        try {\r\n          await client.query(\"BEGIN\");\r\n\r\n          //console.log(\"มอง\",model)\r\n\r\n          if (model.edit_type === false) {\r\n              if(model.oem_fix === \"thanasub\" && model.is_trade === true){\r\n                var amount = await client.query(_QueryHandheld.getAmountById, [\r\n                  model.id,\r\n                ]);\r\n                var new_amount =\r\n                parseFloat(amount.rows[0].fg_amount || 0) + parseFloat(model.amount);\r\n    \r\n                let id_logFG = uuidv4();\r\n    \r\n                await client.query(_QueryProduct.addLogFG, [\r\n                  id_logFG,\r\n                  model.id,\r\n                  user_id,\r\n                  true,\r\n                  model.amount,\r\n                  moment(new Date()),\r\n                   null,\r\n                  model.lot_no,\r\n                  model.exp_date || moment(new Date()),\r\n                  model.remark || null,\r\n                  model.color || null,\r\n                   null,\r\n                  model.tag_no || null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  /* model.buy_price ||  */null,\r\n                  new_amount,\r\n                ]);\r\n                await client.query(_QueryHandheld.updateFG, [\r\n                  model.id,\r\n                  parseFloat(new_amount),\r\n                  moment(new Date()),\r\n                ]);\r\n              }\r\n            var amount = await client.query(_QueryHandheld.getAmountById, [\r\n              model.id,\r\n            ]);\r\n            var new_amount =\r\n            parseFloat(amount.rows[0].fg_amount || 0) - parseFloat(model.amount);\r\n            //console.log(new_amount)\r\n            var lot_stock = await client.query(_QueryHandheld.getSumLotNoReserved, [\r\n              model.id,\r\n            ]);\r\n               /* console.log(lot_stock.rows) */\r\n            const lot_stock2 = [];\r\n            for (let i of lot_stock.rows) {\r\n              if (i.amount > 0) {\r\n                lot_stock2.push(i);\r\n              }\r\n            }\r\n            //console.log(lot_stock.rows)\r\n            const lot_noArr = lot_stock2.sort(\r\n              (a, b) => moment(a.exprire_date) - moment(b.exprire_date)\r\n            );\r\n\r\n            //console.log(lot_noArr)\r\n            var b_amount = model.amount;\r\n\r\n            \r\n            for (let lot of lot_noArr) {\r\n              if (b_amount > 0) {\r\n                var cut = 0;\r\n             /*    console.log(b_amount); */\r\n                var balance = lot.amount - b_amount;\r\n                if (balance < 0) {\r\n                  b_amount = balance * -1;\r\n                  cut = lot.amount;\r\n                } else {\r\n                  cut = b_amount;\r\n                  b_amount = 0;\r\n                }\r\n                //console.log(\"ตัด: \", cut, \"จาก lot \", lot.fg_lot_no);\r\n                \r\n                let id_logFG = uuidv4();\r\n                await client.query(_QueryProduct.addLogFG, [\r\n                  id_logFG,\r\n                  model.id,\r\n                  user_id,\r\n                  false,\r\n                  cut,\r\n                  moment(new Date()),\r\n                  model.project_id || null,\r\n                  lot.fg_lot_no,\r\n                  null, //listData.exp,\r\n                  model.remark || null,\r\n                  null,\r\n                  null,\r\n                  model.tag_no || null,\r\n                  null,\r\n                  false,\r\n                  null,\r\n                  null,\r\n                  null,\r\n                  model.sell_price || null,\r\n                  model.buy_price ||  null,\r\n                  new_amount\r\n                ]);\r\n              }\r\n            }\r\n            if (b_amount !== 0) {\r\n              console.log(\"ไม่มี lot ตัดแล้ว เกินมา \", b_amount);\r\n              model.new_amount = b_amount * -1;\r\n\r\n              throw Error(\"Over Stock amount -\" + b_amount);\r\n              //data_negative.push(listData);\r\n            }\r\n\r\n            await client.query(_QueryHandheld.updateFG, [\r\n              model.id,\r\n              parseFloat(new_amount),\r\n              moment(new Date()),\r\n            ]);\r\n\r\n\r\n          } else if (model.edit_type === true) {\r\n\r\n            let is_reserved = model.status_sst === \"customer\" || model.status_sst === \"end_user\" ? true : false;\r\n            let customer_id = model.status_sst === \"customer\" ? model.customer : null;\r\n            let enduser_id = model.status_sst === \"end_user\" ? model.end_user : null;\r\n            //console.log(\"HERE\",is_reserved, customer_id, enduser_id)\r\n            let log_warehouse_detail_id;\r\n            if (\r\n              model.warehouse.loop_id !== \"\" &&\r\n              model.warehouse.warehouse_id !== \"\" &&\r\n              model.warehouse.rack_id !== \"\" &&\r\n              model.warehouse.product_on_rack_id !== \"\" &&\r\n              model.warehouse.load_status_id !== \"\"\r\n            ) {\r\n              //console.log(\"innnnn\")\r\n              log_warehouse_detail_id = uuidv4();\r\n              await client.query(_QueryProduct.insert_log_warehouse_details, [\r\n                log_warehouse_detail_id,\r\n                model.warehouse.loop_id,\r\n                model.warehouse.warehouse_id,\r\n                model.warehouse.load_status_id,\r\n                model.warehouse.remark || null,\r\n                model.warehouse.description || null,\r\n                moment(new Date()),\r\n                model.warehouse.rack_id,\r\n                model.warehouse.product_on_rack_id,\r\n              ]);\r\n            }\r\n\r\n            var amount = await client.query(_QueryHandheld.getAmountById, [\r\n              model.id,\r\n            ]);\r\n            var new_amount =\r\n            parseFloat(amount.rows[0].fg_amount || 0) + parseFloat(model.amount);\r\n\r\n            let id_logFG = uuidv4();\r\n\r\n            await client.query(_QueryProduct.addLogFG, [\r\n              id_logFG,\r\n              model.id,\r\n              user_id,\r\n              true,\r\n              model.amount,\r\n              moment(new Date()),\r\n              model.project_id || null,\r\n              model.lot_no,\r\n              model.exp_date || moment(new Date()),\r\n              model.remark || null,\r\n              model.color || null,\r\n              log_warehouse_detail_id || null,\r\n              model.tag_no || null,\r\n              model.log_status || null,\r\n              is_reserved,\r\n              customer_id || null,\r\n              enduser_id || null,\r\n              model.stp_machine || null,\r\n              null,\r\n              model.buy_price || null,\r\n              new_amount\r\n            ]);\r\n            await client.query(_QueryHandheld.updateFG, [\r\n              model.id,\r\n              parseFloat(new_amount),\r\n              moment(new Date()),\r\n            ]);\r\n          }\r\n\r\n          await client.query(\"COMMIT\");\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async updateProductFGAmountInOut_NOFIFO(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        if (!(typeof model.amount === \"number\")) {\r\n          reject(\"amount need type number\");\r\n        }\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        //console.log(model)\r\n\r\n        try {\r\n          await client.query(\"BEGIN\");\r\n          console.log(model);\r\n          var amount = await client.query(_QueryHandheld.getAmountById, [\r\n            model.id,\r\n          ]);\r\n          var lot_stock = await client.query(_QueryHandheld.getSumLot, [\r\n            model.id,\r\n          ]);\r\n\r\n          let lot_target = lot_stock.rows.filter((e) => {\r\n            return e.fg_lot_no === model.lot_no_select;\r\n          })\r\n          var new_amount = lot_target[0].amount - model.amount;\r\n          if (new_amount < 0) {\r\n            throw Error(\"Over Stock \" + new_amount);\r\n          } else {\r\n            var new_FGamount = amount.rows[0].fg_amount - model.amount;\r\n            let temp_sum_detail = await client.query(_QueryProduct.getsumHistoryDetail, [\r\n              model.lot_no_select, model.id\r\n            ]);\r\n            var is_reserved = false;\r\n            var customer_id = null;\r\n            var enduser_id = null;\r\n            var stp_machine = null;\r\n            if (temp_sum_detail.rows.length > 0) {\r\n              is_reserved = temp_sum_detail.rows[0].is_reserved;\r\n              customer_id = temp_sum_detail.rows[0].customer_id;\r\n              enduser_id = temp_sum_detail.rows[0].end_user_id;\r\n              stp_machine = temp_sum_detail.rows[0].stp_machine;\r\n            }\r\n            let id_logFG = uuidv4();\r\n            await client.query(_QueryProduct.addLogFG, [\r\n              id_logFG,\r\n              model.id,\r\n              user_id,\r\n              false,\r\n              model.amount,\r\n              moment(new Date()),\r\n              model.project_id || null,\r\n              model.lot_no_select,\r\n              null, //listData.exp,\r\n              model.remark || null,\r\n              null,\r\n              null,\r\n              model.tag_no || null,\r\n              null,\r\n              is_reserved || false,\r\n              customer_id || null,\r\n              enduser_id || null,\r\n              stp_machine || null,\r\n              model.sell_price || null,\r\n              model.buy_price || null,\r\n            ]);\r\n            await client.query(_QueryHandheld.updateFG, [\r\n              model.id,\r\n              parseFloat(new_FGamount),\r\n              moment(new Date()),\r\n            ]);\r\n\r\n          }\r\n\r\n\r\n          \r\n\r\n          await client.query(\"COMMIT\");\r\n          console.log(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async updateProductAmountInOut(listModel, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempRes = [];\r\n          await client.connect();\r\n          try{\r\n          await client.query(\"BEGIN\");\r\n          for (const model of listModel) {\r\n            try {\r\n              switch (model.processType) {\r\n                case 1:\r\n                  let findById1 = await client.query(\r\n                    _QueryMaterial.findMaterialByName,\r\n                    [model.no]\r\n                  );\r\n                  if (findById1.rows.length == 0) {\r\n                    throw Error(\"not found item\");\r\n                  }\r\n                  model.id = findById1.rows[0].id;\r\n                  model.amount = model.amount || 0;\r\n                  let amount1 = model.actionType\r\n                    ? model.amount\r\n                    : model.amount * -1;\r\n                  var current1 = await client.query(\r\n                    _QueryMaterial.getValueAmount,\r\n                    [amount1, model.id]\r\n                  );\r\n                  if (current1.rows.length == 0) {\r\n                    throw Error(\"not found ValueAmount\");\r\n                  }\r\n                  if (current1.rows[0].amount < 0) {\r\n                    throw Error(\r\n                      \"can not set value here, response is\" +\r\n                      current1.rows[0].amount\r\n                    );\r\n                  }\r\n                  let material_log_id1 = uuidv4();\r\n                  await client.query(_QueryMaterial.addLogMaterialAmount, [\r\n                    material_log_id1,\r\n                    model.id,\r\n                    user_id,\r\n                    model.actionType,\r\n                    model.amount,\r\n                    moment(new Date()),\r\n                  ]);\r\n                  await client.query(_QueryMaterial.materialAmountInOut, [\r\n                    amount1,\r\n                    model.id,\r\n                  ]);\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                  });\r\n                  console.log(\"COMMIT\");\r\n                  break;\r\n                case 2:\r\n                  let findById2 = await client.query(\r\n                    _QueryProduct.findProductByName,\r\n                    [model.no, model.oem_id || null]\r\n                  );\r\n                  if (findById2.rows.length == 0) {\r\n                    throw Error(\"not found item\");\r\n                  }\r\n                  model.id = findById2.rows[0].id;\r\n                  model.amount = model.amount || 0;\r\n                  let amount2 = model.actionType\r\n                    ? model.amount\r\n                    : model.amount * -1;\r\n                  var current2 = await client.query(\r\n                    _QueryProduct.getValueProductWIPAmount,\r\n                    [amount2, model.id]\r\n                  );\r\n                  if (current2.rows.length == 0) {\r\n                    throw Error(\"not found ValueAmount\");\r\n                  }\r\n                  if (current2.rows[0].amount < 0) {\r\n                    throw Error(\r\n                      \"can not set value here, response is \" +\r\n                      current2.rows[0].amount\r\n                    );\r\n                  }\r\n                  let material_log_id2 = uuidv4();\r\n                  await client.query(_QueryProduct.addLogProductWIPAmount, [\r\n                    material_log_id2,\r\n                    model.id,\r\n                    user_id,\r\n                    model.actionType,\r\n                    model.amount,\r\n                    moment(new Date()),\r\n                    model.remark || null\r\n                  ]);\r\n                  await client.query(_QueryProduct.productWIPAmountInOut, [\r\n                    amount2,\r\n                    model.id,\r\n                  ]);\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                  });\r\n                  console.log(\"COMMIT\");\r\n                  break;\r\n                case 3:\r\n                  let findById3 = await client.query(\r\n                    _QueryProduct.findProductByName,\r\n                    [model.no, model.oem_id || null]\r\n                  );\r\n                  if (findById3.rows.length == 0) {\r\n                    throw Error(\"not found item\");\r\n                  }\r\n                  model.id = findById3.rows[0].id;\r\n                  model.amount = model.amount || 0;\r\n                  var amount3 = model.actionType\r\n                    ? model.amount\r\n                    : model.amount * -1;\r\n                  var current3 = await client.query(\r\n                    _QueryProduct.getValueProductFGAmount,\r\n                    [amount3, model.id]\r\n                  );\r\n                  if (current3.rows.length == 0) {\r\n                    throw Error(\"not found ValueAmount\");\r\n                  }\r\n                  if (current3.rows[0].amount < 0) {\r\n                    throw Error(\r\n                      \"can not set value here, response is\" +\r\n                      current3.rows[0].amount\r\n                    );\r\n                  }\r\n                  let material_log_id3 = uuidv4();\r\n                  await client.query(_QueryProduct.addLogProductFGAmount, [\r\n                    material_log_id3,\r\n                    model.id,\r\n                    user_id,\r\n                    model.actionType,\r\n                    model.amount,\r\n                    moment(new Date()),\r\n                  ]);\r\n                  await client.query(_QueryProduct.productFGAmountInOut, [\r\n                    amount3,\r\n                    model.id,\r\n                  ]);\r\n                  tempRes.push({\r\n                    model: model.no,\r\n                    status: true,\r\n                  });\r\n                  console.log(\"COMMIT\");\r\n                  break;\r\n                default:\r\n                  break;\r\n              }\r\n            } catch (e) {\r\n              tempRes.push({\r\n                model: model.no,\r\n                status: false,\r\n                error: e.message,\r\n              });\r\n              console.log(e);\r\n            }\r\n          }\r\n          if (tempRes.filter((x) => !x.status).length > 0) {\r\n            await client.query(\"ROLLBACK\");\r\n            console.log(\"ROLLBACK\");\r\n          } else {\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT All\");\r\n          }\r\n      \r\n          resolve(tempRes);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductCuttingInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            model.amount = model.amount || 0;\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n            var current = await client.query(\r\n              _QueryProduct.getValueProductCuttingAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              reject(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              reject(\r\n                \"can not set value here, response is\" + current.rows[0].amount\r\n              );\r\n            }\r\n            let log_cutting_id  = uuidv4();\r\n            // await client.query(_QueryProduct.addLogProductFGAmount, [material_log_id, model.id, user_id, model.edit_type, model.amount, moment(new Date())]);\r\n            await client.query(_QueryProduct.addLogCutting,[\r\n              log_cutting_id,\r\n              model.id,\r\n              user_id,\r\n              model.edit_type,\r\n              model.amount,\r\n              new Date(),\r\n              model.remark,\r\n              null,\r\n            ]);\r\n            await client.query(_QueryProduct.productCuttingInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterSummaryReport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProduct.summary_report, [\r\n              false,\r\n              model.product_name || null,\r\n              model.oem_id,\r\n            ]);\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  //////////////////////////////////////////ชุบ///////////////////////////////////\r\n\r\n  async filterProductchoup(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //if(model.no != null){\r\n\r\n            /* var temp = await client.query(_QueryProduct.filterProductchoup, [model.no || null, model.name || null, model.product_model_id || null, model.oem_id || null, ]);\r\n                        console.log(temp);\r\n                        resolve(temp.rows); */\r\n\r\n            //}\r\n\r\n            //resolve(temp.rows);\r\n\r\n            //if(model.osl_id != null){\r\n            var osl = await client.query(_QueryProduct.filter_partno_Osl, [\r\n              model.osl_id || null,\r\n            ]);\r\n            //console.log(osl.rows[0].partno_list.part_no.length)\r\n            if (osl.rows[0].partno_list.part_no.length > 0) {\r\n              let product_list = osl.rows[0].partno_list.part_no;\r\n              //console.log(product_list);\r\n\r\n              let product_list50 = osl.rows[0].partno_list.part_no;\r\n              if (product_list50.length > 0) {\r\n              }\r\n              //console.log(product_list50);\r\n\r\n              if (product_list.length == 0) {\r\n                reject(\"Don't have any product\");\r\n              }\r\n\r\n              const product_list2 = [];\r\n              for (var i = 0; i < product_list.length; i++) {\r\n                if (product_list.length > 0) {\r\n                  var temp1 = {\r\n                    product_id: product_list[i].product_id,\r\n                    //product_name: product_list[i].product_name,\r\n                    //product_no: product_list[i].product_no,\r\n                  };\r\n                  product_list2.push(temp1);\r\n                }\r\n              }\r\n              //console.log(product_list2);\r\n\r\n              //if(model.osl_id != null){\r\n              var tempOsl = [];\r\n\r\n              for (let list_item of product_list2) {\r\n                var temp2 = await client.query(\r\n                  _QueryProduct.filterProductchoupOsl,\r\n                  [\r\n                    model.no || null,\r\n                    model.name || null,\r\n                    model.product_model_id || null,\r\n                    model.oem_id || null,\r\n                    list_item.product_id || null,\r\n                  ]\r\n                );\r\n                //console.log(temp2);\r\n                if (temp2.rows.length > 0) {\r\n                  let list_temp = {\r\n                    id: temp2.rows[0].id,\r\n                    no: temp2.rows[0].no,\r\n                    product_model_id: temp2.rows[0].product_model_id,\r\n                    name: temp2.rows[0].name,\r\n                    min_product: temp2.rows[0].min_product,\r\n                    dip_amount: temp2.rows[0].dip_amount,\r\n                    qty_unit: temp2.rows[0].qty_unit,\r\n                    imaget_path: temp2.rows[0].imaget_path,\r\n                  };\r\n                  tempOsl.push(list_temp);\r\n                }\r\n              }\r\n\r\n              //console.log(tempOsl);\r\n\r\n              resolve(tempOsl);\r\n            } else {\r\n              resolve([]);\r\n            }\r\n\r\n            //}\r\n\r\n            //var temp = await client.query(_QueryProduct.filterProductchoup, [model.no || null, model.name || null, model.product_model_id || null, model.oem_id || null, ]);\r\n            //console.log(temp)\r\n            //resolve(temp.rows);\r\n\r\n            //console.log(temp2000)\r\n            //console.log(product_list2)\r\n            //resolve(temp2000);\r\n            //resolve(temp.rows);\r\n            /* if(model.osl_id != null){\r\n                    resolve(tempOsl);\r\n                }\r\n                else{\r\n                    resolve(tempnormal.rows);\r\n                } */\r\n            //resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProductchoupnormel(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProduct.filterProductchoup, [\r\n              model.no || null,\r\n              model.name || null,\r\n              model.product_model_id || null,\r\n              model.oem_id || null,\r\n            ]);\r\n            //console.log(temp);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductDIPAmountInOutOls(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            model.amount = model.amount || 0;\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n            var current = await client.query(\r\n              _QueryProduct.getValueProductDIPAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              throw Error(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              throw Error(\r\n                \"can not set value here, response is \" + current.rows[0].amount\r\n              );\r\n            }\r\n            let material_log_id = uuidv4();\r\n            await client.query(_QueryProduct.addLogProductDIPAmount, [\r\n              material_log_id,\r\n              model.id,\r\n              user_id,\r\n              model.edit_type,\r\n              model.amount,\r\n              moment(new Date()),\r\n              model.osl_id,\r\n            ]);\r\n            await client.query(_QueryProduct.productDIPAmountInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getHistoryFG(product_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProduct.getHistoryFG, [\r\n              product_id,\r\n            ]);\r\n            for (let i = 0; i < temp.rows.length; i++) {\r\n              let customer = await client.query(_QueryProduct.getcusNameById, [\r\n                temp.rows[i].customer_id\r\n              ]);\r\n              let end_user = await client.query(_QueryProduct.getendNameById, [\r\n                temp.rows[i].end_user_id\r\n              ]);\r\n              let customer_name = \"\";\r\n              if (customer.rows.length > 0) {\r\n                customer_name = customer.rows[0].name + \" [CUS]\";\r\n              }\r\n              if (end_user.rows.length > 0) {\r\n                customer_name = end_user.rows[0].name + \" [END]\";\r\n              }\r\n              temp.rows[i].customer = customer_name;\r\n            }\r\n\r\n            //console.log(temp);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async getproductreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n           var hardtabel = await client.query(_QueryProduct.product_model_report, [\r\n              model.oem_id\r\n            ]);\r\n\r\n\r\n            var loop =[]\r\n            for (let index = 0; index < hardtabel.rows.length; index++) {\r\n             \r\n              var product= await client.query(_QueryProduct.product_report, [\r\n                hardtabel.rows[index].id\r\n              ]);\r\n\r\n              let as = {\r\n                id: hardtabel.rows[index].id,\r\n                name:hardtabel.rows[index].name,\r\n                product:product.rows\r\n              }\r\n              loop.push(as)\r\n  \r\n            }\r\n            var productnull= await client.query(_QueryProduct.product_null_report,[\r\n              model.oem_id\r\n            ]);\r\n\r\n            let as = {\r\n              name: \"อื่นๆ\",\r\n              product:productnull.rows\r\n            }\r\n            loop.push(as)\r\n\r\n            console.log(loop);\r\n            resolve(loop);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nmodule.exports = productService;\r\n\n\n//# sourceURL=webpack:///./app/service/productService.js?");

/***/ }),

/***/ "./app/service/productionLineService.js":
/*!**********************************************!*\
  !*** ./app/service/productionLineService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProductionLine = __webpack_require__(/*! ../query/queryProductionLine.json */ \"./app/query/queryProductionLine.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass productionLineService {\r\n  \r\n  async productionLineAll(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(\r\n              _QueryProductionLine.productionLineAll,\r\n              [id]\r\n            );\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async lineAll(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProductionLine.getLineAll);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async cycleTimeByProductId(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProductionLine.getCycle_time,[id]);\r\n            console.log(temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async processAll(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProductionLine.getProcessAll);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async sectionAll(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(_QueryProductionLine.getSectionAll,[id]);\r\n            console.log(temp.rows)\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addCycleTime(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n\r\n            let cycle_id = uuidv4();\r\n            let line_id = \"17fa2029-50db-42b4-9e91-1ddb47ec4bb6\";\r\n            let machine_id = \"b6c40005-8b65-4d64-afc9-fcc954b3db03\";\r\n            await client.query(_QueryProductionLine.addCycleTime, [\r\n              cycle_id,\r\n              machine_id,\r\n              line_id,\r\n              model.cycle_time || null,\r\n              true,\r\n              model.product_id || null,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProduct(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            if (model.cycle_time === null) {\r\n              throw Error(\" Can't fine cycle_time\");\r\n            }\r\n            if (model.process_id === null) {\r\n              throw Error(\" Can't fine process_id\");\r\n            }\r\n            if (model.product_id === null) {\r\n              throw Error(\" Can't fine product_id\");\r\n            }\r\n            await client.query(_QueryProductionLine.updateCycleTime, [\r\n              model.cycle_time ,\r\n              model.product_id ,\r\n              model.process_id ,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n\r\n\r\nasync getSectionByCom(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query( _QueryProductionLine.getSectionByCom,[id]);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync getMachineByProcess(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query( _QueryProductionLine.getMachineByProcess,[id]);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync fineCycleTineByProdId(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query( _QueryProductionLine.fineCycleTineByProdId,[id]);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync getProcessBySection(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query( _QueryProductionLine.getProcessBySection,[id]);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync machineAll() {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          var temp = await client.query( _QueryProductionLine.getMachineAll);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports = productionLineService;\r\n\n\n//# sourceURL=webpack:///./app/service/productionLineService.js?");

/***/ }),

/***/ "./app/service/productionOrderCtsService.js":
/*!**************************************************!*\
  !*** ./app/service/productionOrderCtsService.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProductionOrderCts = __webpack_require__(/*! ../query/queryProductionOrderCts.json */ \"./app/query/queryProductionOrderCts.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\n\r\nclass productionOrderCtsService{\r\n\r\n    async addProductionCTS(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n           \r\n                // let updatedate = moment(new Date()).format();\r\n              \r\n                var check = await client.query(_QueryProductionOrderCts.checkProductionCTsSave, [\r\n                  model.order_number\r\n                ]);\r\n                if(check.rows.length > 0){\r\n                    throw Error(\"เลขที่ใบสั่งผลิตซ้ำในระบบ\");\r\n                }\r\n                let production_id = uuidv4();\r\n                /* 18 */\r\n                await client.query(_QueryProductionOrderCts.SaveProductionCTs, [\r\n                    production_id,\r\n                    model.order_number,\r\n                    model.customer_id || null,\r\n                    model.part_no,\r\n                    model.plated_surface || null,\r\n                    model.materail_id || null,\r\n                    model.Quantity_to_be_produced || 0,\r\n                    model.manufacturer || null,\r\n                    model.use_date_all_piece || 0,\r\n                    model.date_of_production,\r\n                    model.remark || null,\r\n                    model.ng_record || null,\r\n                    model.document_issuer,\r\n                    true,\r\n                    moment(new Date()),\r\n                    user_id,\r\n                    moment(new Date()),\r\n                    user_id,\r\n                    model.use_date_per_piece || 0 ,\r\n                    model.producer_date,\r\n                    false,\r\n                    model.dead_line_date,\r\n\r\n                  ]);\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n  \r\n  async genProductionNo(order_number) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n\r\n          return '000' + d.toString();\r\n        } else if (d < 100) {\r\n          return '00' + d.toString();\r\n        } else if (d < 1000) {\r\n          return '0' + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n\r\n      }\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(order_number)\r\n           // let lotNo = moment(new Date()).format('YYYYMMDD');\r\n            // let lotNo =  (parseInt(moment(new Date()).format('YYYY')) + 543) ;\r\n            // let gen = \"PO\" + lotNo.toString().slice(2) + \"-\" + moment(new Date()).format('MMDD');\r\n\r\n            var getLotNo = await client.query(_QueryProductionOrderCts.getProNo, [order_number]);\r\n            console.log('order_number',order_number)\r\n            if (getLotNo.rows.length > 0) {\r\n              let laslotarr = [];\r\n              var test = getLotNo.rows[0].no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n             laslotarr.splice(0, 9);\r\n              //console.log(\"array\",laslotarr);\r\n              var key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              \r\n              }\r\n              //console.log(\"KeyLot\",key_lot);\r\n              //console.log(\"test\",parseFloat(key_lot));\r\n              //var count = parseFloat(order_number) + 1;\r\n              var count = getLotNo.rows.length + 1;\r\n              order_number = order_number + pad(count);\r\n            } else {\r\n            order_number = order_number + pad(1);\r\n            }\r\n            resolve(order_number);\r\n\r\n            //console.log(\"COMMIT\");\r\n\r\n          } catch (e) {\r\n\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProductionByID(order_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n       /*      console.log(\"order_id\",order_id); */\r\n            // let updatedate = moment(new Date()).format();\r\n            var data_list = await client.query(_QueryProductionOrderCts.getProductionByID, [\r\n              order_id,\r\n            ]);\r\n        \r\n            resolve(data_list.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateProductionOrder(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n   \r\n\r\n            await client.query(_QueryProductionOrderCts.updateProduction, [\r\n              model.id,\r\n              model.customer_id || null,\r\n              model.part_no,\r\n              model.plated_surface || null,\r\n              model.materail_id || null,\r\n              model.Quantity_to_be_produced || 0,\r\n              model.manufacturer || null,\r\n              model.use_date_all_piece || 0,\r\n              model.date_of_production,\r\n              model.remark || null,\r\n              model.ng_record || null,\r\n              model.document_issuer,\r\n              true,\r\n              moment(new Date()),\r\n              user_id,\r\n              model.use_date_per_piece || 0 ,\r\n              model.producer_date,\r\n              model.dead_line_date,\r\n            ]);\r\n        \r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProductionCTS(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n       \r\n          let Production_no = model.Production_no,\r\n              customer_name =  model.customer_name,\r\n              start_date = model.Production_start_date\r\n            ? moment(model.Production_start_date)\r\n                .startOf(\"day\")\r\n                .format(\"YYYY-MM-DD HH:mm:ss\")\r\n            : null,\r\n              end_date = model.Production_end_date\r\n            ? moment(model.Production_end_date)\r\n                .endOf(\"day\")\r\n                .format(\"YYYY-MM-DD HH:mm:ss\")\r\n            : null;\r\n\r\n\r\n           /*  console.log(\"model\",Production_no,customer_name,\"s\",start_date,end_date); */\r\n            if (start_date !== null) {\r\n              if (end_date === null) {\r\n                end_date =  moment(model.Production_start_date)\r\n                            .endOf(\"day\")\r\n                            .format(\"YYYY-MM-DD HH:mm:ss\")\r\n              } \r\n              var tum = await client.query(_QueryProductionOrderCts.filterProductionCTS, [     \r\n                Production_no,\r\n                customer_name,\r\n                start_date,\r\n                end_date,\r\n                model.oem_id,\r\n              ]);\r\n            } else {\r\n              var tum = await client.query(_QueryProductionOrderCts.filterProductionCTSone, [     \r\n                Production_no,\r\n                customer_name,\r\n                model.oem_id,\r\n              ]);\r\n            }\r\n\r\n            var looptum = []\r\n           for (let index = 0; index < tum.rows.length; index++) {\r\n            if (model.document_false === true && (tum.rows[index].is_success !== true )) {\r\n              let as = {\r\n                id: tum.rows[index].id,\r\n                no: tum.rows[index].no,\r\n                customer: tum.rows[index].customer,\r\n                producer_date: tum.rows[index].producer_date,\r\n                finish_date_producer: tum.rows[index].finish_date_producer,\r\n                user_document: tum.rows[index].user_document,\r\n                is_success: tum.rows[index].is_success,\r\n                finish_date_plan: tum.rows[index].finish_date_plan || tum.rows[index].producer_date  \r\n              }\r\n              looptum.push(as)\r\n              /* console.log(\"z1\",as); */\r\n            }\r\n            if (model.document_true === true && tum.rows[index].is_success === true) {\r\n              let as = {\r\n                id: tum.rows[index].id,\r\n                no: tum.rows[index].no,\r\n                customer: tum.rows[index].customer,\r\n                producer_date: tum.rows[index].producer_date,\r\n                finish_date_producer: tum.rows[index].finish_date_producer,\r\n                user_document: tum.rows[index].user_document,\r\n                is_success: tum.rows[index].is_success,\r\n                finish_date_plan: tum.rows[index].finish_date_plan || tum.rows[index].producer_date \r\n              }\r\n              looptum.push(as)\r\n             /*  console.log(\"z2\",as); */\r\n            }\r\n            if ((model.document_true !== true ) && (model.document_false !== true )) {\r\n              let as = {\r\n                id: tum.rows[index].id,\r\n                no: tum.rows[index].no,\r\n                customer: tum.rows[index].customer,\r\n                producer_date: tum.rows[index].producer_date,\r\n                finish_date_producer: tum.rows[index].finish_date_producer,\r\n                user_document: tum.rows[index].user_document,\r\n                is_success: tum.rows[index].is_success,\r\n                finish_date_plan: tum.rows[index].finish_date_plan || tum.rows[index].producer_date \r\n              }\r\n              looptum.push(as)\r\n              /* console.log(\"z3\",as); */\r\n            }\r\n           }\r\n            /* console.log(\"x\",looptum); */\r\n            resolve(looptum);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delProductionCTS(Product_id ,user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryProductionOrderCts.delProductionCTS,[\r\n              Product_id,\r\n              moment(new Date()),\r\n              user_id,\r\n              ])\r\n            \r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  async getProduction_in_reportByID(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            // let updatedate = moment(new Date()).format();\r\n            var data_list = await client.query(_QueryProductionOrderCts.getProductionByID, [\r\n              model.produ_id,\r\n            ]);\r\n       \r\n            var data_loop_list = []\r\n            for (let index of data_list.rows) {\r\n              var data_mat_list = await client.query(_QueryProductionOrderCts.loopmatlog, [\r\n                index.material_id,\r\n              ]);\r\n         \r\n              var data_customer_list = await client.query(_QueryProductionOrderCts.customerlog, [\r\n                index.customer_id,\r\n              ]);\r\n              var data_product_list = await client.query(_QueryProductionOrderCts.productlog, [\r\n                index.product_id,\r\n              ]);\r\n            /*   console.log(\"xxx\",data_customer_list.rows); */\r\n              let as = {\r\n                id:index.id, \r\n                no:index.no, \r\n                product_list: data_product_list.rows,\r\n                material_list: data_mat_list.rows,\r\n                customer_list: data_customer_list.rows, \r\n                plated:index.plated, \r\n                product_id:index.product_id,\r\n                material_id:index.material_id,\r\n                amount:index.amount,\r\n                user_producer:index.user_producer, \r\n                total_time_producer:index.total_time_producer, \r\n                finish_date_producer:index.finish_date_producer, \r\n                remark:index.remark, \r\n                setup_ng_record:index.setup_ng_record, \r\n                user_document:index.user_document,\r\n                time_per_product:index.time_per_product, \r\n                producer_date:index.producer_date,\r\n                finish_date_plan:index.finish_date_plan,\r\n              }\r\n\r\n              data_loop_list.push(as)\r\n            }\r\n            \r\n\r\n            resolve(data_loop_list);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateSatatus(order_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"llfs\",order_id);\r\n\r\n            let checklotProd = await client.query(_QueryProductionOrderCts.lotcheckwippord, [order_id,]);\r\n            let checklotchupWeight = await client.query(_QueryProductionOrderCts.lotcheckwipChupWeight_amount, [order_id,]);\r\n           /*  let checklotchupPrice = await client.query(_QueryProductionOrderCts.lotcheckwipChupPrice_amount, [order_id,]); */\r\n            let getIDChup = await client.query(_QueryProductionOrderCts.getIDChup, [order_id,]);\r\n            let id_product = '';\r\n            let lot_no_chup = ''\r\n            let pacl_list = [];\r\n          /*   let getWipProdCheckhave = client.query(_QueryProductionOrderCts.lotcheckwippord, [order_id,]); */\r\n            if(getIDChup.rows.length > 0){\r\n              id_product = getIDChup.rows[0].product_id;\r\n              lot_no_chup = getIDChup.rows[0].lot_no;\r\n              let checkloPackWeight = await client.query(_QueryProductionOrderCts.lotPackWeight_amount_use, [id_product,lot_no_chup]);\r\n              pacl_list = checkloPackWeight.rows;\r\n            }\r\n           \r\n                     \r\n            var error_list = [];\r\n          if (checklotProd.rows.length > 0) {\r\n            if(parseFloat(checklotProd.rows[0].amount) > 0){\r\n              let temp_err = {\r\n                massage: \"มีรายการที่ยังดำเนินการไม่เรียบร้อยที่ >>> [Wip Prod In/Out].\",\r\n              };\r\n              error_list.push(temp_err);\r\n            }\r\n          }else{\r\n            let temp_err = {\r\n              massage: \"รายการนี้ยังไม่ผ่านกระบวนการ Wip Prod\",\r\n            };\r\n            error_list.push(temp_err);\r\n            \r\n          }\r\n        if (checklotchupWeight.rows.length > 0) {\r\n          if(parseFloat(checklotchupWeight.rows[0].amount) > 0){\r\n            let temp_err = {\r\n              massage: \"มีรายการที่ยังดำเนินการไม่เรียบร้อยที่ >>> [Wip ชุบ กก.].\",\r\n            };\r\n            error_list.push(temp_err);\r\n          }\r\n          }else{\r\n            let temp_err = {\r\n              massage: \"รายการนี้ยังไม่ผ่านกระบวนการ Wip ชุบ\",\r\n            };\r\n            error_list.push(temp_err);\r\n            \r\n          \r\n          }\r\n          // if (checklotchupPrice.rows.length > 0) {\r\n             \r\n          //   if(checklotchupPrice.rows[0].amount > 0){\r\n          //     let temp_err = {\r\n          //       massage: \"มีรายการที่ยังดำเนินการไม่เรียบร้อยที่ >>> [Wip ชุบ ชิ้น].\",\r\n          //     };\r\n          //     error_list.push(temp_err);\r\n          //   }\r\n          // }else{\r\n          //   let temp_err = {\r\n          //     massage: \"รายการนี้ยังไม่ผ่านกระบวนการ Wip ชุบ\",\r\n          //   };\r\n          //   error_list.push(temp_err);\r\n            \r\n          \r\n          // }\r\n            if(pacl_list.length > 0){\r\n              if (parseFloat(pacl_list[0].amount) > 0) {\r\n                let temp_err = {\r\n                  massage: \"มีรายการที่ยังดำเนินการไม่เรียบร้อยที่ >>> [งานรอ Pack In/Out].\",\r\n                };\r\n                error_list.push(temp_err);\r\n              }\r\n            }else{\r\n              let temp_err = {\r\n                massage: \"รายการนี้ยังไม่ผ่านกระบวนการ Pack\",\r\n              };\r\n              error_list.push(temp_err);\r\n            }\r\n            // console.log('เช็คlot เหลือ',checklot.rows);\r\n\r\n            if (error_list.length > 0) {\r\n              var err_massage = \"\";\r\n              for (var e = 0; e < error_list.length; e++) {\r\n                err_massage += \"<br>\" + error_list[e].massage;\r\n              }\r\n            \r\n              throw Error(err_massage);\r\n            }else{\r\n            await client.query(_QueryProductionOrderCts.updateSatatusID, [\r\n              order_id,\r\n              new Date(),\r\n              user_id,\r\n              true\r\n            ]);\r\n          }\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async filterProductByCustomer(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n       \r\n            if(model.customer_id === \"\"){\r\n              var temp = await client.query(_QueryProductionOrderCts.filterProduct, [\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.oem_id || null,\r\n                model.inventory || false,\r\n                model.virtual_product || false,\r\n                model.under_min_lot || false,\r\n              ]);\r\n           \r\n            }else{\r\n     \r\n              var temp = await client.query(_QueryProductionOrderCts.filterProductByCustomer, [\r\n                model.no || null,\r\n                model.name || null,\r\n                model.product_model_id || null,\r\n                model.oem_id || null,\r\n                model.inventory || false,\r\n                model.virtual_product || false,\r\n                model.under_min_lot || false,\r\n                model.customer_id\r\n              ]);\r\n            }\r\n   \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n    \r\n  \r\n\r\n}\r\n\r\nmodule.exports = productionOrderCtsService;\n\n//# sourceURL=webpack:///./app/service/productionOrderCtsService.js?");

/***/ }),

/***/ "./app/service/projectService.js":
/*!***************************************!*\
  !*** ./app/service/projectService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryProject = __webpack_require__(/*! ../query/queryProject.json */ \"./app/query/queryProject.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass projectService {\r\n\r\n  async addProject(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryProject.checkProjectName_add,[model.project_name,model.company_id]);\r\n            if(checkName.rows.length > 0){\r\n              throw Error(\"System : Project Name has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is null\");\r\n            }\r\n            let project_id = uuidv4();\r\n   \r\n            await client.query(_QueryProject.add, [\r\n              project_id,\r\n              model.project_name,\r\n              model.company_id,\r\n              model.contact_name,\r\n              model.contact_tel,\r\n              model.contact_email,\r\n              model.detail,\r\n              true, \r\n              updatedate,\r\n              user_id,\r\n              model.oem_id\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async updateProject(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QueryProject.checkProjectName_edit,[model.project_name,model.project_id,model.company_id]);\r\n            if(checkName.rows.length > 0){\r\n              throw Error(\"System : Project Name has already\");\r\n            }\r\n            await client.query(_QueryProject.update, [\r\n                model.project_id,\r\n                model.project_name,\r\n                model.contact_name,\r\n                model.contact_tel,\r\n                model.contact_email,\r\n                model.detail,\r\n                updatedate,\r\n                user_id,\r\n            \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async delProject(project_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QueryProject.del, [project_id,updatedate,user_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async findByIdProject(project_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryProject.findById, [project_id]);\r\n            if (temp.rows.length > 0) {\r\n             /*  console.log(temp.rows)\r\n              console.log(temp.rows[0]) */\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetMenu() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryProject.GetMenu, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterProject(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n            let project_name = model.project_name ? model.project_name : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QueryProject.filter, [\r\n              project_name,\r\n              model.oem_id,\r\n              company_id\r\n            ]);\r\n        /*     console.log(temp); */\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nmodule.exports = projectService;\r\n\n\n//# sourceURL=webpack:///./app/service/projectService.js?");

/***/ }),

/***/ "./app/service/promotionService.js":
/*!*****************************************!*\
  !*** ./app/service/promotionService.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryPromotion = __webpack_require__(/*! ../query/queryPromotion.json */ \"./app/query/queryPromotion.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass promotionService {\r\n\r\n  async addPromotion(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n              //console.log(model)\r\n     \r\n              let promotion_id = uuidv4();\r\n              await client.query(_QueryPromotion.addPromotion,[\r\n                promotion_id,\r\n                model.topic_promotion,\r\n                model.detail_promotion || null,\r\n                model.source_promotion,\r\n                model.image_name || null,\r\n                model.date_start || null,\r\n                model.date_end || null,\r\n                true,\r\n                model.oem_id,\r\n                model.company_id,\r\n                user_id,\r\n                moment(new Date()),\r\n                model.image_path || null,\r\n              ]);\r\n\r\n              console.log(\"COMMIT\");\r\n              resolve(true); \r\n        \r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\nasync filterPromotion(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n              \r\n            var data = await client.query(_QueryPromotion.filterPromotion,[\r\n                model.topic_promotion || null,\r\n                model.oem_id,\r\n\r\n            ]);\r\n\r\n              console.log(\"COMMIT\");\r\n              resolve(data.rows); \r\n        \r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async findPromotionById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n              \r\n            var data = await client.query(_QueryPromotion.findPromotionById,[\r\n                id\r\n            ]);\r\n\r\n              console.log(\"COMMIT\");\r\n              resolve(data.rows[0]); \r\n        \r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n\r\n  \r\n\r\n  async updatePromotion(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n              //console.log(model)\r\n     \r\n             \r\n              await client.query(_QueryPromotion.updatePromotion,[\r\n                model.id,\r\n                model.topic_promotion,\r\n                model.detail_promotion || null,\r\n                model.source_promotion,\r\n                model.image_name || null,\r\n                model.date_start || null,\r\n                model.date_end || null,\r\n                user_id,\r\n                model.image_path || null,\r\n              ]);\r\n\r\n              console.log(\"COMMIT\");\r\n              resolve(true); \r\n        \r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async delPromotionById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n              \r\n          await client.query(_QueryPromotion.delPromotion,[\r\n                id\r\n            ]);\r\n\r\n              console.log(\"COMMIT\");\r\n              resolve(true); \r\n        \r\n         \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nmodule.exports = promotionService;\r\n\n\n//# sourceURL=webpack:///./app/service/promotionService.js?");

/***/ }),

/***/ "./app/service/reportService.js":
/*!**************************************!*\
  !*** ./app/service/reportService.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryReport = __webpack_require__(/*! ../query/queryReport.json */ \"./app/query/queryReport.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\n\r\nclass reportService {\r\n\r\n    async DOReport(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let \r\n                oem_id = model.oem_id,\r\n                company_id = model.company_id,\r\n                start_date = model.end_date\r\n                  ? moment(model.start_date)\r\n                  .format(\"YYYYMMDD\")\r\n                  : null,\r\n                  end_date = model.end_date\r\n                  ? moment(model.end_date)\r\n                  .format(\"YYYYMMDD\")\r\n                  : null;\r\n\r\n              if (!oem_id) {\r\n                throw Error(\"not fine 'oem_id' !!!\");\r\n              }\r\n              if (!company_id) {\r\n                throw Error(\"not fine 'company_id' !!!\");\r\n              }\r\n               \r\n              var do_report_cts = await client.query(_QueryReport.purchase_order_cts, [\r\n                oem_id,\r\n                company_id,\r\n                start_date,\r\n                end_date,\r\n                 \r\n                ]);\r\n                \r\n                var do_report_cts_list = [];\r\n                for (let item of do_report_cts.rows) {\r\n                    console.log(do_report_cts.rows)\r\n               \r\n                    let data = {\r\n                      supplier_code:item.supplier,\r\n                      supplier_name:item.item_category,\r\n                     /*  product :item.po_number, */\r\n                      item_number:item.item_number,\r\n                      item_description:item.item_description,\r\n                      job_number:item.job_number,\r\n                      po:item.po_number,\r\n                      po_qty:item.qty,\r\n                      do_qty:item.qty_ordered,\r\n                      gr_qty:item.po_year,\r\n                      po_delivery_date:item.delivery_date,\r\n                      time:item.ac,\r\n                      status_name:item.buyer,\r\n                      confirm_do_date:item.po_issue_date,\r\n                      do_time:item.ac,\r\n                    };\r\n                    do_report_cts_list.push(data);\r\n                  }\r\n      \r\n    \r\n                resolve(do_report_cts_list);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n    \r\n\r\n\r\n\r\n\r\n}\r\n\r\nmodule.exports = reportService;\n\n//# sourceURL=webpack:///./app/service/reportService.js?");

/***/ }),

/***/ "./app/service/report_pdfService.js":
/*!******************************************!*\
  !*** ./app/service/report_pdfService.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryReport_pdf= __webpack_require__(/*! ../query/queryReport_pdf.json */ \"./app/query/queryReport_pdf.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nclass report_pdfService {\r\n\r\n  \r\n  async FilterReportDD(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n        \r\n          try {\r\n\r\n            let dateFrom = moment(model.dateFrom).startOf('days');\r\n            \r\n            let dateEnd = moment(model.dateFrom).endOf('days');\r\n             //console.log(moment(dateFrom).format('DD/MM/YYYY HH:mm'),moment(dateEnd).format('DD/MM/YYYY HH:mm'))\r\n             var temp = await client.query(_QueryReport_pdf.get_bill_logistic, [     \r\n              model.company_id,\r\n              model.oem_id,\r\n              dateFrom,\r\n              dateEnd\r\n              ]);\r\n              var dataBill = [];\r\n              for(let item of temp.rows){\r\n                var check = await client.query(_QueryReport_pdf.check_star_bill,[item.bill_id]);\r\n                if(check.rows.length > 0){\r\n                  var driver_person = await client.query(_QueryReport_pdf.get_driver_person,[item.id]);\r\n                  item.driver_persons = driver_person.rows;\r\n                  dataBill.push(item);\r\n                }\r\n              }\r\n          \r\n              resolve(dataBill)\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n   \r\nasync  FilterReportDR(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n      \r\n        try {\r\n         // console.log(model)\r\n\r\n          let dateFrom = model.dateFrom;\r\n          let dateEnd = moment(dateFrom).endOf('day');\r\n\r\n          var temp = await client.query(_QueryReport_pdf.filterReportDR, [     \r\n              model.company_id,\r\n              model.oem_id,\r\n              dateFrom,\r\n              dateEnd,\r\n            ]);\r\n         \r\n           \r\n          var temp = await client.query(_QueryReport_pdf.filterReportDR, [     \r\n            model.company_id,\r\n            model.oem_id,\r\n            dateFrom,\r\n            dateEnd,\r\n          ]);\r\n       \r\n            resolve(temp.rows);\r\n           // console.log(temp.rows)\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\nasync  GetDaily_outstanding_bill(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n      \r\n        try {\r\n         // console.log(model)\r\n\r\n         \r\n         let date1 = moment(model.dateFrom).startOf('days');\r\n         let date2 = moment(model.dateFrom).endOf('days');\r\n          var datebill1 =  moment(model.date).add(-2,'month').startOf('month').startOf('day');\r\n          var datebill2 =  moment(model.date).add(-1,'day').endOf('day');\r\n          var datebill3 =  moment(model.date).add(-2,'month').startOf('month').startOf('day');\r\n          var datebill4 =  moment(model.date).add('day').endOf('day');\r\n\r\n          var temp1 = await client.query(_QueryReport_pdf.getBill, [    \r\n              model.oem_id,\r\n              model.company_id,\r\n              \r\n              \r\n            ]);\r\n            var temp5 = await client.query(_QueryReport_pdf.getBill2, [    \r\n              model.oem_id,\r\n              datebill1,\r\n              datebill2,\r\n              model.company_id,\r\n            ]);\r\n            var temp2 = await client.query(_QueryReport_pdf.getBillall, [    \r\n              model.oem_id,\r\n              datebill3,\r\n              datebill4,\r\n              model.company_id,\r\n            ]);\r\n         \r\n         \r\n            var temp3 = await client.query(_QueryReport_pdf.sale_experss01, [    \r\n                model.oem_id,\r\n                date1,\r\n                date2,\r\n                model.company_id,\r\n              ]);\r\n\r\n              var temp6 = await client.query(_QueryReport_pdf.getdriver, [    \r\n                model.oem_id,\r\n                date1,\r\n                date2,\r\n                model.company_id,\r\n              ]);\r\n              \r\n            let dateFrom = moment(model.dateFrom).startOf('days');\r\n            let dateEnd = moment(model.dateFrom).endOf('days');\r\n             //console.log(moment(dateFrom).format('DD/MM/YYYY HH:mm'),moment(dateEnd).format('DD/MM/YYYY HH:mm'))\r\n             var temp = await client.query(_QueryReport_pdf.get_bill_logistic, [     \r\n              model.company_id,\r\n              model.oem_id,\r\n              dateFrom,\r\n              dateEnd\r\n              ]);\r\n              console.log(temp.rows)\r\n              var dataBill = [];\r\n              var bill_all_sum = 0\r\n              for(let item of temp.rows){\r\n                var check = await client.query(_QueryReport_pdf.check_star_bill,[item.bill_id]);\r\n                if(check.rows.length > 0){\r\n                  var driver_person = await client.query(_QueryReport_pdf.get_driver_person,[item.id]);\r\n                  item.driver_persons = driver_person.rows;\r\n                  bill_all_sum = bill_all_sum +  parseFloat(item.bill_values)\r\n                  dataBill.push(item);\r\n                 /*  console.log(bill_all_sum,item.bill_values) */\r\n                }\r\n              }\r\n              \r\n             \r\n\r\n              var array1 = []\r\n              for (let item of temp2.rows){\r\n                var check = array1.filter((e)=>{return e.bill_no1 === item.bill_no });\r\n                if (check.length > 0){\r\n                 var index5 = array1.findIndex((e2)=> e2.bill_no1 === item.bill_no );\r\n                 //  price = array[index5].price + item.price;\r\n                 array1[index5].bill_values1 = array1[index5].bill_values1 ;\r\n                 array1[index5].create_bill1 = array1[index5].create_bill1 ;\r\n                }else{\r\n                 var as = {\r\n                  bill_no1: item.bill_no ,\r\n                  bill_values1: item.bill_values || 0,\r\n                  \r\n                  \r\n                 }\r\n                 array1.push(as);\r\n                }\r\n               }\r\n            //console.log(array1)\r\n\r\n\r\n            var array2 = []\r\n              for (let item of temp6.rows){\r\n                var check = array2.filter((e)=>{return e.remark1 === item.remark });\r\n                if (check.length > 0){\r\n                 var index5 = array2.findIndex((e2)=> e2.remark1 === item.remark );\r\n                 //  price = array[index5].price + item.price;\r\n                 array2[index5].driver_id1 = array2[index5].driver_id1 + item.driver_id;\r\n                \r\n                }else{\r\n                 var as = {\r\n                  remark1: item.remark ,\r\n                  driver_id1: item.driver_id,\r\n                  \r\n                 }\r\n                 array2.push(as);\r\n                }\r\n               }\r\n            //console.log(array2)\r\n\r\n\r\n              var tempdaysale = {\r\n                temp1:temp1.rows,\r\n                temp3: temp3.rows,\r\n                tempall: array1 || [],\r\n                temp5: temp5.rows,\r\n                tempdriver: array2 || [],\r\n                allvalus: bill_all_sum || 0\r\n              }\r\n            \r\n            resolve(tempdaysale);\r\n            //console.log(tempdaysale)\r\n           \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync  GetMonth_travel_reportData(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n      \r\n        try {\r\n      \r\n\r\n          //console.log(model)\r\n          var temp = await client.query(_QueryReport_pdf.filterLogisticInOutReport, [\r\n            model.plate_number || null ,\r\n            model.oem_target || null,\r\n            model.company_id,\r\n           // model.statusDTC || null,\r\n         \r\n          ]); \r\n          var date1 =  moment(model.date).startOf('month').startOf('day');/* .format('YYYY-MM-DD HH:mm'); */\r\n          var date2 =  moment(model.date).endOf('month').endOf('day');/* .format('YYYY-MM-DD HH:mm'); */\r\n     /*      console.log(date1)\r\n          console.log(date2) */\r\n          for(let item of temp.rows){\r\n            var temp2 = await client.query(_QueryReport_pdf.getLogisticInOutReport,[item.id,date1,date2]);\r\n            let temp_travel = [];\r\n            for(let item3 of temp2.rows){\r\n              let check = temp_travel.filter((e)=>{return e.sort === item3.delivery_sort && moment(e.date).format('DD//MM/yyyy') === moment(item3.logistic_date).format('DD//MM/yyyy')  });\r\n              if(check.length > 0){\r\n                let indexx = temp_travel.findIndex((e2)=>e2.sort === item3.delivery_sort  && moment(e2.date).format('DD//MM/yyyy') === moment(item3.logistic_date).format('DD//MM/yyyy')  );\r\n\r\n                temp_travel[indexx].bill++;\r\n              }else{\r\n                let temp = {\r\n                  sort:item3.delivery_sort,\r\n                  bill:1,\r\n                  date:item3.logistic_date,\r\n                  date_format:moment(item3.logistic_date).format('DD/MM/yyyy')\r\n                }\r\n                temp_travel.push(temp);\r\n              }\r\n             \r\n            }\r\n            item.bill_logistic = temp_travel || [];\r\n         \r\n          }\r\n           \r\n console.log(temp.rows)\r\n       \r\n            resolve(temp.rows);\r\n      \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync  Self_Pickup_report(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n      \r\n        try {\r\n          let date1 = moment(model.dateFrom).startOf('days');\r\n          let date2 = moment(model.dateFrom).endOf('days');\r\n          var temp = await client.query(_QueryReport_pdf.getbillreport,\r\n            [\r\n              model.oem_id,\r\n              date1,\r\n              date2\r\n            ]);\r\n            var go =[]\r\n         for(let i of temp.rows) {\r\n            /* var use = await client.query(_QueryReport_pdf.chackuse,\r\n              [\r\n                i.update_by\r\n              ]); */\r\n\r\n              let as = {\r\n                customer_name:i.customer_name,\r\n                person_sent:i.person_sent,\r\n                bill_destination:i.bill_destination,\r\n                bill_values:i.bill_values,\r\n                product_and_category:i.product_and_category,\r\n                remark_receive:i.remark_receive,\r\n                approve_bill:i.approve_bill,\r\n                time_receive:i.time_receive,\r\n                bill_no:i.bill_no,\r\n\r\n              }\r\n              go.push(as)\r\n           console.log(temp.rows) \r\n          }\r\n           resolve(go);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\nasync  Getmonthly_fuel_consumption_summary(model) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n      \r\n        try {\r\n         // console.log(model)\r\n         console.log(model,\"1d\")\r\n          \r\n          var logistic_car_id = '38dc8839-7424-4465-9ca4-36d136231010'\r\n          var datemonth1 =  moment(model.date).startOf('month').startOf('days').add(-1,'month').format('YYYY-MM-DD HH:mm') ;\r\n          var datemonth2 =  moment(model.date).endOf('month').endOf('days').format('YYYY-MM-DD HH:mm') ; \r\n          var date1 =  moment(model.date).startOf('month').startOf('days').format('YYYY-MM-DD HH:mm');\r\n          var date2 =  moment(model.date).endOf('month').endOf('days').format('YYYY-MM-DD HH:mm'); \r\n          var detecheck = moment(model.date).startOf('month').startOf('days').format(\"yyyy-MM-DD HH:mm\") \r\n\r\n          var temp1 = await client.query(_QueryReport_pdf.monthlyfuel, [    \r\n              logistic_car_id,\r\n              model.oem_target,\r\n              date1,\r\n              date2, \r\n              model.company_id\r\n              \r\n             \r\n            ]);\r\n\r\n            var tempmonth = await client.query(_QueryReport_pdf.monthlyfuel, [    \r\n              logistic_car_id,\r\n              model.oem_target,\r\n              datemonth1,\r\n              datemonth2, \r\n              model.company_id\r\n             \r\n            ]);\r\n           \r\n\r\n         \r\n        var temp2 = await client.query(_QueryReport_pdf.monthlyfuelall, [    \r\n              logistic_car_id,\r\n              date1,\r\n              date2, \r\n              model.company_id,\r\n              model.oem_target,\r\n            ]); \r\n      \r\n      \r\n            \r\n            var temp3 = await client.query(_QueryReport_pdf.monthlybill, [    \r\n              model.oem_target,\r\n              date1,\r\n              date2, \r\n              model.company_id,\r\n             \r\n            ]); \r\n          \r\n            \r\n\r\n            var temp4 = await client.query(_QueryReport_pdf.monthlybillall, [    \r\n              date1,\r\n              date2, \r\n              model.company_id,\r\n             \r\n            ]); \r\n         \r\n            console.log(temp1.rows,\"1d\")\r\n          \r\n\r\n            var array1 = []\r\n            for (let item of temp1.rows){\r\n              \r\n              var check = array1.filter((e)=>{return e.plate_number1 === item.plate_number});\r\n              if (check.length > 0){\r\n               var index5 = array1.findIndex((e2)=> e2.plate_number1 === item.plate_number );\r\n               //  price = array[index5].price + item.price;\r\n               array1[index5].liter1 = array1[index5].liter1 ;\r\n              }else{\r\n            \r\n                  var as = {\r\n                    plate_number1: item.plate_number ,\r\n                    liter1: item.liter || 0,\r\n\r\n                   }\r\n                   array1.push(as);\r\n               \r\n              }\r\n             }\r\n    \r\n    \r\n             // console.log(array1)\r\n\r\n      \r\n             var sum = []       \r\nfor (let index = 0; index < tempmonth.rows.length; index++) {\r\n  var monthall = \"\";\r\n  monthall = moment(tempmonth.rows[index].record_date).format(\"yyyy-MM-DD HH:mm\")\r\n\r\nif (  monthall < detecheck && monthall > datemonth1) {\r\n  /* console.log(\"sao1\",temp1.rows[index].mileage_number,monthall) */\r\n  var as = {\r\n    plate_number: tempmonth.rows[index].plate_number ,\r\n    mileage_number: parseFloat(tempmonth.rows[index].mileage_number),\r\n    record_date: parseFloat(tempmonth.rows[index].record_date),\r\n   \r\n}\r\nsum.push(as);\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n          var array2 = []\r\n          for (let item of temp1.rows){\r\n           \r\n            var check = array2.filter((e)=>{return e.plate_number1 === item.plate_number });\r\n            if (check.length > 0){\r\n             var index5 = array2.findIndex((e2)=> e2.plate_number1 === item.plate_number );\r\n             \r\n             //  price = array[index5].price + item.price;\r\n             array2[index5].oem_id1 = array2[index5].oem_id1 ;\r\n             array2[index5].kpi1 =  parseFloat(array2[index5].kpi1 || 0);\r\n             console.log( item.record_date,\"sssa\")\r\n             array2[index5].mileage_number1 =  parseFloat(array2[index5].mileage_number1) +  parseFloat(item.mileage_number || 0 )\r\n             array2[index5].liter1 =  parseFloat(array2[index5].liter1) +  parseFloat(item.liter || 0 );\r\n  \r\n             array2[index5].oem_name_id1 = array2[index5].oem_name_id1 ;\r\n             array2[index5].name1 = array2[index5].name1 ;\r\n            \r\n            \r\n            }else{\r\n            \r\n                var as = {\r\n                  plate_number1: item.plate_number ,\r\n                  oem_id1: item.oem_id ,\r\n                  kpi1: item.kpi || 0 ,\r\n                  mileage_number1: item.mileage_number || 0 ,\r\n                  mileage_number2: sum,\r\n                  liter1: item.liter || 0,\r\n                  oem_name_id1: item.oem_name_id ,\r\n                  name1: item.name ,\r\n                 \r\n              }\r\n           \r\n             array2.push(as);\r\n            }\r\n           }\r\n      \r\n\r\n\r\n        var array3 = []\r\n        for (let item of temp2.rows){\r\n          var check = array3.filter((e)=>{return e.plate_number1 === item.plate_number });\r\n          if (check.length > 0){\r\n           var index5 = array3.findIndex((e2)=> e2.plate_number1 === item.plate_number );\r\n           //  price = array[index5].price + item.price;\r\n           array3[index5].oem_id1 = array3[index5].oem_id1 ;\r\n           array3[index5].kpi1 =  parseFloat(array3[index5].kpi1 || 0);\r\n           array3[index5].mileage_number1 = parseFloat(array3[index5].mileage_number1) \r\n           array3[index5].liter1 =  parseFloat(array3[index5].liter1) + parseFloat(item.liter || 0) ;\r\n         \r\n           array3[index5].oem_name_id1 = array3[index5].oem_name_id1 ;\r\n           array3[index5].name1 = array3[index5].name1 ;\r\n          \r\n          }else{\r\n           var as = {\r\n            plate_number1: item.plate_number ,\r\n            oem_id1: item.oem_id ,\r\n            kpi1: item.kpi || 0  ,\r\n            mileage_number1: item.mileage_number || 0 ,\r\n          \r\n            liter1: item.liter || 0,\r\n            oem_name_id1: item.oem_name_id ,\r\n            name1: item.name ,\r\n          \r\n          \r\n           }\r\n           array3.push(as);\r\n          }\r\n         }\r\n     \r\n\r\n\r\n\r\n\r\n\r\n       var tempmonthfuel = {\r\n         tempad: array2 || [],\r\n         tempac: array3 || [],\r\n         temp3: temp3.rows,\r\n         temp4: temp4.rows,\r\n         fuel_chat: array1 || []\r\n\r\n\r\n       }\r\n\r\n\r\n \r\n  \r\n \r\n       \r\n            resolve(tempmonthfuel);\r\n           \r\n          \r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n  // report ค่าซ่อม\r\n  async fileter_Rpair_Cost_Report(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            console.log(\"modelmonth\", model);\r\n          \r\n            const startOfMonth = moment(model.dateFrom).startOf('month').format('YYYY-MM-DD') + \" 00:00:00+07\";\r\n            const endOfMonth = moment(model.dateFrom).endOf('month').format('YYYY-MM-DD') + \" 23:59:59+07\";\r\n            const startOfYear = moment(model.dateFrom).startOf('year').startOf('month').startOf('day').format('YYYY-MM-DD') + \" 00:00:00+07\";\r\n            const endOfYear = moment(model.dateFrom).endOf('month').format('YYYY-MM-DD') + \" 23:59:59+07\";\r\n            \r\n            /* console.log(\"startOfMonth\", startOfMonth);\r\n            console.log(\"endOfMonth\", endOfMonth); */\r\n\r\n            console.log(\"startOfYear\", startOfYear);\r\n            console.log(\"endOfYear\", endOfYear);\r\n           \r\n            var temp = await client.query(_QueryReport_pdf.getplate_number_pair_Cost1, [\r\n              model.oem_id,\r\n              model.company_id,\r\n            ]);\r\n            var temp1 = await client.query(_QueryReport_pdf.getAll_pair_Cost, [\r\n              model.oem_id,\r\n              model.company_id,\r\n              startOfMonth,\r\n              endOfMonth,\r\n            ]);\r\n            var temp2 = await client.query(_QueryReport_pdf.getAll_month_pair_Cost, [\r\n              model.oem_id,\r\n              model.company_id,\r\n              startOfYear,\r\n              endOfYear,\r\n            ]);\r\n\r\n           \r\n            var sumss = temp1.rows;\r\n            var array = [];\r\n            for (let item of sumss) {\r\n              var check = array.filter((e) => { return e.plate_number1 === item.plate_number && e.maintenance_number1 === item.maintenance_number });\r\n              /* console.log(\"เช็คตัวซ้ำ\",check); */\r\n              if (check.length > 0) {\r\n                var index5 = array.findIndex((e2) => e2.plate_number1 === item.plate_number && e2.maintenance_number1 === item.maintenance_number);\r\n                array[index5].price1 = array[index5].price1 + item.price;\r\n              } else {\r\n                var as = {\r\n                  plate_number1: item.plate_number,\r\n                  maintenance_number1: item.maintenance_number,\r\n                  price1: item.price,\r\n                }     \r\n                array.push(as);\r\n              }\r\n            }\r\n\r\n\r\n            let sumplate = 0;\r\n            let all_car = [];\r\n            all_car = temp.rows;\r\n            let car = [];\r\n            // console.log(\"array\",array);\r\n            // console.log(\"all_car\",all_car);\r\n\r\n            for(let emrament of all_car){\r\n              var getplateS = array.filter((e) => { return e.plate_number1 === emrament.plate_number });\r\n              let sumprice = 0;\r\n              var list_car = {}\r\n              list_car[\"plate_number1\"]= emrament.plate_number;\r\n\r\n              if(getplateS.length>0){\r\n                for (const element of getplateS) {\r\n                  sumprice += element.price1;\r\n                }\r\n                // console.log(\"เข้า\",getplateS);\r\n              }else{\r\n                sumprice = 0;\r\n                // console.log(\"ไม่เข้า\",emrament.plate_number);\r\n              }\r\n              list_car[\"sumplate1\"]=sumprice;\r\n              car.push(list_car);\r\n            }\r\n            // console.log(\"รวม\",car);\r\n            // var price = 0;\r\n            // for(let eml of all_car){\r\n            //   var check123 = array.filter((e) => { return e.plate_number1 === eml.plate_number });\r\n            //   console.log(\"price\",check123);\r\n\r\n            // }\r\n            //console.log(\"all_car\",all_car);\r\n            // console.log(\"car\",car);\r\n\r\n            // for (let index2 = 0; index2 < all_car.length; index2++) {\r\n            //   var check123 = array.filter((e) => { return e.plate_number1 === all_car[index2].plate_number });\r\n            //   if (check123.length > 0) {\r\n            //     var index5 = check123.findIndex((e2)=> e2.plate_number1 === all_car[index2].plate_number );\r\n            //     sumplate = check123[0].price1;\r\n            //   } else {\r\n            //     sumplate = check123[0].price1;\r\n            //   }\r\n            //   var allroud = {\r\n            //     plate_number1: all_car[index2].plate_number,\r\n            //     sumplate1: sumplate,\r\n            //   }\r\n            //   car.push(allroud);\r\n            // }\r\n\r\n        let summonth = [];   \r\n         var pup = parseInt(moment(model.dateFrom).format(\"MM\"));\r\n\r\n          for(let p = 0; p < pup; p++){\r\n          \r\n            let temp001 = {}\r\n\r\n            temp001[\"year\"]= moment(model.dateFrom).format(\"YYYY\");\r\n            temp001[\"month\"]= p+1;\r\n            \r\n\r\n            var check = temp2.rows.filter((e) => { return parseInt( moment(e.finish_date).format(\"MM\") )=== p+1});\r\n            let temp_sum=0;\r\n            if (check.length >0) {\r\n                for (const element of check) {\r\n                  temp_sum += element.price;\r\n                }\r\n            }\r\n            temp001[\"price\"]= temp_sum;\r\n           \r\n            summonth.push(temp001);\r\n          }\r\n          \r\n           //console.log(\"summonth\",summonth);\r\n        \r\n            const costall = [\r\n              {monno:1, mon_name:\"ม.ค.\",price: 0 ,},\r\n              {monno:2, mon_name:\"ก.พ.\",price: 0 ,},\r\n              {monno:3, mon_name:\"มี.ค.\",price: 0 ,},\r\n              {monno:4, mon_name:\"เม.ย.\",price: 0, },\r\n              {monno:5, mon_name:\"พ.ค.\",price: 0, },\r\n              {monno:6, mon_name:\"มิ.ย.\",price: 0, },\r\n              {monno:7, mon_name:\"ก.ค.\",price: 0, },\r\n              {monno:8, mon_name:\"ส.ค.\",price: 0, },\r\n              {monno:9, mon_name:\"ก.ย.\",price: 0, },\r\n              {monno:10,mon_name:\"ต.ค.\",price: 0, },\r\n              {monno:11,mon_name:\"พ.ย.\",price: 0, },\r\n              {monno:12,mon_name:\"ธ.ค.\",price: 0, }\r\n            \r\n            ];\r\n            \r\n   \r\n            // console.log(\"costall\",costall);\r\n            for(let mon of summonth){\r\n             \r\n              var index7 = costall.findIndex((e3) => e3.monno === mon.month);\r\n              // console.log(mon.month,mon.price,\":\",costall[index7].monno,costall[index7].price);\r\n               //console.log(costall[index7].monno,costall[index7].mon_name,\"ราคา\",costall[index7].price = mon.price.toFixed(2));\r\n              costall[index7].price = mon.price.toFixed(2);\r\n          }\r\n          // console.log(\"costall\",costall);\r\n          \r\n            var final_temp = {\r\n              getplate: temp.rows,\r\n              alldata: temp1.rows,\r\n              getsummonth: summonth,\r\n              cheak: car,\r\n              costall1: costall,\r\n            };\r\n            \r\n            resolve(final_temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetWire_mace_STP(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            let dateFrom = moment(model.dateFrom).format('YYYY-MM-DD')+\" 00:00:00+07\";\r\n            let dateEnd = moment(model.dateFrom).format('YYYY-MM-DD')+\" 23:59:59+07\";\r\n            console.log(model)\r\n            var temp1 = await client.query(_QueryReport_pdf.getstp_machine, [\r\n              model.oem_id,\r\n             /*  dateFrom,\r\n              dateEnd, */\r\n              \r\n            ]);\r\n\r\n            var temp2 = await client.query(_QueryReport_pdf.fg_check, [\r\n             /*  dateFrom,\r\n              dateEnd, */\r\n              \r\n            ]);\r\n            var temp3 = await client.query(_QueryReport_pdf.STP_FG_check, [\r\n               dateFrom,\r\n               dateEnd,\r\n               \r\n             ]);\r\n             var temp4 = await client.query(_QueryReport_pdf.stp_customer, [\r\n              /*  dateFrom,\r\n               dateEnd, */\r\n               \r\n             ]);\r\n             var temp5 = await client.query(_QueryReport_pdf.stp_end_user, [\r\n              /*  dateFrom,\r\n               dateEnd, */\r\n               \r\n             ]);\r\n             var temp6 = await client.query(_QueryReport_pdf.deflux_stp, [\r\n              /*  dateFrom,\r\n               dateEnd, */\r\n               \r\n             ]);\r\n \r\n\r\n\r\n         \r\n            var final_temp = {\r\n              data_all: temp1.rows,\r\n              fg_am:temp2.rows,\r\n              STP_am:temp3.rows,\r\n              cus_pro:temp4.rows || [],\r\n              end_pro:temp5.rows || [],\r\n              df_stp:temp6.rows\r\n            }\r\n\r\n             console.log(final_temp)\r\n            resolve(final_temp); \r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n}\r\n    module.exports = report_pdfService;\r\n\r\n\n\n//# sourceURL=webpack:///./app/service/report_pdfService.js?");

/***/ }),

/***/ "./app/service/snManagementService.js":
/*!********************************************!*\
  !*** ./app/service/snManagementService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerySnManagement = __webpack_require__(/*! ../query/querySnManagement.json */ \"./app/query/querySnManagement.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst { error } = __webpack_require__(/*! console */ \"console\");\r\n\r\n\r\nclass SnManagement{\r\n\r\n    \r\n    async snAdd(model,user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n\r\n                var get_sn_number =  await client.query(_QuerySnManagement.get_sn_number, [\r\n                    model.sn_number,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                    ]); \r\n                    if(get_sn_number.rows.length > 0){\r\n                        throw Error(\"had sn already\");\r\n                    }else{\r\n                    let id_sn_number = uuidv4();\r\n                    await client.query(_QuerySnManagement.save_sn_number, [\r\n                            id_sn_number,\r\n                            model.sn_number,\r\n                            moment(new Date()),\r\n                            user_id,\r\n                            model.oem_id || null,\r\n                            model.company_id || null,\r\n                            ]); \r\n\r\n                    }\r\n                //console.log(\"model\",user_id);\r\n            //     var get_external_log_data = await client.query(_QuerySnManagement.get_log_external_data, [\r\n            //         model.oem_id,\r\n            //         model.company_id,\r\n            //         ]); \r\n               resolve(true); \r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n    \r\n      async hydroAdd(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                console.log(\"model\",model);\r\n                var get_sn_number =  await client.query(_QuerySnManagement.get_sn_number, [\r\n                    model.sn_number,\r\n                       model.oem_id,\r\n                       model.company_id,\r\n                    ]); \r\n                    \r\n                    if(get_sn_number.rows.length > 0){\r\n                        let id_sn_number = get_sn_number.rows[0].id;\r\n                        await client.query(_QuerySnManagement.update_hydroAdd, [\r\n                            id_sn_number,\r\n                            model.hydro_status,\r\n                            model.weight,\r\n                            ]); \r\n\r\n                       \r\n                    }else{\r\n                        throw Error(\"can not fine sn\");\r\n                    }\r\n                // console.log(\"model\",user_id);\r\n     \r\n               resolve(true); \r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    async airLeakAdd(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                //console.log(\"model\",model);\r\n                var get_sn_number =  await client.query(_QuerySnManagement.get_sn_number, [\r\n                    model.sn_number,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                    ]); \r\n                    \r\n                    if(get_sn_number.rows.length > 0){\r\n                        let id_sn_number = get_sn_number.rows[0].id;\r\n                        await client.query(_QuerySnManagement.save_airLeakAdd, [\r\n                            id_sn_number,\r\n                            model.airleak_status,\r\n                            model.packing,\r\n                            ]); \r\n\r\n                       \r\n                    }else{\r\n                        throw Error(\"can not fine sn\");\r\n                    }\r\n                // console.log(\"model\",user_id);\r\n     \r\n               resolve(true); \r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n    async filter(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                //console.log(\"model\",model);\r\n                var get_serial_number_list =  await client.query(_QuerySnManagement.filter_serial_number, [\r\n                model.oem_id,\r\n                model.company_id,\r\n                model.sn_number || null,\r\n                    ]); \r\n                \r\n            console.log(get_serial_number_list.rows);\r\n               resolve(get_serial_number_list.rows); \r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n}\r\n\r\n\r\nmodule.exports = SnManagement;\n\n//# sourceURL=webpack:///./app/service/snManagementService.js?");

/***/ }),

/***/ "./app/service/sparePartService.js":
/*!*****************************************!*\
  !*** ./app/service/sparePartService.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerySparePart = __webpack_require__(/*! ../query/querySparePart.json */ \"./app/query/querySparePart.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\n\r\nclass sparePartService {\r\n  async addSparePart(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkNo = await client.query(_QuerySparePart.checkNo, [\r\n              model.spare_part_no,\r\n            ]);\r\n            if (checkNo.rows.length) {\r\n              throw Error(\"System : Spare Part No has already\");\r\n            }\r\n\r\n            if (model.product_ref.length === 0) {\r\n              throw Error(\"System : product_id is null\");\r\n            }\r\n\r\n            let spare_part_id = uuidv4();\r\n            //console.log(model);\r\n             await client.query(_QuerySparePart.addSparePart, [\r\n              spare_part_id,\r\n              model.spare_part_no,\r\n              model.spare_part_name || null,\r\n              model.description || null,\r\n              true,\r\n              model.amount || 0,\r\n              model.company_id\r\n            ]);\r\n\r\n            if (model.product_ref.length !== 0) {\r\n              for (let index = 0; index < model.product_ref.length; index++) {\r\n                let spare_part_MtM_id = uuidv4();\r\n\r\n                await client.query(_QuerySparePart.addSparePartRelation, [\r\n                  spare_part_MtM_id,\r\n                  spare_part_id,\r\n                  model.product_ref[index].id,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            console.log(e);\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateSparePart(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //   console.log(model);\r\n            //throw Error(\"break\");\r\n              var checkNo = await client.query(_QuerySparePart.checkNo_edit, [\r\n              model.spare_part_no,model.spare_part_id,\r\n            ]);\r\n            if (checkNo.rows.length) {\r\n              throw Error(\"System : Spare Part No has already\");\r\n            }\r\n            \r\n            if (model.product_ref.length === 0) {\r\n              throw Error(\"System : product_id is null\");\r\n            }\r\n\r\n            console.log(model);\r\n            await client.query(_QuerySparePart.update, [\r\n              model.spare_part_id,\r\n              model.spare_part_no,\r\n              model.spare_part_name,\r\n              model.description,\r\n              model.amount,\r\n            ]);\r\n\r\n            await client.query(_QuerySparePart.delSparePartRelation, [\r\n              model.spare_part_id,\r\n            ]);\r\n\r\n            if (model.product_ref.length !== 0) {\r\n              for (let index = 0; index < model.product_ref.length; index++) {\r\n                let spare_part_MtM_id = uuidv4();\r\n\r\n                await client.query(_QuerySparePart.addSparePartRelation, [\r\n                  spare_part_MtM_id,\r\n                  model.spare_part_id,\r\n                  model.product_ref[index].product_id,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delSparePart(spare_part_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QuerySparePart.delSparePartRelation, [\r\n              spare_part_id,\r\n            ]);\r\n\r\n            await client.query(_QuerySparePart.delSparePart, [spare_part_id]);\r\n\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdSparePart(spare_part_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QuerySparePart.findById, [\r\n              spare_part_id,\r\n            ]);\r\n            /* console.log(temp.rows); */\r\n            var temp2 = [];\r\n\r\n            for (let index = 0; index < temp.rows.length; index++) {\r\n              const element = {};\r\n\r\n              element[\"id\"] = temp.rows[index].id;\r\n              element[\"description\"] = temp.rows[index].description;\r\n              element[\"spare_part_name\"] = temp.rows[index].spare_part_name;\r\n              element[\"spare_part_no\"] = temp.rows[index].spare_part_no;\r\n              element[\"amount\"] = temp.rows[index].amount;\r\n              element[\"company_id\"] = temp.rows[index].company_id;\r\n              element[\"product_ref\"] = [];\r\n\r\n              temp2.push(element);\r\n            }\r\n\r\n            var final_temp = DistinctDataArray(temp2, \"id\");\r\n\r\n            for (let index2 = 0; index2 < final_temp.length; index2++) {\r\n             \r\n              for (let index3 = 0; index3 < temp.rows.length; index3++) {\r\n                var element = {};\r\n                if (final_temp[index2].id === temp.rows[index3].id) {\r\n                  element[\"product_id\"] = temp.rows[index3].product_id;\r\n                  element[\"no\"] = temp.rows[index3].no;\r\n                  element[\"name\"] = temp.rows[index3].name;\r\n                  element[\"product_model_id\"] =\r\n                    temp.rows[index3].product_model_id;\r\n\r\n                  final_temp[index2].product_ref.push(element);\r\n                }\r\n              }\r\n            }\r\n\r\n            var spare_part_data = {\r\n              id: final_temp[0].id,\r\n              description: final_temp[0].description,\r\n              spare_part_name: final_temp[0].spare_part_name,\r\n              spare_part_no: final_temp[0].spare_part_no,\r\n              product_ref: final_temp[0].product_ref,\r\n              amount: final_temp[0].amount,\r\n              company_id: final_temp[0].company_id,\r\n            };\r\n\r\n            /*  console.log(spare_part_data); */\r\n            if (final_temp.length > 0) {\r\n              resolve(spare_part_data);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterSparePart(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let spare_part_no = model.spare_part_no\r\n                ? model.spare_part_no\r\n                : null,\r\n              spare_part_name = model.spare_part_name\r\n                ? model.spare_part_name\r\n                : null,\r\n              product_no = model.product_no ? model.product_no : null;\r\n\r\n            var temp = await client.query(_QuerySparePart.filter, [\r\n              spare_part_no,\r\n              spare_part_name,\r\n              product_no,\r\n              model.company_id,\r\n            ]);\r\n\r\n            var temp2 = [];\r\n\r\n            for (let index = 0; index < temp.rows.length; index++) {\r\n              const element = {};\r\n\r\n              element[\"id\"] = temp.rows[index].id;\r\n              element[\"description\"] = temp.rows[index].description;\r\n              element[\"spare_part_name\"] = temp.rows[index].spare_part_name;\r\n              element[\"spare_part_no\"] = temp.rows[index].spare_part_no;\r\n              element[\"amount\"] = temp.rows[index].amount;\r\n              element[\"company_id\"] = temp.rows[index].company_id;\r\n              element[\"product_ref\"] = [];\r\n\r\n              temp2.push(element);\r\n            }\r\n\r\n            var final_temp = DistinctDataArray(temp2, \"id\");\r\n\r\n            for (let index2 = 0; index2 < final_temp.length; index2++) {\r\n              var temp_ = temp.rows.filter((data) => {\r\n                return data.id == final_temp[index2].id;\r\n              });\r\n\r\n              for (let index3 = 0; index3 < temp_.length; index3++) {\r\n                var element = {};\r\n                if (final_temp[index2].id === temp_[index3].id) {\r\n                  element[\"product_id\"] = temp_[index3].product_id;\r\n                  element[\"product_no\"] = temp_[index3].no;\r\n\r\n                  final_temp[index2].product_ref.push(element);\r\n                }\r\n              }\r\n            }\r\n\r\n            /* console.log(temp2); */\r\n            resolve(final_temp);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateSparePartInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          if (!(typeof model.amount === \"number\")) {\r\n            reject(\"amount need type number\");\r\n          }\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n\r\n            model.amount = model.amount || 0;\r\n\r\n            let amount = model.edit_type ? model.amount : model.amount * -1;\r\n\r\n            var current = await client.query(\r\n              _QuerySparePart.getValueSparePartAmount,\r\n              [amount, model.id]\r\n            );\r\n            if (current.rows.length == 0) {\r\n              throw Error(\"not found ValueAmount\");\r\n            }\r\n            if (current.rows[0].amount < 0) {\r\n              throw Error(\r\n                \"can not set value here, response is \" + current.rows[0].amount\r\n              );\r\n            }\r\n\r\n            console.log(current.rows);\r\n            let spare_part_log_id = uuidv4();\r\n            await client.query(_QuerySparePart.addLogSparePartAmount, [\r\n              spare_part_log_id,\r\n              model.edit_type,\r\n              user_id,\r\n              amount,\r\n              model.loop_id || null,\r\n              model.expire_date || null,\r\n              model.warehouse_id || null,\r\n              model.location || null,\r\n              model.load_status_id || null,\r\n              moment(new Date()),\r\n            ]);\r\n            await client.query(_QuerySparePart.SparePartAmountInOut, [\r\n              amount,\r\n              model.id,\r\n            ]);\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelSparePart(modelSheetArr, company_id, product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempRes = [];\r\n          await client.connect();\r\n          try{\r\n          await client.query(\"BEGIN\");\r\n         \r\n           for (const modelbookArr of modelSheetArr) {\r\n                    for (const model of modelbookArr) {\r\n                        var isUpdate = false;\r\n                        \r\n                        try {\r\n                          console.log(model)\r\n                          if(model.amount < 0 || model.amount < 0 ){\r\n                            throw Error(\"qty_unit / sell_price is not negative\");\r\n                        }\r\n                        var query = await client.query(_QuerySparePart.checkNo, [\r\n                          model.spare_part_no,\r\n                        ]);\r\n                        if (query.rows.length > 0) {\r\n                            isUpdate = true;\r\n                         }\r\n                         if (isUpdate) {\r\n                       \r\n                        \r\n                          let id_spare_part = query.rows[0].id;\r\n   \r\n                          await client.query(_QuerySparePart.update, [\r\n                            id_spare_part,\r\n                            model.spare_part_no,\r\n                            model.spare_part_name,\r\n                            model.description,\r\n                            model.amount,\r\n                          ]);\r\n                          var checkSPP = await client.query(_QuerySparePart.checkSparePartProduct,[id_spare_part,product_id]); \r\n                          if(checkSPP.rows.length > 0){\r\n                            console.log(\"update\");\r\n                          }else{\r\n                            console.log(\"add\");\r\n                            let spare_part_MtM_id = uuidv4();\r\n                            await client.query(_QuerySparePart.addSparePartRelation, [\r\n                              spare_part_MtM_id,\r\n                              id_spare_part,\r\n                              product_id,\r\n                            ]);\r\n                          }\r\n\r\n                       \r\n                        \r\n                          tempRes.push({\r\n                              \"model\": model.no,\r\n                              \"status\": true,\r\n                              \"isUpdate\":true,\r\n                              \"status_update\": true,\r\n                          })\r\n\r\n                      } else {\r\n                        var checkNo = await client.query(_QuerySparePart.checkNo, [\r\n                          model.spare_part_no,\r\n                        ]);\r\n                        if (checkNo.rows.length) {\r\n                          throw Error(\"System : Spare Part No has already\");\r\n                        }\r\n               \r\n                        let spare_part_id = uuidv4();\r\n                 \r\n                         await client.query(_QuerySparePart.addSparePart, [\r\n                          spare_part_id,\r\n                          model.spare_part_no,\r\n                          model.spare_part_name || null,\r\n                          model.description || null,\r\n                          true,\r\n                          model.amount || 0,\r\n                          model.company_id\r\n                        ]);\r\n\r\n                        var checkSPP = await client.query(_QuerySparePart.checkSparePartProduct,[spare_part_id,product_id]); \r\n                          if(checkSPP.rows.length > 0){\r\n                            console.log(\"update\");\r\n                          }else{\r\n                            console.log(\"add\");\r\n                            let spare_part_MtM_id = uuidv4();\r\n                            await client.query(_QuerySparePart.addSparePartRelation, [\r\n                              spare_part_MtM_id,\r\n                              spare_part_id,\r\n                              product_id,\r\n                            ]);\r\n                          }\r\n                        \r\n                      }\r\n                          /*\r\n                            if(model.amount < 0 || model.amount < 0 ){\r\n                                throw Error(\"qty_unit / sell_price is not negative\");\r\n                            }\r\n                            var query = await client.query(_QuerySparePart.checkNo, [\r\n                              model.spare_part_no,\r\n                            ]);\r\n                            if (query.rows.length > 0) {\r\n                                isUpdate = true;\r\n                            }\r\n\r\n                            if (isUpdate) {\r\n                                model.id = query.rows[0].id;\r\n\r\n                                model.spare_part_no = \r\n                                model.spare_part_name =\r\n                                model.amount =\r\n                                model.amount =\r\n                                model.circle_time = query.rows[0].circle_time;\r\n                                model.sku_user = model.sku_user || query.rows[0].sku_user;\r\n                             \r\n                                model.sku_system = query.rows[0].sku_system;\r\n                                await client.query(_QueryProduct.updateProduct, [model.no || null, model.name || null, model.product_model_id || null, model.qty_unit || 0, model.min_product || 0, model.min_lot || 0, user_id, moment(new Date()), model.id]);\r\n                                await client.query(_QueryProduct.updateProductDetail, [model.image || null, model.description || null, model.sell_price || null, model.circle_time || null, model.sku_user || null, model.product_route_id || null, model.product_size_id || null, model.product_color_id || null, model.image_name || null, model.image_path || null, model.sku_system || null, model.id]);\r\n                              \r\n                                tempRes.push({\r\n                                    \"model\": model.no,\r\n                                    \"status\": true,\r\n                                    \"isUpdate\":true,\r\n                                    \"status_update\": true,\r\n                                })\r\n\r\n                            } else {\r\n                                //-------------------------------------\r\n                                let product_id = uuidv4();\r\n                                let product_material_id = uuidv4();\r\n                                await client.query(_QueryProduct.addProduct, [product_id, model.no || null, model.name || null, model.product_model_id || null, model.qty_unit || 0,model.min_product || 0,model.min_lot || 0, user_id, oem_id || null, true, true, false, moment(new Date()), moment(new Date()),null,null]);\r\n                                await client.query(_QueryProduct.addProductDetail, [product_id, model.image || null, model.description || null, model.sell_price || null, model.circle_time || null, model.sku_user || null, model.product_route_id || null, model.product_size_id || null, model.product_color_id || null, model.image_name || null, model.imaget_path || null, model.sku_system || null]);\r\n                                await client.query(_QueryProduct.addProductMaterial, [product_material_id, product_id, null, null, null, null]);\r\n\r\n                                tempRes.push({\r\n                                    \"model\": model.no,\r\n                                    \"status\": true,\r\n                                    \"isUpdate\":false,\r\n                                    \"status_update\": true,\r\n                                })\r\n                            }\r\n */\r\n                         //   console.log(\"COMMIT\", model.no)\r\n                        } catch (e) {\r\n                            tempRes.push({\r\n                                \"model\": model.spare_part_no,\r\n                                \"status\": false,\r\n                                \"error\": e.message,\r\n                                \"status_update\": false,\r\n                            })\r\n                            console.log(e)\r\n                        }\r\n                    }\r\n                }\r\n\r\n          if (tempRes.filter((x) => !x.status).length > 0) {\r\n            await client.query(\"ROLLBACK\");\r\n            console.log(\"ROLLBACK\");\r\n          } else {\r\n            await client.query(\"COMMIT\");\r\n            console.log(\"COMMIT All\");\r\n          }\r\n\r\n    \r\n          resolve(tempRes);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction DistinctDataArray(data, key) {\r\n  return [...new Map(data.map((item) => [item[key], item])).values()];\r\n}\r\n\r\nfunction FilterDataArray(data, filed, key, type) {\r\n  var temp = data.filter((o) => o[filed] != null);\r\n  if (type === \"string\") {\r\n    return temp.filter((o) => o[filed].includes(key));\r\n  } else if (type === \"number\") {\r\n    return temp.filter((o) => o[filed] === key);\r\n  }\r\n}\r\nmodule.exports = sparePartService;\r\n\n\n//# sourceURL=webpack:///./app/service/sparePartService.js?");

/***/ }),

/***/ "./app/service/supplierService.js":
/*!****************************************!*\
  !*** ./app/service/supplierService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QuerySupplier = __webpack_require__(/*! ../query/querySupplier.json */ \"./app/query/querySupplier.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass supplierService {\r\n\r\n  async addSupplier(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            if (model.company_id === null) {\r\n              throw Error(\"System : Company_id is null\"); \r\n            }\r\n        \r\n            var checkName = await client.query(_QuerySupplier.checkNameSupplier, [\r\n              model.name,\r\n              model.company_id,\r\n            ]);\r\n            var checkFullName = await client.query(_QuerySupplier.checkFullNameSupplier, [\r\n              model.full_name,\r\n              model.company_id,\r\n            ]);\r\n            if (checkName.rows.length > 0) {\r\n              throw Error(\"System : Supplier Name has already\"); \r\n            }\r\n            if (checkFullName.rows.length > 0) {\r\n              throw Error(\"System : Supplier Full Name has already\"); \r\n            }\r\n            \r\n            let supplier_id = uuidv4();\r\n           let temp_sort = await client.query(_QuerySupplier.CheckSort);\r\n           let updatedate = moment(new Date()).format();\r\n           let sort = temp_sort.rows[0].max || 0;\r\n            await client.query(_QuerySupplier.add, [\r\n              supplier_id,\r\n              model.company_id,\r\n              model.name,\r\n              sort+1 || null,\r\n              model.detail || null,\r\n              model.contact_tel || null,\r\n              model.contact_fax || null,\r\n              model.supplier_email || null,\r\n              model.supplier_email_person || null,\r\n              model.remark || null,\r\n              true,\r\n              model.contact_name || null,\r\n              model.full_name,\r\n              model.line_id || null,\r\n              updatedate,\r\n              user_id,\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async updateSupplier(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model)\r\n            let updatedate = moment(new Date()).format();\r\n            var checkName = await client.query(_QuerySupplier.checkNameSupplier_edit,[model.name,model.id,model.company_id]);\r\n              if(checkName.rows.length > 0){\r\n                throw Error(\"System : Supplier Abbreviation has already\"); \r\n              }\r\n              var checkFullName = await client.query(_QuerySupplier.checkFullNameSupplier_edit,[model.full_name,model.id,model.company_id]);\r\n              if(checkFullName.rows.length > 0){\r\n                throw Error(\"System : Supplier Name has already\"); \r\n              }\r\n              console.log(model.detail)\r\n            await client.query(_QuerySupplier.update, [\r\n              \r\n              model.name,\r\n              \r\n              model.detail || null,\r\n              model.contact_tel || null,\r\n              model.contact_fax || null,\r\n              model.supplier_email || null,\r\n              model.supplier_email_person || null,\r\n              model.remark || null,\r\n              model.contact_name  || null,\r\n              model.full_name ,\r\n              model.id,\r\n              model.line_id || null,\r\n\r\n              updatedate,\r\n              user_id,\r\n              \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async delSupplier(supplier_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let updatedate = moment(new Date()).format();\r\n            await client.query(_QuerySupplier.del, [supplier_id,updatedate,user_id,]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async findByIdSupplier(supplier_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QuerySupplier.findById, [supplier_id]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterSupplier(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           /*  console.log(model); */\r\n            let name = model.name ? model.name : null,\r\n                full_name = model.full_name ? model.full_name : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QuerySupplier.filter, [\r\n              name,\r\n              full_name,\r\n              company_id ,\r\n            ]);\r\n        /*     console.log(temp); */\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\nmodule.exports = supplierService;\r\n\n\n//# sourceURL=webpack:///./app/service/supplierService.js?");

/***/ }),

/***/ "./app/service/toolingService.js":
/*!***************************************!*\
  !*** ./app/service/toolingService.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\n\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryTooling = __webpack_require__(/*! ../query/queryTooling.json */ \"./app/query/queryTooling.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode, kdf } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { log } = __webpack_require__(/*! debug */ \"debug\");\r\nconst handheldService = __webpack_require__(/*! ../service/handheldService */ \"./app/service/handheldService.js\");\r\nconst { cli } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst _handheldService = new handheldService();\r\n\r\nclass toolingService {\r\n  async getToolingSupplier(company_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_tooling_supplier = await client.query(\r\n              _QueryTooling.getToolingSupplier,\r\n              [company_id]\r\n            );\r\n\r\n            resolve(temp_tooling_supplier.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getToolingBrand(company_id, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_tooling_brand = await client.query(\r\n              _QueryTooling.getToolingBrand,\r\n              [company_id, oem_id]\r\n            );\r\n\r\n            resolve(temp_tooling_brand.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterToolingM(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_tooling_parameter = await client.query(\r\n              _QueryTooling.getToolingParameter,\r\n              []\r\n            );\r\n            // console.log(temp_tooling_parameter.rows[0].value);\r\n\r\n            let temp_tooling = await client.query(\r\n              _QueryTooling.filterToolingM,\r\n              [\r\n                model.company_id,\r\n                model.oem_id,\r\n                model.tooling_code || null,\r\n                model.tooling_name || null,\r\n                model.supplier_id || null,\r\n                model.brand_id || null,\r\n              ]\r\n            );\r\n\r\n            const allData = [];\r\n\r\n            const dataNotDuplicate = temp_tooling.rows.filter(\r\n              ({ tooling_code }, index) => {\r\n                return (\r\n                  temp_tooling.rows.findIndex(\r\n                    (item) => item.tooling_code === tooling_code\r\n                  ) === index\r\n                );\r\n              }\r\n            );\r\n\r\n            for (let item of dataNotDuplicate) {\r\n              let data = {\r\n                tooling_id: item.t_id,\r\n                tooling_path_name: item.tooling_path_name,\r\n                tooling_img_name: item.tooling_img_name,\r\n                tooling_code: item.tooling_code,\r\n                tooling_name: item.tooling_name,\r\n                brand_id: item.brand_id,\r\n                brand_name: item.brand_name,\r\n                min_stock: item.min_stock,\r\n                max_stock: item.max_stock,\r\n                consumption: item.consumption,\r\n              };\r\n\r\n              if (item.ratio === null) {\r\n                data[\"ratio\"] = temp_tooling_parameter.rows[0].value;\r\n              } else {\r\n                data[\"ratio\"] = item.ratio;\r\n              }\r\n\r\n              allData.push(data);\r\n            }\r\n            console.log(allData);\r\n            resolve(allData);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterToolingInquirySelect(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_tooling_parameter = await client.query(\r\n              _QueryTooling.getToolingParameter,\r\n              []\r\n            );\r\n            // console.log(temp_tooling_parameter.rows[0].value);\r\n\r\n            let temp_tooling = await client.query(\r\n              _QueryTooling.filterToolingM,\r\n              [\r\n                model.company_id,\r\n                model.oem_id,\r\n                model.tooling_code || null,\r\n                model.tooling_name || null,\r\n                model.supplier_id || null,\r\n                model.brand_id || null,\r\n              ]\r\n            );\r\n\r\n            const allData = [];\r\n\r\n            const dataNotDuplicate = temp_tooling.rows.filter(\r\n              ({ tooling_code }, index) => {\r\n                return (\r\n                  temp_tooling.rows.findIndex(\r\n                    (item) => item.tooling_code === tooling_code\r\n                  ) === index\r\n                );\r\n              }\r\n            );\r\n\r\n            for (let item of dataNotDuplicate) {\r\n              let data = {\r\n                tooling_id: item.t_id,\r\n                tooling_path_name: item.tooling_path_name || \"\",\r\n                tooling_img_name: item.tooling_img_name || \"\",\r\n                tooling_code: item.tooling_code || \"\",\r\n                tooling_name: item.tooling_name || \"\",\r\n                brand_id: item.brand_id || \"\",\r\n                brand_name: item.brand_name || \"\",\r\n                min_stock: item.min_stock || 0,\r\n                max_stock: item.max_stock || 0,\r\n                consumption: item.consumption || 0,\r\n                amount: item.amount || \"\",\r\n              };\r\n\r\n              if (item.ratio === null) {\r\n                data[\"ratio\"] = temp_tooling_parameter.rows[0].value;\r\n              } else {\r\n                data[\"ratio\"] = item.ratio;\r\n              }\r\n\r\n              allData.push(data);\r\n            }\r\n            console.log(allData);\r\n            resolve(allData);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async deleteTooling(tooling_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryTooling.deleteTooling, [\r\n              tooling_id,\r\n              user_id,\r\n              new Date(),\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getToolingDataById(tooling_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            const tooling = await client.query(\r\n              _QueryTooling.getToolingDataById,\r\n              [tooling_id]\r\n            );\r\n\r\n            if (tooling.rows.length === 0) {\r\n              throw Error(\"เกิดข้อผิดพลาด ไม่มี tooling นี้อยู่ในระบบ\");\r\n            }\r\n            console.log(\"tooling.rows\", tooling.rows);\r\n            const tooling_supplier = await client.query(\r\n              _QueryTooling.getToolingSupplierById,\r\n              [tooling.rows[0].id]\r\n            );\r\n            console.log(\"tooling_supplier.rows\", tooling_supplier.rows);\r\n            const data = {\r\n              tooling: tooling.rows,\r\n              tooling_supplier: tooling_supplier.rows,\r\n            };\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getToolingInquiryById(inquiry_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            const tInquiry = await client.query(_QueryTooling.getInquiryById, [\r\n              inquiry_id,\r\n            ]);\r\n\r\n            if (tInquiry.rows.length === 0) {\r\n              throw Error(\"เกิดข้อผิดพลาด ไม่มี Tooling Inquiry นี้อยู่ในระบบ\");\r\n            }\r\n\r\n            const toolingOfInq = await client.query(\r\n              _QueryTooling.getToolingInquiryById,\r\n              [tInquiry.rows[0].id]\r\n            );\r\n            const arrList = [];\r\n            for (let item of toolingOfInq.rows) {\r\n              item.status_edit = \"default\";\r\n              arrList.push(item);\r\n            }\r\n            /* console.log(\"tooling.rows\", tooling.rows);\r\n            const tooling_supplier = await client.query(\r\n              _QueryTooling.getToolingSupplierById,\r\n              [tooling.rows[0].id]\r\n            );*/\r\n            // console.log(\"tooling_supplier.rows\", tooling_supplier.rows);\r\n            const data = {\r\n              tooling: arrList,\r\n              toolingInput: tInquiry.rows,\r\n            };\r\n            resolve(data);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async generateIQTooling() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            const tooling = await client.query(\r\n              _QueryTooling.getIQToolingNo,\r\n              []\r\n            );\r\n            console.log(\"tooling.rows\", tooling.rows);\r\n            let newIQ = null;\r\n            if (tooling.rows.length === 0) {\r\n              newIQ = `IQ${moment(new Date())\r\n                .add(543, \"years\")\r\n                .format(\"YYMMDD\")}-01`;\r\n            } else {\r\n              newIQ = this.generateNextOrderProductCode(\r\n                tooling.rows[0].inquiry_no\r\n              );\r\n            }\r\n            /*  if (tooling.rows.length === 1) {\r\n               let tool = tooling.rows[0].inquiry_no;\r\n               let str = tooling.rows[0].inquiry_no;\r\n               const number = tool.substring(\r\n                 str.indexOf(\"-\") + 1,\r\n                 str.length);\r\n               console.log('number', parseInt(number) + 1);\r\n             } */\r\n\r\n            resolve(newIQ);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async loadSuggestionOfTooling() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"test-------\");\r\n            const log_tooling_edit_amount = await client.query(\r\n              _QueryTooling.getToolingLogEditAmount,\r\n              []\r\n            );\r\n            /////////////////////////////////// TEST ///////////////////////////\r\n            const toolingMinAmount = await client.query(\r\n              _QueryTooling.getToolingForSuggest,\r\n              []\r\n            );\r\n            const arrList = [];\r\n            console.log(\"toolingMinAmount.ros\", toolingMinAmount.rows);\r\n            if (toolingMinAmount.rows.length > 0) {\r\n              for (let item of toolingMinAmount.rows) {\r\n                if (item.ratio == 0) continue;\r\n                let check_push = false;\r\n\r\n                const sumLogOutTooling = await client.query(\r\n                  _QueryTooling.sumLogOutTooling,\r\n                  [item.tooling_id]\r\n                );\r\n\r\n                let amount_cal =\r\n                  item.amount !== null && item.amount !== \"\"\r\n                    ? parseFloat(item.amount)\r\n                    : 0;\r\n                // console.log('amount_cal', amount_cal);\r\n                let minstock_cal =\r\n                  item.min_stock !== null && item.min_stock !== \"\"\r\n                    ? parseFloat(item.min_stock)\r\n                    : 0;\r\n                if (sumLogOutTooling.rows[0].total_amount) {\r\n                  // console.log('item', item);\r\n                  const total_amount_log = Number(\r\n                    sumLogOutTooling.rows[0].total_amount\r\n                  );\r\n                  const ratioPara = await client.query(\r\n                    _QueryTooling.getToolingParameter,\r\n                    []\r\n                  );\r\n\r\n                  let ratio = 0;\r\n                  let totalA = parseFloat(total_amount_log);\r\n                  let ratio_cal = parseFloat(item.ratio);\r\n\r\n                  if (ratioPara.rows.length > 0) {\r\n                    ratio = ratioPara.rows[0].value;\r\n                    // console.log('ratio parameter-', ratio);\r\n                  } // 2\r\n\r\n                  if (item.ratio == \"\" || item.ratio == null) {\r\n                    ratio_cal = parseFloat(ratio);\r\n                    item.amount = totalA * ratio_cal - amount_cal;\r\n                  } else {\r\n                    // console.log('else cal amount', totalA, ratio_cal, amount_cal);\r\n                    item.amount = totalA * ratio_cal - amount_cal;\r\n                  }\r\n                  if (item.amount > 0) check_push = true;\r\n                } else if (minstock_cal > amount_cal) {\r\n                  item.amount = minstock_cal - amount_cal;\r\n                  check_push = true;\r\n                }\r\n                // console.log('item.amount', item.amount);\r\n                // amon ?? ''\r\n\r\n                let minimum =\r\n                  item.minimum_order !== null && item.minimum_order !== \"\"\r\n                    ? parseFloat(item.minimum_order)\r\n                    : 0;\r\n                if (check_push) {\r\n                  if (item.amount < minimum) {\r\n                    item.amount = minimum;\r\n                  }\r\n\r\n                  item.remark = item.remark || \"\";\r\n                  item.purchase_order_id = item.purchase_order_id || \"\";\r\n                  arrList.push(item);\r\n                }\r\n              }\r\n            }\r\n\r\n            // console.log('sumLogOutTooling.rows', sumLogOutTooling.rows);\r\n            console.log(\"arrList\", arrList);\r\n            /////////////////////////////////// TEST ///////////////////////////\r\n\r\n            resolve(arrList);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async generateNextOrderProductCode(orderProductCode) {\r\n    const date = new Date();\r\n    const year = (date.getFullYear() + 543).toString().substr(-2);\r\n    const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n    const day = date.getDate().toString().padStart(2, \"0\");\r\n\r\n    const regex = /^IQ(\\d{2})(\\d{2})(\\d{2})-(\\d{2})$/;\r\n    const matches = orderProductCode.match(regex);\r\n\r\n    if (!matches) {\r\n      throw new Error(\"Invalid order product code\");\r\n    }\r\n\r\n    const orderYear = matches[1];\r\n    const orderMonth = matches[2];\r\n    const orderDay = matches[3];\r\n    const orderNumber = parseInt(matches[4]);\r\n\r\n    if (orderYear === year && orderMonth === month && orderDay === day) {\r\n      const nextOrderNumber = orderNumber + 1;\r\n      return `IQ${year}${month}${day}-${nextOrderNumber\r\n        .toString()\r\n        .padStart(2, \"0\")}`;\r\n    } else {\r\n      return `IQ${year}${month}${day}-01`;\r\n    }\r\n  }\r\n\r\n  async getToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model.inquiry\", model.inquiry_id);\r\n            const toolingInquiry = await client.query(\r\n              _QueryTooling.filterToolingInquiry,\r\n              [model.inquiry_id || null]\r\n            );\r\n            console.log(\"toolingInquiry.rows\", toolingInquiry.rows);\r\n            resolve(toolingInquiry.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getToolingPO(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model. PO\", model);\r\n\r\n            const toolingPO = await client.query(\r\n              _QueryTooling.filterToolingPO,\r\n              [\r\n                model.t_po_no || null,\r\n                model.t_supplier || null,\r\n                null,\r\n                model.t_start_date || null,\r\n                model.t_end_date || null,\r\n              ]\r\n            );\r\n\r\n            let arr = [];\r\n            for (let item of toolingPO.rows) {\r\n              const supplier = await client.query(\r\n                _QueryTooling.getToolingBySupplierIdAndPOID,\r\n                [item.tooling_supplier_id, item.po_id]\r\n              );\r\n\r\n              let sum_price = 0;\r\n              let receive_date = null;\r\n              if (supplier.rows.length > 0) {\r\n                let someSuccess = false;\r\n                let allSuccess = false;\r\n                let notOparetion = false;\r\n                for (let item1 of supplier.rows) {\r\n                  if (\r\n                    parseInt(item1.amount) == parseInt(item1.receive_amount)\r\n                  ) {\r\n                    allSuccess = true;\r\n                  } else if (item1.receive_amount === 0 || item1.receive_amount === null) {\r\n                    notOparetion = true;\r\n                  } else {\r\n                    someSuccess = true;\r\n                  }\r\n                  sum_price += parseFloat(item1.price);\r\n                  if (item1.receive_date) receive_date = item1.receive_date;\r\n                }\r\n\r\n                if (allSuccess && !someSuccess && !notOparetion) {\r\n                  item.receive_status = \"f838dc87-5636-4e1c-acd2-01a69f76544d\";\r\n                } else if (notOparetion && !someSuccess && !allSuccess) {\r\n                  item.receive_status = \"fc3bd39f-841a-4de6-ba7c-37582e299a26\";\r\n                } else {\r\n                  item.receive_status = \"0e6bbbfb-12fd-4136-83ad-4131d2a5096d\";\r\n                }\r\n                item.price = sum_price;\r\n                item.receive_date = receive_date;\r\n              }\r\n              const tempData = {\r\n                toolingPO: item,\r\n                supplier: supplier.rows,\r\n              };\r\n              arr.push(tempData);\r\n            }\r\n            console.log(\"arr\", arr);\r\n            if (model.t_recieve_status !== null) {\r\n              arr = arr.filter((item) => {\r\n                return item.toolingPO.receive_status === model.t_recieve_status;\r\n              });\r\n            }\r\n            const dataNotDuplicate = arr.filter(\r\n              (item, index, self) =>\r\n                index ===\r\n                self.findIndex(\r\n                  (t) =>\r\n                    t.toolingPO.po_id === item.toolingPO.po_id &&\r\n                    t.toolingPO.tooling_supplier_id ===\r\n                    item.toolingPO.tooling_supplier_id\r\n                )\r\n            );\r\n            console.log(\"toolingPO.rows\", toolingPO.rows);\r\n            resolve(dataNotDuplicate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateToolingM(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model updateToolingM-----\", model);\r\n            let arrAdd = [];\r\n            let arrUpdate = [];\r\n            let arrDelete = [];\r\n            // check tooling code\r\n            const checkDup = await client.query(\r\n              _QueryTooling.checkUpdateToolingCodeDuplicate,\r\n              [model.tooling.code, model.tooling.toolingId]\r\n            );\r\n            // if\r\n            // have resolve can't add\r\n            // not have add and add supplier\r\n            if (checkDup.rows.length > 0) {\r\n              throw Error(\r\n                \"พบข้อผิดพลาด ในฐานข้อมูล มี Tooling Code นี้อยู่แล้ว\"\r\n              );\r\n            }\r\n            await client.query(_QueryTooling.updateToolingM, [\r\n              model.tooling.toolingId,\r\n              model.tooling.code,\r\n              model.tooling.name,\r\n              model.tooling.brand,\r\n              model.tooling.minStock === null ? null : model.tooling.minStock,\r\n              model.tooling.maxStock === null ? null : model.tooling.maxStock,\r\n              model.tooling.consumtion === null\r\n                ? null\r\n                : model.tooling.consumtion,\r\n              model.tooling.ratio === null ? null : model.tooling.ratio,\r\n              model.tooling.description,\r\n              model.tooling.image_path,\r\n              model.tooling.image_name,\r\n              new Date(),\r\n              model.emp_fup,\r\n              model.emp_oem_id,\r\n              model.emp_company_id,\r\n            ]);\r\n            if (model.supplierData.length > 0) {\r\n              for (let item of model.supplierData) {\r\n                if (item.status === \"update\") {\r\n                  arrUpdate.push(item);\r\n                  console.log(\"----update\");\r\n                  await client.query(_QueryTooling.updateSupplierM, [\r\n                    item.id,\r\n                    model.tooling.toolingId,\r\n                    item.supplier_id,\r\n                    item.buy_price || 0,\r\n                    item.minimum_order || 0,\r\n                    item.lead_time || 0,\r\n                    item.remark,\r\n                    item.sort || null,\r\n                    item.is_active,\r\n                    new Date(),\r\n                    model.emp_fup,\r\n                    model.emp_oem_id,\r\n                    model.emp_company_id,\r\n                  ]);\r\n                } else if (item.status === \"add\") {\r\n                  arrAdd.push(item);\r\n                  console.log(\"----add\");\r\n                  const idSupplier = uuidv4();\r\n                  await client.query(_QueryTooling.addSupplierM, [\r\n                    idSupplier,\r\n                    model.tooling.toolingId,\r\n                    item.supplier_id,\r\n                    item.buy_price || 0,\r\n                    item.minimum_order || 0,\r\n                    item.lead_time || 0,\r\n                    item.remark,\r\n                    item.sort || null,\r\n                    true,\r\n                    item.is_active,\r\n                    new Date(),\r\n                    new Date(),\r\n                    model.emp_fup,\r\n                    model.emp_fup,\r\n                    model.emp_oem_id,\r\n                    model.emp_company_id,\r\n                  ]);\r\n                } else if (item.status === \"delete\") {\r\n                  console.log(\"----delete\");\r\n                  arrDelete.push(item);\r\n                  await client.query(_QueryTooling.deleteToolingSupplierM, [\r\n                    item.id,\r\n                  ]);\r\n                }\r\n              }\r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model updateToolingM-----\", model);\r\n\r\n            await client.query(_QueryTooling.updateInquiry, [\r\n              // update remark at id match\r\n              model.inquiry_id,\r\n              model.toolingInput.tooling_remark,\r\n              new Date(),\r\n              model.emp_fup,\r\n            ]);\r\n            // check status edit\r\n            for (let item of model.tooling) {\r\n              const checkToolingInq = await client.query(\r\n                _QueryTooling.checkToolingInquiryByTId,\r\n                [item.tooling_id, model.inquiry_id]\r\n              );\r\n              console.log(\"checkToolingInq.rows\", checkToolingInq.rows);\r\n              if (checkToolingInq.rows.length > 0) {\r\n                // update\r\n                await client.query(_QueryTooling.updateToolingInquiry, [\r\n                  checkToolingInq.rows[0].id,\r\n                  model.inquiry_id,\r\n                  item.tooling_id,\r\n                  item.amount,\r\n                  new Date(),\r\n                  model.emp_fup,\r\n                ]);\r\n              } else if (checkToolingInq.rows.length === 0) {\r\n                // add\r\n                await client.query(_QueryTooling.addToolingInquiry, [\r\n                  uuidv4(),\r\n                  model.inquiry_id,\r\n                  item.tooling_id,\r\n                  parseInt(item.amount ? item.amount : 0),\r\n                  true,\r\n                  true,\r\n                  new Date(),\r\n                  new Date(),\r\n                  model.emp_fup,\r\n                  model.emp_fup,\r\n                ]);\r\n              }\r\n            }\r\n\r\n            if (model.tooling_delete.length > 0) {\r\n              for (let item of model.tooling_delete) {\r\n                await client.query(_QueryTooling.deleteToolingInquiry, [\r\n                  item.id,\r\n                ]);\r\n              }\r\n            }\r\n            ////////////////////////////////////\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addToolingM(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model addToolingM-----\", model);\r\n            // check tooling code\r\n            const checkDup = await client.query(\r\n              _QueryTooling.checkToolingCodeDuplicate,\r\n              [model.tooling.code]\r\n            );\r\n            // if\r\n            // have resolve can't add\r\n            // not have add and add supplier\r\n            const idTooling = uuidv4();\r\n            if (checkDup.rows.length > 0) {\r\n              throw Error(\r\n                \"พบข้อผิดพลาด ในฐานข้อมูล มี Tooling Code นี้อยู่แล้ว\"\r\n              );\r\n            }\r\n            await client.query(_QueryTooling.addToolingM, [\r\n              idTooling,\r\n              model.tooling.code,\r\n              model.tooling.name,\r\n              0, // amount\r\n              model.tooling.brand,\r\n              model.tooling.minStock === null ? null : model.tooling.minStock,\r\n              model.tooling.maxStock === null ? null : model.tooling.maxStock,\r\n              model.tooling.consumtion === null\r\n                ? null\r\n                : model.tooling.consumtion,\r\n              model.tooling.ratio === null ? null : model.tooling.ratio,\r\n              model.tooling.description,\r\n              model.tooling.image_path,\r\n              model.tooling.image_name,\r\n              true,\r\n              true,\r\n              new Date(),\r\n              new Date(),\r\n              model.emp_fup,\r\n              model.emp_fup,\r\n              model.emp_oem_id,\r\n              model.emp_company_id,\r\n            ]);\r\n            console.log(\"test===============================\");\r\n            if (model.supplierData.length > 0) {\r\n              for (let item of model.supplierData) {\r\n                const idSupplier = uuidv4();\r\n                await client.query(_QueryTooling.addSupplierM, [\r\n                  idSupplier,\r\n                  idTooling,\r\n                  item.supplier_id,\r\n                  item.buy_price || 0,\r\n                  item.minimum_order || 0,\r\n                  item.lead_time || 0,\r\n                  item.remark,\r\n                  item.sort || null,\r\n                  true,\r\n                  item.is_active,\r\n                  new Date(),\r\n                  new Date(),\r\n                  model.emp_fup,\r\n                  model.emp_fup,\r\n                  model.emp_oem_id,\r\n                  model.emp_company_id,\r\n                ]);\r\n              }\r\n            }\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            console.log(\"model addToolingM-----\", model);\r\n            /* SELECT * FROM public.tooling_inquiry ORDER BY id ASC \r\n              SELECT * FROM public.inquiry ORDER BY id ASC  */\r\n            const id_inquiry = uuidv4();\r\n            await client.query(_QueryTooling.addInquiry, [\r\n              id_inquiry,\r\n              model.toolingInput.tooling_no,\r\n              model.toolingInput.tooling_remark,\r\n              true,\r\n              true,\r\n              new Date(),\r\n              new Date(),\r\n              model.emp_fup,\r\n              model.emp_fup,\r\n              model.emp_oem_id,\r\n              model.emp_company_id,\r\n            ]);\r\n\r\n            for (let item of model.tooling) {\r\n              await client.query(_QueryTooling.addToolingInquiry, [\r\n                uuidv4(),\r\n                id_inquiry,\r\n                item.tooling_id,\r\n                parseInt(item.amount ? item.amount : 0),\r\n                true,\r\n                true,\r\n                new Date(),\r\n                new Date(),\r\n                model.emp_fup,\r\n                model.emp_fup,\r\n              ]);\r\n            }\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async importExcelTooling(modelSheetArr, user_id, company_id, oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          let tempRes = [];\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            let temp_tooling_brand = await client.query(\r\n              _QueryTooling.getToolingBrand,\r\n              [company_id, oem_id]\r\n            );\r\n\r\n            for (const modelbookArr of modelSheetArr) {\r\n              for (const model of modelbookArr) {\r\n                var isUpdate = false;\r\n\r\n                try {\r\n                  if (\r\n                    (model.tooling_code === null ||\r\n                      model.tooling_code === undefined\r\n                      ? true\r\n                      : model.tooling_code.trim() === \"\") &&\r\n                    (model.tooling_name !== null &&\r\n                      model.tooling_name !== undefined\r\n                      ? model.tooling_name.trim() !== \"\"\r\n                      : false) &&\r\n                    (model.brand !== null && model.brand !== undefined\r\n                      ? model.brand.trim() !== \"\"\r\n                      : false)\r\n                  ) {\r\n                    throw Error(\"กรุณากรอก Tooling Code\");\r\n                  }\r\n\r\n                  if (\r\n                    (model.tooling_code !== null &&\r\n                      model.tooling_code !== undefined\r\n                      ? model.tooling_code.trim() !== \"\"\r\n                      : false) &&\r\n                    (model.tooling_name === null ||\r\n                      model.tooling_name === undefined\r\n                      ? true\r\n                      : model.tooling_name.trim() === \"\") &&\r\n                    (model.brand !== null && model.brand !== undefined\r\n                      ? model.brand.trim() !== \"\"\r\n                      : false)\r\n                  ) {\r\n                    throw Error(\"กรุณากรอก Tooling Name\");\r\n                  }\r\n\r\n                  if (\r\n                    (model.tooling_code !== null &&\r\n                      model.tooling_code !== undefined\r\n                      ? model.tooling_code.trim() !== \"\"\r\n                      : false) &&\r\n                    (model.tooling_name !== null &&\r\n                      model.tooling_name !== undefined\r\n                      ? model.tooling_name.trim() !== \"\"\r\n                      : false) &&\r\n                    (model.brand === null || model.brand === undefined\r\n                      ? true\r\n                      : model.brand.trim() === \"\")\r\n                  ) {\r\n                    throw Error(\"กรุณากรอก Brand\");\r\n                  }\r\n\r\n                  if (\r\n                    model.max_stock < 0 ||\r\n                    model.min_stock < 0 ||\r\n                    model.consumption < 0 ||\r\n                    model.ratio < 0\r\n                  ) {\r\n                    throw Error(\r\n                      \"Max Stock / Min Stock / Consumption / Ratio is not negative\"\r\n                    );\r\n                  }\r\n\r\n                  if (model.max_stock < model.min_stock) {\r\n                    throw Error(\"Min Stock ต้องน้อยกว่า Max Stock\");\r\n                  }\r\n\r\n                  if (\r\n                    model.tooling_code !== null &&\r\n                      model.tooling_code !== undefined\r\n                      ? model.tooling_code.trim() !== \"\"\r\n                      : false\r\n                  ) {\r\n                    var check_temp = await client.query(\r\n                      _QueryTooling.checkTooling,\r\n                      [company_id, oem_id, model.tooling_code.trim()]\r\n                    );\r\n                    if (check_temp.rows.length > 0) {\r\n                      isUpdate = true;\r\n                    }\r\n                  }\r\n\r\n                  if (\r\n                    model.brand !== null && model.brand !== undefined\r\n                      ? model.brand.trim() !== \"\"\r\n                      : false\r\n                  ) {\r\n                    var findToolingBrand = temp_tooling_brand.rows.find(\r\n                      (item) => {\r\n                        return item.brand_name.trim() === model.brand.trim();\r\n                      }\r\n                    );\r\n\r\n                    if (findToolingBrand != undefined) {\r\n                      model.brand_id = findToolingBrand.brand_id;\r\n                    } else {\r\n                      // model.brand_id = null;\r\n                      // if (\r\n                      //   model.brand !== null &&\r\n                      //   model.brand !== undefined &&\r\n                      //   model.brand.trim() !== \"\"\r\n                      // ) {\r\n                      throw Error(\"Brand is not found\");\r\n                      // }\r\n                      // throw Error(\"Brand is not found\");\r\n                    }\r\n                  }\r\n\r\n                  if (isUpdate) {\r\n                    await client.query(_QueryTooling.updateToolingM, [\r\n                      check_temp.rows[0].id,\r\n                      model.tooling_code.trim() || null,\r\n                      model.tooling_name.trim() || null,\r\n                      model.brand_id || null,\r\n                      model.min_stock === null ? null : model.min_stock,\r\n                      model.max_stock === null ? null : model.max_stock,\r\n                      model.consumption === null ? null : model.consumption,\r\n                      model.ratio === null ? null : model.ratio,\r\n                      check_temp.rows[0].tooling_detail,\r\n                      check_temp.rows[0].tooling_path_name,\r\n                      check_temp.rows[0].tooling_img_name,\r\n                      new Date(),\r\n                      user_id,\r\n                      oem_id,\r\n                      company_id,\r\n                    ]);\r\n\r\n                    tempRes.push({\r\n                      model: model.tooling_code.trim(),\r\n                      status: \"Update\",\r\n                      isUpdate: true,\r\n                      status_update: true,\r\n                    });\r\n                  } else {\r\n                    if (\r\n                      (model.tooling_code !== null &&\r\n                        model.tooling_code !== undefined\r\n                        ? model.tooling_code.trim() !== \"\"\r\n                        : false) &&\r\n                      (model.tooling_name !== null &&\r\n                        model.tooling_name !== undefined\r\n                        ? model.tooling_name.trim() !== \"\"\r\n                        : false) &&\r\n                      (model.brand !== null && model.brand !== undefined\r\n                        ? model.brand.trim() !== \"\"\r\n                        : false)\r\n                    ) {\r\n                      let tooling_id = uuidv4();\r\n                      await client.query(_QueryTooling.addToolingM, [\r\n                        tooling_id || null,\r\n                        model.tooling_code.trim() || null,\r\n                        model.tooling_name.trim() || null,\r\n                        null,\r\n                        model.brand_id || null,\r\n                        model.min_stock === null ? null : model.min_stock,\r\n                        model.max_stock === null ? null : model.max_stock,\r\n                        model.consumption === null ? null : model.consumption,\r\n                        model.ratio === null ? null : model.ratio,\r\n                        null,\r\n                        null,\r\n                        null,\r\n                        true,\r\n                        true,\r\n                        new Date(),\r\n                        new Date(),\r\n                        user_id,\r\n                        user_id,\r\n                        oem_id,\r\n                        company_id,\r\n                      ]);\r\n\r\n                      tempRes.push({\r\n                        model: model.tooling_code.trim(),\r\n                        status: \"Add\",\r\n                        isUpdate: false,\r\n                        status_update: true,\r\n                      });\r\n                    }\r\n                  }\r\n                } catch (e) {\r\n                  if (e.message.includes(\"numeric\")) {\r\n                    e.message =\r\n                      \"Max Stock / Min Stock / Consumption / Ratio is not text\";\r\n                  }\r\n                  tempRes.push({\r\n                    model: model.tooling_code,\r\n                    status: false,\r\n                    error: e.message,\r\n                    status_update: false,\r\n                  });\r\n                  console.log(e);\r\n                  await client.query(\"ROLLBACK\");\r\n                  console.log(\"ROLLBACK\");\r\n                  await client.query(\"BEGIN\");\r\n                }\r\n              }\r\n            }\r\n\r\n            if (tempRes.filter((x) => !x.status).length > 0) {\r\n              await client.query(\"ROLLBACK\");\r\n              console.log(\"ROLLBACK\");\r\n            } else {\r\n              await client.query(\"COMMIT\");\r\n              console.log(\"COMMIT All\");\r\n            }\r\n\r\n            resolve(tempRes);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getfilterTooling(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            if (model.under_min_stock === true) {\r\n              let temp_tooling_under_min_stock = await client.query(\r\n                _QueryTooling.getfilterToolingUnderMin,\r\n                [\r\n                  model.company_id,\r\n                  model.oem_id,\r\n                  model.tooling_code || null,\r\n                  model.tooling_name || null,\r\n                  model.supplier_id || null,\r\n                  model.brand_id || null,\r\n                ]\r\n              );\r\n              const allData = [];\r\n\r\n              const dataNotDuplicate = temp_tooling_under_min_stock.rows.filter(\r\n                ({ tooling_code }, index) => {\r\n                  return (\r\n                    temp_tooling_under_min_stock.rows.findIndex(\r\n                      (item) => item.tooling_code === tooling_code\r\n                    ) === index\r\n                  );\r\n                }\r\n              );\r\n\r\n              for (let item of dataNotDuplicate) {\r\n                let data = {\r\n                  amount: item.amount,\r\n                  tooling_id: item.t_id,\r\n                  tooling_path_name: item.tooling_path_name,\r\n                  tooling_img_name: item.tooling_img_name,\r\n                  tooling_code: item.tooling_code,\r\n                  tooling_name: item.tooling_name,\r\n                  brand_id: item.brand_id,\r\n                  brand_name: item.brand_name,\r\n                  min_stock: item.min_stock,\r\n                  max_stock: item.max_stock,\r\n                  consumption: item.consumption,\r\n                };\r\n\r\n                allData.push(data);\r\n              }\r\n              // console.log(allData);\r\n              resolve(allData);\r\n            } else {\r\n              let temp_tooling = await client.query(\r\n                _QueryTooling.getfilterTooling,\r\n                [\r\n                  model.company_id,\r\n                  model.oem_id,\r\n                  model.tooling_code || null,\r\n                  model.tooling_name || null,\r\n                  model.supplier_id || null,\r\n                  model.brand_id || null,\r\n                ]\r\n              );\r\n              const allData = [];\r\n\r\n              const dataNotDuplicate = temp_tooling.rows.filter(\r\n                ({ tooling_code }, index) => {\r\n                  return (\r\n                    temp_tooling.rows.findIndex(\r\n                      (item) => item.tooling_code === tooling_code\r\n                    ) === index\r\n                  );\r\n                }\r\n              );\r\n\r\n              for (let item of dataNotDuplicate) {\r\n                let data = {\r\n                  amount: item.amount,\r\n                  tooling_id: item.t_id,\r\n                  tooling_path_name: item.tooling_path_name,\r\n                  tooling_img_name: item.tooling_img_name,\r\n                  tooling_code: item.tooling_code,\r\n                  tooling_name: item.tooling_name,\r\n                  brand_id: item.brand_id,\r\n                  brand_name: item.brand_name,\r\n                  min_stock: item.min_stock,\r\n                  max_stock: item.max_stock,\r\n                  consumption: item.consumption,\r\n                };\r\n\r\n                allData.push(data);\r\n              }\r\n              // console.log(allData);\r\n              resolve(allData);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async genLotNo(oem_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      function pad(d) {\r\n        if (d < 10) {\r\n          return \"000\" + d.toString();\r\n        } else if (d < 100) {\r\n          return \"00\" + d.toString();\r\n        } else if (d < 1000) {\r\n          return \"0\" + d.toString();\r\n        } else {\r\n          return d.toString();\r\n        }\r\n      }\r\n      try {\r\n        // console.log('genLotNo', oem_id);\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let lotNo = moment(new Date()).format(\"YYYYMMDD\");\r\n            let getLotNo = await client.query(_QueryTooling.getLotNo, [\r\n              oem_id,\r\n              lotNo,\r\n            ]);\r\n            // console.log('getLotNo', getLotNo.rows);\r\n            if (getLotNo.rows.length !== 0) {\r\n              let laslotarr = [];\r\n              let test = getLotNo.rows[0].lot_no;\r\n              for (let i of test) {\r\n                laslotarr.push(i);\r\n              }\r\n              laslotarr.splice(0, 9);\r\n              let key_lot = \"\";\r\n              for (let i of laslotarr) {\r\n                key_lot += i;\r\n              }\r\n              let count = parseFloat(key_lot) + 1;\r\n              lotNo = lotNo + \"-\" + pad(count);\r\n            } else {\r\n              lotNo = lotNo + \"-\" + pad(1);\r\n            }\r\n            resolve(lotNo);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async SaveLotInBound(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let SumAmount = 0;\r\n            let current_amount = 0;\r\n            let amount = 0;\r\n            const getLogLastest = await client.query(\r\n              _QueryTooling.getLogLastest,\r\n              [model.tooling_id, model.oem_id, model.company_id]\r\n            );\r\n            if (getLogLastest.rows.length === 0) {\r\n              current_amount = 0;\r\n            } else {\r\n              if (getLogLastest.rows[0].edit_type === true) {\r\n                current_amount =\r\n                  Number(getLogLastest.rows[0].current_amount) +\r\n                  Number(getLogLastest.rows[0].amount);\r\n              } else {\r\n                current_amount =\r\n                  Number(getLogLastest.rows[0].current_amount) -\r\n                  Number(getLogLastest.rows[0].amount);\r\n              }\r\n            }\r\n            const getTooling = await client.query(_QueryTooling.getTooling, [\r\n              model.tooling_id,\r\n              model.oem_id,\r\n              model.company_id,\r\n            ]);\r\n            if (getTooling.rows.length === 0) {\r\n              throw Error(\"ไม่พบข้อมูล Tooling\");\r\n            }\r\n            if (\r\n              getTooling.rows[0].amount === null ||\r\n              getTooling.rows[0].amount === 0\r\n            ) {\r\n              amount = 0;\r\n              SumAmount = Number(amount) + Number(model.amount);\r\n            } else {\r\n              amount = getTooling.rows[0].amount;\r\n              SumAmount = Number(amount) + Number(model.amount);\r\n            }\r\n            const SaveLotInBound = await client.query(\r\n              _QueryTooling.SaveLotInBound,\r\n              [\r\n                uuidv4(),\r\n                model.lot_no || null,\r\n                model.tooling_id || null,\r\n                null,\r\n                model.edit_type || null,\r\n                model.amount || null,\r\n                model.remark || null,\r\n                new Date(),\r\n                new Date(),\r\n                model.fup,\r\n                model.fup,\r\n                model.oem_id,\r\n                model.company_id,\r\n                current_amount || 0,\r\n              ]\r\n            );\r\n            const updateTooling = await client.query(\r\n              _QueryTooling.updateTooling,\r\n              [\r\n                SumAmount || null,\r\n                model.fup,\r\n                new Date(),\r\n                model.tooling_id || null,\r\n                model.oem_id,\r\n                model.company_id,\r\n              ]\r\n            );\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotInStock(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let getLotInStock = await client.query(\r\n              _QueryTooling.getLotInStock,\r\n              [model.company_id, model.oem_id, model.tooling_id]\r\n            );\r\n            // console.log(getLotInStock.rows);\r\n            for (let index = 0; index < getLotInStock.rows.length; index++) {\r\n              let lot_stock = await client.query(\r\n                _QueryTooling.getSumLotNoReserved,\r\n                [model.tooling_id]\r\n              );\r\n              const temp_new = [];\r\n\r\n              for (let i = 0; i < lot_stock.rows.length; i++) {\r\n                const temp = {\r\n                  lot_no: lot_stock.rows[i].lot_no,\r\n                  amount: lot_stock.rows[i].amount,\r\n                  tooling_id: getLotInStock.rows[i].tooling_id || null,\r\n                  created_date: getLotInStock.rows[i].created_date,\r\n                  remark: getLotInStock.rows[i].remark,\r\n                  purchase_order_id: getLotInStock.rows[i].po_no,\r\n                };\r\n                if (temp.amount > 0) {\r\n                  temp_new.push(temp);\r\n                }\r\n              }\r\n              // console.log(temp_new);\r\n              getLotInStock.rows[index] = temp_new;\r\n            }\r\n            // console.log(getLotInStock.rows[0]);\r\n            resolve(getLotInStock.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotHistory(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let getLotHistory = await client.query(\r\n              _QueryTooling.getLotHistory,\r\n              [model.company_id, model.oem_id, model.tooling_id]\r\n            );\r\n            resolve(getLotHistory.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async SaveLotOutBound(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(model);\r\n\r\n            let current_amount = 0;\r\n            let amount = 0;\r\n            let SumAmount = 0;\r\n            const getLogLastest = await client.query(\r\n              _QueryTooling.getLogLastest,\r\n              [model.tooling_id, model.oem_id, model.company_id]\r\n            );\r\n            // console.log(getLogLastest.rows);\r\n            if (getLogLastest.rows.length === 0) {\r\n              throw Error(\"ไม่พบข้อมูล Inbound\");\r\n            }\r\n            if (getLogLastest.rows[0].edit_type === false) {\r\n              current_amount =\r\n                Number(getLogLastest.rows[0].current_amount) -\r\n                Number(getLogLastest.rows[0].amount);\r\n            } else {\r\n              current_amount =\r\n                Number(getLogLastest.rows[0].current_amount) +\r\n                Number(getLogLastest.rows[0].amount);\r\n            }\r\n            let getTooling = await client.query(_QueryTooling.getTooling, [\r\n              model.tooling_id,\r\n              model.oem_id,\r\n              model.company_id,\r\n            ]);\r\n            if (getTooling.rows.length === 0) {\r\n              throw Error(\"ไม่พบข้อมูล Tooling\");\r\n            }\r\n            if (\r\n              parseFloat(getTooling.rows[0].amount) < parseFloat(model.amount)\r\n            ) {\r\n              throw Error(\"Over Stock!\");\r\n            }\r\n            if (\r\n              getTooling.rows[0].amount === null ||\r\n              getTooling.rows[0].amount === 0\r\n            ) {\r\n              throw Error(\"ไม่มีข้อมูลใน Stock\");\r\n            } else {\r\n              amount = getTooling.rows[0].amount;\r\n              SumAmount = Number(amount) - Number(model.amount);\r\n            }\r\n\r\n            if (SumAmount < 0) {\r\n              SumAmount = 0;\r\n            }\r\n            let lot_stock = await client.query(\r\n              _QueryTooling.getSumLotNoReserved,\r\n              [model.tooling_id]\r\n            );\r\n            const lot_stock2 = [];\r\n            for (let i of lot_stock.rows) {\r\n              if (i.amount > 0) {\r\n                lot_stock2.push(i);\r\n              }\r\n            }\r\n            const lot_noArr = lot_stock2.sort(\r\n              (a, b) => moment(a.created_date) - moment(b.created_date)\r\n            );\r\n            let b_amount = model.amount;\r\n            for (let lot of lot_noArr) {\r\n              if (b_amount > 0) {\r\n                let cut = 0;\r\n                /*    console.log(b_amount); */\r\n                let balance = lot.amount - b_amount;\r\n                if (balance < 0) {\r\n                  b_amount = balance * -1;\r\n                  cut = lot.amount;\r\n                } else {\r\n                  cut = b_amount;\r\n                  b_amount = 0;\r\n                }\r\n                //console.log(\"ตัด: \", cut, \"จาก lot \", lot.fg_lot_no);\r\n\r\n                let SaveLotOutBound = await client.query(\r\n                  _QueryTooling.SaveLotOutBound,\r\n                  [\r\n                    uuidv4(),\r\n                    lot.lot_no || null,\r\n                    model.tooling_id || null,\r\n                    null,\r\n                    false,\r\n                    cut || null,\r\n                    model.remark || null,\r\n                    new Date(),\r\n                    new Date(),\r\n                    model.fup,\r\n                    model.fup,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                    current_amount || null,\r\n                  ]\r\n                );\r\n              }\r\n            }\r\n\r\n            // console.log(SumAmount);\r\n            let updateTooling = await client.query(\r\n              _QueryTooling.updateTooling,\r\n              [\r\n                SumAmount || null,\r\n                model.fup,\r\n                new Date(),\r\n                model.tooling_id || null,\r\n                model.oem_id,\r\n                model.company_id,\r\n              ]\r\n            );\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getlog_detailTooling(tooling_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp_sum = await client.query(_QueryTooling.getsumHistory, [\r\n            tooling_id,\r\n          ]);\r\n          const temp_new = [];\r\n          for (let i = 0; i < temp_sum.rows.length; i++) {\r\n            if (temp_sum.rows[i].amount > 0) {\r\n              let temp_sum_detail = await client.query(\r\n                _QueryTooling.getsumHistoryDetail,\r\n                [temp_sum.rows[i].lot_no, tooling_id]\r\n              );\r\n              // console.log(temp_sum_detail.rows)\r\n              const data = {\r\n                amount: temp_sum.rows[i].amount,\r\n                create_date: temp_sum.rows[i].create_date,\r\n                lot_no: temp_sum.rows[i].lot_no,\r\n              };\r\n              temp_new.push(data);\r\n            }\r\n          }\r\n          // console.log(temp_new)\r\n          resolve(temp_new);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async SaveLotOutBound_FIFO(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(model);\r\n            let current_amount = 0;\r\n            let amount = 0;\r\n            let SumAmount = 0;\r\n            let temp_sum_detail = await client.query(\r\n              _QueryTooling.getsumHistoryDetail,\r\n              [model.select, model.id]\r\n            );\r\n            // console.log(temp_sum_detail.rows);\r\n            let getTooling = await client.query(_QueryTooling.getTooling, [\r\n              model.tooling_id,\r\n              model.oem_id,\r\n              model.company_id,\r\n            ]);\r\n            if (getTooling.rows.length === 0) {\r\n              throw Error(\"ไม่พบข้อมูล Tooling\");\r\n            }\r\n            let lot_stock = await client.query(\r\n              _QueryTooling.getSumLotNoReserved,\r\n              [model.tooling_id]\r\n            );\r\n            let lot_target = lot_stock.rows.filter((e) => {\r\n              return e.lot_no === model.select;\r\n            });\r\n            let new_amount = lot_target[0].amount - Number(model.amount);\r\n            if (new_amount < 0) {\r\n              throw Error(\"Over Stock\");\r\n            } else {\r\n              const getLogLastest = await client.query(\r\n                _QueryTooling.getLogLastest,\r\n                [model.tooling_id, model.oem_id, model.company_id]\r\n              );\r\n              // console.log(getLogLastest.rows);\r\n              if (getLogLastest.rows.length === 0) {\r\n                throw Error(\"ไม่พบข้อมูล Inbound\");\r\n              }\r\n              if (getLogLastest.rows[0].edit_type === false) {\r\n                current_amount =\r\n                  Number(getLogLastest.rows[0].current_amount) -\r\n                  Number(getLogLastest.rows[0].amount);\r\n              } else {\r\n                current_amount =\r\n                  Number(getLogLastest.rows[0].current_amount) +\r\n                  Number(getLogLastest.rows[0].amount);\r\n              }\r\n              if (\r\n                getTooling.rows[0].amount === null ||\r\n                getTooling.rows[0].amount === 0\r\n              ) {\r\n                amount = 0;\r\n                SumAmount = Number(amount) - Number(model.amount);\r\n              } else {\r\n                amount = getTooling.rows[0].amount;\r\n                SumAmount = Number(amount) - Number(model.amount);\r\n              }\r\n              if (SumAmount < 0) {\r\n                SumAmount = 0;\r\n              }\r\n              let SaveLotOutBound = await client.query(\r\n                _QueryTooling.SaveLotOutBound,\r\n                [\r\n                  uuidv4(),\r\n                  model.select || null,\r\n                  model.tooling_id || null,\r\n                  null,\r\n                  false,\r\n                  model.amount || null,\r\n                  model.remark || null,\r\n                  new Date(),\r\n                  new Date(),\r\n                  model.fup,\r\n                  model.fup,\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                  current_amount || null,\r\n                ]\r\n              );\r\n              // console.log(SumAmount);\r\n              let updateTooling = await client.query(\r\n                _QueryTooling.updateTooling,\r\n                [\r\n                  SumAmount || null,\r\n                  model.fup,\r\n                  new Date(),\r\n                  model.tooling_id || null,\r\n                  model.oem_id,\r\n                  model.company_id,\r\n                ]\r\n              );\r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async getToolingReceiveOption() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp_tooling_receive_status = await client.query(\r\n              _QueryTooling.getToolingReceiveStatus,\r\n              []\r\n            );\r\n\r\n            resolve(temp_tooling_receive_status.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delToolingPOById(toolingPO_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(_QueryTooling.deleteToolingPOById, [\r\n            toolingPO_id,\r\n          ]);\r\n\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  /* async getToolingBySupplierId(toolingSupplier_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n\r\n          let temp = await client.query(_QueryTooling.getToolingBySupplierId, [\r\n            toolingSupplier_id,\r\n          ]);\r\n\r\n\r\n          let po_no = {\r\n            tooling_receive: temp.rows,\r\n            po_no: temp.rows[0].po_no,\r\n            po_id: temp.rows[0].po_id\r\n          }\r\n\r\n          resolve(po_no);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } */\r\n\r\n  async getToolingBySupplierId(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(\r\n            _QueryTooling.getToolingBySupplierIdAndPOID,\r\n            [model.toolingSupplier_id, model.tooling_poId]\r\n          );\r\n\r\n          let po_no = {\r\n            tooling_receive: temp.rows,\r\n            po_no: temp.rows[0].po_no,\r\n            po_id: temp.rows[0].po_id,\r\n            contact_name: temp.rows[0].contact_name,\r\n            contact_tel: temp.rows[0].contact_tel,\r\n            contact_fax: temp.rows[0].contact_fax,\r\n          };\r\n\r\n          resolve(po_no);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addAmountOfTooling(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            for (let item of model.toolingReceive) {\r\n              let SumAmount = 0;\r\n              let current_amount = 0;\r\n              let amount = 0;\r\n              if (item.is_receive) continue;\r\n              // current_amount = Number(getLogLastest.rows[0].current_amount) - Number(getLogLastest.rows[0].amount);\r\n              const getLogLastest = await client.query(\r\n                _QueryTooling.getLogLastest,\r\n                [item.tooling_id, model.oem_id, model.company_id]\r\n              );\r\n              if (getLogLastest.rows.length === 0) {\r\n                current_amount = 0;\r\n              } else {\r\n                if (getLogLastest.rows[0].edit_type === true) {\r\n                  current_amount =\r\n                    Number(getLogLastest.rows[0].current_amount) +\r\n                    Number(getLogLastest.rows[0].amount);\r\n                } else {\r\n                  current_amount =\r\n                    Number(getLogLastest.rows[0].current_amount) -\r\n                    Number(getLogLastest.rows[0].amount);\r\n                }\r\n              }\r\n              const getTooling = await client.query(_QueryTooling.getTooling, [\r\n                item.tooling_id,\r\n                model.oem_id,\r\n                model.company_id,\r\n              ]);\r\n              if (getTooling.rows.length === 0) {\r\n                throw Error(\"ไม่พบข้อมูล Tooling\");\r\n              }\r\n              if (\r\n                getTooling.rows[0].amount === null ||\r\n                getTooling.rows[0].amount === 0\r\n              ) {\r\n                amount = 0;\r\n                SumAmount = Number(amount) + Number(item.amount);\r\n              } else {\r\n                amount = getTooling.rows[0].amount;\r\n                SumAmount = Number(amount) + Number(item.amount);\r\n              }\r\n              // console.log(\"item.value\", model);\r\n              const receive_amount =\r\n                item.value_add_amount !== null && item.value_add_amount !== \"\"\r\n                  ? parseFloat(item.value_add_amount)\r\n                  : 0;\r\n              if (receive_amount > 0) {\r\n                const lot_no = await this.genLotNo(model.oem_id);\r\n                const SaveLotInBound = await client.query(\r\n                  _QueryTooling.SaveLotInBound,\r\n                  [\r\n                    uuidv4(),\r\n                    lot_no || null,\r\n                    item.tooling_id || null,\r\n                    item.po_id,\r\n                    true, // in\r\n                    receive_amount || null,\r\n                    null,\r\n                    new Date(),\r\n                    new Date(),\r\n                    model.fup,\r\n                    model.fup,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                    current_amount || 0,\r\n                  ]\r\n                );\r\n                const updateTooling = await client.query(\r\n                  _QueryTooling.updateTooling,\r\n                  [\r\n                    SumAmount || null,\r\n                    model.fup,\r\n                    new Date(),\r\n                    item.tooling_id || null,\r\n                    model.oem_id,\r\n                    model.company_id,\r\n                  ]\r\n                );\r\n                let is_receive = false;\r\n                let receive_status = \"0e6bbbfb-12fd-4136-83ad-4131d2a5096d\";\r\n                const getPO_Inquiry = await client.query(\r\n                  _QueryTooling.getPO_inquiryByToolingId,\r\n                  [item.tooling_id, item.tooling_supplier_id]\r\n                );\r\n                // console.log('getPO_Inquiry.rows', getPO_Inquiry.rows);\r\n                let sum_amount =\r\n                  parseInt(getPO_Inquiry.rows[0].receive_amount || 0) +\r\n                  parseInt(item.value_add_amount || 0);\r\n                // console.log('sum_amount', sum_amount);\r\n                if (parseInt(item.amount) == sum_amount) {\r\n                  is_receive = true;\r\n                  receive_status = \"f838dc87-5636-4e1c-acd2-01a69f76544d\";\r\n                }\r\n                if (sum_amount == 0) {\r\n                  receive_status = \"fc3bd39f-841a-4de6-ba7c-37582e299a26\";\r\n                }\r\n                const updatePO_Inquiry = await client.query(\r\n                  _QueryTooling.updatePO_inquiry,\r\n                  [\r\n                    item.tooling_id,\r\n                    parseInt(item.amount),\r\n                    new Date(),\r\n                    is_receive,\r\n                    sum_amount,\r\n                    receive_status, // receive status\r\n                    model.fup,\r\n                    item.tooling_supplier_id,\r\n                    new Date(),\r\n                  ]\r\n                );\r\n                // console.log('sum_amount', sum_amount);\r\n              }\r\n            }\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetAmountTooling(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let temp = await client.query(_QueryTooling.GetAmountTooling, [id]);\r\n          resolve(temp.rows[0]);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async sendEmailToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          // await client.query(\"BEGIN\");\r\n          console.log(\"model\", model);\r\n          let getInquiry = await client.query(\r\n            _QueryTooling.getToolingInquiryById2,\r\n            [model.toolingInq.id]\r\n          );\r\n\r\n          console.log(\"getInquiry\", getInquiry.rows);\r\n          let arrList = [];\r\n          for (let item of getInquiry.rows) {\r\n            let check = arrList.filter((i) => {\r\n              return i.sup_id === item.supplier_id;\r\n            });\r\n            if (check.length === 0) {\r\n              arrList.push({\r\n                sup_id: item.supplier_id,\r\n                sup_name: item.supplier_name,\r\n                sup_email: item.supplier_email,\r\n                tooling_list: [item],\r\n              });\r\n            } else {\r\n              let index = arrList.findIndex(\r\n                (x) => x.sup_id === item.supplier_id\r\n              );\r\n              if (index > -1) {\r\n                arrList[index].tooling_list.push(item);\r\n              }\r\n            }\r\n          }\r\n          // console.log('arrList', arrList);\r\n\r\n          if (arrList.length < 0) {\r\n            throw Error(\"Not found data\");\r\n          }\r\n\r\n          for (let item of arrList) {\r\n            if (item.sup_email === null || item.sup_email === \"\") {\r\n              for (let item2 of item.tooling_list) {\r\n                let name = item2.tooling_name;\r\n                throw Error(\"ไม่มี email Supplier ของ Tooling: \" + name);\r\n              }\r\n            }\r\n          }\r\n          // Send With Outlook\r\n          /* var transporter = nodemailer.createTransport({\r\n            service: \"hotmail\",\r\n            auth: {\r\n              user: \"phirawit_16@outlook.com\",\r\n              pass: \"0862304601Outlook\",\r\n            },\r\n          }); */\r\n\r\n          // Send With SMTP No Authen\r\n          // var transporter = nodemailer.createTransport({\r\n          //   host: \"smtp.gmail.com\",\r\n          //   port: 465,\r\n          //   secure: true,\r\n          // });\r\n          var nodemailer = __webpack_require__(/*! nodemailer */ \"nodemailer\");\r\n          // Send With Gmail\r\n          var transporter = nodemailer.createTransport({\r\n            service: \"gmail\",\r\n            auth: {\r\n              user: \"peeza5050@gmail.com\",\r\n              pass: \"jqwfdrmmjiwfpcxi\",\r\n            },\r\n          });\r\n\r\n          for (let item of arrList) {\r\n            let string_table = `<table style=\"width:100%; border: 1px solid black; border-collapse: collapse;\">\r\n            <tr>\r\n            <th style=\"border:1px solid black;padding:5px; width:40%\">รายการ</th>\r\n            <th style=\"border:1px solid black;padding:5px; width:20%\">จำนวนที่ต้องการ</th>\r\n            <th style=\"border:1px solid black;padding:5px; width:20%\">สต็อก</th>\r\n            <th style=\"border:1px solid black;padding:5px; width:20%\">ราคา</th>\r\n            </tr>`;\r\n            for (let item2 of item.tooling_list) {\r\n              string_table += `\r\n              <tr>\r\n              <td colSpan = 1 style=\"border:1px solid black;padding:5px\">${item2.tooling_name\r\n                } # ${item2.tooling_code}</td>\r\n              <td colSpan = 1 style=\"border:1px solid black;padding:5px; text-align:right\">${item2.amount\r\n                  .toString()\r\n                  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\r\n              <td colSpan = 1 style=\"border:1px solid black;padding:5px; text-align:right\"></td>\r\n              <td colSpan = 1 style=\"border:1px solid black;padding:5px; text-align:right\"></td>\r\n            </tr>\r\n              `;\r\n            }\r\n            string_table += `</table>`;\r\n\r\n            var mailOptions = {\r\n              from: `peeza5050@gmail.com`,\r\n              to: item.sup_email,\r\n              subject: `Tooling Price & Cost Inquiry (Date : ${moment(\r\n                new Date()\r\n              ).format(\"DD/MM/YYYY\")})`,\r\n              html:\r\n                `Dear ${item.sup_name},<br>\r\n                <br>\r\n                Please find our inquiry as per attach file.<br>\r\n                Please kindly quote the price, including confirm available stock and lead time in each item and send quoatation to us.<br>\r\n                <br>\r\n                เรียน ${item.sup_name}<br>\r\n                รบกวนเช็คและเสนอราคาตามรายการที่สั่งดังนี้<br>\r\n                กรุณาเสนอราคาและแจ้งสต็อกคงเหลือและระยะเวลาในการรอของในแต่ละรายการและส่งใบเสนอราคาให้กับทางเรา<br>\r\n                <br>\r\n                ` +\r\n                string_table +\r\n                `\r\n                <br>\r\n                Best regards,<br>\r\n                SHIMIZU Manufacturing Co., Ltd.<br>`,\r\n            };\r\n\r\n            transporter.sendMail(mailOptions, function (error, info) {\r\n              if (error) {\r\n                console.log(error);\r\n              } else {\r\n                console.log(\"Email sent: \" + info.response);\r\n              }\r\n              transporter.close();\r\n            });\r\n          }\r\n\r\n          await client.query(\"COMMIT\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          await client.query(\"ROLLBACK\");\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          if (!model.company_id || model.company_id === \"\") {\r\n            throw Error(\"No company_id\");\r\n          }\r\n          if (!model.oem_id || model.oem_id === \"\") {\r\n            throw Error(\"No oem_id\");\r\n          }\r\n          let temp = await client.query(_QueryTooling.filterInquiry, [\r\n            model.company_id,\r\n            model.oem_id,\r\n          ]);\r\n          resolve(temp.rows);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetPOByInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          if (!model.company_id || model.company_id === \"\") {\r\n            throw Error(\"No company_id\");\r\n          }\r\n          if (!model.oem_id || model.oem_id === \"\") {\r\n            throw Error(\"No oem_id\");\r\n          }\r\n          if (!model.inquiry_id || model.inquiry_id === \"\") {\r\n            throw Error(\"No inquiry_id\");\r\n          }\r\n\r\n          \r\n\r\n          //console.log(model.inquiry_id);\r\n          let tempInquiryList = await client.query(\r\n            _QueryTooling.filterInquiryListByInquiryId,\r\n            [model.inquiry_id]\r\n          );\r\n          \r\n          let ckecked_po_id = [];\r\n\r\n          if (model.po_id && model.po_id !== \"\") {\r\n            ckecked_po_id = await client.query(\r\n              _QueryTooling.ckecked_po_id,\r\n              [model.po_id]\r\n            );\r\n           // SELECT * FROM po_inquiry WHERE po_id = '88e6e73a-a8f0-4385-87d3-4cc4daefac1e'\r\n\r\n           if (ckecked_po_id.rows.length > 0) {\r\n            tempInquiryList.rows = tempInquiryList.rows.filter((el)=>{\r\n              return el.inquiry_id === ckecked_po_id.rows[0].inquiry_id && el.tooling_id === ckecked_po_id.rows[0].tooling_id\r\n            });\r\n          }\r\n          }\r\n\r\n          \r\n          console.log(tempInquiryList);\r\n          let temp_all_totalData = {\r\n            toolingList: [],\r\n            supplierList: [],\r\n            data_forsave: [],\r\n          };\r\n\r\n          const tempTooling_Unique = [\r\n            ...new Map(\r\n              tempInquiryList.rows.map((item) => [item[\"tooling_id\"], item])\r\n            ).values(),\r\n          ];\r\n\r\n          const tempSupplier_Unique = [\r\n            ...new Map(\r\n              tempInquiryList.rows.map((item) => [item[\"supplier_id\"], item])\r\n            ).values(),\r\n          ];\r\n\r\n          if (tempTooling_Unique.length > 0) {\r\n            const tooling_sort = tempTooling_Unique.sort((a, b) =>\r\n              a.tooling_code.localeCompare(b.tooling_code)\r\n            );\r\n            temp_all_totalData.toolingList = tooling_sort;\r\n          }\r\n\r\n          if (tempSupplier_Unique.length > 0) {\r\n            const tooling_sort = tempSupplier_Unique.sort((a, b) =>\r\n              a.supplier_name.localeCompare(b.supplier_name)\r\n            );\r\n            temp_all_totalData.supplierList = tooling_sort;\r\n          }\r\n\r\n          let tempPoInquiryDarf = await client.query(\r\n            _QueryTooling.filterPoDrafByInquryID,\r\n            [model.inquiry_id]\r\n          );\r\n\r\n          for (const el of temp_all_totalData.toolingList) {\r\n            for (const el2 of temp_all_totalData.supplierList) {\r\n              const element = {};\r\n              element[\"id\"] = el2.id;\r\n              element[\"amount\"] = el2.amount;\r\n              element[\"created_by\"] = el2.created_by;\r\n              element[\"created_date\"] = el2.created_date;\r\n              element[\"inquiry_id\"] = el2.inquiry_id;\r\n              element[\"inquiry_no\"] = el2.inquiry_no;\r\n              element[\"is_active\"] = el2.is_active;\r\n              element[\"is_use\"] = el2.is_use;\r\n              element[\"supplier_id\"] = el2.supplier_id;\r\n              element[\"supplier_name\"] = el2.supplier_name;\r\n              element[\"tooling_code\"] = el2.tooling_code;\r\n              element[\"tooling_id\"] = el2.tooling_id;\r\n              element[\"tooling_name\"] = el2.tooling_name;\r\n              element[\"tooling_relation_supplier\"] =\r\n                el2.tooling_relation_supplier;\r\n              element[\"updated_by\"] = el2.updated_by;\r\n              element[\"updated_date\"] = el2.updated_date;\r\n              element[\"is_select\"] = false;\r\n              element[\"duo_id\"] = el2.tooling_relation_supplier;\r\n              element[\"price\"] = 0;\r\n\r\n              if (\r\n                el2.tooling_supplier_id === el.tooling_supplier_id &&\r\n                el2.tooling_id === el.tooling_id\r\n              ) {\r\n                const listofDraf = tempPoInquiryDarf.rows.filter((el_draf) => {\r\n                  return el_draf.id === el.tooling_relation_supplier;\r\n                });\r\n\r\n                if (listofDraf.length > 0) {\r\n                  element[\"is_select\"] = listofDraf[0].is_select;\r\n                  element[\"amount\"] = listofDraf[0].amount;\r\n                  el.amount = listofDraf[0].amount; //;\r\n                  element[\"price\"] =\r\n                    listofDraf[0].price === undefined ? 0 : listofDraf[0].price;\r\n                }\r\n                temp_all_totalData.data_forsave.push(element);\r\n              }\r\n            }\r\n          }\r\n\r\n          console.log(temp_all_totalData);\r\n\r\n          resolve(temp_all_totalData);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async saveDrafPOByInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let tempData = model;\r\n\r\n          if (tempData.length > 0) {\r\n            for (const elementData of tempData) {\r\n              const tempPoDrafCheck = await client.query(\r\n                _QueryTooling.filterPoDrafByInquryID,\r\n                [elementData.inquiry_id]\r\n              );\r\n\r\n              let fineOldDraf = tempPoDrafCheck.rows.filter((el) => {\r\n                return (\r\n                  el.inquiry_id === elementData.inquiry_id &&\r\n                  el.id === elementData.duo_id\r\n                );\r\n              });\r\n\r\n              if (fineOldDraf.length === 0) {\r\n                //add mode\r\n                const get_uuid = uuidv4();\r\n                await client.query(_QueryTooling.addPoDrafByInquryID, [\r\n                  get_uuid,\r\n                  elementData.inquiry_id,\r\n                  elementData.tooling_id,\r\n                  elementData.amount,\r\n                  elementData.price,\r\n                  elementData.supplier_id,\r\n                  elementData.is_select,\r\n                  new Date(),\r\n                  new Date(),\r\n                ]);\r\n              } else {\r\n                /// update mode\r\n                await client.query(_QueryTooling.updatePoDrafByInquryID, [\r\n                  elementData.duo_id,\r\n                  elementData.amount,\r\n                  elementData.price,\r\n                  elementData.is_select,\r\n                  new Date(),\r\n                ]);\r\n              }\r\n            }\r\n          }\r\n\r\n          console.log(tempData);\r\n\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async genPOToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let tempData = model.data_forsave.filter((el) => {\r\n            return el.is_select === true;\r\n          });\r\n\r\n          if (tempData.length > 0) {\r\n           \r\n            for (const element_po_inquiry of tempData) {\r\n\r\n              let poInquiry = await client.query(\r\n                _QueryTooling.getPoInquiry,\r\n  \r\n                [model.company_id, model.oem_id]\r\n              );\r\n  \r\n              let newPo = null;\r\n  \r\n              if (poInquiry.rows.length === 0) {\r\n                newPo = `PO${moment(new Date())\r\n                  .add(543, \"years\")\r\n                  .format(\"YYMM00001\")}`;\r\n              } else {\r\n                newPo = generateNextPOCode(poInquiry.rows[0].po_no);\r\n              }\r\n  \r\n                let gen_po_id = uuidv4();\r\n  \r\n              await client.query(_QueryTooling.addPoInquiry, [\r\n                gen_po_id,\r\n                true,\r\n                true,\r\n                new Date(),\r\n                new Date(),\r\n                model.user_id,\r\n                model.user_id,\r\n                model.oem_id,\r\n                model.company_id,\r\n                newPo,\r\n              ]);\r\n\r\n              \r\n\r\n              let gen_po_inquiry_id = uuidv4();\r\n              await client.query(_QueryTooling.addListPoInquiry, [\r\n                gen_po_inquiry_id,\r\n                element_po_inquiry.inquiry_id,\r\n                element_po_inquiry.tooling_id,\r\n                element_po_inquiry.amount,\r\n                element_po_inquiry.price,\r\n                false,\r\n                0,\r\n                'fc3bd39f-841a-4de6-ba7c-37582e299a26',\r\n                true,\r\n                true,\r\n                new Date(),\r\n                new Date(),\r\n                model.user_id,\r\n                model.user_id,\r\n                gen_po_id,\r\n                element_po_inquiry.supplier_id,\r\n                null,\r\n                new Date()\r\n              ]);\r\n\r\n            }\r\n\r\n         \r\n          }\r\n\r\n          console.log(model);\r\n\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updatePOToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n\r\n          console.log(model);\r\n\r\n\r\n          for (const element_po_inquiry of model.data_forsave) {\r\n            await client.query(_QueryTooling.updatePOToolingInquiry, [\r\n              element_po_inquiry.tooling_id,\r\n              element_po_inquiry.inquiry_id,\r\n              model.po_id,\r\n              element_po_inquiry.amount,\r\n              element_po_inquiry.price,\r\n              model.issue_date,\r\n            ]);\r\n          }\r\n\r\n\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async finePOToolingInquiry(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          let finePOToolingInquiry = await client.query(\r\n            _QueryTooling.finePOToolingInquiry,\r\n            [id]\r\n          );\r\n\r\n          if (finePOToolingInquiry.rows.length === 0) {\r\n            throw Error(\"ไม่พบข้อมูล\");\r\n          }\r\n\r\n\r\n\r\n          resolve(finePOToolingInquiry.rows[0]);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async delPOToolingInquiry(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\nfunction generateNextPOCode(po_no) {\r\n  const date = new Date();\r\n  const year = (date.getFullYear() + 543).toString().substr(-2);\r\n  const month = (date.getMonth() + 1).toString().padStart(2, \"0\");\r\n\r\n\r\n  const matches = po_no.slice(6);\r\n\r\n  /* if (!matches) {\r\n\r\n    throw new Error(\"Invalid order product code\");\r\n  } */\r\n\r\n  /*     const orderYear = matches[1];\r\n    const orderMonth = matches[2]; */\r\n  const PONumber = parseInt(matches) + 1;\r\n\r\n\r\n\r\n  let size = 5;\r\n/* \r\n  if (PONumber < 9) {\r\n    size = 5;\r\n  } else if (PONumber >= 10 && PONumber < 99) {\r\n    size = 4;\r\n  } else if (PONumber >= 100 && PONumber < 999) {\r\n    size = 3;\r\n  } else if (PONumber >= 100 && PONumber < 999) {\r\n    size = 2;\r\n  } else if (PONumber >= 1000 && PONumber < 9999) {\r\n    size = 1;\r\n  } else {\r\n    size = 0;\r\n  } */\r\n  /*  switch (PONumber) {\r\n     case (PONumber < 9):\r\n       size = 4 ;\r\n       break;\r\n     case (PONumber >= 10 && PONumber < 99):\r\n       size = 3 ;\r\n       break;   \r\n     case (PONumber >= 100 && PONumber < 999):\r\n       size = 2 ;\r\n       break;    \r\n     case (PONumber >= 1000 && PONumber < 9999):\r\n       size = 1 ;\r\n       break;                        \r\n     default:\r\n       size = 0 ;\r\n       break;\r\n   } */\r\n  let num = PONumber.toString();\r\n\r\n  while (num.length < size) { num = \"0\" + num; }\r\n\r\n\r\n  return `PO${year}${month}${num}`;\r\n\r\n}\r\nmodule.exports = toolingService;\r\n\n\n//# sourceURL=webpack:///./app/service/toolingService.js?");

/***/ }),

/***/ "./app/service/trackingTagService.js":
/*!*******************************************!*\
  !*** ./app/service/trackingTagService.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryTrackingTag = __webpack_require__(/*! ../query/queryTrackingTag.json */ \"./app/query/queryTrackingTag.json\");\r\n\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\nclass trackingTagService {\r\n\r\n    /* async addTrackingTag(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                await client.query('BEGIN');\r\n                var productNo = await client.query(_QueryTrackingTag.checkedNameProduct, [model.no, model.oem_id]);\r\n                \r\n                var TagId = await client.query(_QueryTrackingTag.checkTagId);\r\n                \r\n                if (productNo.rows.length > 0) {\r\n                  reject({\r\n                    message: \"Can't fine Part No\"+model.no,\r\n                  });\r\n                }\r\n\r\n                let id = uuidv4();\r\n                let taggingId = TagId.split(\"_\");\r\n                if (model.company_id === null) {\r\n                  reject({\r\n                    message: \"company_id cannot be null\",\r\n                  });\r\n                }\r\n                let supplier_id = uuidv4();\r\n               let temp_sort = await client.query(_QuerySupplier.CheckSort,[sort])\r\n                await client.query(_QuerySupplier.add, [\r\n                  supplier_id,\r\n                  model.company_id,\r\n                  model.name || null,\r\n                  temp_sort+1,\r\n                  model.detail || null,\r\n                  model.contact_tel || null,\r\n                  model.contact_fax || null,\r\n                  model.supplier_email || null,\r\n                  model.supplier_email_person || null,\r\n                  model.remark || null,\r\n                  model.contact_name || null,\r\n                  true\r\n                ]);\r\n                await client.query('COMMIT')\r\n                console.log(\"COMMIT\");\r\n                resolve(taggingId[0]);\r\n              } catch (e) {\r\n                await client.query('ROLLBACK')\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } */\r\n    \r\n      async addTrackingTag(listModel, user_id) {\r\n        return new Promise((async (resolve, reject) => {\r\n            try {\r\n                (async () => {\r\n                    var client = new Client(connectionConfig)\r\n                    await client.connect()\r\n                    try{\r\n                    await client.query('BEGIN');\r\n                    let id_list =[]\r\n                    for (const model of listModel) {\r\n                      try {\r\n                        var productNo = await client.query(_QueryTrackingTag.checkProductName, [model.tracking_name, model.oem_id]);\r\n                       \r\n                        if (productNo.rows.length <= 0) {\r\n                            throw Error(\"Can't Fine Product\");\r\n                        }\r\n                        if (  model.tracking_name ===\"\") {\r\n                            throw Error(\"Can't Fine tracking_name\");\r\n                        }\r\n                        if  (model.amount ===\"\") {\r\n                          throw Error(\"Can't Fine amount\");\r\n                        }\r\n                        if (model.product_id ===\"\") {\r\n                            throw Error(\"Can't Fine product_id\");\r\n                        }\r\n                        \r\n                        var TagId = await client.query(_QueryTrackingTag.getTagId);\r\n                        let taggingId = null;\r\n                        let increaseTagId = null;\r\n                        if (TagId.rows.length  <=  0) {\r\n                           increaseTagId = 0;\r\n                        }else{\r\n                         taggingId = TagId.rows[0].tag_id.split(\"_\");\r\n\r\n                         increaseTagId = Number(taggingId[1]) +1;\r\n                        }\r\n                     \r\n                      \r\n                        let date = moment(new Date()).format(\"YYYYMMDD\");  \r\n                        /* moment(new Date()) */\r\n                        var section = await client.query(_QueryTrackingTag.getSection); \r\n                       \r\n                        for (const iterator of section.rows) {\r\n                          let id = uuidv4();\r\n                          await client.query(_QueryTrackingTag.add,[\r\n                             id,\r\n                             model.tracking_name || null,\r\n                             0, \r\n                             moment(new Date()), \r\n                             model.product_id || null, \r\n                             iterator.id, \r\n                             true, \r\n                             true, \r\n                             false,\r\n                             date+\"_\"+increaseTagId\r\n                            ]);\r\n                           \r\n                        }\r\n                            id_list.push({\r\n                              \"tag_no\":date+\"_\"+increaseTagId,\r\n                              \"part_no\":model.tracking_name,\r\n                              \"status\":true\r\n                            })\r\n\r\n                        /* await client.query('COMMIT') */\r\n                        console.log(\"COMMIT\")\r\n                       /*  resolve(); */\r\n                    } catch (e) {\r\n                      id_list.push({\r\n                        \"tag_no\":null,\r\n                        \"status\":false\r\n                      })\r\n                       /*  await client.query('ROLLBACK') */\r\n                        reject(e);\r\n                       console.log(e)\r\n                    } \r\n\r\n\r\n                    }\r\n\r\n                    if ((id_list.filter(x => !x.status)).length > 0) {\r\n                      await client.query('ROLLBACK')\r\n                      console.log(\"ROLLBACK\")\r\n                    }else{\r\n                      await client.query('COMMIT')\r\n                      console.log(\"COMMIT All\")\r\n                     \r\n                    }\r\n                   \r\n         \r\n                    resolve(id_list);\r\n                  } catch (e) {\r\n                    reject(e);\r\n                  } finally {\r\n                    await client.end();\r\n                  }\r\n\r\n                })().catch(e => {\r\n                    console.log(e);\r\n                    throw Error(e)\r\n                })\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        }))\r\n    }\r\n    \r\n     /*  async updateSupplier(model, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                await client.query(_QuerySupplier.update, [\r\n                 \r\n                  model.name || null,\r\n                 \r\n                  model.detail || null,\r\n                  model.contact_tel || null,\r\n                  model.contact_fax || null,\r\n                  model.supplier_email || null,\r\n                  model.supplier_email_person || null,\r\n                  model.remark || null,\r\n                  model.contact_name || null,\r\n                  model.id\r\n                 \r\n                ]);\r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                await client.query(\"ROLLBACK\");\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } */\r\n    \r\n      \r\n      /* async delSupplier(supplier_id, user_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                await client.query(_QuerySupplier.del, [supplier_id]);\r\n                console.log(\"COMMIT\");\r\n                resolve(true);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } */\r\n      \r\n      /* async findByIdSupplier(supplier_id) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                let temp = await client.query(_QuerySupplier.findById, [supplier_id]);\r\n                if (temp.rows.length > 0) {\r\n                  resolve(temp.rows[0]);\r\n                } else {\r\n                  reject(\"not found\");\r\n                }\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } */\r\n    \r\n     /*  async filterSupplier(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                console.log(model);\r\n                let name = model.name ? model.name : null,\r\n                  company_id = model.company_id\r\n                    ? model.company_id\r\n                    : null;\r\n    \r\n                var temp = await client.query(_QuerySupplier.filter, [\r\n                  name,\r\n                  company_id,\r\n                ]);\r\n                resolve(temp.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      } */\r\n\r\n      /* async productionLineAll(model) {\r\n        return new Promise(async (resolve, reject) => {\r\n          try {\r\n            (async () => {\r\n              var client = new Client(connectionConfig);\r\n              await client.connect();\r\n              try {\r\n                var temp = await client.query(_QueryProductionLine.productionLineAll);\r\n                resolve(temp.rows);\r\n              } catch (e) {\r\n                reject(e);\r\n              } finally {\r\n                await client.end();\r\n              }\r\n            })().catch((e) => {\r\n              console.log(e);\r\n              throw Error(e);\r\n            });\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        });\r\n      }  */\r\n\r\n}\r\n\r\nmodule.exports = trackingTagService;\n\n//# sourceURL=webpack:///./app/service/trackingTagService.js?");

/***/ }),

/***/ "./app/service/userService.js":
/*!************************************!*\
  !*** ./app/service/userService.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nvar _QueryLogin = __webpack_require__(/*! ../query/queryLogin.json */ \"./app/query/queryLogin.json\");\r\nvar _QueryUser = __webpack_require__(/*! ../query/queryUser.json */ \"./app/query/queryUser.json\");\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst cryptoOption = __webpack_require__(/*! ../cryptoSetting */ \"./app/cryptoSetting.js\");\r\nvar companyService = __webpack_require__(/*! ../service/companyService */ \"./app/service/companyService.js\");\r\nvar _companyService = new companyService();\r\n\r\nclass userService {\r\n  async checkAuth(user) {\r\n    return _baseService.baseQueryWithParameter(_QueryLogin.getByUser, [user]);\r\n  }\r\n  async updateAdminToken(token, token_create, token_exp, user) {\r\n    return _baseService.baseQueryWithParameter(_QueryLogin.updateAdminToken, [\r\n      token,\r\n      token_create,\r\n      token_exp,\r\n      user,\r\n    ]);\r\n  }\r\n  async updateUserToken(token, token_create, token_exp, user) {\r\n    return _baseService.baseQueryWithParameter(_QueryLogin.updateUserToken, [\r\n      token,\r\n      token_create,\r\n      token_exp,\r\n      user,\r\n    ]);\r\n  }\r\n  async checkAdminAuth(id) {\r\n    return _baseService.baseQueryWithParameter(_QueryLogin.getByAdmin, [id]);\r\n  }\r\n\r\n  async getUserById(user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var data = await client.query(_QueryUser.getUserById, [user_id]);\r\n            if (data.rows.length > 0) {\r\n              data.rows[0].statusLine = false;\r\n              var lineByUser = await client.query(_QueryUser.getLineByUserId, [\r\n                data.rows[0].id,\r\n              ]);\r\n              if (lineByUser.rows.length > 0) {\r\n                data.rows[0].lineByUser = lineByUser.rows[0];\r\n                data.rows[0].statusLine = true;\r\n              }\r\n            }\r\n\r\n            console.log(data.rows[0]);\r\n            resolve(data.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async update(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(model);\r\n\r\n            await client.query(_QueryUser.update, [\r\n              user_id,\r\n              model.name,\r\n              model.sirname,\r\n              model.email,\r\n              model.mobile1,\r\n              model.mobile2,\r\n              model.detail,\r\n              model.user_profile,\r\n              model.user_profile_name,\r\n              model.user_profile_path,\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async changePS(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(cryptoOption.encrypt(model.old_pass));\r\n            var check = await client.query(_QueryUser.checkPS, [user_id]);\r\n            /*    console.log(cryptoOption.decrypt(check.rows[0].password))   \r\n               console.log(model.old_pass)   \r\n   \r\n               console.log(check.rows[0].password)\r\n               console.log(cryptoOption.encrypt(model.old_pass))   */\r\n\r\n            if (\r\n              cryptoOption.decrypt(check.rows[0].password) === model.old_pass\r\n            ) {\r\n              /*    console.log(\"รหัสเดิม ถูกต้อง\") */\r\n              await client.query(_QueryUser.changePS, [\r\n                user_id,\r\n                cryptoOption.encrypt(model.new_pass),\r\n              ]);\r\n              resolve(true);\r\n            } else {\r\n              throw Error(\"รหัสผ่านเดิมไม่ถูกต้อง !!!\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkGenerateAccount(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let list_item = [];\r\n\r\n            for (let item of model.emp_list) {\r\n              let item_list = {};\r\n\r\n              var check = await client.query(_QueryUser.checkGenAccount, [\r\n                item,\r\n              ]);\r\n\r\n              if (check.rows.length > 0) {\r\n                item_list.id = item;\r\n                item_list.isGenAccount = true;\r\n                item_list.username = check.rows[0].username;\r\n                // console.log(\"hava\");\r\n              } else {\r\n                item_list.id = item;\r\n                item_list.isGenAccount = false;\r\n                item_list.username = \"\";\r\n              }\r\n\r\n              list_item.push(item_list);\r\n            }\r\n\r\n            resolve(list_item);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async Generate_Account(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          let client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            // console.log(\"is_gen\", model);\r\n            for (let item of model.emp_list) {\r\n              if (\r\n                item.emp_name_eng !== \"\" &&\r\n                item.emp_name_eng !== null &&\r\n                item.emp_name_eng !== undefined\r\n              ) {\r\n                let first_name = item.emp_name_eng.split(\" \")[0] || null;\r\n                let last_name = item.emp_name_eng.split(\" \")[1] || null;\r\n\r\n                let user_name = `${\r\n                  last_name ? last_name[0].toLowerCase() : \"\"\r\n                }.${first_name ? first_name.toLowerCase() : \"\"}`;\r\n                let passDefault = \"123456\";\r\n\r\n                let checkEmpuser = await client.query(_QueryUser.checkEmpUser, [\r\n                  user_name,\r\n                ]);\r\n\r\n                if (checkEmpuser.rowCount > 0) {\r\n                  user_name = `${\r\n                    last_name\r\n                      ? last_name.substring(0, checkEmpuser.rowCount + 1).toLowerCase()\r\n                      : \"\"\r\n                  }.${first_name ? first_name.toLowerCase() : \"\"}`;\r\n                  // console.log(last_name.substring(0, checkEmpuser.rowCount + 1).toLowerCase(), user_name);\r\n                }\r\n\r\n                // let checkEmpuser = await client.query(_QueryUser.checkEmpUser, [\"emp_user\"]);\r\n                // let number = 1;\r\n                // console.log(checkEmpuser.rows)\r\n                // let user_name = \"emp_user\" + number;\r\n\r\n                // if (checkEmpuser.rows.length > 0) {\r\n                //   console.log(checkEmpuser.rows[checkEmpuser.rows.length - 1]);\r\n                //   let count = checkEmpuser.rows[checkEmpuser.rows.length - 1].username.split('emp_user')[1];\r\n                //   // console.log(count);\r\n                //   user_name = \"emp_user\" + parseInt(parseInt(count) + 1);\r\n                // }\r\n                // console.log(user_name);\r\n                /* throw new Error(\"break\"); */\r\n\r\n                let configMenuDefault = await client.query(\r\n                  _QueryUser.getConfigMenuDefault,\r\n                  [model.company_id, model.oem_id]\r\n                );\r\n\r\n                let configFeatureDefault = await client.query(\r\n                  _QueryUser.getConfigFeatureDefault,\r\n                  [model.company_id, model.oem_id]\r\n                );\r\n\r\n                await client.query(_QueryUser.AddIdenUser, [\r\n                  item.emp_id,\r\n                  model.company_id,\r\n                  \"c0fd1c11-da3e-439d-b3c3-54b4a187628d\", // admin_id,\r\n                  first_name || null, // firstname\r\n                  last_name || null, // lastname\r\n                  user_name || null, // username\r\n                  item.emp_email_company || null, // mail,\r\n                  cryptoOption.encrypt(passDefault), // password\r\n                  item.emp_mobile || null, // เบอร์โทรศัพท์มือถือ\r\n                  null, // เบอร์โทรศัพท์...\r\n                  null, // รายละเอียด\r\n                  true, // is_active\r\n                  null, // user_profile\r\n                  null, // token\r\n                  null, // token_create\r\n                  null, // token_expired\r\n                  new Date(), // create_date\r\n                  true, // is_use\r\n                  null, // user_profile_name\r\n                  null, // user_profile_path\r\n                  null, // is_passchange\r\n                ]);\r\n\r\n                await client.query(_QueryUser.setPermissionOem, [\r\n                  item.emp_id,\r\n                  model.oem_id,\r\n                  true,\r\n                ]);\r\n\r\n                for (let item1 of configMenuDefault.rows) {\r\n                  await client.query(_QueryUser.setPermissionMenu, [\r\n                    item1.menu_id || null,\r\n                    true,\r\n                    item.emp_id,\r\n                  ]);\r\n                }\r\n\r\n                for (let item2 of configFeatureDefault.rows) {\r\n                  await client.query(_QueryUser.setPermissionMenu, [\r\n                    item.emp_id,\r\n                    true,\r\n                    item2.feature_id || null,\r\n                  ]);\r\n                }\r\n              }\r\n            }\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkInfoEmpLineByIdLine(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let status = \"\";\r\n            console.log(\"checkInfoEmpLineByIdLine-------\", model.userId);\r\n            const temp = await client.query(\r\n              _QueryUser.checkInfoEmpLineByIdLine,\r\n              [model.userId]\r\n            );\r\n            console.log(\"temp---\", temp.rows.length);\r\n            if (temp.rows.length === 0) {\r\n              resolve(false);\r\n            }\r\n            const temp1 = await client.query(\r\n              _QueryUser.checkIdentityEmpLineById,\r\n              [temp.rows[0].user_id]\r\n            );\r\n            if (temp1.rows.length === 0) {\r\n              resolve(false);\r\n            }\r\n            status = \"login success\";\r\n            const username = temp1.rows[0].username;\r\n            const password = cryptoOption.decrypt(temp1.rows[0].password);\r\n            const data = {\r\n              username,\r\n              password,\r\n              status,\r\n            };\r\n\r\n            const data1 = await this.loginEmpPassLineOA(data);\r\n            console.log(\"data1\", data1);\r\n\r\n            resolve(data1);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async loginEmpPassLineOA(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let successStatus = [];\r\n            let errorStatus = [];\r\n            if (model.username && model.password) {\r\n              await _baseService\r\n                .baseQueryWithParameter(_QueryLogin.checkUserPassword, [\r\n                  model.username,\r\n                ])\r\n                .then(async (_res) => {\r\n                  if (_res.rows.length > 0) {\r\n                    if (\r\n                      model.password ==\r\n                      cryptoOption.decrypt(_res.rows[0].password)\r\n                    ) {\r\n                      await _companyService\r\n                        .findByIdCompany(_res.rows[0].company_id)\r\n                        .then(async (_res2) => {\r\n                          console.log(\r\n                            cryptoOption.decrypt(_res.rows[0].password)\r\n                          );\r\n\r\n                          var iat = moment(_res2.now);\r\n                          var exp = moment(new Date()).add(7, \"days\"); // exp:moment(new Date()).add(7,'days').unix()//days,hours,minutes\r\n                          var expire_date = _res2.expire_date;\r\n                          var exp2 = moment(\r\n                            moment(expire_date).unix() - iat.unix()\r\n                          );\r\n\r\n                          var total_day = Math.round(\r\n                            (expire_date - iat) / (1000 * 60 * 60 * 24)\r\n                          );\r\n                          var total_hours = Math.round(\r\n                            (expire_date - iat) / (1000 * 60 * 60)\r\n                          );\r\n                          var total_minute = Math.round(\r\n                            (expire_date - iat) / (1000 * 60)\r\n                          );\r\n                          var balance_day = exp2 / 3600 / 24;\r\n\r\n                          let unix_timestamp =\r\n                            moment(expire_date).unix() - iat.unix();\r\n\r\n                          var date = new Date(unix_timestamp * 1000);\r\n\r\n                          var hours = date.getHours();\r\n\r\n                          var minutes = \"0\" + date.getMinutes();\r\n\r\n                          var seconds = \"0\" + date.getSeconds();\r\n\r\n                          var formattedTime =\r\n                            total_day +\r\n                            \" วัน \" +\r\n                            hours +\r\n                            \" ชั่วโมง \" +\r\n                            minutes.substr(-2) +\r\n                            \" นาที\"; /* + seconds.substr(-2) */\r\n\r\n                          console.log(\r\n                            \"คงเหลือ : \" +\r\n                              formattedTime +\r\n                              \" \" +\r\n                              seconds.substr(-2) +\r\n                              \" วินาที\"\r\n                          );\r\n\r\n                          if (exp2 > 0) {\r\n                            //อายุการใช้งานต่ำกว่า 30 วัน\r\n                            if (balance_day <= 30 && balance_day > 29) {\r\n                              console.log(\r\n                                \"อายุการใช้งานใกล้จะหมด 30  =>\",\r\n                                balance_day\r\n                              );\r\n                            }\r\n                            //อายุการใช้งานต่ำกว่า 7 วัน\r\n                            if (balance_day <= 7) {\r\n                              console.log(\r\n                                \"อายุการใช้งานใกล้จะหมด < 7  =>\",\r\n                                balance_day\r\n                              );\r\n                            }\r\n                            /*   if(balance_day <= 24){\r\n                              console.log(\"อายุการใช้งานคงเหลือน่อยกว่า 1 วัน\", balance_day)\r\n                          } */\r\n                          } else {\r\n                            console.log(\"หมดอายุการใช้งาน\", exp2);\r\n                          }\r\n                          const payload = {\r\n                            sub: model.username,\r\n                            fup: _res.rows[0].id,\r\n                            com: _res.rows[0].company_id,\r\n                            sys: \"c\",\r\n                            iat: iat.unix(),\r\n                            exp: exp.unix(),\r\n                            exp_date: moment(expire_date).format(\r\n                              \"วันที่ DD-MM-yyyy เวลา HH:mm:ss\"\r\n                            ),\r\n                            balance_time: balance_day,\r\n                            balance_day: formattedTime,\r\n                            inform: _res2.config.inform,\r\n                            status_inform: _res2.config.status_inform,\r\n                          };\r\n\r\n                          // var token = jwt.encode(payload, JwtSetting.SECRET);\r\n                          // const token = this.TokenEncode(payload);\r\n                          console.log(\r\n                            \"_res before updateUserToken\",\r\n                            _res,\r\n                            model\r\n                          );\r\n                          await this.updateUserToken(\r\n                            _res.rows[0].token,\r\n                            iat,\r\n                            exp,\r\n                            model.username\r\n                          )\r\n                            .then((__res) => {\r\n                              successStatus.push({\r\n                                message: \"login success\",\r\n                                iat: iat,\r\n                                exp: exp,\r\n                                token: _res.rows[0].token,\r\n                                username: model.username,\r\n                                status: model.status,\r\n                              });\r\n                            })\r\n                            .catch((e) => {\r\n                              console.log(\"e\", e);\r\n                              errorStatus.push({\r\n                                message: \"login fail : Try again\",\r\n                              });\r\n                            });\r\n                        });\r\n                    } else {\r\n                      successStatus.push({\r\n                        message: \"login fail : Wrong username or password\",\r\n                      });\r\n                    }\r\n                  } else {\r\n                    successStatus.push({\r\n                      message: \"login fail : Wrong username or password\",\r\n                    });\r\n                  }\r\n                })\r\n                .catch((_error) => {\r\n                  errorStatus.push({\r\n                    message: _error.message,\r\n                  });\r\n                });\r\n            } else {\r\n              successStatus.push({\r\n                message: \"login fail : Wrong username or password\",\r\n              });\r\n            }\r\n            console.log(\"errorStatus.length\", errorStatus);\r\n            if (errorStatus.length > 0) {\r\n              throw Error(errorStatus);\r\n            }\r\n\r\n            resolve(successStatus);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveLineApi(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model in save line api\", model);\r\n            let status = \"\";\r\n            const User = await client.query(_QueryUser.getEmployee, [\r\n              model.user,\r\n            ]);\r\n            console.log(User.rows);\r\n\r\n            const Line = await client.query(_QueryUser.getLineByUserId, [\r\n              model.user,\r\n            ]);\r\n            if (Line.rows.length === 0) {\r\n              await client.query(_QueryUser.saveLineApi, [\r\n                uuidv4(),\r\n                User.rows[0].id || null,\r\n                User.rows[0].username || null,\r\n                User.rows[0].password || null,\r\n                User.rows[0].id || null,\r\n                new Date(),\r\n                model.userId || null,\r\n                model.pictureUrl || null,\r\n                model.displayName || null,\r\n                model.idToken || null,\r\n              ]);\r\n              status = \"เชื่อมข้อมูล Line สำเร็จ\";\r\n            } else {\r\n              await client.query(_QueryUser.updateLineApi, [\r\n                Line.rows[0].id,\r\n                User.rows[0].id || null,\r\n                User.rows[0].username || null,\r\n                User.rows[0].password || null,\r\n                User.rows[0].id || null,\r\n                new Date(),\r\n                model.userId || null,\r\n                model.pictureUrl || null,\r\n                model.displayName || null,\r\n                model.idToken || null,\r\n              ]);\r\n              status = \"อัพเดทข้อมูล Line สำเร็จ\";\r\n            }\r\n\r\n            const username = User.rows[0].username;\r\n            const password = cryptoOption.decrypt(User.rows[0].password);\r\n            const data = {\r\n              username,\r\n              password,\r\n              status,\r\n            };\r\n\r\n            const data1 = await this.loginEmpPassLineOA(data);\r\n            console.log(\"data1\", data1);\r\n\r\n            resolve(data1);\r\n          } catch (e) {\r\n            reject(e);\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async checkGenerateAccountHR(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let item = {};\r\n            var check = await client.query(_QueryUser.checkGenAccount, [id]);\r\n            // console.log(\"check\", check.rows);\r\n            if (check.rows.length > 0) {\r\n              item.isGenAccount = true;\r\n              item.username = check.rows[0].username;\r\n            } else {\r\n              item.isGenAccount = false;\r\n              item.username = \"\";\r\n            }\r\n            // console.log(\"item\", item);\r\n\r\n            resolve(item);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async resetPassword(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryUser.changePS, [\r\n              id,\r\n              cryptoOption.encrypt(\"123456\"),\r\n            ]);\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateStatusUsingOfUser(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            console.log(\"model------>\", model, user_id);\r\n            // _QueryUser.update\r\n            await client.query(_QueryUser.updateStatusUser, [\r\n              model.id,\r\n              model.is_use ? true : false,\r\n              model.is_use ? true : false,\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\nmodule.exports = userService;\r\n\n\n//# sourceURL=webpack:///./app/service/userService.js?");

/***/ }),

/***/ "./app/service/warehouseCTSService.js":
/*!********************************************!*\
  !*** ./app/service/warehouseCTSService.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWareHouseCTS = __webpack_require__(/*! ../query/querywareHouseCTS.json */ \"./app/query/querywareHouseCTS.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass warehouseCTSService {\r\n\r\n\r\n\r\n  async filterMaterialView(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            /* console.log(\"เมททริก\",model); */\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            if (model.date_start !== \"\") {\r\n              model.date_start = moment(model.date_start).startOf('day').format();\r\n            }\r\n            if (model.date_end !== \"\") {\r\n              model.date_end = moment(model.date_end).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end === \"\" && model.date_start !== \"\") {\r\n              model.date_end = moment(model.date_start).endOf('day').format();\r\n            }\r\n\r\n            let check_new = null;\r\n            let count_new = 0;\r\n            /* console.log(\"เมททริก\",model); */\r\n            if (model.in === true) {\r\n              check_new = 'in';\r\n              count_new++;\r\n            }\r\n\r\n            if (model.out === true) {\r\n              check_new = 'out';\r\n              count_new++;\r\n            }\r\n\r\n            if (count_new !== 2) {\r\n              var temp_new = await client.query(_QueryWareHouseCTS.filterCheckedByView, [\r\n                check_new || null,\r\n                model.date_start || null,\r\n                model.date_end || null\r\n              ]);\r\n\r\n            } else {\r\n              var temp_new = await client.query(_QueryWareHouseCTS.filterMaterialByView, [\r\n                model.oem_id,\r\n                model.company_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start || null,\r\n                model.date_end || null,\r\n              ]);\r\n            }\r\n            /* console.log(\"temp\",temp.fields); */\r\n            var temp2 = await client.query(_QueryWareHouseCTS.filterMaterialByViewhad, []);\r\n\r\n            /* console.log(\"temp2\",temp2); */\r\n\r\n            if (temp_new.rows.length > 0) {\r\n              var count = Object.keys(temp_new.rows[0]).length;\r\n              /*  console.log(\"count\",count); */\r\n              var data = [];\r\n              var ha = [];\r\n              if (count > 0) {\r\n                for (let i = 0; i < Object.keys(temp_new.rows[0]).length; i++) {\r\n                  let temps = {\r\n                    key: {\r\n                      label: Object.keys(temp_new.rows[0])[i],\r\n                      field: Object.keys(temp_new.rows[0])[i],\r\n                      sort: \"asc\",\r\n                      width: 50,\r\n                    },\r\n                    value: Object.values(temp_new.rows[0])[i],\r\n                  }\r\n                  data.push(temps.key)\r\n                  ha.push(temps.key.field);\r\n                }\r\n              }\r\n            } else {\r\n              var count = Object.keys(temp2.fields[0].name).length;\r\n              var data = [];\r\n              var ha = [];\r\n              if (count > 0) {\r\n                for (let i = 0; i < temp2.fields.length; i++) {\r\n\r\n                  let temps = {\r\n                    key: {\r\n                      label: temp2.fields[i].name,\r\n                      field: temp2.fields[i].name,\r\n                      sort: \"asc\",\r\n                      width: 50,\r\n                    },\r\n                    value: [],\r\n                  }\r\n                  data.push(temps.key)\r\n                  ha.push(temps.key.field);\r\n                }\r\n              }\r\n            }\r\n            if (temp_new.rows.length > 0) {\r\n              var finalData = {\r\n                heder: data,\r\n                bodyValue: temp_new.rows,\r\n                he: ha,\r\n              }\r\n            } else {\r\n              var finalData = {\r\n                heder: data,\r\n                bodyValue: [],\r\n                he: ha,\r\n              }\r\n            }\r\n\r\n            console.log(\"ข้อมูล\", finalData);\r\n            resolve(finalData);\r\n            // resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async productMatCTSfilter(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(\"company\",model.date_start_fg);\r\n            //  console.log(\"ทนกำส\",model);\r\n            if (model.date_start_fg !== \"\") {\r\n              model.date_start_fg = moment(model.date_start_fg).startOf('day').format();\r\n            }\r\n            if (model.date_end_pack !== \"\") {\r\n              model.date_end_pack = moment(model.date_end_pack).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end_pack === \"\" && model.date_start_fg !== \"\") {\r\n              model.date_end_pack = moment(model.date_start_fg).endOf('day').format();\r\n            }\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            // console.log(model.date_start_fg);\r\n            // console.log(model.date_end_pack);\r\n            var temp = await client.query(_QueryWareHouseCTS.filter_product_fg_project, [\r\n              model.oem_id,\r\n              model.company_id,\r\n              model.no || null,\r\n              model.name || null,\r\n              model.date_start_fg || null,\r\n              model.date_end_pack || null,\r\n            ]);\r\n            var temp2 = await client.query(_QueryWareHouseCTS.filter_product_fg_project_hard, []);\r\n\r\n            /* console.log('fields',temp.rows); */\r\n\r\n            if (temp.rows.length > 0) {\r\n              var count = Object.keys(temp.rows[0]).length;\r\n              /* console.log(\"> 0\",count); */\r\n              var data = [];\r\n              if (count > 0) {\r\n                for (let i = 0; i < Object.keys(temp.rows[0]).length; i++) {\r\n                  let temps = {\r\n                    key: {\r\n                      label: Object.keys(temp.rows[0])[i],\r\n                      field: Object.keys(temp.rows[0])[i],\r\n                      sort: \"asc\",\r\n                      width: 50,\r\n                    },\r\n                    value: Object.values(temp.rows[0])[i],\r\n                  }\r\n                  data.push(temps.key)\r\n                }\r\n              }\r\n\r\n            } else {\r\n              var count = Object.keys(temp2.fields[0].name).length;\r\n              var data = [];\r\n              var ha = [];\r\n              if (count > 0) {\r\n                for (let i = 0; i < temp2.fields.length; i++) {\r\n\r\n                  let temps = {\r\n                    key: {\r\n                      label: temp2.fields[i].name,\r\n                      field: temp2.fields[i].name,\r\n                      sort: \"asc\",\r\n                      width: 50,\r\n                    },\r\n                    value: [],\r\n                  }\r\n                  data.push(temps.key)\r\n                  ha.push(temps.key.field);\r\n                }\r\n              }\r\n            }\r\n            if (temp.rows.length > 0) {\r\n              var finalDataproduct = {\r\n                hederProduct: data,\r\n                bodyProductValue: temp.rows,\r\n              }\r\n\r\n            } else {\r\n              var finalDataproduct = {\r\n                hederProduct: data,\r\n                bodyProductValue: [],\r\n              }\r\n            }\r\n            /* console.log(\"product\",finalDataproduct); */\r\n            resolve(finalDataproduct);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  // Wip Prod\r\n  async Wipprodfilter(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //console.log(\"company\",model.date_start_fg);\r\n            //  console.log(\"ทนกำส\",model);\r\n\r\n            if (model.date_start_wp !== \"\") {\r\n              model.date_start_wp = moment(model.date_start_wp).startOf('day').format();\r\n            }\r\n            if (model.date_end_wp !== \"\") {\r\n              model.date_end_wp = moment(model.date_end_wp).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end_wp === \"\" && model.date_start_wp !== \"\") {\r\n              model.date_end_wp = moment(model.date_start_wp).endOf('day').format();\r\n            }\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            let check_new = null;\r\n\r\n            if (model.in === true) {\r\n              check_new = true;\r\n            }\r\n\r\n            if (model.out === true) {\r\n              check_new = false;\r\n            }\r\n\r\n            if (model.out === true && model.in === true) {\r\n              check_new = null;\r\n            }\r\n\r\n            // console.log(model.date_start_fg);\r\n            // console.log(model.date_end_fg);\r\n            if (check_new === false) {\r\n              var temp = await client.query(_QueryWareHouseCTS.filter_log_wip_prod_false, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_wp || null,\r\n                model.date_end_wp || null,\r\n              ]);\r\n\r\n            } else {\r\n              var temp = await client.query(_QueryWareHouseCTS.filter_log_wip_prod, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_wp || null,\r\n                model.date_end_wp || null,\r\n                check_new || null,\r\n              ]);\r\n            }\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  // wip ส่ง รับ ชุบ\r\n  async filterChuplog(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            if (model.date_start_cp !== \"\") {\r\n              model.date_start_cp = moment(model.date_start_cp).startOf('day').format();\r\n            }\r\n            if (model.date_end_cp !== \"\") {\r\n              model.date_end_cp = moment(model.date_end_cp).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end_cp === \"\" && model.date_start_cp !== \"\") {\r\n              model.date_end_cp = moment(model.date_start_cp).endOf('day').format();\r\n            }\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            let check_new = null;\r\n\r\n            if (model.in === true) {\r\n              check_new = true;\r\n            }\r\n\r\n            if (model.out === true) {\r\n              check_new = false;\r\n            }\r\n\r\n            if (model.out === true && model.in === true) {\r\n              check_new = null;\r\n            }\r\n\r\n            // console.log(model.date_start_fg);\r\n            // console.log(model.date_end_fg);\r\n            if (check_new === false) {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterChuplog_false, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_cp || null,\r\n                model.date_end_cp || null,\r\n              ]);\r\n\r\n            } else {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterChuplog, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_cp || null,\r\n                model.date_end_cp || null,\r\n                check_new || null,\r\n              ]);\r\n            }\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  // Product Fg\r\n  async filterlogFgEditCts(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            if (model.date_start_fg !== \"\") {\r\n              model.date_start_fg = moment(model.date_start_fg).startOf('day').format();\r\n            }\r\n            if (model.date_end_fg !== \"\") {\r\n              model.date_end_fg = moment(model.date_end_fg).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end_fg === \"\" && model.date_start_fg !== \"\") {\r\n              model.date_end_fg = moment(model.date_start_fg).endOf('day').format();\r\n            }\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            let check_new = null;\r\n\r\n            if (model.in === true) {\r\n              check_new = true;\r\n            }\r\n\r\n            if (model.out === true) {\r\n              check_new = false;\r\n            }\r\n\r\n            if (model.out === true && model.in === true) {\r\n              check_new = null;\r\n            }\r\n\r\n            // console.log(model.date_start_fg);\r\n            // console.log(model.date_end_fg);\r\n            if (check_new === false) {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterlogFgEditCts_false, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_fg || null,\r\n                model.date_end_fg || null,\r\n              ]);\r\n\r\n            } else {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterlogFgEditCts, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_fg || null,\r\n                model.date_end_fg || null,\r\n                check_new || null,\r\n              ]);\r\n            }\r\n\r\n            // var temp = await client.query(_QueryWareHouseCTS.filterlogFgEditCts, [\r\n            //   model.oem_id,\r\n            //   model.no || null,\r\n            //   model.name || null,\r\n            //   model.date_start_fg || null,\r\n            //   model.date_end_fg || null,\r\n            // ]);\r\n            for (let item of temp.rows) {\r\n\r\n              var getCustomer = await client.query(_QueryWareHouseCTS.getCustomerByproduct_order, [\r\n                item.production_order_cts_id,\r\n              ]);\r\n              item.customer_name = getCustomer.rows[0].customer_name\r\n\r\n            }\r\n\r\n\r\n            /* or(let item of temp.rows){\r\n\r\n            } */\r\n            console.log(\"emp\", temp.rows);\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Pack\r\n  async filterlogPackCts(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n            if (model.date_start_pack !== \"\") {\r\n              model.date_start_pack = moment(model.date_start_pack).startOf('day').format();\r\n            }\r\n            if (model.date_end_pack !== \"\") {\r\n              model.date_end_pack = moment(model.date_end_pack).endOf('day').format();\r\n            }\r\n\r\n            if (model.date_end_pack === \"\" && model.date_start_pack !== \"\") {\r\n              model.date_end_pack = moment(model.date_start_pack).endOf('day').format();\r\n            }\r\n\r\n            if (model.oem_id === null) {\r\n              throw Error(\"Can't fine oem_id\");\r\n            }\r\n\r\n            let check_new = null;\r\n\r\n            if (model.in === true) {\r\n              check_new = true;\r\n            }\r\n\r\n            if (model.out === true) {\r\n              check_new = false;\r\n            }\r\n\r\n            if (model.out === true && model.in === true) {\r\n              check_new = null;\r\n            }\r\n\r\n            // console.log(model.date_start_fg);\r\n            // console.log(model.date_end_fg);\r\n            if (check_new === false) {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterlogPackCts_false, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_pack || null,\r\n                model.date_end_pack || null,\r\n              ]);\r\n\r\n            } else {\r\n              var temp = await client.query(_QueryWareHouseCTS.filterlogPackCts, [\r\n                model.oem_id,\r\n                model.no || null,\r\n                model.name || null,\r\n                model.date_start_pack || null,\r\n                model.date_end_pack || null,\r\n                check_new || null,\r\n              ]);\r\n            }\r\n\r\n            /* console.log(\"pack\",temp.rows); */\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nmodule.exports = warehouseCTSService;\n\n//# sourceURL=webpack:///./app/service/warehouseCTSService.js?");

/***/ }),

/***/ "./app/service/warehouseService.js":
/*!*****************************************!*\
  !*** ./app/service/warehouseService.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWarehouse = __webpack_require__(/*! ../query/queryWarehouse.json */ \"./app/query/queryWarehouse.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass warehouseService {\r\n\r\n  async addWarehouse_warehouse(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkNo = await client.query(_QueryWarehouse.checkWarehouseNo_add_warehouse,[model.code_no,model.company_id]);\r\n            if(checkNo.rows.length){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_add_rack,[model.location,model.company_id]);\r\n            if(checklocation.rows.length){\r\n              throw Error(\"System : location has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : Company id is null\");\r\n            }\r\n            let warehouse_id = uuidv4();\r\n   \r\n            await client.query(_QueryWarehouse.add_warehouse, [\r\n              warehouse_id,\r\n              model.company_id,\r\n              model.code_no,\r\n              model.description,\r\n              model.location,\r\n              model.capacity,\r\n              model.parent_id,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n              model.warehouse_type_id\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async updateWarehouse(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkName = await client.query(_QueryWarehouse.checkWarehouseNo_edit,[model.code_no,model.warehouse_id,model.company_id]);\r\n            if(checkName.rows.length > 0){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_edit,[model.location,model.warehouse_id,model.company_id]);\r\n            if(checklocation.rows.length > 0){\r\n              throw Error(\"System : location has already\");\r\n            } \r\n\r\n            await client.query(_QueryWarehouse.update, [\r\n                model.warehouse_id,\r\n                //model.company_id,\r\n                model.code_no,\r\n                model.description,\r\n                model.location,\r\n                model.capacity,\r\n                model.parent_id,\r\n                //true, \r\n                moment(new Date()),\r\n                user_id\r\n            \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  \r\n  async delWarehouse(warehouse_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {var query = await client.query(_QueryWarehouse.check_del, [warehouse_id]);\r\n            if (query.rows[0].count > 0) {\r\n              reject({\r\n                message: \"Don't delete\",\r\n              });\r\n            } else {\r\n              await client.query(_QueryWarehouse.del, [warehouse_id]);\r\n              console.log(\"COMMIT\");\r\n              resolve(true);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n  \r\n  async findByIdWarehouse(warehouse_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.findById, [warehouse_id]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n \r\n\r\n  async filterWarehouse(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             console.log(model); \r\n            let code_no = model.code_no ? model.code_no : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter, [\r\n              model.code_no || null,\r\n              model.company_id,\r\n            ]);\r\n            console.log(temp); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n           console.log(e); \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n  async filterRack(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             console.log(model); \r\n            let code_no = model.code_no ? model.code_no : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n        \r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter_tem_in_warehouse, [\r\n              code_no,\r\n              company_id,\r\n              model.type,\r\n              model.parent_id,\r\n            ]);\r\n            console.log(temp); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n           console.log(e); \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n  async filterProductOnRack(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n             console.log(model); \r\n            let code_no = model.code_no ? model.code_no : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n        \r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter_tem_in_warehouse, [\r\n              code_no,\r\n              company_id,\r\n              model.type,\r\n              model.parent_id,\r\n            ]);\r\n            console.log(temp); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n           console.log(e); \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n  async findItemWarehouseById(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.findItemWarehouseById, [\r\n              id,\r\n            ]);\r\n            let temp2 = await client.query(_QueryWarehouse.getWarehouseProduct, [\r\n              id,\r\n            ]);\r\n            if(temp2.rows.length > 0){\r\n              temp.rows[0].product_on_shelf = temp2.rows;\r\n            }else{\r\n              temp.rows[0].product_on_shelf = [];\r\n            }\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /* async filterWarehouse(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n\r\n          try {\r\n            var temp = await client.query(_QueryPermission.filterMenuLv1, [\r\n              model.name || null,\r\n            ]);\r\n\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n            console.log(\"COMMIT\");\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//////////////////////////////ของ rack ////////////////////////\r\n\r\n  async filterWarehouse_type_rack(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter_rack, [\r\n                model.code_no || null,\r\n                model.company_id ,\r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async filterWarehouse_type_rack_dp(id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter_rack_dp, [\r\n                id\r\n                \r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n  async getWarehouse() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.getWarehouse, );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async addWarehouse_rack(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkNo = await client.query(_QueryWarehouse.checkWarehouseNo_add_rack,[model.code_no,model.company_id]);\r\n            if(checkNo.rows.length){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_add_rack,[model.location,model.company_id]);\r\n            if(checklocation.rows.length){\r\n              throw Error(\"System : location has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : Company id is null\");\r\n            }\r\n            let warehouse_id = uuidv4();\r\n   \r\n            await client.query(_QueryWarehouse.add_rack, [\r\n              warehouse_id,\r\n              model.company_id,\r\n              model.code_no,\r\n              model.description,\r\n              model.location,\r\n              model.capacity,\r\n              model.parent_id,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n              model.warehouse_type_id\r\n\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdWarehouse_rack(warehouse_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.findById_rack, [warehouse_id]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  async updateWarehouse_rack(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkName = await client.query(_QueryWarehouse.checkWarehouseNo_edit_rack,[model.code_no,model.warehouse_id,model.company_id]);\r\n            if(checkName.rows.length > 0){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_edit,[model.location,model.warehouse_id,model.company_id]);\r\n            if(checklocation.rows.length > 0){\r\n              throw Error(\"System : location has already\");\r\n            } \r\n            await client.query(_QueryWarehouse.update_rack, [\r\n                model.warehouse_id,\r\n                //model.company_id,\r\n                model.code_no,\r\n                model.description,\r\n                model.location,\r\n                model.capacity,\r\n                model.parent_id,\r\n                //true, \r\n                moment(new Date()),\r\n                user_id\r\n            \r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delWarehouse_rack(warehouse_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var query = await client.query(_QueryWarehouse.check_del_rack, [warehouse_id]);\r\n            if (query.rows[0].count > 0) {\r\n              reject({\r\n                message: \"Don't delete\",\r\n              });\r\n            } else {\r\n              await client.query(_QueryWarehouse.del, [warehouse_id]);\r\n              console.log(\"COMMIT\");\r\n              resolve(true);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  async addWarehouse_rack_floor(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model)\r\n           // throw Error(\"break\");\r\n            var checkNo = await client.query(_QueryWarehouse.checkWarehouseNo_add_rack_floor,[model.code_no,model.company_id]);\r\n            if(checkNo.rows.length){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_add_rack,[model.location,model.company_id]);\r\n            if(checklocation.rows.length){\r\n              throw Error(\"System : location has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : Company id is null\");\r\n            }\r\n            let warehouse_id = uuidv4();\r\n   \r\n            await client.query(_QueryWarehouse.add_rack_floor, [\r\n              warehouse_id,\r\n              model.company_id,\r\n              model.code_no,\r\n              model.description,\r\n              model.location,\r\n              model.capacity,\r\n              model.parent_id,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n              model.warehouse_type_id\r\n\r\n            ]);\r\n            for(let r = 0; r < model.product_on_shelf.length;r++){\r\n            \r\n               let warehouse_product_id = uuidv4();\r\n               await client.query(_QueryWarehouse.addWarehouseProduct,\r\n                [warehouse_product_id, \r\n                  warehouse_id,\r\n                  model.product_on_shelf[r].product_id, \r\n                  model.product_on_shelf[r].isActive || null,\r\n                  null, \r\n                  moment(new Date()),\r\n                  true\r\n\r\n                ]);\r\n             }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterWarehouse_type_rack_floor(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n                \r\n            var temp = await client.query(_QueryWarehouse.filter_rack_floor, [\r\n                model.code_no || null,\r\n                model.company_id ,\r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdWarehouse_rack_floor(warehouse_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.findById_rack_floor, [warehouse_id]);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  async getWarehoueProduct(warehouse_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.getWarehouseProduct2, []);\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async updateWarehouse_rack_floor(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n           \r\n            var checkName = await client.query(_QueryWarehouse.checkWarehouseNo_edit_rack_floor,[model.code_no,model.warehouse_id,model.company_id]);\r\n            if(checkName.rows.length > 0){\r\n              throw Error(\"System : Code No has already\");\r\n            }\r\n            var checklocation = await client.query(_QueryWarehouse.checkWarehouselocation_edit,[model.location,model.warehouse_id,model.company_id]);\r\n            if(checklocation.rows.length > 0){\r\n              throw Error(\"System : location has already\");\r\n            } \r\n            await client.query(_QueryWarehouse.update_rack_floor, [\r\n                model.warehouse_id,\r\n                //model.company_id,\r\n                model.code_no,\r\n                model.description,\r\n                model.location,\r\n                model.capacity,\r\n                model.parent_id,\r\n                //true, \r\n                moment(new Date()),\r\n                user_id\r\n            \r\n            ]);\r\n\r\n            var check_product_del = await client.query(_QueryWarehouse.check_product_del,[model.warehouse_id]);\r\n                   \r\n                                for(var e = 0; e < check_product_del.rows.length; e++){\r\n                                    let check =  model.product_on_shelf.filter((element)=>{ \r\n                                        return (element.product_id === check_product_del.rows[e].product_id);\r\n                                    })\r\n                                    if(check.length > 0){\r\n                                \r\n                                    }else{\r\n                                        await client.query(_QueryWarehouse.DeleteWPforUpdate,[check_product_del.rows[e].warehouse_id, check_product_del.rows[e].product_id]); \r\n                                      \r\n                                    }\r\n                                   \r\n                                }\r\n                  \r\n                \r\n                                   \r\n                         \r\n                         for(var k =0; k < model.product_on_shelf.length; k++){\r\n                        \r\n                          var check_WP = await client.query(_QueryWarehouse.checkWarehouseProduct,[model.warehouse_id, model.product_on_shelf[k].product_id]);\r\n                    \r\n                         if(check_WP.rows.length > 0){\r\n                           \r\n                           \r\n                         }else{\r\n                          let warehouse_product_id = uuidv4();\r\n                          await client.query(_QueryWarehouse.addWarehouseProduct,\r\n                           [warehouse_product_id, \r\n                             model.warehouse_id,\r\n                             model.product_on_shelf[k].product_id, \r\n                             model.product_on_shelf[k].isActive || null,\r\n                             null, \r\n                             moment(new Date()),\r\n                             true\r\n           \r\n                           ]);  \r\n                         }\r\n                        \r\n                        \r\n                      \r\n                      }\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delWarehouse_rack_floor(warehouse_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryWarehouse.del_rack_floor, [warehouse_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n\r\n  async getWarehouse_rack() {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse.getWarehouse_rack, );\r\n            if (temp.rows.length > 0) {\r\n              resolve(temp.rows);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n  \r\n}\r\n\r\n\r\nmodule.exports = warehouseService;\r\n\n\n//# sourceURL=webpack:///./app/service/warehouseService.js?");

/***/ }),

/***/ "./app/service/warehouse_typeService.js":
/*!**********************************************!*\
  !*** ./app/service/warehouse_typeService.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWarehouse_type = __webpack_require__(/*! ../query/queryWarehouse_type.json */ \"./app/query/queryWarehouse_type.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\n\r\n\r\nclass warehouse_typeService {\r\n\r\n  async addWarehouse_type(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n      \r\n            var checkType = await client.query(_QueryWarehouse_type.checkType_add,[model.type,model.company_id]);\r\n            if(checkType.rows.length > 0){\r\n              throw Error(\"System : Type has already\");\r\n            }\r\n           \r\n            if (model.company_id === null) {\r\n              throw Error(\"System : company_id is null\");\r\n            }\r\n            let warehouse_type_id = uuidv4();\r\n   \r\n            await client.query(_QueryWarehouse_type.add, [\r\n             warehouse_type_id,\r\n              model.type,\r\n              model.company_id,\r\n              model.remark,\r\n              true, \r\n              moment(new Date()),\r\n              user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async filterWarehouse_type(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n           // console.log(model);\r\n            let type = model.type ? model.type : null,\r\n                company_id = model.company_id ? model.company_id : null;\r\n                \r\n            var temp = await client.query(_QueryWarehouse_type.filter, [\r\n                type,\r\n              company_id ,\r\n            ]);\r\n        \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n      \r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async findByIdWarehouse_type(warehouse_type_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWarehouse_type.findById, [warehouse_type_id]);\r\n            if (temp.rows.length > 0) {\r\n         \r\n              resolve(temp.rows[0]);\r\n            } else {\r\n              reject(\"not found\");\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async updateWarehouse_type(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var checkType = await client.query(_QueryWarehouse_type.checkType_edit,[model.type,model.type_id,model.company_id]);\r\n            if(checkType.rows.length > 0){\r\n              throw Error(\"System : Type has already\");\r\n            }\r\n            await client.query(_QueryWarehouse_type.update, [\r\n                model.type_id,\r\n                model.type,\r\n                model.remark,\r\n                moment(new Date()),\r\n                user_id,\r\n            ]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async delWarehouse_type(type_id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryWarehouse_type.del, [type_id,moment(new Date()),user_id]);\r\n            console.log(\"COMMIT\");\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  } \r\n\r\n  \r\n\r\n  \r\n\r\n  \r\n\r\n\r\n  \r\n}\r\n\r\n\r\nmodule.exports = warehouse_typeService;\r\n\n\n//# sourceURL=webpack:///./app/service/warehouse_typeService.js?");

/***/ }),

/***/ "./app/service/winSpeedService.js":
/*!****************************************!*\
  !*** ./app/service/winSpeedService.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWipProdInOutCTS = __webpack_require__(/*! ../query/querywinSpeed.json */ \"./app/query/querywinSpeed.json\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst { SourceMapDevToolPlugin } = __webpack_require__(/*! webpack */ \"webpack\");\r\nconst { format } = __webpack_require__(/*! util */ \"util\");\r\nconst { count, Console } = __webpack_require__(/*! console */ \"console\");\r\nvar sql = __webpack_require__(/*! mssql */ \"mssql\");\r\nconst { throws } = __webpack_require__(/*! assert */ \"assert\");\r\nvar config = {\r\n  user: \"sa\",\r\n  password: \"MyTTT@1234\",\r\n  server: \"150.95.89.38\",\r\n  database: \"JSV_ERP\",\r\n  options: {\r\n    encrypt: false,\r\n    trustServerCertificate: true,\r\n  },\r\n};\r\n\r\nclass WinSpeed {\r\n  async filterPO(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          sql.connect(config, function (err) {\r\n            var request = new sql.Request();\r\n            let queryString = \"\";\r\n            if (model.po_no || model.po_no !== \"\") {\r\n              queryString =\r\n                \"select * from PO_BILL WHERE PO_ID  LIKE '%\" +\r\n                model.po_no +\r\n                \"%' ORDER BY PO_ID DESC\";\r\n            } else {\r\n              queryString = \"select * from PO_BILL ORDER BY PO_ID DESC\";\r\n            }\r\n\r\n            const Data_list = [];\r\n            request.query(queryString, function (err, recordset) {\r\n              if (err) reject(err);\r\n\r\n              //Data_list = recordset.recordset;\r\n              /*  console.log(err) */\r\n              resolve(recordset.recordset);\r\n              //console.log(recordset.recordset);\r\n              /* res.send(recordset); */\r\n            });\r\n            //resolve(Data_list);\r\n          });\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getHistoryStock(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          sql.connect(config, function (err) {\r\n            var request = new sql.Request();\r\n            let queryString = \"\";\r\n            if (model.mat_name || model.mat_name !== \"\") {\r\n              queryString =\r\n                `select  TOP 1000 [WH_ID]\r\n      ,[DOC_ID]\r\n      ,[DATE_STOCK]\r\n      ,[RAW_ID]\r\n      ,[ITM_ID]\r\n\t    ,[MAT_NAME]\r\n      ,[QTY]\r\n      ,[TOTAL_QTY]\r\n      ,[TYPE]\r\n      ,[STATUS],a.[CREATE_USER] from STOCK_CARD a LEFT JOIN MATERIAL b ON a.ITM_ID = b.MAT_ID \r\n      \r\n       WHERE MAT_NAME  LIKE '%` +\r\n      model.mat_name +\r\n      `%' \r\n      AND  a.COM_ID = b.COM_ID\r\n      ORDER BY a.CREATE_DATE DESC `;\r\n            }else{\r\n              queryString =\r\n              `select TOP 1000 [WH_ID]\r\n    ,[DOC_ID]\r\n    ,[DATE_STOCK]\r\n    ,[RAW_ID]\r\n    ,[ITM_ID]\r\n    ,[MAT_NAME]\r\n    ,[QTY]\r\n    ,[TOTAL_QTY]\r\n    ,[TYPE]\r\n    ,[STATUS],a.[CREATE_USER]  from STOCK_CARD a LEFT JOIN MATERIAL b ON a.ITM_ID = b.MAT_ID\r\n    WHERE a.COM_ID = b.COM_ID\r\n    ORDER BY a.CREATE_DATE DESC `;\r\n            }\r\n            \r\n            const Data_list = [];\r\n            request.query(queryString, function (err, recordset) {\r\n              if (err) reject(err);\r\n\r\n\r\n              console.log(recordset);\r\n              //Data_list = recordset.recordset;\r\n              /*  console.log(err) */\r\n              let array = [];\r\n            \r\n              resolve(recordset.recordset);\r\n              //console.log(recordset.recordset);\r\n              /* res.send(recordset); */\r\n            });\r\n            //resolve(Data_list);\r\n          });\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  async checkTag(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          sql.connect(config, function (err) {\r\n            var request = new sql.Request();\r\n            let queryString = \"\";\r\n\r\n              queryString =\r\n                `SELECT * from MATERIAL  \r\n      \r\n       WHERE MAT_ID ='` +model.tag_no+ `'`;\r\n        \r\n            \r\n            const Data_list = [];\r\n            request.query(queryString, function (err, recordset) {\r\n              if (err) reject(err);\r\n\r\n\r\n              console.log(recordset);\r\n              //Data_list = recordset.recordset;\r\n              /*  console.log(err) */\r\n              console.log(recordset.recordset.length)\r\n             \r\n                resolve(recordset.recordset);\r\n          \r\n         \r\n            \r\n              //console.log(recordset.recordset);\r\n              /* res.send(recordset); */\r\n            });\r\n            //resolve(Data_list);\r\n          });\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n \r\n  async saveHandheld(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          sql.connect(config, async function (err) {\r\n            var request = new sql.Request();\r\n\r\n            if(model.stage == 'MAT IN'){\r\n              for(let item of model.tag_list){\r\n\r\n                let temp = await request.query(\"SELECT * FROM MATERIAL WHERE MAT_ID = '\"+item.item+\"'\");\r\n                console.log(temp)\r\n                  let com_id = temp.recordset[0].COM_ID;\r\n\r\n                    console.log(\"now\", new Date().getFullYear(),new Date().getMonth()+1,new Date().getDate())\r\n                let current_date = moment().toDate();\r\n\r\n                current_date = moment(current_date).format('YYYY-MM-DD HH:mm:ss.000');\r\n                console.log(current_date);\r\n                  await request.query(`INSERT INTO STOCK_CARD (\r\n                     COM_ID\r\n                    ,WH_ID\r\n                    ,DOC_ID\r\n                    ,DATE_STOCK\r\n                    ,RAW_ID\r\n                    ,ITM_ID\r\n                    ,QTY\r\n                    ,TOTAL_QTY\r\n                    ,TYPE\r\n                    ,STATUS\r\n                    ,CREATE_USER\r\n                    ,CREATE_DATE) VALUES (\r\n                      '`+ com_id +`',\r\n                      NULL,\r\n                      NULL,\r\n                      '`+current_date+`',\r\n                       NULL,\r\n                      '`+ item.item +`',\r\n                      `+  Number(item.amount.toString().replace(/,/g, \"\")) +`,\r\n                      `+  Number(item.amount.toString().replace(/,/g, \"\")) +`,\r\n                      'IN',\r\n                      'นำเข้าสินค้า',\r\n                      \r\n                      'JSV.admin',\r\n                      '`+current_date+`'\r\n                    )`);\r\n\r\n                console.log(temp);\r\n              }\r\n               \r\n\r\n            }else  if(model.stage == 'MAT OUT'){\r\n              for(let item of model.tag_list){\r\n\r\n                let temp = await request.query(\"SELECT * FROM MATERIAL WHERE MAT_ID = '\"+item.item+\"'\");\r\n                console.log(temp)\r\n                  let com_id = temp.recordset[0].COM_ID;\r\n\r\n                    console.log(\"now\", new Date().getFullYear(),new Date().getMonth()+1,new Date().getDate())\r\n                let current_date = moment().toDate();\r\n\r\n                current_date = moment(current_date).format('YYYY-MM-DD HH:mm:ss.000');\r\n                console.log(current_date);\r\n                  await request.query(`INSERT INTO STOCK_CARD (\r\n                     COM_ID\r\n                    ,WH_ID\r\n                    ,DOC_ID\r\n                    ,DATE_STOCK\r\n                    ,RAW_ID\r\n                    ,ITM_ID\r\n                    ,QTY\r\n                    ,TOTAL_QTY\r\n                    ,TYPE\r\n                    ,STATUS\r\n                    ,CREATE_USER\r\n                    ,CREATE_DATE) VALUES (\r\n                      '`+ com_id +`',\r\n                      NULL,\r\n                      NULL,\r\n                      '`+current_date+`',\r\n                       NULL,\r\n                      '`+ item.item +`',\r\n                      `+  Number(item.amount.toString().replace(/,/g, \"\")) +`,\r\n                      `+  Number(item.amount.toString().replace(/,/g, \"\")) +`,\r\n                      'OUT',\r\n                      'เบิกสินค้า',\r\n                      \r\n                      'JSV.admin',\r\n                      '`+current_date+`'\r\n                    )`);\r\n\r\n                console.log(temp);\r\n              }\r\n               \r\n\r\n            }\r\n           \r\n\r\n\r\n        \r\n            \r\n         \r\n            resolve(true);\r\n            //resolve(Data_list);\r\n          });\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n  \r\n}\r\nfunction two(v){\r\n  let test = v.toString();\r\n  if(v.length == 1){\r\n    return \"0\"+v;\r\n  }\r\n}\r\nmodule.exports = WinSpeed;\r\n\n\n//# sourceURL=webpack:///./app/service/winSpeedService.js?");

/***/ }),

/***/ "./app/service/wipshupOutInCTSService.js":
/*!***********************************************!*\
  !*** ./app/service/wipshupOutInCTSService.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _QueryWipshupOutInCTS = __webpack_require__(/*! ../query/queryWipshupOutInCTS.json */ \"./app/query/queryWipshupOutInCTS.json\");\r\nconst _QueryHandheld = __webpack_require__(/*! ../query/queryHandheld.json */ \"./app/query/queryHandheld.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\nclass wipshupOutInCTSService {\r\n  async filterWipshup(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWipshupOutInCTS.filterWipshup, [\r\n              model.oem_id,\r\n              model.product_no || null,\r\n              model.product_name || null,\r\n            ]);\r\n            var data_product = [];\r\n            /* var possed = []; */\r\n            let lot_in_stock_list = [];\r\n            /* let lot_in_stock_list2 = []; */\r\n\r\n            for (let item of temp.rows) {\r\n              /* console.log('1item',item); */\r\n              /*    let lot_in_stock  =  await client.query(_QueryWipshupOutInCTS.getLotInStockKg, [item.product_id]);\r\n                   let lot_in_stock2 =  await client.query(_QueryWipshupOutInCTS.getLotInStockPiece, [item.product_id]); */\r\n\r\n              let lot_in_stock = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStock21,\r\n                [item.product_id]\r\n              );\r\n\r\n              let lot_in_stock2 = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStock24,\r\n                [item.product_id]\r\n              );\r\n\r\n              lot_in_stock_list = lot_in_stock.rows;\r\n\r\n              for (let lotpiece of lot_in_stock2.rows) {\r\n                lot_in_stock_list.push(lotpiece);\r\n              }\r\n\r\n              /*  if(item.amount > 0 ){\r\n                    tempDate.push(temp) ;\r\n                  } */\r\n              /* for(let check of lot_in_stock_list){\r\n\r\n\r\n                  } */\r\n              let final = [];\r\n              for (let i of lot_in_stock_list) {\r\n                /*  console.log(\"log\",i); */\r\n\r\n                let lot_detail = await client.query(\r\n                  _QueryWipshupOutInCTS.getlotdetailByTag,\r\n                  [i.tracking_tag_wip_chup]\r\n                );\r\n                /*        let lot_detail =  await client.query(_QueryWipshupOutInCTS.getlotdetail, [item.product_id,i.po_no ]); */\r\n                for (let x of lot_detail.rows) {\r\n                  var list = {\r\n                    lot_no:x.lot_no,\r\n                    estimate_date: x.estimate_date,\r\n                    name_com: x.name_com,\r\n                    sub_name_com: x.sub_name_com,\r\n                    telnumber: x.telnumber,\r\n                    create_date: i.create_date,\r\n                    po_no: i.po_no,\r\n                    picecs_amount: i.picecs_amount ? i.picecs_amount : null,\r\n                    weight_amount: i.weight_amount ? i.weight_amount : null,\r\n                  };\r\n                }\r\n\r\n                /*  console.log(\"picecs_amount\",i.picecs_amount); */\r\n                if (list.weight_amount > 0 || list.picecs_amount > 0) {\r\n                  final.push(list);\r\n                }\r\n              }\r\n            /*   console.log(\"list\", final); */\r\n\r\n              final.sort(function (a, b) {\r\n                return (\"\" + a.create_date).localeCompare(b.create_date);\r\n              });\r\n              item.log_detail = final;\r\n              /* item.log_detail = lot_in_stock_list; */\r\n              data_product.push(item);\r\n            }\r\n\r\n            resolve(data_product);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getMasterplating_plant(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryWipshupOutInCTS.getMasterplantShup,\r\n              [model.company_id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  async getMasterplating_plantByProductId(id, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              `SELECT  a.plating_plat_id, a.product_id,b.code,b.name,b.id\r\n              FROM plating_product a LEFT JOIN plating_plant b ON b.id = a.plating_plat_id \r\n              WHERE a.is_use = true AND a.is_active = true AND a.product_id = $1`,\r\n              [id]\r\n            );\r\n\r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n  \r\n\r\n  async getCoilNo(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            //    let date_start = moment(new Date()).startOf('day').format();\r\n            //     let date_end = moment(new Date()).endOf('day').format();\r\n\r\n            //  var temp =  await client.query(_QueryWipshupOutInCTS.getCoilNo, [\r\n            //   date_start,\r\n            //   date_end\r\n            //       /* model.company_id, */\r\n            //   ]);\r\n            var temp = await client.query(\r\n              _QueryWipshupOutInCTS.getProductionOrder,\r\n              [model.product_id]\r\n            );\r\n\r\n            /* var tempData = [];\r\n                for(let item of temp.rows){\r\n                  var temp = await client.query(_QueryWipshupOutInCTS.checklotnoByID,[\r\n                    item.lot_no\r\n                ]);\r\n                if(temp.rows.length === 0){\r\n                  tempData.push(item);\r\n                }\r\n                } */\r\n            resolve(temp.rows);\r\n            /* resolve(tempData) */\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getProductByID(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(\r\n              _QueryWipshupOutInCTS.getProductByID,\r\n              [product_id]\r\n            );\r\n            resolve(temp.rows[0]);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getLotInStock(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let lot_in_stock = await client.query(\r\n              _QueryWipshupOutInCTS.getLotInStock21,\r\n              [product_id]\r\n            );\r\n\r\n            let lot_in_stock2 = await client.query(\r\n              _QueryWipshupOutInCTS.getLotInStock24,\r\n              [product_id]\r\n            );\r\n            console.log(\"lot_in_stock\", lot_in_stock.rows);\r\n            console.log(\"lot_in_stock2\", lot_in_stock2.rows);\r\n            for (let item2 of lot_in_stock2.rows) {\r\n              lot_in_stock.rows.push(item2);\r\n            }\r\n\r\n            var tempDate = [];\r\n            for (let item of lot_in_stock.rows) {\r\n              var LotDetail = await client.query(\r\n                _QueryWipshupOutInCTS.GetLotWipChupDetail,\r\n                [product_id, item.tracking_tag_wip_chup]\r\n              );\r\n\r\n              let temp = {\r\n                product_lot_no: LotDetail.rows[0].lot_no,\r\n                product_amount: item.amount,\r\n                unit:\r\n                  LotDetail.rows[0].picecs_amount != null ? \"ชิ้น\" : \"กิโลกรัม\",\r\n                amountWgiht: item.weight_amount,\r\n                amountPrice: item.picecs_amount,\r\n                loss_amount: LotDetail.rows[0].loss_amount,\r\n                plating_plant_id: LotDetail.rows[0].plating_plant_id,\r\n                plating_plant_name: LotDetail.rows[0].plating_plant_name,\r\n                create_date: LotDetail.rows[0].create_date,\r\n                qc_date: LotDetail.rows[0].qc_date,\r\n                qc_by: LotDetail.rows[0].qc_approve,\r\n                tracking_tag_wip_chup: item.tracking_tag_wip_chup,\r\n                create_date: LotDetail.rows[0].create_date,\r\n                sub_plating_name: LotDetail.rows[0].sub_plating_name,\r\n                telnumber: LotDetail.rows[0].telnumber,\r\n                estimate_date: LotDetail.rows[0].estimate_date,\r\n                po_no: LotDetail.rows[0].po_no,\r\n                nw: LotDetail.rows[0].nw,\r\n              };\r\n\r\n              if (item.weight_amount > 0) {\r\n                tempDate.push(temp);\r\n              }\r\n              if (item.picecs_amount > 0) {\r\n                tempDate.push(temp);\r\n              }\r\n            }\r\n\r\n            resolve(tempDate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async saveInOut(model, user_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            await client.query(\"BEGIN\");\r\n            let estimate_date = moment(new Date()).add(7, \"day\").format();\r\n            var year = (\r\n              parseInt(moment(new Date()).format(\"YYYY\")) + 543\r\n            ).toString();\r\n            var tagc = \"C\" + year[2] + year[3] + \"-\";\r\n            var checkLastTagc = await client.query(\r\n              _QueryWipshupOutInCTS.getLastTag,\r\n              [tagc]\r\n            );\r\n            var tagc =\r\n              \"C\" +\r\n              year[2] +\r\n              year[3] +\r\n              \"-\" +\r\n              pad_fnc(checkLastTagc.rows.length + 1);\r\n\r\n            /* var checkTagc = await client.query(_QueryWipshupOutInCTS.checkTagc,[model.order_po_number]);\r\n                if(checkTagc.rows.length > 0){\r\n                  throw Error('เลขที่ PO ซ้ำในระบบ')\r\n                } */\r\n            let weight_unit = null;\r\n            let picecs_unit = null;\r\n            let w2 = null;\r\n            let price = null;\r\n\r\n            if (model.unit === \"weight\") {\r\n              weight_unit = parseFloat(model.out_amount);\r\n              w2 = parseFloat(model.product_amount);\r\n            } else if (model.unit === \"picecs\") {\r\n              picecs_unit = parseFloat(model.out_amount);\r\n              price = parseInt(model.product_amount);\r\n              // weight_unit =  parseFloat(model.out_amount).toFixed(2) * parseFloat(model.nw);\r\n              //w2 =  parseFloat(model.product_amount) * parseFloat(model.nw);\r\n            } else {\r\n              weight_unit = null;\r\n              picecs_unit = null;\r\n            }\r\n            if (model.product_edit_type === true) {\r\n              console.log(\"อ้นชิ้น\", model);\r\n              let id_wipShup_inOut = uuidv4();\r\n              await client.query(_QueryWipshupOutInCTS.addLogWipShupAmount, [\r\n                id_wipShup_inOut,\r\n                null,\r\n                null,\r\n                model.product_edit_type,\r\n                tagc,\r\n                model.plating_plant_id,\r\n                w2,\r\n                price,\r\n                model.loss_amount || null,\r\n                model.product_id,\r\n                null,\r\n                true,\r\n                new Date(),\r\n                user_id,\r\n                new Date(),\r\n                user_id,\r\n                null,\r\n                model.lotno,\r\n                null,\r\n                estimate_date,\r\n                null,\r\n                model.order_po_number,\r\n                model.prod_lot_id /* lot ใบสั่งผลิต */,\r\n              ]);\r\n            } else if (model.product_edit_type === false) {\r\n              console.log(\"amount\", parseFloat(model.out_amount));\r\n              for (let item2 of model.lot_no_list) {\r\n                var LotDetail = await client.query(\r\n                  _QueryWipshupOutInCTS.GetLotShupProdDetail,\r\n                  [model.product_id, item2.tracking_tag_wip_chup]\r\n                );\r\n                /* if (item2.unit == \"กิโลกรัม\") {\r\n                  if (\r\n                    parseFloat(LotDetail.rows[0].weight_amount) -\r\n                      parseFloat(model.out_amount) <\r\n                    0\r\n                  ) {\r\n                    throw Error(\"รับชุบเกินจำนวนที่มีในระบบ!!!\");\r\n                  }\r\n                } else {\r\n                  if (\r\n                    parseFloat(LotDetail.rows[0].picecs_amount) -\r\n                      parseFloat(model.out_amount) <\r\n                    0\r\n                  ) {\r\n                    throw Error(\"รับชุบเกินจำนวนที่มีในระบบ!!!\");\r\n                  }\r\n                } */\r\n\r\n                let id_wipShup_Out = uuidv4();\r\n                await client.query(_QueryWipshupOutInCTS.addLogWipShupAmount, [\r\n                  id_wipShup_Out,\r\n                  null,\r\n                  null,\r\n                  model.product_edit_type,\r\n                  LotDetail.rows[0].tracking_tag_wip_chup,\r\n                  LotDetail.rows[0].plating_plant_id,\r\n                  item2.unit === \"กิโลกรัม\" ? parseFloat(weight_unit) : null,\r\n                  item2.unit === \"ชิ้น\" ? parseInt(model.out_amount) : null,\r\n                  model.loss_amount ? parseFloat(model.loss_amount) : null,\r\n                  model.product_id,\r\n                  null,\r\n                  true,\r\n                  new Date(),\r\n                  user_id,\r\n                  new Date(),\r\n                  user_id,\r\n                  LotDetail.rows[0].qc_approve,\r\n                  LotDetail.rows[0].lot_no,\r\n                  LotDetail.rows[0].qc_date,\r\n                  LotDetail.rows[0].estimate_date,\r\n                  new Date(),\r\n                  LotDetail.rows[0].po_no,\r\n                  LotDetail.rows[0].production_order_cts_id,\r\n                ]);\r\n                let idpack_out_chup = id_wipShup_Out;\r\n\r\n                // ----------------- Auto Pack IN ---------------------\r\n\r\n                 let pack_no = moment(new Date()).add(543, 'year').format('LLLL');\r\n                    pack_no = \"PACK\"+moment(new Date(pack_no)).format('YYMMDD');\r\n                  var check_box = await client.query(_QueryWipshupOutInCTS.checkPackNoToGen,[pack_no]);\r\n                  var count = 1;\r\n                    if(check_box.rows.length > 0){\r\n                      count = check_box.rows.length +1;\r\n                    }\r\n                    pack_no = pack_no + pad_fncGen(count);\r\n\r\n                  var year = (parseInt(moment(new Date).format('YYYY'))+543).toString();\r\n                  var tag = \"P\"+year[2]+year[3]+\"-\";\r\n                  var checkLastPackTag = await client.query(_QueryWipshupOutInCTS.getLastPackTag,[tag]);\r\n\r\n                  var tag = \"P\"+year[2]+year[3]+\"-\"+ pad_fnc(checkLastPackTag.rows.length+1);\r\n                  \r\n\r\n                  var LotDetail2 = await client.query(_QueryWipshupOutInCTS.GetChupOutByID, [idpack_out_chup]);\r\n             \r\n                  let id_pack_inOut = uuidv4();\r\n                  await client.query(_QueryWipshupOutInCTS.AutoinSavelogPack,[\r\n                    id_pack_inOut,\r\n                    true,\r\n                    null,\r\n                    true,\r\n                    new Date(),\r\n                    user_id,\r\n                    new Date(),\r\n                    user_id,\r\n                    id_wipShup_Out,\r\n                    LotDetail2.rows[0].tracking_tag_wip_chup,\r\n                    pack_no,\r\n                    model.product_id,\r\n                    tag,\r\n                    LotDetail2.rows[0].lot_no,\r\n                    null,\r\n                    weight_unit || null,\r\n                    picecs_unit || null,\r\n                    LotDetail2.rows[0].lot_no,\r\n\r\n                  ]);\r\n              }\r\n            }\r\n            await client.query(\"COMMIT\");\r\n            resolve(true);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            await client.query(\"ROLLBACK\");\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async qcApproved(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n\r\n          await client.connect();\r\n          try {\r\n            await client.query(_QueryWipshupOutInCTS.update_lot_qc_approved, [\r\n              model.product_id,\r\n              model.product_lot_no,\r\n              model.tracking_tag_wip_chup,\r\n              model.qc_approve_person,\r\n              moment(new Date()),\r\n              true,\r\n              model.amount_loss || null,\r\n            ]);\r\n\r\n            resolve(true);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async GetLotWipChupHistory(product_id) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var temp = await client.query(\r\n              _QueryWipshupOutInCTS.GetLotWipChupHistory,\r\n              [product_id]\r\n            );\r\n\r\n            var tempDate = [];\r\n            for (let item of temp.rows) {\r\n              let temp = {\r\n                product_lot_no: item.lot_no,\r\n                product_amount: item.picecs_amount\r\n                  ? item.picecs_amount\r\n                  : item.weight_amount,\r\n                unit: item.picecs_amount != null ? \"ชิ้น\" : \"กิโลกรัม\",\r\n                loss_amount: item.loss_amount,\r\n                plating_plant_id: item.plating_plant_id,\r\n                plating_plant_name: item.plating_plant_name,\r\n                create_date: item.create_date,\r\n                qc_date: item.qc_date,\r\n                qc_by: item.qc_approve,\r\n                tracking_tag_wip_chup: item.tracking_tag_wip_chup,\r\n                edit_type: item.edit_type,\r\n                create_date: item.create_date,\r\n                sub_plating_name: item.sub_plating_name,\r\n                telnumber: item.telnumber,\r\n                estimate_date: item.estimate_date,\r\n                po_no: item.po_no,\r\n              };\r\n              /* if(item.amount > 0 ){ */\r\n              tempDate.push(temp);\r\n            }\r\n\r\n            console.log(tempDate);\r\n            resolve(tempDate);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWipShupinreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWipshupOutInCTS.filterWipshup, [\r\n              model.oem_id,\r\n              model.product_no || null,\r\n              model.product_name || null,\r\n            ]);\r\n            var data_product = [];\r\n            /* var possed = []; */\r\n            let lot_in_stock_list = [];\r\n            let final = [];\r\n            for (let item of temp.rows) {\r\n              /* console.log('1item',item); */\r\n              let lot_in_stock = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStockKg,\r\n                [item.product_id]\r\n              );\r\n              let lot_in_stock2 = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStockPiece,\r\n                [item.product_id]\r\n              );\r\n\r\n              lot_in_stock_list = lot_in_stock.rows;\r\n\r\n              for (let lotpiece of lot_in_stock2.rows) {\r\n                lot_in_stock_list.push(lotpiece);\r\n              }\r\n\r\n              var cusList = await client.query(\r\n                _QueryWipshupOutInCTS.name_customShupreport,\r\n                [item.product_id]\r\n              );\r\n              /* console.log(cusList.rows) */\r\n              if (cusList.rows.length > 0) {\r\n                /*   console.log(cusList.rows,lot_in_stock_list) */\r\n                var cus_name = cusList.rows[0].name;\r\n              }\r\n              for (let i of lot_in_stock_list) {\r\n                var detailLot = await client.query(\r\n                  _QueryWipshupOutInCTS.GetLotWipShupDetail,\r\n                  [item.product_id, i.lot_no]\r\n                );\r\n\r\n                if (detailLot.rows.length > 0) {\r\n                  var order_no = detailLot.rows[0].order_no;\r\n                  var po_no = detailLot.rows[0].po_no;\r\n                  var tracking_tag_Shup =\r\n                    detailLot.rows[0].tracking_tag_wip_chup;\r\n                }\r\n                var sum = \"\";\r\n                if (i.picecs_amount > 0) {\r\n                  sum = i.picecs_amount;\r\n                } else if (i.weight_amount > 0) {\r\n                  sum = i.weight_amount;\r\n                }\r\n                var list = {\r\n                  order_no: order_no,\r\n                  amount: sum,\r\n                  coli_no: i.lot_no,\r\n                  po_no: po_no,\r\n                  tracking_tag_wip_prod: tracking_tag_Shup,\r\n                  mat_no: item.product_no,\r\n                  mat_name: item.product_name,\r\n                  cus_name: cus_name,\r\n                };\r\n\r\n                if (i.picecs_amount > 0) {\r\n                  final.push(list);\r\n                }\r\n                if (i.weight_amount > 0) {\r\n                  final.push(list);\r\n                }\r\n\r\n                /* console.log(\"picecs_amount\",i.picecs_amount); */\r\n              }\r\n            }\r\n\r\n            resolve(final);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWipShuploginreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let lot_in_stock_list = [];\r\n            let final = [];\r\n\r\n            /* console.log('1item',item); */\r\n            let lot_in_stock = await client.query(\r\n              _QueryWipshupOutInCTS.GetLotWipShupInStock,\r\n              [model.product_id, model.tracking]\r\n            );\r\n\r\n            lot_in_stock_list = lot_in_stock.rows;\r\n\r\n            var cusList = await client.query(\r\n              _QueryWipshupOutInCTS.name_customShupreport,\r\n              [model.product_id]\r\n            );\r\n            /* console.log(cusList.rows) */\r\n            if (cusList.rows.length > 0) {\r\n              /*   console.log(cusList.rows,lot_in_stock_list) */\r\n              var cus_name = cusList.rows[0].name;\r\n            }\r\n            for (let i of lot_in_stock_list) {\r\n              var detailLot = await client.query(\r\n                _QueryWipshupOutInCTS.GetLotWipShupDetail,\r\n                [model.product_id, i.lot_no]\r\n              );\r\n\r\n              if (detailLot.rows.length > 0) {\r\n                var order_no = detailLot.rows[0].order_no;\r\n                var po_no = detailLot.rows[0].po_no;\r\n                var tracking_tag_Shup = detailLot.rows[0].tracking_tag_wip_chup;\r\n              }\r\n              var sum = \"\";\r\n              if (i.picecs_amount > 0) {\r\n                sum = i.picecs_amount;\r\n              } else if (i.weight_amount > 0) {\r\n                sum = i.weight_amount;\r\n              }\r\n              var list = {\r\n                order_no: order_no,\r\n                amount: sum,\r\n                coli_no: i.lot_no,\r\n                po_no: po_no,\r\n                tracking_tag_wip_prod: tracking_tag_Shup,\r\n                mat_no: model.product_no,\r\n                mat_name: model.product_name,\r\n                cus_name: cus_name,\r\n              };\r\n\r\n              if (i.picecs_amount > 0) {\r\n                final.push(list);\r\n              }\r\n              if (i.weight_amount > 0) {\r\n                final.push(list);\r\n              }\r\n\r\n              /* console.log(\"picecs_amount\",i.picecs_amount); */\r\n            }\r\n\r\n            resolve(final);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async genOrderChup(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            var check_po_no_by_plate = await client.query(\r\n              _QueryWipshupOutInCTS.getProNoByPlate,\r\n              [\r\n                moment(new Date()).startOf(\"day\").format(),\r\n                moment(new Date()).endOf(\"day\").format(),\r\n                model.id_plating || null,\r\n              ]\r\n            );\r\n            if (check_po_no_by_plate.rows.length > 0) {\r\n              resolve(check_po_no_by_plate.rows[0].po_no);\r\n            } else {\r\n              let year = parseInt(moment(new Date()).format(\"YYYY\")) + 543;\r\n              let month = moment(new Date()).format(\"MMDD\");\r\n              let po_no = \"PO\" + year.toString().slice(2) + month;\r\n              console.log(\"po_no\", po_no);\r\n              var checkPoNo = await client.query(\r\n                _QueryWipshupOutInCTS.checkPoNo,\r\n                [po_no]\r\n              );\r\n              if (checkPoNo.rows.length > 0) {\r\n                console.log(\"le\", checkPoNo.rows);\r\n                let sort = checkPoNo.rows.sort((a, b) =>\r\n                  b.po_no.localeCompare(a.po_no)\r\n                );\r\n                console.log(\"sort\", sort);\r\n                let count = pad_fncGen(parseInt(sort[0].po_no.slice(9)) + 1);\r\n                po_no = po_no + count;\r\n              } else {\r\n                po_no = po_no + \"01\";\r\n              }\r\n              resolve(po_no);\r\n            }\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          console.log(e);\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  async getWipShupplatingbillingreport(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n            let temp = await client.query(_QueryWipshupOutInCTS.filterWipshup, [\r\n              model.oem_id,\r\n              model.product_no || null,\r\n              model.product_name || null,\r\n            ]);\r\n            let final = [];\r\n            let lot_in_stock_list = [];\r\n            /* let lot_in_stock_list2 = []; */\r\n            var date1 = moment(model.date).startOf(\"day\").format();\r\n            var date2 = moment(model.date).endOf(\"day\").format();\r\n            for (let item of temp.rows) {\r\n              /* console.log('1item',item); */\r\n              let lot_in_stock = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStockKg,\r\n                [item.product_id]\r\n              );\r\n              let lot_in_stock2 = await client.query(\r\n                _QueryWipshupOutInCTS.getLotInStockPiece,\r\n                [item.product_id]\r\n              );\r\n\r\n              lot_in_stock_list = lot_in_stock.rows;\r\n\r\n              for (let lotpiece of lot_in_stock2.rows) {\r\n                lot_in_stock_list.push(lotpiece);\r\n              }\r\n\r\n              for (let index = 0; index < lot_in_stock_list.length; index++) {\r\n                var datelog = moment(\r\n                  lot_in_stock_list[index].create_date\r\n                ).format();\r\n                /*  console.log(\"log\",datelog,date1,date2); */\r\n                if (date1 < datelog && date2 > datelog) {\r\n                  let lot_detail = await client.query(\r\n                    _QueryWipshupOutInCTS.getlotdetail,\r\n                    [item.product_id, lot_in_stock_list[index].po_no]\r\n                  );\r\n                  for (let x of lot_detail.rows) {\r\n                    var list = {\r\n                      estimate_date: x.estimate_date,\r\n                      name_com: x.name_com,\r\n                      product_id: x.product_id,\r\n                      sub_name_com: x.sub_name_com,\r\n                      telnumber: x.telnumber,\r\n                      create_date: lot_in_stock_list[index].create_date,\r\n                      lot_no: lot_in_stock_list[index].lot_no,\r\n                      picecs_amount: lot_in_stock_list[index].picecs_amount\r\n                        ? lot_in_stock_list[index].picecs_amount\r\n                        : \"\",\r\n                      weight_amount: lot_in_stock_list[index].weight_amount\r\n                        ? lot_in_stock_list[index].weight_amount\r\n                        : \"\",\r\n                      product_no: item.product_no,\r\n                      product_name: item.product_name,\r\n                      pro_no: x.po_no,\r\n                      plated: item.surface,\r\n                      lot_no: x.lot_no,\r\n                      remark: \"\",\r\n                    };\r\n                  }\r\n\r\n                  let po_detail = await client.query(\r\n                    _QueryWipshupOutInCTS.production_cts_detil,\r\n                    [item.product_id]\r\n                  );\r\n\r\n                  for (let p of po_detail.rows) {\r\n                    /*  list.plated = p.plated   */\r\n                    list.remark = p.remark;\r\n                  }\r\n\r\n                  final.push(list);\r\n                }\r\n              }\r\n            }\r\n            final.sort(function (a, b) {\r\n              return a.pro_no.localeCompare(b.pro_no);\r\n            });\r\n\r\n            var hardtabel = [];\r\n            for (let f of final) {\r\n              var check = hardtabel.filter((e) => {\r\n                return e.sub_name_com === f.sub_name_com;\r\n              });\r\n              var tabel = [];\r\n              if (check.length > 0) {\r\n              } else {\r\n                var check2 = final.filter((e) => {\r\n                  return e.sub_name_com === f.sub_name_com;\r\n                });\r\n\r\n                var as = {\r\n                  sub_name_com: f.sub_name_com,\r\n                  name_com: f.name_com,\r\n                  view: check2,\r\n                  pro_no: f.pro_no,\r\n                };\r\n                hardtabel.push(as);\r\n              }\r\n            }\r\n\r\n            resolve(hardtabel);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction pad_fnc(d) {\r\n  if (d.toString().length == 5) {\r\n    return \"0\" + d.toString();\r\n  } else if (d.toString().length == 4) {\r\n    return \"00\" + d.toString();\r\n  } else if (d.toString().length == 3) {\r\n    return \"000\" + d.toString();\r\n  } else if (d.toString().length == 2) {\r\n    return \"0000\" + d.toString();\r\n  } else {\r\n    return \"00000\" + d.toString();\r\n  }\r\n}\r\n\r\nfunction pad_fncGen(d) {\r\n  if (d < 10) {\r\n    return \"0\" + d.toString();\r\n  } else {\r\n    return d.toString();\r\n  }\r\n}\r\n\r\nmodule.exports = wipshupOutInCTSService;\r\n\n\n//# sourceURL=webpack:///./app/service/wipshupOutInCTSService.js?");

/***/ }),

/***/ "./app/service/wire_ready_toUseService.js":
/*!************************************************!*\
  !*** ./app/service/wire_ready_toUseService.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var baseService = __webpack_require__(/*! ./baseService */ \"./app/service/baseService.js\");\r\nvar _baseService = new baseService();\r\nconst _config = __webpack_require__(/*! ../appSetting.js */ \"./app/appSetting.js\");\r\nconst { Client, Pool } = __webpack_require__(/*! pg */ \"pg\");\r\nconst connectionSetting = __webpack_require__(/*! ../dbconnect */ \"./app/dbconnect.js\");\r\nconst connectionPool = connectionSetting.connectionPool;\r\nconst connectionConfig = connectionSetting.config;\r\nconst _querywire_ready_toUse = __webpack_require__(/*! ../query/querywire_ready_toUse.json */ \"./app/query/querywire_ready_toUse.json\");\r\nvar moment = __webpack_require__(/*! moment */ \"moment\");\r\nvar { v4: uuidv4 } = __webpack_require__(/*! uuid */ \"uuid\");\r\nconst { mode } = __webpack_require__(/*! crypto-js */ \"crypto-js\");\r\nconst material_unit_id = _config.fixData.material_unit;\r\n\r\n\r\n\r\nclass wire_ready_toUseService{\r\n\r\n    \r\n  async filter(model) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        (async () => {\r\n          var client = new Client(connectionConfig);\r\n          await client.connect();\r\n          try {\r\n\r\n        \r\n            var temp = await client.query(_querywire_ready_toUse.filter, [\r\n                model.diameter_no || null,\r\n                model.diameter_name || null,\r\n                model.company_id,\r\n                model.oem_id,\r\n            \r\n            ]);\r\n            console.log(temp.rows); \r\n            resolve(temp.rows);\r\n          } catch (e) {\r\n            reject(e);\r\n          } finally {\r\n            await client.end();\r\n          }\r\n        })().catch((e) => {\r\n         /*  console.log(e); */\r\n          throw Error(e);\r\n        });\r\n      } catch (e) {\r\n        reject(e);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  \r\nasync addwire(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n       \r\n\r\n           var checkwire_add = await client.query(\r\n            _querywire_ready_toUse.chekUpdatereWire_add,\r\n            [\r\n              model.diameter_no,\r\n              model.diameter_name,\r\n              model.oem_id,\r\n            ]\r\n          );\r\n          if (checkwire_add.rows.length > 0) {\r\n            // console.log(\"cheakTimefdf\", checkwire);\r\n            throw Error(\"Diameter Name หรือ Diameter NO ที่ท่านกรอกมีอยู่ในระบบเเล้ว \");\r\n          }else{\r\n          let id_wire = uuidv4();\r\n          await client.query(_querywire_ready_toUse.addwires, [\r\n            id_wire,\r\n            model.diameter_name,\r\n            model.company_id,\r\n            user_id,\r\n            model.oem_id,\r\n            model.wire_amount,\r\n            model.wire_weight,\r\n            moment(new Date()),\r\n            model.diameter_no,\r\n            true,\r\n          ]);\r\n          }\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        /*  console.log(e); */\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\nasync Updatewire(model, user_id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n \r\n         \r\n          var checkwire = await client.query(\r\n            _querywire_ready_toUse.chekUpdatereWire,\r\n            [\r\n              model.id,\r\n              model.diameter_no,\r\n              model.diameter_name,\r\n              model.oem_id,\r\n            ]\r\n          );\r\n          if (checkwire.rows.length > 0) {\r\n            console.log(\"cheakTimefdf\", checkwire);\r\n            throw Error(\"Diameter Name หรือ Diameter NO ที่ท่านกรอกมีอยู่ในระบบเเล้ว \");\r\n          }\r\n          await client.query(_querywire_ready_toUse.UpdatereWire, [\r\n            model.id,\r\n            model.diameter_name,\r\n            user_id,\r\n            model.wire_amount,\r\n            model.wire_weight,\r\n            model.diameter_no,\r\n          ]);\r\n          console.log(\"เทสโมเดล\");\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        /*  console.log(e); */\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync findByIdwire(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n \r\n          let temp = await client.query(_querywire_ready_toUse.filbyIDWire, [id]);\r\n          if (temp.rows.length > 0) {\r\n            resolve(temp.rows[0]);\r\n          } else {\r\n            reject(\"not found\");\r\n          }\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\nasync delwire(id) {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      (async () => {\r\n        var client = new Client(connectionConfig);\r\n        await client.connect();\r\n        try {\r\n          await client.query(_querywire_ready_toUse.delwire, [id]);\r\n          resolve(true);\r\n        } catch (e) {\r\n          reject(e);\r\n        } finally {\r\n          await client.end();\r\n        }\r\n      })().catch((e) => {\r\n        console.log(e);\r\n        throw Error(e);\r\n      });\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nmodule.exports = wire_ready_toUseService;\n\n//# sourceURL=webpack:///./app/service/wire_ready_toUseService.js?");

/***/ }),

/***/ "./app/swagger.json":
/*!**************************!*\
  !*** ./app/swagger.json ***!
  \**************************/
/*! exports provided: swagger, info, host, basePath, tags, paths, schemes, consumes, produces, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"swagger\\\":\\\"2.0\\\",\\\"info\\\":{\\\"version\\\":\\\"1.0.0\\\",\\\"title\\\":\\\"PMRP Project \\\",\\\"description\\\":\\\"Application Programming Interface (API)\\\"},\\\"host\\\":\\\"localhost:3000\\\",\\\"basePath\\\":\\\"/\\\",\\\"tags\\\":[{\\\"name\\\":\\\"Users\\\",\\\"description\\\":\\\"API for users in the system\\\"},{\\\"name\\\":\\\"Login\\\",\\\"description\\\":\\\"API for Login in the system\\\"},{\\\"name\\\":\\\"Company\\\",\\\"description\\\":\\\"API for Company in the system\\\"},{\\\"name\\\":\\\"Material\\\",\\\"description\\\":\\\"API for Material in the system\\\"},{\\\"name\\\":\\\"Product\\\",\\\"description\\\":\\\"API for Product in the system\\\"},{\\\"name\\\":\\\"ProductPlaning\\\",\\\"description\\\":\\\"API for ProductPlaning in the system\\\"},{\\\"name\\\":\\\"MaterialPlaning\\\",\\\"description\\\":\\\"API for MaterialPlaning in the system\\\"},{\\\"name\\\":\\\"Upload\\\",\\\"description\\\":\\\"API for Upload in the system\\\"},{\\\"name\\\":\\\"Static\\\",\\\"description\\\":\\\"API for GET Static File in the system\\\"},{\\\"name\\\":\\\"Project\\\",\\\"description\\\":\\\"API for Project in the system\\\"}],\\\"paths\\\":{\\\"/product/del\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/static/{code}\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Static\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"path\\\",\\\"name\\\":\\\"code\\\",\\\"required\\\":true,\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"File\\\"}}}},\\\"/materialPlaning/FilterMaterialConsumption\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"MaterialPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"year\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":2020},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem_id\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"no\\\":\\\"c-mat0003\\\",\\\"name\\\":\\\"crop-55a\\\",\\\"material_type\\\":\\\"Type R2D2\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_unit\\\":\\\"Piece\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"material_spec\\\":\\\"S400\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size\\\":\\\"M\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"m1\\\":0,\\\"m2\\\":0,\\\"m3\\\":0,\\\"m4\\\":0,\\\"m5\\\":0,\\\"m6\\\":0,\\\"m7\\\":0,\\\"m8\\\":0,\\\"m9\\\":0,\\\"m10\\\":0,\\\"m11\\\":\\\"1000\\\",\\\"m12\\\":0,\\\"y\\\":\\\"1000\\\"},{\\\"no\\\":\\\"c-mat0002\\\",\\\"name\\\":\\\"crop-55b\\\",\\\"material_type\\\":\\\"Type R2D2\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_unit\\\":\\\"Piece\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"material_spec\\\":\\\"S400\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size\\\":\\\"M\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"m1\\\":0,\\\"m2\\\":0,\\\"m3\\\":0,\\\"m4\\\":0,\\\"m5\\\":0,\\\"m6\\\":0,\\\"m7\\\":0,\\\"m8\\\":0,\\\"m9\\\":0,\\\"m10\\\":0,\\\"m11\\\":\\\"385\\\",\\\"m12\\\":0,\\\"y\\\":\\\"385\\\"},{\\\"no\\\":\\\"c-mat0001\\\",\\\"name\\\":\\\"crop-55a\\\",\\\"material_type\\\":\\\"Type R2D2\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_unit\\\":\\\"Piece\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"material_spec\\\":\\\"S400\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size\\\":\\\"M\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"m1\\\":0,\\\"m2\\\":0,\\\"m3\\\":0,\\\"m4\\\":0,\\\"m5\\\":0,\\\"m6\\\":0,\\\"m7\\\":0,\\\"m8\\\":0,\\\"m9\\\":0,\\\"m10\\\":0,\\\"m11\\\":\\\"25\\\",\\\"m12\\\":0,\\\"y\\\":\\\"25\\\"},{\\\"no\\\":\\\"test\\\",\\\"name\\\":\\\"test\\\",\\\"material_type\\\":\\\"Type R2D2\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_unit\\\":\\\"Weight\\\",\\\"material_unit_id\\\":\\\"6fac9f35-9749-476d-a24a-4c33061e59b7\\\",\\\"material_spec\\\":\\\"S45CD\\\",\\\"material_spec_id\\\":\\\"fc523aaa-12e5-4aa9-a2b4-d2ef190f9a33\\\",\\\"material_size\\\":\\\"S\\\",\\\"material_size_id\\\":\\\"47d5e1e0-378c-4cb8-902b-9c53f7ca47e3\\\",\\\"m1\\\":0,\\\"m2\\\":0,\\\"m3\\\":0,\\\"m4\\\":0,\\\"m5\\\":0,\\\"m6\\\":0,\\\"m7\\\":0,\\\"m8\\\":0,\\\"m9\\\":0,\\\"m10\\\":0,\\\"m11\\\":0,\\\"m12\\\":0,\\\"y\\\":0}]}}}}},\\\"/product/amountInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"processType: 1 = RawMat,2 = WIP,3 = FG :::::: actionType InBound = true,OutBound=false\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-xxx\\\"},\\\"processType\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":1},\\\"actionType\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/product/findByNo\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"ecd200c5-4086-4c15-a42c-e86a4b855115\\\",\\\"no\\\":\\\"20Y6257860\\\",\\\"name\\\":\\\"PLUG\\\",\\\"product_model_id\\\":\\\"10ed502b-ad3d-45a6-a9a4-94ca0f635f75\\\",\\\"qty_unit\\\":1,\\\"user_id\\\":\\\"716997e6-cd3f-42de-b223-b4d25c26c882\\\",\\\"oem_id\\\":\\\"ad5431b1-4136-4695-a1c2-7fe02b137d68\\\",\\\"wip_amount\\\":0,\\\"fg_amount\\\":0,\\\"is_active\\\":true,\\\"is_use\\\":true,\\\"is_scan_qr\\\":null,\\\"create_date\\\":null,\\\"update_date\\\":null,\\\"cut_amount\\\":0,\\\"min_product\\\":null}}}}}},\\\"/product/update_product/desktop\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-xxx\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/product/insert_log_product_edit_amount/desktop\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"product_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":500},\\\"user_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/product/filter_allItem\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":{\\\"id\\\":\\\"1751b6ad-6747-47bd-b220-917158658634\\\",\\\"no\\\":\\\"TC40224482\\\",\\\"name\\\":\\\"BOLT SHIFT\\\",\\\"product_model_id\\\":\\\"d2607ab7-5637-46e6-9919-e0b400f083da\\\",\\\"qty_unit\\\":1,\\\"user_id\\\":\\\"0fc9e975-8bfa-43ff-9f6f-c31120c9c957\\\",\\\"oem_id\\\":\\\"e9549a12-9b0d-4b10-b2ef-ac3607c42ab4\\\",\\\"wip_amount\\\":0,\\\"fg_amount\\\":0,\\\"min_product\\\":2000,\\\"end_user_amount\\\":\\\"29\\\",\\\"logistic_amount\\\":\\\"24\\\",\\\"image\\\":\\\"{\\\\\\\"orgin_name\\\\\\\":\\\\\\\"5.png\\\\\\\",\\\\\\\"name\\\\\\\":\\\\\\\"f9f100f9-22de-4e2e-b83c-5b6144fd9fc8_5.png\\\\\\\",\\\\\\\"path\\\\\\\":\\\\\\\"Li91cGxvYWRzL1RDNDAyLTI0NDgtMi9mOWYxMDBmOS0yMmRlLTRlMmUtYjgzYy01YjYxNDRmZDlmYzhfNS5wbmc=\\\\\\\",\\\\\\\"mimetype\\\\\\\":\\\\\\\"image/png\\\\\\\",\\\\\\\"size\\\\\\\":109842}\\\",\\\"description\\\":null,\\\"sell_price\\\":null,\\\"circle_time\\\":null,\\\"sku_user\\\":null,\\\"product_route_id\\\":\\\"3e824714-5b14-4671-9ea3-18aca8a70797\\\",\\\"product_size_id\\\":\\\"8328f913-0a5c-4eea-8e24-fed7242b088d\\\",\\\"product_color_id\\\":\\\"0a5348c3-35c9-445d-819b-3df5c4382902\\\",\\\"image_name\\\":\\\"5.png\\\",\\\"imaget_path\\\":\\\"Li91cGxvYWRzL1RDNDAyLTI0NDgtMi9mOWYxMDBmOS0yMmRlLTRlMmUtYjgzYy01YjYxNDRmZDlmYzhfNS5wbmc=\\\",\\\"product_material_id\\\":null,\\\"cut_amount\\\":178,\\\"is_assy\\\":null,\\\"product_plants_item\\\":null}}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/product/summaryReport\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"example\\\":{\\\"product_id\\\":\\\"29c5c02c-a9a5-400e-b698-a72fc0945189\\\",\\\"no\\\":\\\"6C60639431\\\",\\\"name\\\":\\\"JOINT,STR  PIPE\\\",\\\"edit_type\\\":false,\\\"amount\\\":50,\\\"project_name\\\":\\\"test_name4444\\\",\\\"create_date\\\":\\\"2021-08-15T22:31:54.971Z\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/product/importExcel_Bomlist\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-xxx\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"model\\\":\\\"pc-067\\\",\\\"status\\\":false,\\\"error\\\":\\\"already Product no\\\"},{\\\"model\\\":\\\"pc-062\\\",\\\"status\\\":true}]}}}}},\\\"/product/importExcel_Bomlist_Assy\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-xxx\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"model\\\":\\\"pc-067\\\",\\\"status\\\":false,\\\"error\\\":\\\"already Product no\\\"},{\\\"model\\\":\\\"pc-062\\\",\\\"status\\\":true}]}}}}},\\\"/product/amountEnd_userInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"processType: 1 = RawMat,2 = WIP,3 = FG :::::: actionType InBound = true,OutBound=false\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"1751b6ad-6747-47bd-b220-917158658634\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":\\\"true\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/product/amountLogisticInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"processType: 1 = RawMat,2 = WIP,3 = FG :::::: actionType InBound = true,OutBound=false\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"1751b6ad-6747-47bd-b220-917158658634\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":\\\"true\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/product/getlog_detailFG\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"89276ce8-605b-4253-8b35-3aceabebcb5f\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"amount\\\":\\\"34\\\",\\\"create_date\\\":\\\"2021-12-28T01:09:32.735Z\\\",\\\"fg_lot_no\\\":\\\"2222w\\\"}}}}}},\\\"/product/cuttingInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"1751b6ad-6747-47bd-b220-917158658634\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":\\\"true\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/company/findUserById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"name\\\":\\\"name user01 update\\\",\\\"sirname\\\":\\\"sirname user01\\\",\\\"username\\\":\\\"user01\\\",\\\"email\\\":\\\"email user01\\\",\\\"password\\\":\\\"p@ssw0rd\\\",\\\"mobile1\\\":\\\"mobile1 user01\\\",\\\"mobile2\\\":\\\"mobile2 user01\\\",\\\"detail\\\":\\\"detail user01 update\\\",\\\"is_active\\\":true,\\\"user_profile\\\":\\\"user_profile 01 update\\\",\\\"is_use\\\":true,\\\"user_profile_name\\\":\\\"user_profile_name 02\\\",\\\"user_profile_path\\\":\\\"user_profile_path 03\\\",\\\"document\\\":[{\\\"id\\\":\\\"a47503fb-6c32-4c64-92ba-dd1196c08f60\\\",\\\"user_id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"document\\\":\\\"document 1 com1\\\",\\\"create_date\\\":\\\"2020-10-25T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"document_name\\\":\\\"document_name 1 com1\\\",\\\"document_path\\\":\\\"document_path 1 com1\\\"}]}}}}}},\\\"/productPlaning/productMonitoring/\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"},\\\"year\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":2020}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"no\\\":\\\"pc-067\\\",\\\"name\\\":\\\"part-xa067\\\",\\\"product_model\\\":\\\"B2440S\\\",\\\"qty_unit\\\":324,\\\"product_route\\\":\\\"route01\\\",\\\"min_stk\\\":1,\\\"max_stk\\\":2,\\\"delivery\\\":null,\\\"q1\\\":0,\\\"q2\\\":0,\\\"q3\\\":0,\\\"q4\\\":0,\\\"status\\\":true,\\\"rank_a\\\":90,\\\"rank_b\\\":80,\\\"rank_c\\\":70,\\\"rank_d\\\":60,\\\"LQA\\\":0,\\\"LYA\\\":0,\\\"Q1\\\":0,\\\"Q2\\\":0,\\\"Q3\\\":0,\\\"Q4\\\":0},{\\\"no\\\":\\\"pc-068\\\",\\\"name\\\":\\\"part-xa068\\\",\\\"product_model\\\":\\\"B2440S\\\",\\\"qty_unit\\\":324,\\\"product_route\\\":\\\"route01\\\",\\\"min_stk\\\":1,\\\"max_stk\\\":2,\\\"delivery\\\":null,\\\"q1\\\":0,\\\"q2\\\":0,\\\"q3\\\":0,\\\"q4\\\":0,\\\"status\\\":true,\\\"rank_a\\\":90,\\\"rank_b\\\":80,\\\"rank_c\\\":70,\\\"rank_d\\\":60,\\\"LQA\\\":0,\\\"LYA\\\":0,\\\"Q1\\\":0,\\\"Q2\\\":0,\\\"Q3\\\":0,\\\"Q4\\\":0}]}}}}},\\\"/productPlaning/importReadOrderForcastByKTC\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"},\\\"year\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"2020\\\"},\\\"month\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"01\\\"},\\\"Excel\\\":{\\\"type\\\":\\\"xlsx\\\",\\\"example\\\":\\\"data.xlsx\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"62ae4bbe-3e35-4754-9c8c-29be98cee439\\\",\\\"no\\\":\\\"pc-067\\\",\\\"name\\\":\\\"part-xa067\\\",\\\"wip\\\":0,\\\"fg\\\":0,\\\"delivery\\\":0,\\\"amount_forcast\\\":0,\\\"in_hand\\\":0,\\\"pending\\\":0,\\\"status\\\":true,\\\"n1\\\":200,\\\"n2\\\":300,\\\"n3\\\":400,\\\"n4\\\":500},{\\\"id\\\":\\\"a13ff0fe-b445-4af0-8490-eb39f84aa998\\\",\\\"no\\\":\\\"pc-068\\\",\\\"name\\\":\\\"part-xa068\\\",\\\"wip\\\":0,\\\"fg\\\":0,\\\"delivery\\\":0,\\\"amount_forcast\\\":0,\\\"in_hand\\\":0,\\\"pending\\\":0,\\\"status\\\":true,\\\"n1\\\":200,\\\"n2\\\":300,\\\"n3\\\":400,\\\"n4\\\":500}]}}}}},\\\"/productPlaning/orderProduction/filter\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"order_no\\\":\\\"\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"b3984b31-25fd-46a9-bbfc-788adcde72eb\\\",\\\"order_no\\\":\\\"OP20220119-1\\\",\\\"is_use\\\":true,\\\"is_active\\\":true,\\\"create_by\\\":\\\"716997e6-cd3f-42de-b223-b4d25c26c882\\\",\\\"create_date\\\":\\\"2022-01-19T06:13:25.342Z\\\",\\\"cancle_by\\\":null,\\\"list_product\\\":[{\\\"id\\\":\\\"3d9ec11b-a824-4df2-86fe-f1f6c40563d3\\\",\\\"no\\\":\\\"601251023\\\",\\\"name\\\":\\\"JOINT, PIPE\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":1099,\\\"delivery_date\\\":\\\"11/11/1111\\\",\\\"rm\\\":null,\\\"cut\\\":null,\\\"rrr\\\":\\\"t\\\",\\\"length\\\":\\\"t\\\",\\\"spec\\\":null,\\\"use_pcs\\\":0,\\\"weitght\\\":\\\"t\\\",\\\"qty_cut\\\":null},{\\\"id\\\":\\\"3f1eccf2-3de9-408b-9383-9932cf54b0f8\\\",\\\"no\\\":\\\"TC68214262\\\",\\\"name\\\":\\\"PLUG (DRAIN) G1/2\\\\\\\"\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":240,\\\"delivery_date\\\":\\\"11/05/1999\\\",\\\"rm\\\":\\\"H-22 G 1/2\\\\\\\"\\\",\\\"cut\\\":\\\"0\\\",\\\"rrr\\\":\\\"5\\\",\\\"length\\\":\\\"5\\\",\\\"spec\\\":\\\"SS400\\\",\\\"use_pcs\\\":0,\\\"weitght\\\":\\\"5\\\",\\\"qty_cut\\\":null,\\\"dd_start\\\":\\\"11/02/1999\\\",\\\"dd_off_line\\\":\\\"19/99/1999\\\"},{\\\"id\\\":\\\"7c88bb98-f9ef-4a81-97d3-9277340a8433\\\",\\\"no\\\":\\\"5T07827121\\\",\\\"name\\\":\\\"JOINT,PIPE(L,G3/8)\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":200,\\\"rm\\\":\\\"T-22\\\",\\\"cut\\\":\\\"0\\\",\\\"spec\\\":\\\"SS400\\\",\\\"use_pcs\\\":0,\\\"qty_cut\\\":null},{\\\"id\\\":\\\"1751b6ad-6747-47bd-b220-917158658634\\\",\\\"no\\\":\\\"TC40224482\\\",\\\"name\\\":\\\"BOLT SHIFT\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":200,\\\"rm\\\":\\\"R-27\\\",\\\"cut\\\":\\\"219\\\",\\\"spec\\\":\\\"S45C\\\",\\\"use_pcs\\\":7.3,\\\"qty_cut\\\":200},{\\\"id\\\":\\\"0746d02d-aaa7-45ef-95b1-76fe2b07efa4\\\",\\\"no\\\":\\\"5T07827861\\\",\\\"name\\\":\\\"JOINT,PIPE(1,HST)\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":199,\\\"rm\\\":\\\"R-40\\\",\\\"cut\\\":\\\"59.2\\\",\\\"spec\\\":\\\"SS400\\\",\\\"use_pcs\\\":1.963466666666667,\\\"qty_cut\\\":199},{\\\"id\\\":\\\"285c244e-1bc1-43b3-9965-465cf579299d\\\",\\\"no\\\":\\\"6C62638731\\\",\\\"name\\\":\\\"PIN\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":150,\\\"rm\\\":\\\"R-20\\\",\\\"cut\\\":\\\"152\\\",\\\"spec\\\":\\\"SS400\\\",\\\"use_pcs\\\":3.8,\\\"qty_cut\\\":150},{\\\"id\\\":\\\"ebc79d04-ce00-4542-8263-23cabb1bc2ba\\\",\\\"no\\\":\\\"5T12421241\\\",\\\"name\\\":\\\"JOINT,PIPE(M22-14)\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":110,\\\"rm\\\":\\\"H-27\\\",\\\"cut\\\":\\\"50\\\",\\\"spec\\\":\\\"SS400\\\",\\\"use_pcs\\\":0.9166666666666666,\\\"qty_cut\\\":110},{\\\"id\\\":\\\"9ac08a2f-9d5b-45bb-8c36-52c22b058803\\\",\\\"no\\\":\\\"5T07281291\\\",\\\"name\\\":\\\"JOINT,PIPE,ASSY(UNLOADER)\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":100,\\\"rm\\\":\\\"E90 T17x25x28\\\",\\\"cut\\\":\\\"53.7\\\",\\\"spec\\\":\\\"S20C\\\",\\\"use_pcs\\\":0.895,\\\"qty_cut\\\":100},{\\\"id\\\":\\\"7ebac535-0b06-4ac3-a648-ea46937f45f9\\\",\\\"no\\\":\\\"TC40455321\\\",\\\"name\\\":\\\"BOSS (CRUISE CONTROL)\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":60,\\\"rm\\\":\\\"H-17\\\",\\\"cut\\\":\\\"144\\\",\\\"spec\\\":\\\"S45C\\\",\\\"use_pcs\\\":1.44,\\\"qty_cut\\\":60},{\\\"id\\\":\\\"4e617483-b7d2-4a81-ad0b-401b542dafdd\\\",\\\"no\\\":\\\"MR00120212\\\",\\\"name\\\":\\\"JOINT, PIPE\\\",\\\"year\\\":2022,\\\"month\\\":1,\\\"order\\\":50,\\\"rm\\\":\\\"H-19\\\",\\\"cut\\\":\\\"38\\\",\\\"spec\\\":\\\"S20C\\\",\\\"use_pcs\\\":0.31666666666666665,\\\"qty_cut\\\":50}],\\\"list_header\\\":{\\\"pbn_no\\\":\\\"t\\\",\\\"cus_route\\\":\\\"t\\\",\\\"po_no\\\":\\\"t\\\",\\\"date_off_line\\\":\\\"t\\\",\\\"date_loading\\\":\\\"t\\\",\\\"osl\\\":\\\"t\\\"}}]}}}}},\\\"/productPlaning/orderProduction/cancle\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/productPlaning/orderProduction/add\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"3a73cfb8-7c13-4803-a0bc-46c6d76db94b\\\"},\\\"user_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"716997e6-cd3f-42de-b223-b4d25c26c882\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"item\\\":\\\"1\\\",\\\"Product No\\\":\\\"601251023\\\",\\\"Product Name\\\":\\\"JOIN,PIPE\\\",\\\"WIP\\\":\\\"0\\\",\\\"FG\\\":\\\"1\\\",\\\"In Hand\\\":\\\"1\\\",\\\"N1\\\":\\\"1100\\\",\\\"N2\\\":\\\"1400\\\",\\\"N3\\\":\\\"1100\\\"}]}}}}},\\\"/materialPlaning/updateMaterialForcast\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"MaterialPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"200\\\"},\\\"product_amount\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"600\\\"},\\\"product_forcast_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"3fd9dd02-10df-4739-bc67-023d777b66a5\\\"},\\\"product_material_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"8bfd6ac3-911a-453d-bec2-f5c41f406303\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/materialPlaning/FilterOrderForcast\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"MaterialPlaning\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"mat-03\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"00003A\\\"},\\\"year\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"2020\\\"},\\\"month\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"01\\\"},\\\"material_type_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"},\\\"material_spec_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"},\\\"material_size_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"},\\\"material_supplier_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"year_month\\\":202012,\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"no\\\":\\\"c-mat0003\\\",\\\"name\\\":\\\"crop-55a\\\",\\\"material_type\\\":\\\"Type R2D2\\\",\\\"material_unit\\\":\\\"Piece\\\",\\\"material_spec\\\":\\\"S400\\\",\\\"material_size\\\":\\\"M\\\",\\\"buy_price\\\":500,\\\"in_hand_amount\\\":640,\\\"product_amount\\\":200,\\\"product_forcast_id\\\":\\\"3fd9dd02-10df-4739-bc67-023d777b66a5\\\",\\\"product_material_id\\\":\\\"8bfd6ac3-911a-453d-bec2-f5c41f406303\\\"}]}}}}},\\\"/productPlaning/updateRealOrder\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-076\\\"},\\\"year\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"2020\\\"},\\\"month\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"01\\\"},\\\"order\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/productPlaning/FilterOrderForcast\\\":{\\\"post\\\":{\\\"description\\\":\\\"\\\",\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"},\\\"year\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"2020\\\"},\\\"month\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"01\\\"},\\\"suggestion\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":2}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"00026888-53ce-424d-bfb2-89aea51b26ff\\\",\\\"no\\\":\\\"pc-076\\\",\\\"name\\\":\\\"part-xa076\\\",\\\"wip\\\":390,\\\"fg\\\":250,\\\"delivery\\\":\\\"250\\\",\\\"amount_forcast\\\":0,\\\"in_hand\\\":640,\\\"pending\\\":0,\\\"n1\\\":200,\\\"n2\\\":300,\\\"n3\\\":400,\\\"n4\\\":500,\\\"suggestion\\\":0}]}}}}},\\\"/productPlaning/importReadOrderForcast\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"ProductPlaning\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"},\\\"year\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"2020\\\"},\\\"month\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"01\\\"},\\\"save\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":false}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"62ae4bbe-3e35-4754-9c8c-29be98cee439\\\",\\\"no\\\":\\\"pc-067\\\",\\\"name\\\":\\\"part-xa067\\\",\\\"wip\\\":0,\\\"fg\\\":0,\\\"delivery\\\":0,\\\"amount_forcast\\\":0,\\\"in_hand\\\":0,\\\"pending\\\":0,\\\"status\\\":true,\\\"n1\\\":200,\\\"n2\\\":300,\\\"n3\\\":400,\\\"n4\\\":500},{\\\"id\\\":\\\"a13ff0fe-b445-4af0-8490-eb39f84aa998\\\",\\\"no\\\":\\\"pc-068\\\",\\\"name\\\":\\\"part-xa068\\\",\\\"wip\\\":0,\\\"fg\\\":0,\\\"delivery\\\":0,\\\"amount_forcast\\\":0,\\\"in_hand\\\":0,\\\"pending\\\":0,\\\"status\\\":true,\\\"n1\\\":200,\\\"n2\\\":300,\\\"n3\\\":400,\\\"n4\\\":500}]}}}}},\\\"/company/getCapacityFactory\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"100\\\"}}}}},\\\"/product/amountFGInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"00026888-53ce-424d-bfb2-89aea51b26ff\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/product/amountWIPInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"00026888-53ce-424d-bfb2-89aea51b26ff\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/amountInOut\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"53cd4c30-05ea-4591-aae8-720cc623a9ca\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/findByNo\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"06ac64d4-7d34-405c-84f2-549c20cffffb\\\",\\\"no\\\":\\\"121050000\\\",\\\"name\\\":\\\"R-50\\\",\\\"amount\\\":null,\\\"material_size_id\\\":\\\"62bfbcb7-36b8-4179-961f-184d5211806b\\\"}}}}}},\\\"/material/update_material/desktop\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"no\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"pc-xxx\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/material/insert_log_material_edit_amount/desktop\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"material_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":500},\\\"user_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"},\\\"edit_type\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"amount\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":500}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/material/gethistory\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"material_id = id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"1899c8de-7486-43e0-9f84-ddb5b80ccbb1\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"amount\\\":\\\"1777776\\\",\\\"create_date\\\":\\\"2021-12-14T01:09:50.888Z\\\",\\\"mat_lot_no\\\":\\\"MAT20211214\\\"}}}}}},\\\"/product/importExcel\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"model\\\":\\\"pc-067\\\",\\\"status\\\":false,\\\"error\\\":\\\"already Product no\\\"},{\\\"model\\\":\\\"pc-062\\\",\\\"status\\\":true}]}}}}},\\\"/product/filter\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"no\\\":\\\"\\\",\\\"name\\\":\\\"part\\\",\\\"product_model_id\\\":\\\"bd053048-4d6e-0fcc-b170-a3f7464234c8\\\",\\\"oem_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c8\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"604733df-3629-42eb-9ea2-3f55022f1bb4\\\",\\\"no\\\":\\\"pc-001 update\\\",\\\"name\\\":\\\"part-xa001\\\",\\\"product_model_id\\\":\\\"6e571ae6-44f8-4478-abe5-5e3cb5f082fd\\\",\\\"qty_unit\\\":456,\\\"user_id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"wip_amount\\\":null,\\\"fg_amount\\\":null,\\\"image\\\":\\\"image pc01\\\",\\\"description\\\":\\\"description pc01 update\\\",\\\"sell_price\\\":1450,\\\"circle_time\\\":4,\\\"sku_user\\\":\\\"sku_1234\\\",\\\"product_route_id\\\":\\\"1db8e180-119b-47e4-bc90-18316dafa2f1\\\",\\\"product_size_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c2\\\",\\\"product_color_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c8\\\",\\\"image_name\\\":\\\"image_name pc01\\\",\\\"imaget_path\\\":\\\"image_path pc01\\\",\\\"sku_system\\\":\\\"sku_system 001\\\",\\\"product_material_id\\\":\\\"8bfd6ac3-911a-453d-bec2-f5c41f406303\\\",\\\"material_id\\\":\\\"53cd4c30-05ea-4591-aae8-720cc623a9ca\\\",\\\"wt_mtr\\\":346,\\\"c_leng\\\":7,\\\"cos_pc\\\":43}]}}}}},\\\"/product/findById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"604733df-3629-42eb-9ea2-3f55022f1bb4\\\",\\\"no\\\":\\\"pc-001 update\\\",\\\"name\\\":\\\"part-xa001\\\",\\\"product_model_id\\\":\\\"6e571ae6-44f8-4478-abe5-5e3cb5f082fd\\\",\\\"qty_unit\\\":456,\\\"user_id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"wip_amount\\\":null,\\\"fg_amount\\\":null,\\\"image\\\":\\\"image pc01\\\",\\\"description\\\":\\\"description pc01 update\\\",\\\"sell_price\\\":1450,\\\"circle_time\\\":4,\\\"sku_user\\\":\\\"sku_1234\\\",\\\"product_route_id\\\":\\\"1db8e180-119b-47e4-bc90-18316dafa2f1\\\",\\\"product_size_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c2\\\",\\\"product_color_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c8\\\",\\\"image_name\\\":\\\"image_name pc01\\\",\\\"imaget_path\\\":\\\"image_path pc01\\\",\\\"sku_system\\\":\\\"sku_system 001\\\",\\\"product_material_id\\\":\\\"8bfd6ac3-911a-453d-bec2-f5c41f406303\\\",\\\"material_id\\\":\\\"53cd4c30-05ea-4591-aae8-720cc623a9ca\\\",\\\"wt_mtr\\\":346,\\\"c_leng\\\":7,\\\"cos_pc\\\":43}}}}}},\\\"/product/update\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"604733df-3629-42eb-9ea2-3f55022f1bb4\\\",\\\"no\\\":\\\"pc-001 update\\\",\\\"name\\\":\\\"part-xa001\\\",\\\"product_model_id\\\":\\\"6e571ae6-44f8-4478-abe5-5e3cb5f082fd\\\",\\\"qty_unit\\\":\\\"456\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"image\\\":\\\"image pc01\\\",\\\"description\\\":\\\"description pc01 update\\\",\\\"sell_price\\\":\\\"1450\\\",\\\"circle_time\\\":\\\"4\\\",\\\"sku_user\\\":\\\"sku_1234\\\",\\\"product_route_id\\\":\\\"1db8e180-119b-47e4-bc90-18316dafa2f1\\\",\\\"product_size_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c2\\\",\\\"product_color_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c8\\\",\\\"image_name\\\":\\\"image_name pc01\\\",\\\"image_path\\\":\\\"image_path pc01\\\",\\\"sku_system\\\":\\\"sku_system 001\\\",\\\"material_id\\\":\\\"53cd4c30-05ea-4591-aae8-720cc623a9ca\\\",\\\"wt_mtr\\\":\\\"346\\\",\\\"c_leng\\\":\\\"7\\\",\\\"cos_pc\\\":\\\"43\\\",\\\"product_material_id\\\":\\\"8bfd6ac3-911a-453d-bec2-f5c41f406303\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/product/add\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"no\\\":\\\"pc-001\\\",\\\"name\\\":\\\"part-xa001\\\",\\\"product_model_id\\\":\\\"6e571ae6-44f8-4478-abe5-5e3cb5f082fd\\\",\\\"qty_unit\\\":\\\"456\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"image\\\":\\\"image pc01\\\",\\\"description\\\":\\\"description pc01\\\",\\\"sell_price\\\":\\\"1450\\\",\\\"circle_time\\\":\\\"4\\\",\\\"sku_user\\\":\\\"sku_1234\\\",\\\"product_route_id\\\":\\\"1db8e180-119b-47e4-bc90-18316dafa2f1\\\",\\\"product_size_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c2\\\",\\\"product_color_id\\\":\\\"bd053048-0fcc-4d6e-b170-a3f7464234c8\\\",\\\"image_name\\\":\\\"image_name pc01\\\",\\\"image_path\\\":\\\"image_path pc01\\\",\\\"sku_system\\\":\\\"sku_system 001\\\",\\\"material_id\\\":\\\"53cd4c30-05ea-4591-aae8-720cc623a9ca\\\",\\\"wt_mtr\\\":\\\"346\\\",\\\"c_leng\\\":\\\"4\\\",\\\"cos_pc\\\":\\\"43\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/findOEMByCompanyId\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a3\\\",\\\"name\\\":\\\"oem 1 com 1 up1\\\",\\\"logo\\\":\\\"logo oem 1\\\",\\\"logo_name\\\":\\\"logo_name oem 1\\\",\\\"logo_path\\\":\\\"logo_path oem 1\\\"},{\\\"id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"name\\\":\\\"oem 1 com 1 up2\\\",\\\"logo\\\":\\\"logo oem 2\\\",\\\"logo_name\\\":\\\"logo_name oem 2\\\",\\\"logo_path\\\":\\\"logo_path oem 2\\\"}]}}}}},\\\"/product/getProductColor\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1ab488-613d-4bf6-9ca4-2d3bc7453ec3\\\",\\\"name\\\":\\\"red\\\"},{\\\"id\\\":\\\"aa8d1f1b-qca9-4234-8afa-1df0ea8cc206\\\",\\\"name\\\":\\\"blue\\\"}]}}}}},\\\"/product/getProductSize\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3bc7453ec3\\\",\\\"name\\\":\\\"SX\\\"},{\\\"id\\\":\\\"aa8d1f1b-qca9-4264-8afa-1df0ea8cc206\\\",\\\"name\\\":\\\"M\\\"}]}}}}},\\\"/product/getProductRoute\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7453ec3\\\",\\\"name\\\":\\\"Route 1\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc206\\\",\\\"name\\\":\\\"Route 2\\\"}]}}}}},\\\"/product/getProductModel\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"id = oem_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7454ec3\\\",\\\"name\\\":\\\"F35JJKK\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc806\\\",\\\"name\\\":\\\"F34JKK\\\"}]}}}}},\\\"/product\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Product\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/getMaterialSupplier\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"id = company_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7454ec3\\\",\\\"name\\\":\\\"T.T\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc806\\\",\\\"name\\\":\\\"T0T\\\"}]}}}}},\\\"/material/getMaterialSize\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"id = company_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7454ec3\\\",\\\"name\\\":\\\"M\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc806\\\",\\\"name\\\":\\\"5L\\\"}]}}}}},\\\"/material/getMaterialSpec\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"id = company_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7454ec3\\\",\\\"name\\\":\\\"Spec 5A\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc806\\\",\\\"name\\\":\\\"Spec 4C\\\"}]}}}}},\\\"/material/getMaterialType\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"id = company_id\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"bc1a7488-613d-4bf6-9ca4-2d3cc7454ec3\\\",\\\"name\\\":\\\"type 5A\\\"},{\\\"id\\\":\\\"aa8d1f1b-0ca9-4264-8afa-1df0ea8cc806\\\",\\\"name\\\":\\\"type 4C\\\"}]}}}}},\\\"/material/importExcel\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem id\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"file\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"model\\\":\\\"c-Mat0001\\\",\\\"status\\\":false,\\\"error\\\":\\\"already material no\\\"},{\\\"model\\\":\\\"c-Mat0006\\\",\\\"status\\\":true}]}}}}},\\\"/material/filter\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"no\\\":\\\"\\\",\\\"name\\\":\\\"\\\",\\\"material_type_id\\\":\\\"\\\",\\\"material_spec_id\\\":\\\"\\\",\\\"material_size_id\\\":\\\"\\\",\\\"material_supplier_id\\\":\\\"42d69f3a-1e3a-4e4f-9ede-ba79ab16df57\\\",\\\"oem_id\\\":\\\"\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"array\\\",\\\"example\\\":[{\\\"id\\\":\\\"cc0eb114-83f9-4832-bc97-ad8b9a49ba0c\\\",\\\"no\\\":\\\"c-mat0002\\\",\\\"name\\\":\\\"crop-55b\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"buy_price\\\":500,\\\"material_supplier_id\\\":\\\"42d69f3a-1e3a-4e4f-9ede-ba79ab16df57\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"amount\\\":5000,\\\"description\\\":\\\"description 001 xjq\\\",\\\"remark\\\":\\\"mask mask mask\\\",\\\"image\\\":\\\"image01\\\",\\\"user_id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"is_active\\\":true,\\\"is_use\\\":true,\\\"is_scan_qr\\\":false,\\\"create_date\\\":\\\"2020-10-29T01:42:50.378Z\\\",\\\"update_date\\\":\\\"2020-10-29T01:42:50.379Z\\\",\\\"image_name\\\":\\\"image_name 01\\\",\\\"imaget_path\\\":\\\"imaget_path 01\\\"}]}}}}},\\\"/material/checkName\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"mat-001\\\"},\\\"oem_id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"oem_id\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true}}}}},\\\"/material/findById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"838f2325-4e2c-4e1e-b493-3dd2826ffaf2\\\",\\\"no\\\":\\\"c-Mat0005\\\",\\\"name\\\":\\\"crop-55a1111111\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"buy_price\\\":500,\\\"material_supplier_id\\\":\\\"42d69f3a-1e3a-4e4f-9ede-ba79ab16df57\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"amount\\\":5000,\\\"description\\\":\\\"description 001 xjq\\\",\\\"remark\\\":\\\"mask mask mask\\\",\\\"image\\\":\\\"image01\\\",\\\"user_id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"is_active\\\":true,\\\"is_use\\\":true,\\\"is_scan_qr\\\":false,\\\"create_date\\\":\\\"2020-10-27T03:57:01.230Z\\\",\\\"update_date\\\":\\\"2020-10-27T04:01:19.107Z\\\",\\\"image_name\\\":\\\"image_name 01\\\",\\\"imaget_path\\\":\\\"imaget_path 01\\\"}}}}}},\\\"/material/del\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/update\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"838f2325-4e2c-4e1e-b493-3dd2826ffaf2\\\",\\\"no\\\":\\\"c-mat0001\\\",\\\"name\\\":\\\"crop-55a1111111\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"buy_price\\\":\\\"500\\\",\\\"material_supplier_id\\\":\\\"42d69f3a-1e3a-4e4f-9ede-ba79ab16df57\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"amount\\\":\\\"5000\\\",\\\"description\\\":\\\"description 001 xjq\\\",\\\"remark\\\":\\\"mask mask mask\\\",\\\"image\\\":\\\"image01\\\",\\\"image_name\\\":\\\"image_name 01\\\",\\\"imaget_path\\\":\\\"imaget_path 01\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"is_active\\\":true}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/add\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"no\\\":\\\"c-mat0001\\\",\\\"name\\\":\\\"crop-55a\\\",\\\"material_type_id\\\":\\\"55aef18c-fa56-41f8-8373-a973b3b78a40\\\",\\\"material_spec_id\\\":\\\"1d45d208-ac0c-4916-a321-13f3317c651b\\\",\\\"material_size_id\\\":\\\"3f207bfd-6d76-451a-9ae3-089b6e856aa7\\\",\\\"buy_price\\\":\\\"500\\\",\\\"material_supplier_id\\\":\\\"42d69f3a-1e3a-4e4f-9ede-ba79ab16df57\\\",\\\"material_unit_id\\\":\\\"505a84a4-6c71-4fbf-9dbd-8c63644221f5\\\",\\\"amount\\\":\\\"5000\\\",\\\"description\\\":\\\"description 001 xjq\\\",\\\"remark\\\":\\\"mask mask mask\\\",\\\"image\\\":\\\"image01\\\",\\\"image_name\\\":\\\"image_name 01\\\",\\\"imaget_path\\\":\\\"imaget_path 01\\\",\\\"oem_id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"is_active\\\":true}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/material/\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Material\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/delUser\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require id of user\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/del\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require id of company\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/checkNameCompany\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require name of company\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"message\\\":true}}}}}},\\\"/company/checkUserName\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require name of UserName\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"message\\\":true}}}}}},\\\"/company/checkEmail\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require name of email\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"name\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"message\\\":true}}}}}},\\\"/company/getAllUser\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"company_name\\\":\\\"test company 01 up1\\\",\\\"name\\\":\\\"name user01 update\\\",\\\"sirname\\\":\\\"sirname user01\\\",\\\"username\\\":\\\"user01\\\",\\\"email\\\":\\\"email user01\\\",\\\"mobile1\\\":\\\"mobile1 user01\\\",\\\"mobile2\\\":\\\"mobile2 user01\\\",\\\"is_active\\\":true}]}}}}},\\\"/company/updateUser\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"2140bc1b-8fbf-4775-b1e0-a28e1f5cbdfc\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"name\\\":\\\"name user01 update\\\",\\\"sirname\\\":\\\"sirname user01\\\",\\\"username\\\":\\\"user01\\\",\\\"email\\\":\\\"email user01\\\",\\\"password\\\":\\\"1234\\\",\\\"mobile1\\\":\\\"mobile1 user01\\\",\\\"mobile2\\\":\\\"mobile2 user01\\\",\\\"detail\\\":\\\"detail user01 update\\\",\\\"is_active\\\":true,\\\"user_profile\\\":\\\"user_profile 01 update\\\",\\\"user_profile_name\\\":\\\"user_profile_name 02\\\",\\\"user_profile_path\\\":\\\"user_profile_path 03\\\",\\\"document\\\":[]}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/addUser\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"name\\\":\\\"name user01\\\",\\\"sirname\\\":\\\"sirname user01\\\",\\\"username\\\":\\\"user01\\\",\\\"email\\\":\\\"email user01\\\",\\\"password\\\":\\\"1234\\\",\\\"mobile1\\\":\\\"mobile1 user01\\\",\\\"mobile2\\\":\\\"mobile2 user01\\\",\\\"detail\\\":\\\"detail user01\\\",\\\"is_active\\\":true,\\\"user_profile\\\":\\\"user_profile 01\\\",\\\"user_profile_name\\\":\\\"user_profile_name 02\\\",\\\"user_profile_path\\\":\\\"user_profile_path 03\\\",\\\"document\\\":[{\\\"document\\\":\\\"document 1 com1\\\",\\\"document_name\\\":\\\"document_name 1 com1\\\",\\\"document_path\\\":\\\"document_path 1 com1\\\"}]}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/getMasterCompany\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"company_name\\\":\\\"test company 01 up1\\\"}]}}}}},\\\"/company/findById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require id of company\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"admin_id\\\":\\\"ededb7b7-692a-4a39-84bd-4bf09502ab2c\\\",\\\"company_name\\\":\\\"test company 01 up1\\\",\\\"company_detail\\\":\\\"test company detail 01\\\",\\\"apply_date\\\":\\\"2020-10-21T17:00:00.000Z\\\",\\\"start_date\\\":\\\"2020-10-21T17:00:00.000Z\\\",\\\"expire_date\\\":\\\"2020-12-21T17:00:00.000Z\\\",\\\"is_factory_active\\\":true,\\\"logo\\\":\\\"logo 1\\\",\\\"fg_min\\\":1,\\\"fg_max\\\":2,\\\"raw_min\\\":3,\\\"raw_max\\\":4,\\\"rank_a\\\":90,\\\"rank_b\\\":80,\\\"rank_c\\\":70,\\\"rank_d\\\":60,\\\"factory_capacity\\\":100,\\\"create_date\\\":\\\"2020-10-24T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"logo_path\\\":\\\"logo path 1\\\",\\\"logo_name\\\":\\\"logo name 1\\\",\\\"document\\\":[{\\\"id\\\":\\\"a5d309f3-31f8-4d3a-b708-eb4bd531bb38\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"document\\\":\\\"document 1 com1\\\",\\\"create_date\\\":\\\"2020-10-24T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"document_path\\\":\\\"document_path 1 com1\\\",\\\"document_name\\\":\\\"document_name 1 com1\\\"}],\\\"oem\\\":[{\\\"id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a3\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"admin_id\\\":\\\"ededb7b7-692a-4a39-84bd-4bf09502ab2c\\\",\\\"name\\\":\\\"oem 1 com 1 up1\\\",\\\"logo\\\":\\\"logo oem 1\\\",\\\"create_date\\\":\\\"2020-10-24T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"logo_name\\\":\\\"logo_name oem 1\\\",\\\"logo_path\\\":\\\"logo_path oem 1\\\",\\\"is_active\\\":true},{\\\"id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a1\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"admin_id\\\":\\\"ededb7b7-692a-4a39-84bd-4bf09502ab2c\\\",\\\"name\\\":\\\"oem 1 com 1 up2\\\",\\\"logo\\\":\\\"logo oem 2\\\",\\\"create_date\\\":\\\"2020-10-24T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"logo_name\\\":\\\"logo_name oem 2\\\",\\\"logo_path\\\":\\\"logo_path oem 2\\\",\\\"is_active\\\":true}]}}}}}},\\\"/company/findSetupById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"require id of company\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"admin_id\\\":\\\"ededb7b7-692a-4a39-84bd-4bf09502ab2c\\\",\\\"company_name\\\":\\\"test company 01 up1\\\",\\\"company_detail\\\":\\\"test company detail 01\\\",\\\"apply_date\\\":\\\"2020-10-21T17:00:00.000Z\\\",\\\"start_date\\\":\\\"2020-10-21T17:00:00.000Z\\\",\\\"expire_date\\\":\\\"2020-12-21T17:00:00.000Z\\\",\\\"is_factory_active\\\":true,\\\"logo\\\":\\\"logo 1\\\",\\\"fg_min\\\":1,\\\"fg_max\\\":2,\\\"raw_min\\\":3,\\\"raw_max\\\":4,\\\"rank_a\\\":90,\\\"rank_b\\\":80,\\\"rank_c\\\":70,\\\"rank_d\\\":60,\\\"factory_capacity\\\":100,\\\"create_date\\\":\\\"2020-10-24T17:00:00.000Z\\\",\\\"is_use\\\":true,\\\"logo_path\\\":\\\"logo path 1\\\",\\\"logo_name\\\":\\\"logo name 1\\\"}]}}}}},\\\"/company/setup\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"fg_min\\\":\\\"1\\\",\\\"fg_max\\\":\\\"2\\\",\\\"raw_min\\\":\\\"3\\\",\\\"raw_max\\\":\\\"4\\\",\\\"rank_a\\\":\\\"90\\\",\\\"rank_b\\\":\\\"80\\\",\\\"rank_c\\\":\\\"70\\\",\\\"rank_d\\\":\\\"60\\\",\\\"factory_capacity\\\":\\\"100\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/update\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"company_name\\\":\\\"test company 01 up1\\\",\\\"company_detail\\\":\\\"test company detail 01\\\",\\\"apply_date\\\":\\\"2020-10-22T7:00:00Z\\\",\\\"start_date\\\":\\\"2020-10-22T7:00:00Z\\\",\\\"expire_date\\\":\\\"2020-12-22T7:00:00Z\\\",\\\"is_factory_active\\\":true,\\\"logo_company\\\":\\\"logo 1\\\",\\\"logo_company_path\\\":\\\"logo path 1\\\",\\\"logo_company_name\\\":\\\"logo name 1\\\",\\\"document\\\":[{\\\"id\\\":\\\"a5d309f3-31f8-4d3a-b708-eb4bd531bb38\\\",\\\"is_use\\\":false,\\\"document\\\":\\\"document 1 com1\\\",\\\"document_name\\\":\\\"document_name 1 com1\\\",\\\"document_path\\\":\\\"document_path 1 com1\\\"}],\\\"oem\\\":[{\\\"id\\\":\\\"0c6437d3-2e60-436c-97de-aaf23ed766a3\\\",\\\"name\\\":\\\"oem 1 com 1 up1\\\",\\\"logo\\\":\\\"logo oem 1\\\",\\\"logo_path\\\":\\\"logo_path oem 1\\\",\\\"logo_name\\\":\\\"logo_name oem 1\\\",\\\"is_active\\\":true}]}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/add\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"company_name\\\":\\\"test company 01\\\",\\\"company_detail\\\":\\\"test company detail 01\\\",\\\"apply_date\\\":\\\"2020-10-22T7:00:00Z\\\",\\\"start_date\\\":\\\"2020-10-22T7:00:00Z\\\",\\\"expire_date\\\":\\\"2020-12-22T7:00:00Z\\\",\\\"is_factory_active\\\":true,\\\"logo_company\\\":\\\"logo 1\\\",\\\"logo_company_path\\\":\\\"logo path 1\\\",\\\"logo_company_name\\\":\\\"logo name 1\\\",\\\"document\\\":[{\\\"document\\\":\\\"document 1 com1\\\",\\\"document_name\\\":\\\"document_name 1 com1\\\",\\\"document_path\\\":\\\"document_path 1 com1\\\"}],\\\"oem\\\":[{\\\"name\\\":\\\"oem 1 com 1\\\",\\\"logo\\\":\\\"logo oem 1\\\",\\\"logo_path\\\":\\\"logo_path oem 1\\\",\\\"logo_name\\\":\\\"logo_name oem 1\\\",\\\"is_active\\\":true}]}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/company/filterUser\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"name\\\":\\\"name user01 update\\\",\\\"username\\\":\\\"user01\\\",\\\"email\\\":\\\"email user01\\\",\\\"password\\\":\\\"1234\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":[{\\\"id\\\":\\\"5b838de5-29d0-48bf-a9df-86918982af1c\\\",\\\"company_id\\\":\\\"1a947e52-07ad-44fb-baca-aa24741512c3\\\",\\\"company_name\\\":\\\"Shimizu Thailand\\\",\\\"name\\\":\\\"พี่เล็ก\\\",\\\"sirname\\\":\\\"shimizu\\\",\\\"username\\\":\\\"Shimizu_Komatsu\\\",\\\"email\\\":\\\"Shimizu_Komatsu@gmail.com\\\",\\\"mobile1\\\":\\\"+66 85-331-8567\\\",\\\"mobile2\\\":null,\\\"is_active\\\":true}]}}}}},\\\"/upload/document\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Upload\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"typeFile\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"company\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"Profile\\\",\\\"type\\\":\\\"array\\\",\\\"items\\\":{\\\"type\\\":\\\"string\\\",\\\"format\\\":\\\"binary\\\"},\\\"description\\\":\\\"files upload multi\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"status\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"message\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"File is uploaded\\\"},\\\"data\\\":{\\\"type\\\":\\\"object\\\"}}}}}}},\\\"/upload/profile\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Upload\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"typeFile\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"company\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"Profile\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"status\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"message\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"File is uploaded\\\"},\\\"data\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"orgin_name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"file_1.png\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"ca9abdf8-d3eb-41f2-8a84-a5c3a8cd83e1_file_1.jpg\\\"},\\\"path\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"Li91cGxvYWRzL2NvbXBhbnkvY2E5YWJkZjgtZDNlYi00MWY\\\"},\\\"mimetype\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"image/jpeg\\\"},\\\"size\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":285384}}}}}}}}},\\\"/upload/excel\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Upload\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"typeFile\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"Excel\\\"}}}},{\\\"in\\\":\\\"formData\\\",\\\"name\\\":\\\"excel\\\",\\\"type\\\":\\\"file\\\",\\\"description\\\":\\\"file upload\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"status\\\":{\\\"type\\\":\\\"boolean\\\",\\\"example\\\":true},\\\"message\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"File is uploaded\\\"},\\\"data\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"orgin_name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"file_1.xlsx\\\"},\\\"name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"ca9abdf8-d3eb-41f2-8a84-a5c3a8cd83e1_file_1.xlsx\\\"},\\\"path\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"Li91cGxvYWRzL2NvbXBhbnkvY2E5YWJkZjgtZDNlYi00MWY\\\"},\\\"mimetype\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"xls/xlsx\\\"},\\\"size\\\":{\\\"type\\\":\\\"integer\\\",\\\"example\\\":285384}}}}}}}}},\\\"/company/all\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"produces\\\":[\\\"application/json\\\"],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"name\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"company_example\\\"},\\\"oem\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{}},\\\"apply_date\\\":{\\\"type\\\":\\\"string\\\",\\\"format\\\":\\\"date-time\\\"},\\\"start_date\\\":{\\\"type\\\":\\\"string\\\",\\\"format\\\":\\\"date-time\\\"},\\\"expire_date\\\":{\\\"type\\\":\\\"string\\\",\\\"format\\\":\\\"date-time\\\"}}}}}}},\\\"/auth/login/admin\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Login\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"user\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"admin_example\\\"},\\\"password\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"password here!\\\",\\\"format\\\":\\\"password\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"message\\\":\\\"login sucess\\\",\\\"iat\\\":\\\"2020-10-26T10:07:32.503Z\\\",\\\"exp\\\":\\\"2020-11-02T10:07:32.505Z\\\",\\\"token\\\":\\\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\\\"}}}}}},\\\"/auth/login\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Login\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"user\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"user_example\\\"},\\\"password\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"password here!\\\",\\\"format\\\":\\\"password\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"message\\\":\\\"login sucess\\\",\\\"iat\\\":\\\"2020-10-26T10:07:32.503Z\\\",\\\"exp\\\":\\\"2020-11-02T10:07:32.505Z\\\",\\\"token\\\":\\\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.\\\"}}}}}},\\\"/company\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Company\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\"}}}},\\\"/project/add\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"project_name\\\":\\\"test_name4444\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"contact_name\\\":\\\"\\\",\\\"contact_tel\\\":\\\"\\\",\\\"contact_email\\\":\\\"\\\",\\\"detail\\\":\\\"detail user01 add\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/project/update\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"project_name\\\":\\\"test_name4444\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\",\\\"contact_name\\\":\\\"\\\",\\\"contact_tel\\\":\\\"\\\",\\\"contact_email\\\":\\\"\\\",\\\"detail\\\":\\\"detail user01 update\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/project/del\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"08160782-eaff-4368-9259-2b7165cb8d31\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\"}}}},\\\"/project/findById\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"properties\\\":{\\\"id\\\":{\\\"type\\\":\\\"string\\\",\\\"example\\\":\\\"08160782-eaff-4368-9259-2b7165cb8d31\\\"}}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"true\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"08160782-eaff-4368-9259-2b7165cb8d31\\\",\\\"project_name\\\":\\\"test project add345\\\",\\\"company_id\\\":\\\"1a947e52-07ad-44fb-baca-aa24741512c3\\\",\\\"contact_name\\\":\\\"4t345\\\",\\\"contect_tel\\\":\\\"4t345\\\",\\\"contact_email\\\":\\\"4t345\\\",\\\"detail\\\":\\\"444t345dfg\\\",\\\"is_use\\\":true}}}}}},\\\"/project/GetMenu\\\":{\\\"get\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"query\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"3d561f20-a54c-4d72-bcb0-2c90a7d27bf6\\\",\\\"project_name\\\":\\\"name_project_test\\\"}}}}}},\\\"/project/filter\\\":{\\\"post\\\":{\\\"tags\\\":[\\\"Project\\\"],\\\"description\\\":\\\"\\\",\\\"parameters\\\":[{\\\"in\\\":\\\"body\\\",\\\"name\\\":\\\"body\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"project_name\\\":\\\"test_name4444\\\",\\\"company_id\\\":\\\"4e997521-e0b4-4d21-a53c-a59281696c66\\\"}}}],\\\"responses\\\":{\\\"200\\\":{\\\"description\\\":\\\"OK\\\",\\\"schema\\\":{\\\"type\\\":\\\"object\\\",\\\"example\\\":{\\\"id\\\":\\\"08160782-eaff-4368-9259-2b7165cb8d31\\\",\\\"project_name\\\":\\\"test project add345\\\",\\\"company_id\\\":\\\"1a947e52-07ad-44fb-baca-aa24741512c3\\\",\\\"contact_name\\\":\\\"4t345\\\",\\\"contect_tel\\\":\\\"4t345\\\",\\\"contact_email\\\":\\\"4t345\\\",\\\"detail\\\":\\\"444t345dfg\\\",\\\"is_use\\\":true}}}}}}},\\\"schemes\\\":[\\\"http\\\"],\\\"consumes\\\":[\\\"application/json\\\"],\\\"produces\\\":[\\\"application/json\\\"]}\");\n\n//# sourceURL=webpack:///./app/swagger.json?");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"assert\");\n\n//# sourceURL=webpack:///external_%22assert%22?");

/***/ }),

/***/ "body-parser":
/*!******************************!*\
  !*** external "body-parser" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"body-parser\");\n\n//# sourceURL=webpack:///external_%22body-parser%22?");

/***/ }),

/***/ "console":
/*!**************************!*\
  !*** external "console" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"console\");\n\n//# sourceURL=webpack:///external_%22console%22?");

/***/ }),

/***/ "cookie-parser":
/*!********************************!*\
  !*** external "cookie-parser" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"cookie-parser\");\n\n//# sourceURL=webpack:///external_%22cookie-parser%22?");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"cors\");\n\n//# sourceURL=webpack:///external_%22cors%22?");

/***/ }),

/***/ "crypto-js":
/*!****************************!*\
  !*** external "crypto-js" ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"crypto-js\");\n\n//# sourceURL=webpack:///external_%22crypto-js%22?");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"debug\");\n\n//# sourceURL=webpack:///external_%22debug%22?");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"dotenv\");\n\n//# sourceURL=webpack:///external_%22dotenv%22?");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"express\");\n\n//# sourceURL=webpack:///external_%22express%22?");

/***/ }),

/***/ "express-basic-auth":
/*!*************************************!*\
  !*** external "express-basic-auth" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"express-basic-auth\");\n\n//# sourceURL=webpack:///external_%22express-basic-auth%22?");

/***/ }),

/***/ "express-fileupload":
/*!*************************************!*\
  !*** external "express-fileupload" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"express-fileupload\");\n\n//# sourceURL=webpack:///external_%22express-fileupload%22?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");\n\n//# sourceURL=webpack:///external_%22fs%22?");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"http\");\n\n//# sourceURL=webpack:///external_%22http%22?");

/***/ }),

/***/ "http-errors":
/*!******************************!*\
  !*** external "http-errors" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"http-errors\");\n\n//# sourceURL=webpack:///external_%22http-errors%22?");

/***/ }),

/***/ "jwt-simple":
/*!*****************************!*\
  !*** external "jwt-simple" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"jwt-simple\");\n\n//# sourceURL=webpack:///external_%22jwt-simple%22?");

/***/ }),

/***/ "mime":
/*!***********************!*\
  !*** external "mime" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"mime\");\n\n//# sourceURL=webpack:///external_%22mime%22?");

/***/ }),

/***/ "moment":
/*!*************************!*\
  !*** external "moment" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"moment\");\n\n//# sourceURL=webpack:///external_%22moment%22?");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"morgan\");\n\n//# sourceURL=webpack:///external_%22morgan%22?");

/***/ }),

/***/ "mssql":
/*!************************!*\
  !*** external "mssql" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"mssql\");\n\n//# sourceURL=webpack:///external_%22mssql%22?");

/***/ }),

/***/ "multiparty":
/*!*****************************!*\
  !*** external "multiparty" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"multiparty\");\n\n//# sourceURL=webpack:///external_%22multiparty%22?");

/***/ }),

/***/ "nodemailer":
/*!*****************************!*\
  !*** external "nodemailer" ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"nodemailer\");\n\n//# sourceURL=webpack:///external_%22nodemailer%22?");

/***/ }),

/***/ "passport":
/*!***************************!*\
  !*** external "passport" ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"passport\");\n\n//# sourceURL=webpack:///external_%22passport%22?");

/***/ }),

/***/ "passport-jwt":
/*!*******************************!*\
  !*** external "passport-jwt" ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"passport-jwt\");\n\n//# sourceURL=webpack:///external_%22passport-jwt%22?");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"path\");\n\n//# sourceURL=webpack:///external_%22path%22?");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"pg\");\n\n//# sourceURL=webpack:///external_%22pg%22?");

/***/ }),

/***/ "promise-ftp":
/*!******************************!*\
  !*** external "promise-ftp" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"promise-ftp\");\n\n//# sourceURL=webpack:///external_%22promise-ftp%22?");

/***/ }),

/***/ "rotating-file-stream":
/*!***************************************!*\
  !*** external "rotating-file-stream" ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"rotating-file-stream\");\n\n//# sourceURL=webpack:///external_%22rotating-file-stream%22?");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"swagger-ui-express\");\n\n//# sourceURL=webpack:///external_%22swagger-ui-express%22?");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"util\");\n\n//# sourceURL=webpack:///external_%22util%22?");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"uuid\");\n\n//# sourceURL=webpack:///external_%22uuid%22?");

/***/ }),

/***/ "webpack":
/*!**************************!*\
  !*** external "webpack" ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"webpack\");\n\n//# sourceURL=webpack:///external_%22webpack%22?");

/***/ }),

/***/ "xlsx":
/*!***********************!*\
  !*** external "xlsx" ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"xlsx\");\n\n//# sourceURL=webpack:///external_%22xlsx%22?");

/***/ })

/******/ });